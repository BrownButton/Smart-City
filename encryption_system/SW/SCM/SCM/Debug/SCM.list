
SCM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017678  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002eac  08017918  08017918  00027918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a7c4  0801a7c4  0002a7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a7cc  0801a7cc  0002a7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a7d0  0801a7d0  0002a7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  0801a7d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0006b3f8  24000098  0801a86c  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2406b490  0801a86c  0003b490  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 11 .debug_info   000662c7  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a8af  00000000  00000000  0009638d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000028f8  00000000  00000000  000a0c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000026f8  00000000  00000000  000a3538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004a620  00000000  00000000  000a5c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000434f4  00000000  00000000  000f0250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018ab68  00000000  00000000  00133744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002be2ac  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000b238  00000000  00000000  002be300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017900 	.word	0x08017900

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08017900 	.word	0x08017900

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000698:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <vApplicationGetIdleTaskMemory+0x30>)
 800069e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	240000b4 	.word	0x240000b4
 80006b8:	24000168 	.word	0x24000168

080006bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006bc:	b5b0      	push	{r4, r5, r7, lr}
 80006be:	b08e      	sub	sp, #56	; 0x38
 80006c0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_FREERTOS_Init+0x58>)
 80006c4:	f107 041c 	add.w	r4, r7, #28
 80006c8:	461d      	mov	r5, r3
 80006ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f008 fbb8 	bl	8008e52 <osThreadCreate>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <MX_FREERTOS_Init+0x5c>)
 80006e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(unit_side_data, Unit_Side_Data_Task, osPriorityHigh, 0, 1024);
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_FREERTOS_Init+0x60>)
 80006ea:	463c      	mov	r4, r7
 80006ec:	461d      	mov	r5, r3
 80006ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(unit_side_data), NULL);
 80006fa:	463b      	mov	r3, r7
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f008 fba7 	bl	8008e52 <osThreadCreate>
 8000704:	4603      	mov	r3, r0
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <MX_FREERTOS_Init+0x5c>)
 8000708:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 800070a:	bf00      	nop
 800070c:	3738      	adds	r7, #56	; 0x38
 800070e:	46bd      	mov	sp, r7
 8000710:	bdb0      	pop	{r4, r5, r7, pc}
 8000712:	bf00      	nop
 8000714:	08017934 	.word	0x08017934
 8000718:	24064664 	.word	0x24064664
 800071c:	08017950 	.word	0x08017950

08000720 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000728:	f007 fd78 	bl	800821c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f008 fbdc 	bl	8008eea <osDelay>
 8000732:	e7fb      	b.n	800072c <StartDefaultTask+0xc>

08000734 <Unit_Side_Data_Task>:
#include "lwip.h"
#include "netbuf.h"
#include "api.h"

void Unit_Side_Data_Task(void const * argument)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b087      	sub	sp, #28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

	const char* message = "Hello UDP message!\n\r";
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <Unit_Side_Data_Task+0x80>)
 800073e:	617b      	str	r3, [r7, #20]

	osDelay(1000);
 8000740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000744:	f008 fbd1 	bl	8008eea <osDelay>

	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 192, 168, 1, 50);
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <Unit_Side_Data_Task+0x84>)
 800074a:	60bb      	str	r3, [r7, #8]

	struct udp_pcb* my_udp = udp_new();
 800074c:	f013 fbc6 	bl	8013edc <udp_new>
 8000750:	4603      	mov	r3, r0
 8000752:	613b      	str	r3, [r7, #16]
	udp_connect(my_udp, &PC_IPADDR, 55151);
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	f24d 726f 	movw	r2, #55151	; 0xd76f
 800075c:	4619      	mov	r1, r3
 800075e:	6938      	ldr	r0, [r7, #16]
 8000760:	f013 fb4e 	bl	8013e00 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		osDelay(1000);
 8000768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076c:	f008 fbbd 	bl	8008eea <osDelay>
		/* !! PBUF_RAM is critical for correct operation !! */
		udp_buffer = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 8000770:	6978      	ldr	r0, [r7, #20]
 8000772:	f7ff fdb5 	bl	80002e0 <strlen>
 8000776:	4603      	mov	r3, r0
 8000778:	b29b      	uxth	r3, r3
 800077a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800077e:	4619      	mov	r1, r3
 8000780:	2036      	movs	r0, #54	; 0x36
 8000782:	f00c fe9f 	bl	800d4c4 <pbuf_alloc>
 8000786:	60f8      	str	r0, [r7, #12]

		if (udp_buffer != NULL) {
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d0ec      	beq.n	8000768 <Unit_Side_Data_Task+0x34>
			memcpy(udp_buffer->payload, message, strlen(message));
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	685c      	ldr	r4, [r3, #4]
 8000792:	6978      	ldr	r0, [r7, #20]
 8000794:	f7ff fda4 	bl	80002e0 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	6979      	ldr	r1, [r7, #20]
 800079e:	4620      	mov	r0, r4
 80007a0:	f016 f90b 	bl	80169ba <memcpy>
			udp_send(my_udp, udp_buffer);
 80007a4:	68f9      	ldr	r1, [r7, #12]
 80007a6:	6938      	ldr	r0, [r7, #16]
 80007a8:	f013 f8b8 	bl	801391c <udp_send>
			pbuf_free(udp_buffer);
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f00d f971 	bl	800da94 <pbuf_free>
	{
 80007b2:	e7d9      	b.n	8000768 <Unit_Side_Data_Task+0x34>
 80007b4:	0801796c 	.word	0x0801796c
 80007b8:	3201a8c0 	.word	0x3201a8c0

080007bc <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b50      	ldr	r3, [pc, #320]	; (8000914 <MX_GPIO_Init+0x158>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d8:	4a4e      	ldr	r2, [pc, #312]	; (8000914 <MX_GPIO_Init+0x158>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e2:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <MX_GPIO_Init+0x158>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e8:	f003 0304 	and.w	r3, r3, #4
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f0:	4b48      	ldr	r3, [pc, #288]	; (8000914 <MX_GPIO_Init+0x158>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	4a47      	ldr	r2, [pc, #284]	; (8000914 <MX_GPIO_Init+0x158>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000800:	4b44      	ldr	r3, [pc, #272]	; (8000914 <MX_GPIO_Init+0x158>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <MX_GPIO_Init+0x158>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	4a3f      	ldr	r2, [pc, #252]	; (8000914 <MX_GPIO_Init+0x158>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081e:	4b3d      	ldr	r3, [pc, #244]	; (8000914 <MX_GPIO_Init+0x158>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	4b39      	ldr	r3, [pc, #228]	; (8000914 <MX_GPIO_Init+0x158>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000832:	4a38      	ldr	r2, [pc, #224]	; (8000914 <MX_GPIO_Init+0x158>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083c:	4b35      	ldr	r3, [pc, #212]	; (8000914 <MX_GPIO_Init+0x158>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <MX_GPIO_Init+0x158>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000850:	4a30      	ldr	r2, [pc, #192]	; (8000914 <MX_GPIO_Init+0x158>)
 8000852:	f043 0308 	orr.w	r3, r3, #8
 8000856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <MX_GPIO_Init+0x158>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000860:	f003 0308 	and.w	r3, r3, #8
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000868:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <MX_GPIO_Init+0x158>)
 800086a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086e:	4a29      	ldr	r2, [pc, #164]	; (8000914 <MX_GPIO_Init+0x158>)
 8000870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_GPIO_Init+0x158>)
 800087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800088c:	4822      	ldr	r0, [pc, #136]	; (8000918 <MX_GPIO_Init+0x15c>)
 800088e:	f003 f915 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	4821      	ldr	r0, [pc, #132]	; (800091c <MX_GPIO_Init+0x160>)
 8000898:	f003 f910 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	481b      	ldr	r0, [pc, #108]	; (8000920 <MX_GPIO_Init+0x164>)
 80008b4:	f002 ff52 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_GPIO_Init+0x15c>)
 80008d2:	f002 ff43 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d6:	2340      	movs	r3, #64	; 0x40
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_GPIO_Init+0x160>)
 80008ee:	f002 ff35 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_GPIO_Init+0x160>)
 8000906:	f002 ff29 	bl	800375c <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3730      	adds	r7, #48	; 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	58024400 	.word	0x58024400
 8000918:	58020400 	.word	0x58020400
 800091c:	58021800 	.word	0x58021800
 8000920:	58020800 	.word	0x58020800

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800092a:	f000 f8cf 	bl	8000acc <MPU_Config>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <main+0xac>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000936:	2b00      	cmp	r3, #0
 8000938:	d138      	bne.n	80009ac <main+0x88>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <main+0xac>)
 800093c:	2200      	movs	r2, #0
 800093e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000942:	f3bf 8f4f 	dsb	sy
}
 8000946:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <main+0xac>)
 800094a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800094e:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	0b5b      	lsrs	r3, r3, #13
 8000954:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000958:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	08db      	lsrs	r3, r3, #3
 800095e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000962:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	015a      	lsls	r2, r3, #5
 8000968:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800096c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000972:	4917      	ldr	r1, [pc, #92]	; (80009d0 <main+0xac>)
 8000974:	4313      	orrs	r3, r2
 8000976:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	1e5a      	subs	r2, r3, #1
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1ef      	bne.n	8000964 <main+0x40>
    } while(sets-- != 0U);
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1e5a      	subs	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1e5      	bne.n	800095a <main+0x36>
  __ASM volatile ("dsb 0xF":::"memory");
 800098e:	f3bf 8f4f 	dsb	sy
}
 8000992:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <main+0xac>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <main+0xac>)
 800099a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800099e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009a0:	f3bf 8f4f 	dsb	sy
}
 80009a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a6:	f3bf 8f6f 	isb	sy
}
 80009aa:	e000      	b.n	80009ae <main+0x8a>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009ac:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ae:	f000 fe2d 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f80f 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f7ff ff01 	bl	80007bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009ba:	f000 fb3f 	bl	800103c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009be:	f000 fbef 	bl	80011a0 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 80009c2:	f000 f8d7 	bl	8000b74 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80009c6:	f7ff fe79 	bl	80006bc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009ca:	f008 fa2b 	bl	8008e24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <main+0xaa>
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09c      	sub	sp, #112	; 0x70
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	224c      	movs	r2, #76	; 0x4c
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f015 fff7 	bl	80169d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2220      	movs	r2, #32
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f015 fff1 	bl	80169d6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f003 f9c3 	bl	8003d80 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <SystemClock_Config+0xf0>)
 8000a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a02:	4a30      	ldr	r2, [pc, #192]	; (8000ac4 <SystemClock_Config+0xf0>)
 8000a04:	f023 0301 	bic.w	r3, r3, #1
 8000a08:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <SystemClock_Config+0xf0>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <SystemClock_Config+0xf4>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a2b      	ldr	r2, [pc, #172]	; (8000ac8 <SystemClock_Config+0xf4>)
 8000a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <SystemClock_Config+0xf4>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a2c:	bf00      	nop
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <SystemClock_Config+0xf4>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a3a:	d1f8      	bne.n	8000a2e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2321      	movs	r3, #33	; 0x21
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a46:	2301      	movs	r3, #1
 8000a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000a56:	2330      	movs	r3, #48	; 0x30
 8000a58:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000a5e:	2306      	movs	r3, #6
 8000a60:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a66:	230c      	movs	r3, #12
 8000a68:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 f9cc 	bl	8003e14 <HAL_RCC_OscConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a82:	f000 f871 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	233f      	movs	r3, #63	; 0x3f
 8000a88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a96:	2340      	movs	r3, #64	; 0x40
 8000a98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a9a:	2340      	movs	r3, #64	; 0x40
 8000a9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aa4:	2340      	movs	r3, #64	; 0x40
 8000aa6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 fddd 	bl	800466c <HAL_RCC_ClockConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000ab8:	f000 f856 	bl	8000b68 <Error_Handler>
  }
}
 8000abc:	bf00      	nop
 8000abe:	3770      	adds	r7, #112	; 0x70
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	58000400 	.word	0x58000400
 8000ac8:	58024800 	.word	0x58024800

08000acc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ade:	f000 ff15 	bl	800190c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MPU_Config+0x74>)
 8000aec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000aee:	230e      	movs	r3, #14
 8000af0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000afa:	2303      	movs	r3, #3
 8000afc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 ff33 	bl	800197c <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b22:	2301      	movs	r3, #1
 8000b24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 ff25 	bl	800197c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b32:	2004      	movs	r0, #4
 8000b34:	f000 ff02 	bl	800193c <HAL_MPU_Enable>

}
 8000b38:	bf00      	nop
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	30040000 	.word	0x30040000

08000b44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d101      	bne.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b56:	f000 fd95 	bl	8001684 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010000 	.word	0x40010000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <MX_RNG_Init+0x24>)
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <MX_RNG_Init+0x28>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_RNG_Init+0x24>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_RNG_Init+0x24>)
 8000b86:	f005 fca1 	bl	80064cc <HAL_RNG_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000b90:	f7ff ffea 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	24064668 	.word	0x24064668
 8000b9c:	48021800 	.word	0x48021800

08000ba0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0b2      	sub	sp, #200	; 0xc8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	22bc      	movs	r2, #188	; 0xbc
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f015 ff10 	bl	80169d6 <memset>
  if(rngHandle->Instance==RNG)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <HAL_RNG_MspInit+0x68>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d11e      	bne.n	8000bfe <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bc4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f004 f919 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000bdc:	f7ff ffc4 	bl	8000b68 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_RNG_MspInit+0x6c>)
 8000be2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000be6:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <HAL_RNG_MspInit+0x6c>)
 8000be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bec:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_RNG_MspInit+0x6c>)
 8000bf2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000bfe:	bf00      	nop
 8000c00:	37c8      	adds	r7, #200	; 0xc8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	48021800 	.word	0x48021800
 8000c0c:	58024400 	.word	0x58024400

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x38>)
 8000c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_MspInit+0x38>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_MspInit+0x38>)
 8000c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	210f      	movs	r1, #15
 8000c38:	f06f 0001 	mvn.w	r0, #1
 8000c3c:	f000 fe3e 	bl	80018bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58024400 	.word	0x58024400

08000c4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b0f      	cmp	r3, #15
 8000c58:	d844      	bhi.n	8000ce4 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	6879      	ldr	r1, [r7, #4]
 8000c5e:	2019      	movs	r0, #25
 8000c60:	f000 fe2c 	bl	80018bc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c64:	2019      	movs	r0, #25
 8000c66:	f000 fe43 	bl	80018f0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000c6a:	4a24      	ldr	r2, [pc, #144]	; (8000cfc <HAL_InitTick+0xb0>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c70:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <HAL_InitTick+0xb4>)
 8000c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c76:	4a22      	ldr	r2, [pc, #136]	; (8000d00 <HAL_InitTick+0xb4>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_InitTick+0xb4>)
 8000c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c8e:	f107 020c 	add.w	r2, r7, #12
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 f873 	bl	8004d84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c9e:	f004 f85b 	bl	8004d58 <HAL_RCC_GetPCLK2Freq>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <HAL_InitTick+0xb8>)
 8000cac:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb0:	0c9b      	lsrs	r3, r3, #18
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_InitTick+0xbc>)
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <HAL_InitTick+0xc0>)
 8000cba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0xbc>)
 8000cbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cc4:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_InitTick+0xbc>)
 8000cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_InitTick+0xbc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_InitTick+0xbc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cd6:	480c      	ldr	r0, [pc, #48]	; (8000d08 <HAL_InitTick+0xbc>)
 8000cd8:	f005 fc5a 	bl	8006590 <HAL_TIM_Base_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d107      	bne.n	8000cf2 <HAL_InitTick+0xa6>
 8000ce2:	e001      	b.n	8000ce8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e005      	b.n	8000cf4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ce8:	4807      	ldr	r0, [pc, #28]	; (8000d08 <HAL_InitTick+0xbc>)
 8000cea:	f005 fcb3 	bl	8006654 <HAL_TIM_Base_Start_IT>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3738      	adds	r7, #56	; 0x38
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	24000008 	.word	0x24000008
 8000d00:	58024400 	.word	0x58024400
 8000d04:	431bde83 	.word	0x431bde83
 8000d08:	2406467c 	.word	0x2406467c
 8000d0c:	40010000 	.word	0x40010000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <TIM1_UP_IRQHandler+0x10>)
 8000d42:	f005 fcff 	bl	8006744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2406467c 	.word	0x2406467c

08000d50 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <ETH_IRQHandler+0x10>)
 8000d56:	f001 fb2f 	bl	80023b8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	24064ca0 	.word	0x24064ca0

08000d64 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <ETH_WKUP_IRQHandler+0x10>)
 8000d6a:	f001 fb25 	bl	80023b8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	24064ca0 	.word	0x24064ca0

08000d78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
	return 1;
 8000d7c:	2301      	movs	r3, #1
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_kill>:

int _kill(int pid, int sig)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <_kill+0x20>)
 8000d94:	2216      	movs	r2, #22
 8000d96:	601a      	str	r2, [r3, #0]
	return -1;
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	2406b47c 	.word	0x2406b47c

08000dac <_exit>:

void _exit (int status)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ffe5 	bl	8000d88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000dbe:	e7fe      	b.n	8000dbe <_exit+0x12>

08000dc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	e00a      	b.n	8000de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dd2:	f3af 8000 	nop.w
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	b2ca      	uxtb	r2, r1
 8000de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf0      	blt.n	8000dd2 <_read+0x12>
	}

return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e009      	b.n	8000e20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60ba      	str	r2, [r7, #8]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbf1      	blt.n	8000e0c <_write+0x12>
	}
	return len;
 8000e28:	687b      	ldr	r3, [r7, #4]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_close>:

int _close(int file)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	return -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_isatty>:

int _isatty(int file)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
	return 1;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d205      	bcs.n	8000ed8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <_sbrk+0x6c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	24080000 	.word	0x24080000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	24000368 	.word	0x24000368
 8000f04:	2406b490 	.word	0x2406b490
 8000f08:	2406b47c 	.word	0x2406b47c

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f12:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <SystemInit+0x104>)
 8000f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f18:	4a3d      	ldr	r2, [pc, #244]	; (8001010 <SystemInit+0x104>)
 8000f1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f22:	4b3c      	ldr	r3, [pc, #240]	; (8001014 <SystemInit+0x108>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d807      	bhi.n	8000f3e <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f2e:	4b39      	ldr	r3, [pc, #228]	; (8001014 <SystemInit+0x108>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 030f 	bic.w	r3, r3, #15
 8000f36:	4a37      	ldr	r2, [pc, #220]	; (8001014 <SystemInit+0x108>)
 8000f38:	f043 0307 	orr.w	r3, r3, #7
 8000f3c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <SystemInit+0x10c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a35      	ldr	r2, [pc, #212]	; (8001018 <SystemInit+0x10c>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f4a:	4b33      	ldr	r3, [pc, #204]	; (8001018 <SystemInit+0x10c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <SystemInit+0x10c>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4930      	ldr	r1, [pc, #192]	; (8001018 <SystemInit+0x10c>)
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <SystemInit+0x110>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <SystemInit+0x108>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0308 	and.w	r3, r3, #8
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d007      	beq.n	8000f78 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <SystemInit+0x108>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 030f 	bic.w	r3, r3, #15
 8000f70:	4a28      	ldr	r2, [pc, #160]	; (8001014 <SystemInit+0x108>)
 8000f72:	f043 0307 	orr.w	r3, r3, #7
 8000f76:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <SystemInit+0x10c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <SystemInit+0x10c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f84:	4b24      	ldr	r3, [pc, #144]	; (8001018 <SystemInit+0x10c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <SystemInit+0x10c>)
 8000f8c:	4a24      	ldr	r2, [pc, #144]	; (8001020 <SystemInit+0x114>)
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <SystemInit+0x10c>)
 8000f92:	4a24      	ldr	r2, [pc, #144]	; (8001024 <SystemInit+0x118>)
 8000f94:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <SystemInit+0x10c>)
 8000f98:	4a23      	ldr	r2, [pc, #140]	; (8001028 <SystemInit+0x11c>)
 8000f9a:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <SystemInit+0x10c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <SystemInit+0x10c>)
 8000fa4:	4a20      	ldr	r2, [pc, #128]	; (8001028 <SystemInit+0x11c>)
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <SystemInit+0x10c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <SystemInit+0x10c>)
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <SystemInit+0x11c>)
 8000fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <SystemInit+0x10c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <SystemInit+0x10c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a16      	ldr	r2, [pc, #88]	; (8001018 <SystemInit+0x10c>)
 8000fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <SystemInit+0x10c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <SystemInit+0x120>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <SystemInit+0x124>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fd8:	d202      	bcs.n	8000fe0 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <SystemInit+0x128>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
#endif

#if defined (DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM) , enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <SystemInit+0x10c>)
 8000fe2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000fe6:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <SystemInit+0x10c>)
 8000fe8:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000fec:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <SystemInit+0x10c>)
 8000ff2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000ff6:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8000ff8:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <SystemInit+0x12c>)
 8000ffc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001000:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	52002000 	.word	0x52002000
 8001018:	58024400 	.word	0x58024400
 800101c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001020:	02020200 	.word	0x02020200
 8001024:	01ff0000 	.word	0x01ff0000
 8001028:	01010280 	.word	0x01010280
 800102c:	5c001000 	.word	0x5c001000
 8001030:	ffff0000 	.word	0xffff0000
 8001034:	51008108 	.word	0x51008108
 8001038:	52004000 	.word	0x52004000

0800103c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001042:	4a23      	ldr	r2, [pc, #140]	; (80010d0 <MX_USART3_UART_Init+0x94>)
 8001044:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_USART3_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_USART3_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_USART3_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001086:	f005 fd5d 	bl	8006b44 <HAL_UART_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001090:	f7ff fd6a 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001094:	2100      	movs	r1, #0
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_USART3_UART_Init+0x90>)
 8001098:	f006 fcf2 	bl	8007a80 <HAL_UARTEx_SetTxFifoThreshold>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010a2:	f7ff fd61 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <MX_USART3_UART_Init+0x90>)
 80010aa:	f006 fd27 	bl	8007afc <HAL_UARTEx_SetRxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010b4:	f7ff fd58 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_USART3_UART_Init+0x90>)
 80010ba:	f006 fca8 	bl	8007a0e <HAL_UARTEx_DisableFifoMode>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010c4:	f7ff fd50 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	240646c8 	.word	0x240646c8
 80010d0:	40004800 	.word	0x40004800

080010d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0b8      	sub	sp, #224	; 0xe0
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	22bc      	movs	r2, #188	; 0xbc
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f015 fc6e 	bl	80169d6 <memset>
  if(uartHandle->Instance==USART3)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a25      	ldr	r2, [pc, #148]	; (8001194 <HAL_UART_MspInit+0xc0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d142      	bne.n	800118a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001104:	2302      	movs	r3, #2
 8001106:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4618      	mov	r0, r3
 8001114:	f003 fe78 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800111e:	f7ff fd23 	bl	8000b68 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_UART_MspInit+0xc4>)
 8001124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_UART_MspInit+0xc4>)
 800112a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_UART_MspInit+0xc4>)
 8001134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_UART_MspInit+0xc4>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <HAL_UART_MspInit+0xc4>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_UART_MspInit+0xc4>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800115e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001162:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001178:	2307      	movs	r3, #7
 800117a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_UART_MspInit+0xc8>)
 8001186:	f002 fae9 	bl	800375c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	37e0      	adds	r7, #224	; 0xe0
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40004800 	.word	0x40004800
 8001198:	58024400 	.word	0x58024400
 800119c:	58020c00 	.word	0x58020c00

080011a0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a6:	4a16      	ldr	r2, [pc, #88]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80011a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ac:	2209      	movs	r2, #9
 80011ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011be:	2202      	movs	r2, #2
 80011c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011dc:	2201      	movs	r2, #1
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e8:	f002 fc81 	bl	8003aee <HAL_PCD_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80011f2:	f7ff fcb9 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	24064758 	.word	0x24064758
 8001200:	40080000 	.word	0x40080000

08001204 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0b8      	sub	sp, #224	; 0xe0
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	22bc      	movs	r2, #188	; 0xbc
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f015 fbd6 	bl	80169d6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a2f      	ldr	r2, [pc, #188]	; (80012ec <HAL_PCD_MspInit+0xe8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d156      	bne.n	80012e2 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001234:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001238:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800123a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800123e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fdde 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001252:	f7ff fc89 	bl	8000b68 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001256:	f002 fdcd 	bl	8003df4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <HAL_PCD_MspInit+0xec>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001260:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <HAL_PCD_MspInit+0xec>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_PCD_MspInit+0xec>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001278:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800127c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001292:	230a      	movs	r3, #10
 8001294:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800129c:	4619      	mov	r1, r3
 800129e:	4815      	ldr	r0, [pc, #84]	; (80012f4 <HAL_PCD_MspInit+0xf0>)
 80012a0:	f002 fa5c 	bl	800375c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012bc:	4619      	mov	r1, r3
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <HAL_PCD_MspInit+0xf0>)
 80012c0:	f002 fa4c 	bl	800375c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_PCD_MspInit+0xec>)
 80012c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ca:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <HAL_PCD_MspInit+0xec>)
 80012cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_PCD_MspInit+0xec>)
 80012d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80012e2:	bf00      	nop
 80012e4:	37e0      	adds	r7, #224	; 0xe0
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40080000 	.word	0x40080000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58020000 	.word	0x58020000

080012f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001330 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012fc:	f7ff fe06 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001326:	f015 fb13 	bl	8016950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132a:	f7ff fafb 	bl	8000924 <main>
  bx  lr
 800132e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001330:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001334:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001338:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 800133c:	0801a7d4 	.word	0x0801a7d4
  ldr r2, =_sbss
 8001340:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8001344:	2406b490 	.word	0x2406b490

08001348 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC3_IRQHandler>

0800134a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <LAN8742_RegisterBusIO+0x28>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <LAN8742_RegisterBusIO+0x28>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <LAN8742_RegisterBusIO+0x28>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001376:	e014      	b.n	80013a2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d17c      	bne.n	80014c8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2220      	movs	r2, #32
 80013e0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e01c      	b.n	8001422 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f107 0208 	add.w	r2, r7, #8
 80013f0:	2112      	movs	r1, #18
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	4798      	blx	r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da03      	bge.n	8001404 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80013fc:	f06f 0304 	mvn.w	r3, #4
 8001400:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001402:	e00b      	b.n	800141c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	429a      	cmp	r2, r3
 800140e:	d105      	bne.n	800141c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
         break;
 800141a:	e005      	b.n	8001428 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3301      	adds	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b1f      	cmp	r3, #31
 8001426:	d9df      	bls.n	80013e8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b1f      	cmp	r3, #31
 800142e:	d902      	bls.n	8001436 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001430:	f06f 0302 	mvn.w	r3, #2
 8001434:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d145      	bne.n	80014c8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6810      	ldr	r0, [r2, #0]
 8001444:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001448:	2100      	movs	r1, #0
 800144a:	4798      	blx	r3
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	db37      	blt.n	80014c2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6810      	ldr	r0, [r2, #0]
 800145a:	f107 0208 	add.w	r2, r7, #8
 800145e:	2100      	movs	r1, #0
 8001460:	4798      	blx	r3
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	db28      	blt.n	80014ba <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4798      	blx	r3
 800146e:	4603      	mov	r3, r0
 8001470:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001472:	e01c      	b.n	80014ae <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4798      	blx	r3
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001486:	d80e      	bhi.n	80014a6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6810      	ldr	r0, [r2, #0]
 8001490:	f107 0208 	add.w	r2, r7, #8
 8001494:	2100      	movs	r1, #0
 8001496:	4798      	blx	r3
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	da07      	bge.n	80014ae <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800149e:	f06f 0304 	mvn.w	r3, #4
 80014a2:	613b      	str	r3, [r7, #16]
                 break;
 80014a4:	e010      	b.n	80014c8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80014a6:	f06f 0301 	mvn.w	r3, #1
 80014aa:	613b      	str	r3, [r7, #16]
               break;
 80014ac:	e00c      	b.n	80014c8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1dd      	bne.n	8001474 <LAN8742_Init+0xc6>
 80014b8:	e006      	b.n	80014c8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80014ba:	f06f 0304 	mvn.w	r3, #4
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	e002      	b.n	80014c8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80014c2:	f06f 0303 	mvn.w	r3, #3
 80014c6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d112      	bne.n	80014f4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	4798      	blx	r3
 80014d4:	4603      	mov	r3, r0
 80014d6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80014d8:	bf00      	nop
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4798      	blx	r3
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014ec:	d9f5      	bls.n	80014da <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80014f4:	693b      	ldr	r3, [r7, #16]
 }
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6810      	ldr	r0, [r2, #0]
 8001512:	f107 020c 	add.w	r2, r7, #12
 8001516:	2101      	movs	r1, #1
 8001518:	4798      	blx	r3
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	da02      	bge.n	8001526 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001520:	f06f 0304 	mvn.w	r3, #4
 8001524:	e06e      	b.n	8001604 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6810      	ldr	r0, [r2, #0]
 800152e:	f107 020c 	add.w	r2, r7, #12
 8001532:	2101      	movs	r1, #1
 8001534:	4798      	blx	r3
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	da02      	bge.n	8001542 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800153c:	f06f 0304 	mvn.w	r3, #4
 8001540:	e060      	b.n	8001604 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800154c:	2301      	movs	r3, #1
 800154e:	e059      	b.n	8001604 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6810      	ldr	r0, [r2, #0]
 8001558:	f107 020c 	add.w	r2, r7, #12
 800155c:	2100      	movs	r1, #0
 800155e:	4798      	blx	r3
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	da02      	bge.n	800156c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001566:	f06f 0304 	mvn.w	r3, #4
 800156a:	e04b      	b.n	8001604 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d11b      	bne.n	80015ae <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <LAN8742_GetLinkState+0x90>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800158a:	2302      	movs	r3, #2
 800158c:	e03a      	b.n	8001604 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001598:	2303      	movs	r3, #3
 800159a:	e033      	b.n	8001604 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015a6:	2304      	movs	r3, #4
 80015a8:	e02c      	b.n	8001604 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015aa:	2305      	movs	r3, #5
 80015ac:	e02a      	b.n	8001604 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6810      	ldr	r0, [r2, #0]
 80015b6:	f107 020c 	add.w	r2, r7, #12
 80015ba:	211f      	movs	r1, #31
 80015bc:	4798      	blx	r3
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	da02      	bge.n	80015ca <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80015c4:	f06f 0304 	mvn.w	r3, #4
 80015c8:	e01c      	b.n	8001604 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80015d4:	2306      	movs	r3, #6
 80015d6:	e015      	b.n	8001604 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 031c 	and.w	r3, r3, #28
 80015de:	2b18      	cmp	r3, #24
 80015e0:	d101      	bne.n	80015e6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80015e2:	2302      	movs	r3, #2
 80015e4:	e00e      	b.n	8001604 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f003 031c 	and.w	r3, r3, #28
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d101      	bne.n	80015f4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e007      	b.n	8001604 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 031c 	and.w	r3, r3, #28
 80015fa:	2b14      	cmp	r3, #20
 80015fc:	d101      	bne.n	8001602 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015fe:	2304      	movs	r3, #4
 8001600:	e000      	b.n	8001604 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001602:	2305      	movs	r3, #5
    }				
  }
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001612:	2003      	movs	r0, #3
 8001614:	f000 f947 	bl	80018a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001618:	f003 f9de 	bl	80049d8 <HAL_RCC_GetSysClockFreq>
 800161c:	4602      	mov	r2, r0
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_Init+0x68>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	0a1b      	lsrs	r3, r3, #8
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	4913      	ldr	r1, [pc, #76]	; (8001678 <HAL_Init+0x6c>)
 800162a:	5ccb      	ldrb	r3, [r1, r3]
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
 8001634:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_Init+0x68>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_Init+0x6c>)
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_Init+0x70>)
 800164e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_Init+0x74>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001656:	200f      	movs	r0, #15
 8001658:	f7ff faf8 	bl	8000c4c <HAL_InitTick>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e002      	b.n	800166c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001666:	f7ff fad3 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	58024400 	.word	0x58024400
 8001678:	0801a508 	.word	0x0801a508
 800167c:	24000004 	.word	0x24000004
 8001680:	24000000 	.word	0x24000000

08001684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	2400000c 	.word	0x2400000c
 80016a8:	24064b60 	.word	0x24064b60

080016ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	24064b60 	.word	0x24064b60

080016c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff ffee 	bl	80016ac <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffde 	bl	80016ac <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2400000c 	.word	0x2400000c

0800170c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetREVID+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	0c1b      	lsrs	r3, r3, #16
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	5c001000 	.word	0x5c001000

08001724 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001734:	4904      	ldr	r1, [pc, #16]	; (8001748 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	58000400 	.word	0x58000400

0800174c <__NVIC_SetPriorityGrouping>:
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <__NVIC_SetPriorityGrouping+0x40>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	4313      	orrs	r3, r2
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <__NVIC_SetPriorityGrouping+0x40>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00
 8001790:	05fa0000 	.word	0x05fa0000

08001794 <__NVIC_GetPriorityGrouping>:
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_EnableIRQ>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0b      	blt.n	80017da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4907      	ldr	r1, [pc, #28]	; (80017e8 <__NVIC_EnableIRQ+0x38>)
 80017ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ff4c 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018ca:	f7ff ff63 	bl	8001794 <__NVIC_GetPriorityGrouping>
 80018ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	6978      	ldr	r0, [r7, #20]
 80018d6:	f7ff ffb3 	bl	8001840 <NVIC_EncodePriority>
 80018da:	4602      	mov	r2, r0
 80018dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff82 	bl	80017ec <__NVIC_SetPriority>
}
 80018e8:	bf00      	nop
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff56 	bl	80017b0 <__NVIC_EnableIRQ>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001910:	f3bf 8f5f 	dmb	sy
}
 8001914:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <HAL_MPU_Disable+0x28>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_MPU_Disable+0x28>)
 800191c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001920:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_MPU_Disable+0x2c>)
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00
 8001938:	e000ed90 	.word	0xe000ed90

0800193c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001944:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <HAL_MPU_Enable+0x38>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_MPU_Enable+0x3c>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_MPU_Enable+0x3c>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001958:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800195a:	f3bf 8f4f 	dsb	sy
}
 800195e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001960:	f3bf 8f6f 	isb	sy
}
 8001964:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed90 	.word	0xe000ed90
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	785a      	ldrb	r2, [r3, #1]
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_MPU_ConfigRegion+0x84>)
 800198a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d029      	beq.n	80019e8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001994:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <HAL_MPU_ConfigRegion+0x84>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7b1b      	ldrb	r3, [r3, #12]
 80019a0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7adb      	ldrb	r3, [r3, #11]
 80019a6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7a9b      	ldrb	r3, [r3, #10]
 80019ae:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7b5b      	ldrb	r3, [r3, #13]
 80019b6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7b9b      	ldrb	r3, [r3, #14]
 80019be:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7bdb      	ldrb	r3, [r3, #15]
 80019c6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7a5b      	ldrb	r3, [r3, #9]
 80019ce:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7a1b      	ldrb	r3, [r3, #8]
 80019d6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019d8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	7812      	ldrb	r2, [r2, #0]
 80019de:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019e2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019e4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80019e6:	e005      	b.n	80019f4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_MPU_ConfigRegion+0x84>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <HAL_MPU_ConfigRegion+0x84>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed90 	.word	0xe000ed90

08001a04 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0c6      	b.n	8001ba4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f006 fd4c 	bl	80084bc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2223      	movs	r2, #35	; 0x23
 8001a28:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	4b60      	ldr	r3, [pc, #384]	; (8001bac <HAL_ETH_Init+0x1a8>)
 8001a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a30:	4a5e      	ldr	r2, [pc, #376]	; (8001bac <HAL_ETH_Init+0x1a8>)
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a3a:	4b5c      	ldr	r3, [pc, #368]	; (8001bac <HAL_ETH_Init+0x1a8>)
 8001a3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7a1b      	ldrb	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d103      	bne.n	8001a58 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff fe67 	bl	8001724 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a56:	e003      	b.n	8001a60 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a58:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a5c:	f7ff fe62 	bl	8001724 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a78:	f7ff fe18 	bl	80016ac <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a7e:	e00f      	b.n	8001aa0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001a80:	f7ff fe14 	bl	80016ac <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a8e:	d907      	bls.n	8001aa0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2204      	movs	r2, #4
 8001a94:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	22e0      	movs	r2, #224	; 0xe0
 8001a9a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e081      	b.n	8001ba4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1e6      	bne.n	8001a80 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f001 fad8 	bl	8003068 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001ab8:	f003 f908 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a3c      	ldr	r2, [pc, #240]	; (8001bb0 <HAL_ETH_Init+0x1ac>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	0c9a      	lsrs	r2, r3, #18
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3a01      	subs	r2, #1
 8001acc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f001 fa2b 	bl	8002f2c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001aec:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001af0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	22e0      	movs	r2, #224	; 0xe0
 8001b08:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e04a      	b.n	8001ba4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b16:	4413      	add	r3, r2
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <HAL_ETH_Init+0x1b0>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6952      	ldr	r2, [r2, #20]
 8001b22:	0052      	lsls	r2, r2, #1
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	6809      	ldr	r1, [r1, #0]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b2e:	440b      	add	r3, r1
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f001 faf0 	bl	8003118 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f001 fb34 	bl	80031a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	3305      	adds	r3, #5
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	021a      	lsls	r2, r3, #8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	3303      	adds	r3, #3
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	061a      	lsls	r2, r3, #24
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	3301      	adds	r3, #1
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b7c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b8a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2210      	movs	r2, #16
 8001b9a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2210      	movs	r2, #16
 8001ba0:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	58024400 	.word	0x58024400
 8001bb0:	431bde83 	.word	0x431bde83
 8001bb4:	ffff8001 	.word	0xffff8001

08001bb8 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	3310      	adds	r3, #16
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_ETH_DescAssignMemory+0x28>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d904      	bls.n	8001bea <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2201      	movs	r2, #1
 8001be4:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e021      	b.n	8001c2e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00b      	beq.n	8001c20 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c46:	2b10      	cmp	r3, #16
 8001c48:	d174      	bne.n	8001d34 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2223      	movs	r2, #35	; 0x23
 8001c4e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	e00f      	b.n	8001c76 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3310      	adds	r3, #16
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3301      	adds	r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d9ec      	bls.n	8001c56 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0202 	orr.w	r2, r2, #2
 8001c90:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	f241 1304 	movw	r3, #4356	; 0x1104
 8001cbe:	4413      	add	r3, r2
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6811      	ldr	r1, [r2, #0]
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	f241 1304 	movw	r3, #4356	; 0x1104
 8001cce:	440b      	add	r3, r1
 8001cd0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001cda:	4413      	add	r3, r2
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6811      	ldr	r1, [r2, #0]
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001cea:	440b      	add	r3, r1
 8001cec:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001d00:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d04:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d0e:	4413      	add	r3, r2
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6811      	ldr	r1, [r2, #0]
 8001d16:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d20:	440b      	add	r3, r1
 8001d22:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2210      	movs	r2, #16
 8001d28:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2222      	movs	r2, #34	; 0x22
 8001d2e:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e000      	b.n	8001d36 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
  }
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d067      	beq.n	8001e24 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2223      	movs	r2, #35	; 0x23
 8001d58:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d62:	4413      	add	r3, r2
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6811      	ldr	r1, [r2, #0]
 8001d6a:	4a32      	ldr	r2, [pc, #200]	; (8001e34 <HAL_ETH_Stop_IT+0xf0>)
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d72:	440b      	add	r3, r1
 8001d74:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d7e:	4413      	add	r3, r2
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6811      	ldr	r1, [r2, #0]
 8001d86:	f023 0201 	bic.w	r2, r3, #1
 8001d8a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d8e:	440b      	add	r3, r1
 8001d90:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d9a:	4413      	add	r3, r2
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6811      	ldr	r1, [r2, #0]
 8001da2:	f023 0201 	bic.w	r2, r3, #1
 8001da6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001daa:	440b      	add	r3, r1
 8001dac:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0202 	bic.w	r2, r2, #2
 8001de0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e00f      	b.n	8001e08 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3310      	adds	r3, #16
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3301      	adds	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d9ec      	bls.n	8001de8 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2210      	movs	r2, #16
 8001e18:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
  }
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	ffff2fbe 	.word	0xffff2fbe

08001e38 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d107      	bne.n	8001e5a <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e073      	b.n	8001f42 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e5e:	2b10      	cmp	r3, #16
 8001e60:	d16e      	bne.n	8001f40 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001e62:	2200      	movs	r2, #0
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f001 f9fa 	bl	8003260 <ETH_Prepare_Tx_Descriptors>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e76:	f043 0202 	orr.w	r2, r3, #2
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e05f      	b.n	8001f42 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3206      	adds	r2, #6
 8001e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	629a      	str	r2, [r3, #40]	; 0x28
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d904      	bls.n	8001eac <HAL_ETH_Transmit+0x74>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	1f1a      	subs	r2, r3, #4
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	3106      	adds	r1, #6
 8001eb8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001ebc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001ec0:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001ec2:	f7ff fbf3 	bl	80016ac <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001ec8:	e034      	b.n	8001f34 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d011      	beq.n	8001f00 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee0:	f043 0208 	orr.w	r2, r3, #8
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	22e0      	movs	r2, #224	; 0xe0
 8001efa:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e020      	b.n	8001f42 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f06:	d015      	beq.n	8001f34 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001f08:	f7ff fbd0 	bl	80016ac <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d302      	bcc.n	8001f1e <HAL_ETH_Transmit+0xe6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10a      	bne.n	8001f34 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f22:	f043 0204 	orr.w	r2, r3, #4
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	22e0      	movs	r2, #224	; 0xe0
 8001f2e:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e006      	b.n	8001f42 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	dbc6      	blt.n	8001eca <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e000      	b.n	8001f42 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
  }
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b089      	sub	sp, #36	; 0x24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3344      	adds	r3, #68	; 0x44
 8001f56:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f66:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d06b      	beq.n	8002054 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e0ce      	b.n	800211e <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d036      	beq.n	8002000 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	3301      	adds	r3, #1
 8001f96:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d902      	bls.n	8001fb4 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3b04      	subs	r3, #4
 8001fb2:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db11      	blt.n	8001fea <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d902      	bls.n	8001fea <HAL_ETH_IsRxDataAvailable+0xa0>
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e08e      	b.n	800211e <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d012      	beq.n	8002032 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002010:	2301      	movs	r3, #1
 8002012:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	3301      	adds	r3, #1
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d902      	bls.n	8002026 <HAL_ETH_IsRxDataAvailable+0xdc>
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	3b04      	subs	r3, #4
 8002024:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	e010      	b.n	8002054 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	3301      	adds	r3, #1
 8002036:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	3301      	adds	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d902      	bls.n	800204a <HAL_ETH_IsRxDataAvailable+0x100>
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	3b04      	subs	r3, #4
 8002048:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db02      	blt.n	8002062 <HAL_ETH_IsRxDataAvailable+0x118>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d98e      	bls.n	8001f80 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d056      	beq.n	8002116 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002080:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e03b      	b.n	8002100 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002096:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d009      	beq.n	80020b4 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d20d      	bcs.n	80020fa <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3301      	adds	r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d902      	bls.n	80020f0 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b04      	subs	r3, #4
 80020ee:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f8:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d3bf      	bcc.n	8002088 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f241 1328 	movw	r3, #4392	; 0x1128
 8002112:	440b      	add	r3, r1
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]

  return 0;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b08a      	sub	sp, #40	; 0x28
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3344      	adds	r3, #68	; 0x44
 8002138:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d104      	bne.n	8002162 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e07d      	b.n	800225e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10f      	bne.n	800218a <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff feed 	bl	8001f4a <HAL_ETH_IsRxDataAvailable>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e071      	b.n	800225e <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002188:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
 800218e:	e031      	b.n	80021f4 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	461a      	mov	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	461a      	mov	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80021ca:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	3301      	adds	r3, #1
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d902      	bls.n	80021de <HAL_ETH_GetRxDataBuffer+0xb4>
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	3b04      	subs	r3, #4
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	3301      	adds	r3, #1
 80021f2:	623b      	str	r3, [r7, #32]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	6a3a      	ldr	r2, [r7, #32]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d3c7      	bcc.n	8002190 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	461a      	mov	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	429a      	cmp	r2, r3
 8002220:	d803      	bhi.n	800222a <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	e018      	b.n	800225c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d012      	beq.n	8002258 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	461a      	mov	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	1ad2      	subs	r2, r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	e001      	b.n	800225c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3728      	adds	r7, #40	; 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3344      	adds	r3, #68	; 0x44
 8002274:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff fe60 	bl	8001f4a <HAL_ETH_IsRxDataAvailable>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e017      	b.n	80022c4 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	699a      	ldr	r2, [r3, #24]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	4413      	add	r3, r2
 800229c:	3b01      	subs	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d902      	bls.n	80022ac <HAL_ETH_GetRxDataLength+0x46>
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3b04      	subs	r3, #4
 80022aa:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b4:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3344      	adds	r3, #68	; 0x44
 80022d8:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e057      	b.n	80023ac <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	e03b      	b.n	8002388 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800231e:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3b01      	subs	r3, #1
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	429a      	cmp	r2, r3
 8002364:	d20d      	bcs.n	8002382 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3301      	adds	r3, #1
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d902      	bls.n	8002378 <HAL_ETH_BuildRxDescriptors+0xac>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b04      	subs	r3, #4
 8002376:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002380:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	3301      	adds	r3, #1
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	d3bf      	bcc.n	8002310 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	f241 1328 	movw	r3, #4392	; 0x1128
 800239a:	440b      	add	r3, r1
 800239c:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3724      	adds	r7, #36	; 0x24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	2b40      	cmp	r3, #64	; 0x40
 80023d0:	d113      	bne.n	80023fa <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	f241 1334 	movw	r3, #4404	; 0x1134
 80023da:	4413      	add	r3, r2
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b40      	cmp	r3, #64	; 0x40
 80023e4:	d109      	bne.n	80023fa <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f006 f956 	bl	8008698 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80023f4:	f248 0240 	movw	r2, #32832	; 0x8040
 80023f8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d113      	bne.n	8002434 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	f241 1334 	movw	r3, #4404	; 0x1134
 8002414:	4413      	add	r3, r2
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d109      	bne.n	8002434 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f8b7 	bl	8002594 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800242e:	f248 0201 	movw	r2, #32769	; 0x8001
 8002432:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002446:	d149      	bne.n	80024dc <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	f241 1334 	movw	r3, #4404	; 0x1134
 8002450:	4413      	add	r3, r2
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800245c:	d13e      	bne.n	80024dc <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002462:	f043 0208 	orr.w	r2, r3, #8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247c:	d11b      	bne.n	80024b6 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	f241 1302 	movw	r3, #4354	; 0x1102
 800248c:	4013      	ands	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	f241 1334 	movw	r3, #4404	; 0x1134
 800249a:	4413      	add	r3, r2
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6811      	ldr	r1, [r2, #0]
 80024a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024a6:	f241 1334 	movw	r3, #4404	; 0x1134
 80024aa:	440b      	add	r3, r1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	22e0      	movs	r2, #224	; 0xe0
 80024b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80024b4:	e00f      	b.n	80024d6 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80024d0:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80024d4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f866 	bl	80025a8 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80024e4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80024e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80024ec:	d10e      	bne.n	800250c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	22e0      	movs	r2, #224	; 0xe0
 80024fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f85b 	bl	80025bc <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b10      	cmp	r3, #16
 800251a:	d10f      	bne.n	800253c <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002524:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f84e 	bl	80025d0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b20      	cmp	r3, #32
 800254a:	d10f      	bne.n	800256c <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002554:	f003 020f 	and.w	r2, r3, #15
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f840 	bl	80025e4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_ETH_IRQHandler+0x1d8>)
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_ETH_IRQHandler+0x1d8>)
 800257a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f839 	bl	80025f8 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	58000080 	.word	0x58000080

08002594 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e03e      	b.n	80026ac <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002636:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	055b      	lsls	r3, r3, #21
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f043 030c 	orr.w	r3, r3, #12
 800265a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800266e:	f7ff f81d 	bl	80016ac <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002674:	e009      	b.n	800268a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002676:	f7ff f819 	bl	80016ac <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002684:	d901      	bls.n	800268a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e010      	b.n	80026ac <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1ed      	bne.n	8002676 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e03c      	b.n	8002750 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026de:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	055b      	lsls	r3, r3, #21
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	041b      	lsls	r3, r3, #16
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f023 030c 	bic.w	r3, r3, #12
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b29a      	uxth	r2, r3
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_ETH_WritePHYRegister+0xa4>)
 8002716:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800271a:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_ETH_WritePHYRegister+0xa4>)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002722:	f7fe ffc3 	bl	80016ac <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002728:	e009      	b.n	800273e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800272a:	f7fe ffbf 	bl	80016ac <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002738:	d901      	bls.n	800273e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e008      	b.n	8002750 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1ed      	bne.n	800272a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40028000 	.word	0x40028000

0800275c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e1c3      	b.n	8002af8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 020c 	and.w	r2, r3, #12
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf14      	ite	ne
 800278c:	2301      	movne	r3, #1
 800278e:	2300      	moveq	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf14      	ite	ne
 80027d2:	2301      	movne	r3, #1
 80027d4:	2300      	moveq	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf14      	ite	ne
 8002806:	2301      	movne	r3, #1
 8002808:	2300      	moveq	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf14      	ite	ne
 8002856:	2301      	movne	r3, #1
 8002858:	2300      	moveq	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf0c      	ite	eq
 8002870:	2301      	moveq	r3, #1
 8002872:	2300      	movne	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002886:	2b00      	cmp	r3, #0
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf14      	ite	ne
 80028be:	2301      	movne	r3, #1
 80028c0:	2300      	moveq	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf14      	ite	ne
 80028d8:	2301      	movne	r3, #1
 80028da:	2300      	moveq	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf14      	ite	ne
 800291a:	2301      	movne	r3, #1
 800291c:	2300      	moveq	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf14      	ite	ne
 8002988:	2301      	movne	r3, #1
 800298a:	2300      	moveq	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	0e5b      	lsrs	r3, r3, #25
 80029ba:	f003 021f 	and.w	r2, r3, #31
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 020f 	and.w	r2, r3, #15
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002a84:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a94:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e00a      	b.n	8002b2e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d105      	bne.n	8002b2c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002b20:	6839      	ldr	r1, [r7, #0]
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f860 	bl	8002be8 <ETH_SetMACConfig>

    return HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e000      	b.n	8002b2e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
  }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b48:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b50:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b52:	f002 f8bb 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8002b56:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d908      	bls.n	8002b72 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d804      	bhi.n	8002b72 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e027      	b.n	8002bc2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d908      	bls.n	8002b8c <HAL_ETH_SetMDIOClockRange+0x54>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4a17      	ldr	r2, [pc, #92]	; (8002bdc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d204      	bcs.n	8002b8c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	e01a      	b.n	8002bc2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4a13      	ldr	r2, [pc, #76]	; (8002bdc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d303      	bcc.n	8002b9c <HAL_ETH_SetMDIOClockRange+0x64>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d911      	bls.n	8002bc0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d908      	bls.n	8002bb6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4a0f      	ldr	r2, [pc, #60]	; (8002be4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d804      	bhi.n	8002bb6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e005      	b.n	8002bc2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	e000      	b.n	8002bc2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002bc0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	01312cff 	.word	0x01312cff
 8002bd8:	02160ebf 	.word	0x02160ebf
 8002bdc:	03938700 	.word	0x03938700
 8002be0:	05f5e0ff 	.word	0x05f5e0ff
 8002be4:	08f0d17f 	.word	0x08f0d17f

08002be8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002bfa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	791b      	ldrb	r3, [r3, #4]
 8002c00:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002c02:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	7b1b      	ldrb	r3, [r3, #12]
 8002c08:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002c0a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	7b5b      	ldrb	r3, [r3, #13]
 8002c10:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c12:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	7b9b      	ldrb	r3, [r3, #14]
 8002c18:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	7bdb      	ldrb	r3, [r3, #15]
 8002c20:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c22:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	7c12      	ldrb	r2, [r2, #16]
 8002c28:	2a00      	cmp	r2, #0
 8002c2a:	d102      	bne.n	8002c32 <ETH_SetMACConfig+0x4a>
 8002c2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c30:	e000      	b.n	8002c34 <ETH_SetMACConfig+0x4c>
 8002c32:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c34:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	7c52      	ldrb	r2, [r2, #17]
 8002c3a:	2a00      	cmp	r2, #0
 8002c3c:	d102      	bne.n	8002c44 <ETH_SetMACConfig+0x5c>
 8002c3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c42:	e000      	b.n	8002c46 <ETH_SetMACConfig+0x5e>
 8002c44:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c46:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	7c9b      	ldrb	r3, [r3, #18]
 8002c4c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c4e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002c54:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002c5a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	7f1b      	ldrb	r3, [r3, #28]
 8002c60:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002c62:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	7f5b      	ldrb	r3, [r3, #29]
 8002c68:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002c6a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	7f92      	ldrb	r2, [r2, #30]
 8002c70:	2a00      	cmp	r2, #0
 8002c72:	d102      	bne.n	8002c7a <ETH_SetMACConfig+0x92>
 8002c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c78:	e000      	b.n	8002c7c <ETH_SetMACConfig+0x94>
 8002c7a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002c7c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	7fdb      	ldrb	r3, [r3, #31]
 8002c82:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002c84:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c8c:	2a00      	cmp	r2, #0
 8002c8e:	d102      	bne.n	8002c96 <ETH_SetMACConfig+0xae>
 8002c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c94:	e000      	b.n	8002c98 <ETH_SetMACConfig+0xb0>
 8002c96:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002c98:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002c9e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ca6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002ca8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <ETH_SetMACConfig+0x22c>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	68f9      	ldr	r1, [r7, #12]
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cd2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002cd4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cdc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002cde:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002ce6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002ce8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002cf0:	2a00      	cmp	r2, #0
 8002cf2:	d102      	bne.n	8002cfa <ETH_SetMACConfig+0x112>
 8002cf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cf8:	e000      	b.n	8002cfc <ETH_SetMACConfig+0x114>
 8002cfa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002cfc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <ETH_SetMACConfig+0x230>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	430b      	orrs	r3, r1
 8002d18:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d20:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	4b3a      	ldr	r3, [pc, #232]	; (8002e1c <ETH_SetMACConfig+0x234>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	68f9      	ldr	r1, [r7, #12]
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d44:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d4a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002d52:	2a00      	cmp	r2, #0
 8002d54:	d101      	bne.n	8002d5a <ETH_SetMACConfig+0x172>
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	e000      	b.n	8002d5c <ETH_SetMACConfig+0x174>
 8002d5a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002d5c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d62:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d6e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002d72:	4013      	ands	r3, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	68f9      	ldr	r1, [r7, #12]
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002d84:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002d8c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f023 0103 	bic.w	r1, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002db2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002dce:	2a00      	cmp	r2, #0
 8002dd0:	d101      	bne.n	8002dd6 <ETH_SetMACConfig+0x1ee>
 8002dd2:	2240      	movs	r2, #64	; 0x40
 8002dd4:	e000      	b.n	8002dd8 <ETH_SetMACConfig+0x1f0>
 8002dd6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002dd8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002de0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002de2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002dea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002df8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	00048083 	.word	0x00048083
 8002e18:	c0f88000 	.word	0xc0f88000
 8002e1c:	fffffef0 	.word	0xfffffef0

08002e20 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <ETH_SetDMAConfig+0xf8>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	6809      	ldr	r1, [r1, #0]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002e46:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	791b      	ldrb	r3, [r3, #4]
 8002e4c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e52:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	7b1b      	ldrb	r3, [r3, #12]
 8002e58:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	f241 0304 	movw	r3, #4100	; 0x1004
 8002e66:	4413      	add	r3, r2
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <ETH_SetDMAConfig+0xfc>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6811      	ldr	r1, [r2, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	f241 0304 	movw	r3, #4100	; 0x1004
 8002e7a:	440b      	add	r3, r1
 8002e7c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	7b5b      	ldrb	r3, [r3, #13]
 8002e82:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <ETH_SetDMAConfig+0x100>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6811      	ldr	r1, [r2, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002ea6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	7d1b      	ldrb	r3, [r3, #20]
 8002eb0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002eb2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	7f5b      	ldrb	r3, [r3, #29]
 8002eb8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	f241 1304 	movw	r3, #4356	; 0x1104
 8002ec6:	4413      	add	r3, r2
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <ETH_SetDMAConfig+0x104>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6811      	ldr	r1, [r2, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	f241 1304 	movw	r3, #4356	; 0x1104
 8002eda:	440b      	add	r3, r1
 8002edc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	7f1b      	ldrb	r3, [r3, #28]
 8002ee2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	f241 1308 	movw	r3, #4360	; 0x1108
 8002ef4:	4413      	add	r3, r2
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <ETH_SetDMAConfig+0x108>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6811      	ldr	r1, [r2, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	f241 1308 	movw	r3, #4360	; 0x1108
 8002f08:	440b      	add	r3, r1
 8002f0a:	601a      	str	r2, [r3, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	ffff87fd 	.word	0xffff87fd
 8002f1c:	ffff2ffe 	.word	0xffff2ffe
 8002f20:	fffec000 	.word	0xfffec000
 8002f24:	ffc0efef 	.word	0xffc0efef
 8002f28:	7fc0ffff 	.word	0x7fc0ffff

08002f2c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b0a4      	sub	sp, #144	; 0x90
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f6c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002f84:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002f88:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002f90:	2300      	movs	r3, #0
 8002f92:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002fd6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002fdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fe0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003006:	2300      	movs	r3, #0
 8003008:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800300a:	2301      	movs	r3, #1
 800300c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003014:	4619      	mov	r1, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fde6 	bl	8002be8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800301c:	2301      	movs	r3, #1
 800301e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003020:	2301      	movs	r3, #1
 8003022:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003024:	2300      	movs	r3, #0
 8003026:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003028:	2300      	movs	r3, #0
 800302a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800302e:	2300      	movs	r3, #0
 8003030:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003032:	2300      	movs	r3, #0
 8003034:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003036:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800303a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800303c:	2300      	movs	r3, #0
 800303e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003040:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003044:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800304c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003052:	f107 0308 	add.w	r3, r7, #8
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff fee1 	bl	8002e20 <ETH_SetDMAConfig>
}
 800305e:	bf00      	nop
 8003060:	3790      	adds	r7, #144	; 0x90
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003078:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003080:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003082:	f001 fe23 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8003086:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4a1e      	ldr	r2, [pc, #120]	; (8003104 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d908      	bls.n	80030a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d804      	bhi.n	80030a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e027      	b.n	80030f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4a18      	ldr	r2, [pc, #96]	; (8003108 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d908      	bls.n	80030bc <ETH_MAC_MDIO_ClkConfig+0x54>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4a17      	ldr	r2, [pc, #92]	; (800310c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d204      	bcs.n	80030bc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	e01a      	b.n	80030f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4a13      	ldr	r2, [pc, #76]	; (800310c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d303      	bcc.n	80030cc <ETH_MAC_MDIO_ClkConfig+0x64>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d911      	bls.n	80030f0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4a10      	ldr	r2, [pc, #64]	; (8003110 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d908      	bls.n	80030e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4a0f      	ldr	r2, [pc, #60]	; (8003114 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d804      	bhi.n	80030e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	e005      	b.n	80030f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	e000      	b.n	80030f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80030f0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	01312cff 	.word	0x01312cff
 8003108:	02160ebf 	.word	0x02160ebf
 800310c:	03938700 	.word	0x03938700
 8003110:	05f5e0ff 	.word	0x05f5e0ff
 8003114:	08f0d17f 	.word	0x08f0d17f

08003118 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e01d      	b.n	8003162 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68d9      	ldr	r1, [r3, #12]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4613      	mov	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	440b      	add	r3, r1
 8003136:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2200      	movs	r2, #0
 8003142:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2200      	movs	r2, #0
 800314e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	3206      	adds	r2, #6
 8003158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3301      	adds	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b03      	cmp	r3, #3
 8003166:	d9de      	bls.n	8003126 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	f241 132c 	movw	r3, #4396	; 0x112c
 8003176:	4413      	add	r3, r2
 8003178:	2203      	movs	r2, #3
 800317a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68d9      	ldr	r1, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	f241 1314 	movw	r3, #4372	; 0x1114
 8003188:	4413      	add	r3, r2
 800318a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003198:	601a      	str	r2, [r3, #0]
}
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	e024      	b.n	80031fe <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6919      	ldr	r1, [r3, #16]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2200      	movs	r2, #0
 80031e8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3310      	adds	r3, #16
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3301      	adds	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d9d7      	bls.n	80031b4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	f241 1330 	movw	r3, #4400	; 0x1130
 800322a:	4413      	add	r3, r2
 800322c:	2203      	movs	r2, #3
 800322e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6919      	ldr	r1, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	f241 131c 	movw	r3, #4380	; 0x111c
 800323c:	4413      	add	r3, r2
 800323e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	f241 1328 	movw	r3, #4392	; 0x1128
 8003250:	4413      	add	r3, r2
 8003252:	6019      	str	r1, [r3, #0]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003260:	b480      	push	{r7}
 8003262:	b08d      	sub	sp, #52	; 0x34
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3318      	adds	r3, #24
 8003270:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 800327e:	2300      	movs	r3, #0
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800328a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800329e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032a2:	d007      	beq.n	80032b4 <ETH_Prepare_Tx_Descriptors+0x54>
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	3304      	adds	r3, #4
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80032b4:	2302      	movs	r3, #2
 80032b6:	e24a      	b.n	800374e <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d044      	beq.n	800334e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	4b72      	ldr	r3, [pc, #456]	; (8003494 <ETH_Prepare_Tx_Descriptors+0x234>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d0:	431a      	orrs	r2, r3
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d027      	beq.n	800334e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	b29a      	uxth	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	431a      	orrs	r2, r3
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	431a      	orrs	r2, r3
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800333c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800334c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00e      	beq.n	8003378 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	4b4e      	ldr	r3, [pc, #312]	; (8003498 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003360:	4013      	ands	r3, r2
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	6992      	ldr	r2, [r2, #24]
 8003366:	431a      	orrs	r2, r3
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d105      	bne.n	8003390 <ETH_Prepare_Tx_Descriptors+0x130>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d030      	beq.n	80033f2 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	3301      	adds	r3, #1
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d902      	bls.n	80033ba <ETH_Prepare_Tx_Descriptors+0x15a>
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	3b04      	subs	r3, #4
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c2:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	3301      	adds	r3, #1
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d6:	d10c      	bne.n	80033f2 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80033ee:	2302      	movs	r3, #2
 80033f0:	e1ad      	b.n	800374e <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	3301      	adds	r3, #1
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	4b24      	ldr	r3, [pc, #144]	; (8003498 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003408:	4013      	ands	r3, r2
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	6852      	ldr	r2, [r2, #4]
 800340e:	431a      	orrs	r2, r3
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d012      	beq.n	8003442 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	4b1a      	ldr	r3, [pc, #104]	; (800349c <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003432:	4013      	ands	r3, r2
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	6852      	ldr	r2, [r2, #4]
 8003438:	0412      	lsls	r2, r2, #16
 800343a:	431a      	orrs	r2, r3
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	e008      	b.n	8003454 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	2200      	movs	r2, #0
 8003446:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	4b13      	ldr	r3, [pc, #76]	; (800349c <ETH_Prepare_Tx_Descriptors+0x23c>)
 800344e:	4013      	ands	r3, r2
 8003450:	6a3a      	ldr	r2, [r7, #32]
 8003452:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	d021      	beq.n	80034a4 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	04db      	lsls	r3, r3, #19
 800346e:	431a      	orrs	r2, r3
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <ETH_Prepare_Tx_Descriptors+0x240>)
 800347a:	4013      	ands	r3, r2
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	69d2      	ldr	r2, [r2, #28]
 8003480:	431a      	orrs	r2, r3
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	e02e      	b.n	80034f2 <ETH_Prepare_Tx_Descriptors+0x292>
 8003494:	ffff0000 	.word	0xffff0000
 8003498:	ffffc000 	.word	0xffffc000
 800349c:	c000ffff 	.word	0xc000ffff
 80034a0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	4b93      	ldr	r3, [pc, #588]	; (80036f8 <ETH_Prepare_Tx_Descriptors+0x498>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	6852      	ldr	r2, [r2, #4]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	431a      	orrs	r2, r3
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80cb 	beq.w	80036d8 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	431a      	orrs	r2, r3
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003554:	e0c0      	b.n	80036d8 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	3301      	adds	r3, #1
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	2b03      	cmp	r3, #3
 800356c:	d902      	bls.n	8003574 <ETH_Prepare_Tx_Descriptors+0x314>
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	3b04      	subs	r3, #4
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003596:	d007      	beq.n	80035a8 <ETH_Prepare_Tx_Descriptors+0x348>
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	3304      	adds	r3, #4
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d026      	beq.n	80035f6 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	e016      	b.n	80035ea <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	3301      	adds	r3, #1
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d902      	bls.n	80035da <ETH_Prepare_Tx_Descriptors+0x37a>
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	3b04      	subs	r3, #4
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e2:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	3301      	adds	r3, #1
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d3e4      	bcc.n	80035bc <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 80035f2:	2302      	movs	r3, #2
 80035f4:	e0ab      	b.n	800374e <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	3301      	adds	r3, #1
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003612:	4013      	ands	r3, r2
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	6852      	ldr	r2, [r2, #4]
 8003618:	431a      	orrs	r2, r3
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d012      	beq.n	800364c <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	4b31      	ldr	r3, [pc, #196]	; (8003700 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800363c:	4013      	ands	r3, r2
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	6852      	ldr	r2, [r2, #4]
 8003642:	0412      	lsls	r2, r2, #16
 8003644:	431a      	orrs	r2, r3
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	e008      	b.n	800365e <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	2200      	movs	r2, #0
 8003650:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	4b2a      	ldr	r3, [pc, #168]	; (8003700 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003658:	4013      	ands	r3, r2
 800365a:	6a3a      	ldr	r2, [r7, #32]
 800365c:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00f      	beq.n	800368a <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	4b25      	ldr	r3, [pc, #148]	; (8003704 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003670:	4013      	ands	r3, r2
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	69d2      	ldr	r2, [r2, #28]
 8003676:	431a      	orrs	r2, r3
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	e017      	b.n	80036ba <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003690:	4013      	ands	r3, r2
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	6852      	ldr	r2, [r2, #4]
 8003696:	431a      	orrs	r2, r3
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	3301      	adds	r3, #1
 80036be:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f47f af3a 	bne.w	8003556 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00f      	beq.n	8003708 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	e00e      	b.n	8003714 <ETH_Prepare_Tx_Descriptors+0x4b4>
 80036f6:	bf00      	nop
 80036f8:	ffff8000 	.word	0xffff8000
 80036fc:	ffffc000 	.word	0xffffc000
 8003700:	c000ffff 	.word	0xc000ffff
 8003704:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003724:	6979      	ldr	r1, [r7, #20]
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	3304      	adds	r3, #4
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003734:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003736:	b672      	cpsid	i
}
 8003738:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4413      	add	r3, r2
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003748:	b662      	cpsie	i
}
 800374a:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3734      	adds	r7, #52	; 0x34
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop

0800375c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800375c:	b480      	push	{r7}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800376a:	4b89      	ldr	r3, [pc, #548]	; (8003990 <HAL_GPIO_Init+0x234>)
 800376c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800376e:	e194      	b.n	8003a9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	2101      	movs	r1, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 8186 	beq.w	8003a94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d005      	beq.n	80037a0 <HAL_GPIO_Init+0x44>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d130      	bne.n	8003802 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	2203      	movs	r2, #3
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037d6:	2201      	movs	r2, #1
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 0201 	and.w	r2, r3, #1
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b03      	cmp	r3, #3
 800380c:	d017      	beq.n	800383e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	2203      	movs	r2, #3
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d123      	bne.n	8003892 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	08da      	lsrs	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3208      	adds	r2, #8
 8003852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	220f      	movs	r2, #15
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	08da      	lsrs	r2, r3, #3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3208      	adds	r2, #8
 800388c:	69b9      	ldr	r1, [r7, #24]
 800388e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	2203      	movs	r2, #3
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0203 	and.w	r2, r3, #3
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80e0 	beq.w	8003a94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d4:	4b2f      	ldr	r3, [pc, #188]	; (8003994 <HAL_GPIO_Init+0x238>)
 80038d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038da:	4a2e      	ldr	r2, [pc, #184]	; (8003994 <HAL_GPIO_Init+0x238>)
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80038e4:	4b2b      	ldr	r3, [pc, #172]	; (8003994 <HAL_GPIO_Init+0x238>)
 80038e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038f2:	4a29      	ldr	r2, [pc, #164]	; (8003998 <HAL_GPIO_Init+0x23c>)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	3302      	adds	r3, #2
 80038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a20      	ldr	r2, [pc, #128]	; (800399c <HAL_GPIO_Init+0x240>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d052      	beq.n	80039c4 <HAL_GPIO_Init+0x268>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <HAL_GPIO_Init+0x244>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d031      	beq.n	800398a <HAL_GPIO_Init+0x22e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <HAL_GPIO_Init+0x248>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d02b      	beq.n	8003986 <HAL_GPIO_Init+0x22a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <HAL_GPIO_Init+0x24c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d025      	beq.n	8003982 <HAL_GPIO_Init+0x226>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <HAL_GPIO_Init+0x250>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01f      	beq.n	800397e <HAL_GPIO_Init+0x222>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a1b      	ldr	r2, [pc, #108]	; (80039b0 <HAL_GPIO_Init+0x254>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d019      	beq.n	800397a <HAL_GPIO_Init+0x21e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1a      	ldr	r2, [pc, #104]	; (80039b4 <HAL_GPIO_Init+0x258>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <HAL_GPIO_Init+0x21a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a19      	ldr	r2, [pc, #100]	; (80039b8 <HAL_GPIO_Init+0x25c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00d      	beq.n	8003972 <HAL_GPIO_Init+0x216>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_GPIO_Init+0x260>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <HAL_GPIO_Init+0x212>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a17      	ldr	r2, [pc, #92]	; (80039c0 <HAL_GPIO_Init+0x264>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d101      	bne.n	800396a <HAL_GPIO_Init+0x20e>
 8003966:	2309      	movs	r3, #9
 8003968:	e02d      	b.n	80039c6 <HAL_GPIO_Init+0x26a>
 800396a:	230a      	movs	r3, #10
 800396c:	e02b      	b.n	80039c6 <HAL_GPIO_Init+0x26a>
 800396e:	2308      	movs	r3, #8
 8003970:	e029      	b.n	80039c6 <HAL_GPIO_Init+0x26a>
 8003972:	2307      	movs	r3, #7
 8003974:	e027      	b.n	80039c6 <HAL_GPIO_Init+0x26a>
 8003976:	2306      	movs	r3, #6
 8003978:	e025      	b.n	80039c6 <HAL_GPIO_Init+0x26a>
 800397a:	2305      	movs	r3, #5
 800397c:	e023      	b.n	80039c6 <HAL_GPIO_Init+0x26a>
 800397e:	2304      	movs	r3, #4
 8003980:	e021      	b.n	80039c6 <HAL_GPIO_Init+0x26a>
 8003982:	2303      	movs	r3, #3
 8003984:	e01f      	b.n	80039c6 <HAL_GPIO_Init+0x26a>
 8003986:	2302      	movs	r3, #2
 8003988:	e01d      	b.n	80039c6 <HAL_GPIO_Init+0x26a>
 800398a:	2301      	movs	r3, #1
 800398c:	e01b      	b.n	80039c6 <HAL_GPIO_Init+0x26a>
 800398e:	bf00      	nop
 8003990:	58000080 	.word	0x58000080
 8003994:	58024400 	.word	0x58024400
 8003998:	58000400 	.word	0x58000400
 800399c:	58020000 	.word	0x58020000
 80039a0:	58020400 	.word	0x58020400
 80039a4:	58020800 	.word	0x58020800
 80039a8:	58020c00 	.word	0x58020c00
 80039ac:	58021000 	.word	0x58021000
 80039b0:	58021400 	.word	0x58021400
 80039b4:	58021800 	.word	0x58021800
 80039b8:	58021c00 	.word	0x58021c00
 80039bc:	58022000 	.word	0x58022000
 80039c0:	58022400 	.word	0x58022400
 80039c4:	2300      	movs	r3, #0
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	f002 0203 	and.w	r2, r2, #3
 80039cc:	0092      	lsls	r2, r2, #2
 80039ce:	4093      	lsls	r3, r2
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d6:	4938      	ldr	r1, [pc, #224]	; (8003ab8 <HAL_GPIO_Init+0x35c>)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	3302      	adds	r3, #2
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	3301      	adds	r3, #1
 8003a98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f47f ae63 	bne.w	8003770 <HAL_GPIO_Init+0x14>
  }
}
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	3724      	adds	r7, #36	; 0x24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	58000400 	.word	0x58000400

08003abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003acc:	787b      	ldrb	r3, [r7, #1]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ad2:	887a      	ldrh	r2, [r7, #2]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ad8:	e003      	b.n	8003ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ada:	887b      	ldrh	r3, [r7, #2]
 8003adc:	041a      	lsls	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	619a      	str	r2, [r3, #24]
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af0:	b08f      	sub	sp, #60	; 0x3c
 8003af2:	af0a      	add	r7, sp, #40	; 0x28
 8003af4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e116      	b.n	8003d2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fb72 	bl	8001204 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2203      	movs	r2, #3
 8003b24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f004 f8d6 	bl	8007cf0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	687e      	ldr	r6, [r7, #4]
 8003b4c:	466d      	mov	r5, sp
 8003b4e:	f106 0410 	add.w	r4, r6, #16
 8003b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b62:	1d33      	adds	r3, r6, #4
 8003b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b66:	6838      	ldr	r0, [r7, #0]
 8003b68:	f004 f854 	bl	8007c14 <USB_CoreInit>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0d7      	b.n	8003d2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f004 f8c4 	bl	8007d12 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
 8003b8e:	e04a      	b.n	8003c26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	333d      	adds	r3, #61	; 0x3d
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ba4:	7bfa      	ldrb	r2, [r7, #15]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	333c      	adds	r3, #60	; 0x3c
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bb8:	7bfa      	ldrb	r2, [r7, #15]
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	b298      	uxth	r0, r3
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3342      	adds	r3, #66	; 0x42
 8003bcc:	4602      	mov	r2, r0
 8003bce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bd0:	7bfa      	ldrb	r2, [r7, #15]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	333f      	adds	r3, #63	; 0x3f
 8003be0:	2200      	movs	r2, #0
 8003be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003be4:	7bfa      	ldrb	r2, [r7, #15]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3344      	adds	r3, #68	; 0x44
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	3348      	adds	r3, #72	; 0x48
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	3350      	adds	r3, #80	; 0x50
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	3301      	adds	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
 8003c26:	7bfa      	ldrb	r2, [r7, #15]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d3af      	bcc.n	8003b90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	e044      	b.n	8003cc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c78:	7bfa      	ldrb	r2, [r7, #15]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c8e:	7bfa      	ldrb	r2, [r7, #15]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ca4:	7bfa      	ldrb	r2, [r7, #15]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	7bfa      	ldrb	r2, [r7, #15]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d3b5      	bcc.n	8003c36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	687e      	ldr	r6, [r7, #4]
 8003cd2:	466d      	mov	r5, sp
 8003cd4:	f106 0410 	add.w	r4, r6, #16
 8003cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ce0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ce4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ce8:	1d33      	adds	r3, r6, #4
 8003cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cec:	6838      	ldr	r0, [r7, #0]
 8003cee:	f004 f85d 	bl	8007dac <USB_DevInit>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e014      	b.n	8003d2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d102      	bne.n	8003d22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f80b 	bl	8003d38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f004 fa17 	bl	800815a <USB_DevDisconnect>

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_PCDEx_ActivateLPM+0x44>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	10000003 	.word	0x10000003

08003d80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <HAL_PWREx_ConfigSupply+0x70>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d00a      	beq.n	8003daa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d94:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <HAL_PWREx_ConfigSupply+0x70>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d001      	beq.n	8003da6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e01f      	b.n	8003de6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e01d      	b.n	8003de6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003daa:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_PWREx_ConfigSupply+0x70>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f023 0207 	bic.w	r2, r3, #7
 8003db2:	490f      	ldr	r1, [pc, #60]	; (8003df0 <HAL_PWREx_ConfigSupply+0x70>)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003dba:	f7fd fc77 	bl	80016ac <HAL_GetTick>
 8003dbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dc0:	e009      	b.n	8003dd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003dc2:	f7fd fc73 	bl	80016ac <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd0:	d901      	bls.n	8003dd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e007      	b.n	8003de6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_PWREx_ConfigSupply+0x70>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de2:	d1ee      	bne.n	8003dc2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	58024800 	.word	0x58024800

08003df4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e02:	60d3      	str	r3, [r2, #12]
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	58024800 	.word	0x58024800

08003e14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	; 0x30
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f000 bc1c 	b.w	8004660 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8087 	beq.w	8003f44 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e36:	4b9e      	ldr	r3, [pc, #632]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e40:	4b9b      	ldr	r3, [pc, #620]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	2b10      	cmp	r3, #16
 8003e4a:	d007      	beq.n	8003e5c <HAL_RCC_OscConfig+0x48>
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	2b18      	cmp	r3, #24
 8003e50:	d110      	bne.n	8003e74 <HAL_RCC_OscConfig+0x60>
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d10b      	bne.n	8003e74 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	4b94      	ldr	r3, [pc, #592]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d06c      	beq.n	8003f42 <HAL_RCC_OscConfig+0x12e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d168      	bne.n	8003f42 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e3f5      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7c:	d106      	bne.n	8003e8c <HAL_RCC_OscConfig+0x78>
 8003e7e:	4b8c      	ldr	r3, [pc, #560]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a8b      	ldr	r2, [pc, #556]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e02e      	b.n	8003eea <HAL_RCC_OscConfig+0xd6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10c      	bne.n	8003eae <HAL_RCC_OscConfig+0x9a>
 8003e94:	4b86      	ldr	r3, [pc, #536]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a85      	ldr	r2, [pc, #532]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b83      	ldr	r3, [pc, #524]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a82      	ldr	r2, [pc, #520]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	e01d      	b.n	8003eea <HAL_RCC_OscConfig+0xd6>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eb6:	d10c      	bne.n	8003ed2 <HAL_RCC_OscConfig+0xbe>
 8003eb8:	4b7d      	ldr	r3, [pc, #500]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a7c      	ldr	r2, [pc, #496]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	4b7a      	ldr	r3, [pc, #488]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a79      	ldr	r2, [pc, #484]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e00b      	b.n	8003eea <HAL_RCC_OscConfig+0xd6>
 8003ed2:	4b77      	ldr	r3, [pc, #476]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a76      	ldr	r2, [pc, #472]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b74      	ldr	r3, [pc, #464]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a73      	ldr	r2, [pc, #460]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d013      	beq.n	8003f1a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fd fbdb 	bl	80016ac <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003efa:	f7fd fbd7 	bl	80016ac <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b64      	cmp	r3, #100	; 0x64
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e3a9      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f0c:	4b68      	ldr	r3, [pc, #416]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0xe6>
 8003f18:	e014      	b.n	8003f44 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7fd fbc7 	bl	80016ac <HAL_GetTick>
 8003f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f22:	f7fd fbc3 	bl	80016ac <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b64      	cmp	r3, #100	; 0x64
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e395      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f34:	4b5e      	ldr	r3, [pc, #376]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f0      	bne.n	8003f22 <HAL_RCC_OscConfig+0x10e>
 8003f40:	e000      	b.n	8003f44 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80ca 	beq.w	80040e6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f52:	4b57      	ldr	r3, [pc, #348]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f5a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f5c:	4b54      	ldr	r3, [pc, #336]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <HAL_RCC_OscConfig+0x164>
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2b18      	cmp	r3, #24
 8003f6c:	d156      	bne.n	800401c <HAL_RCC_OscConfig+0x208>
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d151      	bne.n	800401c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f78:	4b4d      	ldr	r3, [pc, #308]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_OscConfig+0x17c>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e367      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f90:	4b47      	ldr	r3, [pc, #284]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 0219 	bic.w	r2, r3, #25
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4944      	ldr	r1, [pc, #272]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fa2:	f7fd fb83 	bl	80016ac <HAL_GetTick>
 8003fa6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003faa:	f7fd fb7f 	bl	80016ac <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e351      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fbc:	4b3c      	ldr	r3, [pc, #240]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc8:	f7fd fba0 	bl	800170c <HAL_GetREVID>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d817      	bhi.n	8004006 <HAL_RCC_OscConfig+0x1f2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d108      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x1dc>
 8003fde:	4b34      	ldr	r3, [pc, #208]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003fe6:	4a32      	ldr	r2, [pc, #200]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fee:	e07a      	b.n	80040e6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff0:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	031b      	lsls	r3, r3, #12
 8003ffe:	492c      	ldr	r1, [pc, #176]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8004000:	4313      	orrs	r3, r2
 8004002:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004004:	e06f      	b.n	80040e6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004006:	4b2a      	ldr	r3, [pc, #168]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	061b      	lsls	r3, r3, #24
 8004014:	4926      	ldr	r1, [pc, #152]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8004016:	4313      	orrs	r3, r2
 8004018:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800401a:	e064      	b.n	80040e6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d047      	beq.n	80040b4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004024:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 0219 	bic.w	r2, r3, #25
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	491f      	ldr	r1, [pc, #124]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004036:	f7fd fb39 	bl	80016ac <HAL_GetTick>
 800403a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800403e:	f7fd fb35 	bl	80016ac <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e307      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405c:	f7fd fb56 	bl	800170c <HAL_GetREVID>
 8004060:	4603      	mov	r3, r0
 8004062:	f241 0203 	movw	r2, #4099	; 0x1003
 8004066:	4293      	cmp	r3, r2
 8004068:	d817      	bhi.n	800409a <HAL_RCC_OscConfig+0x286>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b40      	cmp	r3, #64	; 0x40
 8004070:	d108      	bne.n	8004084 <HAL_RCC_OscConfig+0x270>
 8004072:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800407a:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 800407c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004080:	6053      	str	r3, [r2, #4]
 8004082:	e030      	b.n	80040e6 <HAL_RCC_OscConfig+0x2d2>
 8004084:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	031b      	lsls	r3, r3, #12
 8004092:	4907      	ldr	r1, [pc, #28]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
 8004098:	e025      	b.n	80040e6 <HAL_RCC_OscConfig+0x2d2>
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	4901      	ldr	r1, [pc, #4]	; (80040b0 <HAL_RCC_OscConfig+0x29c>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	604b      	str	r3, [r1, #4]
 80040ae:	e01a      	b.n	80040e6 <HAL_RCC_OscConfig+0x2d2>
 80040b0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b4:	4b9e      	ldr	r3, [pc, #632]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a9d      	ldr	r2, [pc, #628]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fd faf4 	bl	80016ac <HAL_GetTick>
 80040c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c8:	f7fd faf0 	bl	80016ac <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e2c2      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040da:	4b95      	ldr	r3, [pc, #596]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80a9 	beq.w	8004246 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f4:	4b8e      	ldr	r3, [pc, #568]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040fc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040fe:	4b8c      	ldr	r3, [pc, #560]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d007      	beq.n	800411a <HAL_RCC_OscConfig+0x306>
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b18      	cmp	r3, #24
 800410e:	d13a      	bne.n	8004186 <HAL_RCC_OscConfig+0x372>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d135      	bne.n	8004186 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800411a:	4b85      	ldr	r3, [pc, #532]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_RCC_OscConfig+0x31e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	2b80      	cmp	r3, #128	; 0x80
 800412c:	d001      	beq.n	8004132 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e296      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004132:	f7fd faeb 	bl	800170c <HAL_GetREVID>
 8004136:	4603      	mov	r3, r0
 8004138:	f241 0203 	movw	r2, #4099	; 0x1003
 800413c:	4293      	cmp	r3, r2
 800413e:	d817      	bhi.n	8004170 <HAL_RCC_OscConfig+0x35c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	2b20      	cmp	r3, #32
 8004146:	d108      	bne.n	800415a <HAL_RCC_OscConfig+0x346>
 8004148:	4b79      	ldr	r3, [pc, #484]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004150:	4a77      	ldr	r2, [pc, #476]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 8004152:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004156:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004158:	e075      	b.n	8004246 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800415a:	4b75      	ldr	r3, [pc, #468]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	069b      	lsls	r3, r3, #26
 8004168:	4971      	ldr	r1, [pc, #452]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 800416a:	4313      	orrs	r3, r2
 800416c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800416e:	e06a      	b.n	8004246 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004170:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	496c      	ldr	r1, [pc, #432]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004184:	e05f      	b.n	8004246 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d042      	beq.n	8004214 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800418e:	4b68      	ldr	r3, [pc, #416]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a67      	ldr	r2, [pc, #412]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 8004194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fd fa87 	bl	80016ac <HAL_GetTick>
 800419e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041a2:	f7fd fa83 	bl	80016ac <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e255      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041b4:	4b5e      	ldr	r3, [pc, #376]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0f0      	beq.n	80041a2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041c0:	f7fd faa4 	bl	800170c <HAL_GetREVID>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d817      	bhi.n	80041fe <HAL_RCC_OscConfig+0x3ea>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d108      	bne.n	80041e8 <HAL_RCC_OscConfig+0x3d4>
 80041d6:	4b56      	ldr	r3, [pc, #344]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80041de:	4a54      	ldr	r2, [pc, #336]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80041e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041e4:	6053      	str	r3, [r2, #4]
 80041e6:	e02e      	b.n	8004246 <HAL_RCC_OscConfig+0x432>
 80041e8:	4b51      	ldr	r3, [pc, #324]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	069b      	lsls	r3, r3, #26
 80041f6:	494e      	ldr	r1, [pc, #312]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	604b      	str	r3, [r1, #4]
 80041fc:	e023      	b.n	8004246 <HAL_RCC_OscConfig+0x432>
 80041fe:	4b4c      	ldr	r3, [pc, #304]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	4948      	ldr	r1, [pc, #288]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 800420e:	4313      	orrs	r3, r2
 8004210:	60cb      	str	r3, [r1, #12]
 8004212:	e018      	b.n	8004246 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004214:	4b46      	ldr	r3, [pc, #280]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a45      	ldr	r2, [pc, #276]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 800421a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd fa44 	bl	80016ac <HAL_GetTick>
 8004224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004228:	f7fd fa40 	bl	80016ac <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e212      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800423a:	4b3d      	ldr	r3, [pc, #244]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d036      	beq.n	80042c0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d019      	beq.n	800428e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425a:	4b35      	ldr	r3, [pc, #212]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 800425c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425e:	4a34      	ldr	r2, [pc, #208]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004266:	f7fd fa21 	bl	80016ac <HAL_GetTick>
 800426a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800426e:	f7fd fa1d 	bl	80016ac <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e1ef      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004280:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 8004282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x45a>
 800428c:	e018      	b.n	80042c0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800428e:	4b28      	ldr	r3, [pc, #160]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 8004290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004292:	4a27      	ldr	r2, [pc, #156]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fd fa07 	bl	80016ac <HAL_GetTick>
 800429e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a2:	f7fd fa03 	bl	80016ac <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e1d5      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042b4:	4b1e      	ldr	r3, [pc, #120]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80042b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f0      	bne.n	80042a2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d039      	beq.n	8004340 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d019      	beq.n	8004308 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042d4:	4b16      	ldr	r3, [pc, #88]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a15      	ldr	r2, [pc, #84]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80042da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042e0:	f7fd f9e4 	bl	80016ac <HAL_GetTick>
 80042e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042e8:	f7fd f9e0 	bl	80016ac <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e1b2      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042fa:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x4d4>
 8004306:	e01b      	b.n	8004340 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a08      	ldr	r2, [pc, #32]	; (8004330 <HAL_RCC_OscConfig+0x51c>)
 800430e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004312:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004314:	f7fd f9ca 	bl	80016ac <HAL_GetTick>
 8004318:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800431a:	e00b      	b.n	8004334 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800431c:	f7fd f9c6 	bl	80016ac <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d904      	bls.n	8004334 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e198      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
 800432e:	bf00      	nop
 8004330:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004334:	4ba3      	ldr	r3, [pc, #652]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1ed      	bne.n	800431c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8081 	beq.w	8004450 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800434e:	4b9e      	ldr	r3, [pc, #632]	; (80045c8 <HAL_RCC_OscConfig+0x7b4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a9d      	ldr	r2, [pc, #628]	; (80045c8 <HAL_RCC_OscConfig+0x7b4>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800435a:	f7fd f9a7 	bl	80016ac <HAL_GetTick>
 800435e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004362:	f7fd f9a3 	bl	80016ac <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b64      	cmp	r3, #100	; 0x64
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e175      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004374:	4b94      	ldr	r3, [pc, #592]	; (80045c8 <HAL_RCC_OscConfig+0x7b4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d106      	bne.n	8004396 <HAL_RCC_OscConfig+0x582>
 8004388:	4b8e      	ldr	r3, [pc, #568]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	4a8d      	ldr	r2, [pc, #564]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	6713      	str	r3, [r2, #112]	; 0x70
 8004394:	e02d      	b.n	80043f2 <HAL_RCC_OscConfig+0x5de>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x5a4>
 800439e:	4b89      	ldr	r3, [pc, #548]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4a88      	ldr	r2, [pc, #544]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70
 80043aa:	4b86      	ldr	r3, [pc, #536]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a85      	ldr	r2, [pc, #532]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80043b0:	f023 0304 	bic.w	r3, r3, #4
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70
 80043b6:	e01c      	b.n	80043f2 <HAL_RCC_OscConfig+0x5de>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b05      	cmp	r3, #5
 80043be:	d10c      	bne.n	80043da <HAL_RCC_OscConfig+0x5c6>
 80043c0:	4b80      	ldr	r3, [pc, #512]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80043c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c4:	4a7f      	ldr	r2, [pc, #508]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80043c6:	f043 0304 	orr.w	r3, r3, #4
 80043ca:	6713      	str	r3, [r2, #112]	; 0x70
 80043cc:	4b7d      	ldr	r3, [pc, #500]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	4a7c      	ldr	r2, [pc, #496]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6713      	str	r3, [r2, #112]	; 0x70
 80043d8:	e00b      	b.n	80043f2 <HAL_RCC_OscConfig+0x5de>
 80043da:	4b7a      	ldr	r3, [pc, #488]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	4a79      	ldr	r2, [pc, #484]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	6713      	str	r3, [r2, #112]	; 0x70
 80043e6:	4b77      	ldr	r3, [pc, #476]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4a76      	ldr	r2, [pc, #472]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80043ec:	f023 0304 	bic.w	r3, r3, #4
 80043f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d015      	beq.n	8004426 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fa:	f7fd f957 	bl	80016ac <HAL_GetTick>
 80043fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fd f953 	bl	80016ac <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e123      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004418:	4b6a      	ldr	r3, [pc, #424]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0ee      	beq.n	8004402 <HAL_RCC_OscConfig+0x5ee>
 8004424:	e014      	b.n	8004450 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004426:	f7fd f941 	bl	80016ac <HAL_GetTick>
 800442a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800442c:	e00a      	b.n	8004444 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800442e:	f7fd f93d 	bl	80016ac <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f241 3288 	movw	r2, #5000	; 0x1388
 800443c:	4293      	cmp	r3, r2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e10d      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004444:	4b5f      	ldr	r3, [pc, #380]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1ee      	bne.n	800442e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8102 	beq.w	800465e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800445a:	4b5a      	ldr	r3, [pc, #360]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004462:	2b18      	cmp	r3, #24
 8004464:	f000 80bd 	beq.w	80045e2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	2b02      	cmp	r3, #2
 800446e:	f040 8095 	bne.w	800459c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004472:	4b54      	ldr	r3, [pc, #336]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a53      	ldr	r2, [pc, #332]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800447c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fd f915 	bl	80016ac <HAL_GetTick>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004486:	f7fd f911 	bl	80016ac <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e0e3      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004498:	4b4a      	ldr	r3, [pc, #296]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a4:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80044a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044a8:	4b48      	ldr	r3, [pc, #288]	; (80045cc <HAL_RCC_OscConfig+0x7b8>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044b4:	0112      	lsls	r2, r2, #4
 80044b6:	430a      	orrs	r2, r1
 80044b8:	4942      	ldr	r1, [pc, #264]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	628b      	str	r3, [r1, #40]	; 0x28
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	3b01      	subs	r3, #1
 80044c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044cc:	3b01      	subs	r3, #1
 80044ce:	025b      	lsls	r3, r3, #9
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	3b01      	subs	r3, #1
 80044e8:	061b      	lsls	r3, r3, #24
 80044ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044ee:	4935      	ldr	r1, [pc, #212]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044f4:	4b33      	ldr	r3, [pc, #204]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	4a32      	ldr	r2, [pc, #200]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004500:	4b30      	ldr	r3, [pc, #192]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004504:	4b32      	ldr	r3, [pc, #200]	; (80045d0 <HAL_RCC_OscConfig+0x7bc>)
 8004506:	4013      	ands	r3, r2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800450c:	00d2      	lsls	r2, r2, #3
 800450e:	492d      	ldr	r1, [pc, #180]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004510:	4313      	orrs	r3, r2
 8004512:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004514:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f023 020c 	bic.w	r2, r3, #12
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	4928      	ldr	r1, [pc, #160]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004522:	4313      	orrs	r3, r2
 8004524:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004526:	4b27      	ldr	r3, [pc, #156]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	f023 0202 	bic.w	r2, r3, #2
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	4924      	ldr	r1, [pc, #144]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004538:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 800453e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004542:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004544:	4b1f      	ldr	r3, [pc, #124]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 800454a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004550:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800455a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800455c:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004568:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 800456e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fd f89a 	bl	80016ac <HAL_GetTick>
 8004578:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800457c:	f7fd f896 	bl	80016ac <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e068      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x768>
 800459a:	e060      	b.n	800465e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <HAL_RCC_OscConfig+0x7b0>)
 80045a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd f880 	bl	80016ac <HAL_GetTick>
 80045ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ae:	e011      	b.n	80045d4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fd f87c 	bl	80016ac <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d90a      	bls.n	80045d4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e04e      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
 80045c2:	bf00      	nop
 80045c4:	58024400 	.word	0x58024400
 80045c8:	58024800 	.word	0x58024800
 80045cc:	fffffc0c 	.word	0xfffffc0c
 80045d0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045d4:	4b24      	ldr	r3, [pc, #144]	; (8004668 <HAL_RCC_OscConfig+0x854>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e7      	bne.n	80045b0 <HAL_RCC_OscConfig+0x79c>
 80045e0:	e03d      	b.n	800465e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80045e2:	4b21      	ldr	r3, [pc, #132]	; (8004668 <HAL_RCC_OscConfig+0x854>)
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045e8:	4b1f      	ldr	r3, [pc, #124]	; (8004668 <HAL_RCC_OscConfig+0x854>)
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d031      	beq.n	800465a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f003 0203 	and.w	r2, r3, #3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d12a      	bne.n	800465a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d122      	bne.n	800465a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d11a      	bne.n	800465a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	0a5b      	lsrs	r3, r3, #9
 8004628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d111      	bne.n	800465a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	0c1b      	lsrs	r3, r3, #16
 800463a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d108      	bne.n	800465a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	0e1b      	lsrs	r3, r3, #24
 800464c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3730      	adds	r7, #48	; 0x30
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	58024400 	.word	0x58024400

0800466c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e19c      	b.n	80049ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004680:	4b8a      	ldr	r3, [pc, #552]	; (80048ac <HAL_RCC_ClockConfig+0x240>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d910      	bls.n	80046b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	4b87      	ldr	r3, [pc, #540]	; (80048ac <HAL_RCC_ClockConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 020f 	bic.w	r2, r3, #15
 8004696:	4985      	ldr	r1, [pc, #532]	; (80048ac <HAL_RCC_ClockConfig+0x240>)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	4313      	orrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b83      	ldr	r3, [pc, #524]	; (80048ac <HAL_RCC_ClockConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e184      	b.n	80049ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d010      	beq.n	80046de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	4b7b      	ldr	r3, [pc, #492]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d908      	bls.n	80046de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046cc:	4b78      	ldr	r3, [pc, #480]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	4975      	ldr	r1, [pc, #468]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d010      	beq.n	800470c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	4b70      	ldr	r3, [pc, #448]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d908      	bls.n	800470c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046fa:	4b6d      	ldr	r3, [pc, #436]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	496a      	ldr	r1, [pc, #424]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 8004708:	4313      	orrs	r3, r2
 800470a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b00      	cmp	r3, #0
 8004716:	d010      	beq.n	800473a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	4b64      	ldr	r3, [pc, #400]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004724:	429a      	cmp	r2, r3
 8004726:	d908      	bls.n	800473a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004728:	4b61      	ldr	r3, [pc, #388]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	495e      	ldr	r1, [pc, #376]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 8004736:	4313      	orrs	r3, r2
 8004738:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d010      	beq.n	8004768 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69da      	ldr	r2, [r3, #28]
 800474a:	4b59      	ldr	r3, [pc, #356]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004752:	429a      	cmp	r2, r3
 8004754:	d908      	bls.n	8004768 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004756:	4b56      	ldr	r3, [pc, #344]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	4953      	ldr	r1, [pc, #332]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 8004764:	4313      	orrs	r3, r2
 8004766:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d010      	beq.n	8004796 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	4b4d      	ldr	r3, [pc, #308]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	429a      	cmp	r2, r3
 8004782:	d908      	bls.n	8004796 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004784:	4b4a      	ldr	r3, [pc, #296]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f023 020f 	bic.w	r2, r3, #15
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4947      	ldr	r1, [pc, #284]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 8004792:	4313      	orrs	r3, r2
 8004794:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d055      	beq.n	800484e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80047a2:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	4940      	ldr	r1, [pc, #256]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d107      	bne.n	80047cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047bc:	4b3c      	ldr	r3, [pc, #240]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d121      	bne.n	800480c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0f6      	b.n	80049ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d107      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047d4:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d115      	bne.n	800480c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0ea      	b.n	80049ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d107      	bne.n	80047fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047ec:	4b30      	ldr	r3, [pc, #192]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0de      	b.n	80049ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047fc:	4b2c      	ldr	r3, [pc, #176]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0d6      	b.n	80049ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800480c:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f023 0207 	bic.w	r2, r3, #7
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4925      	ldr	r1, [pc, #148]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 800481a:	4313      	orrs	r3, r2
 800481c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481e:	f7fc ff45 	bl	80016ac <HAL_GetTick>
 8004822:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004824:	e00a      	b.n	800483c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004826:	f7fc ff41 	bl	80016ac <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f241 3288 	movw	r2, #5000	; 0x1388
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e0be      	b.n	80049ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483c:	4b1c      	ldr	r3, [pc, #112]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	429a      	cmp	r2, r3
 800484c:	d1eb      	bne.n	8004826 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d010      	beq.n	800487c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	429a      	cmp	r2, r3
 8004868:	d208      	bcs.n	800487c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800486a:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f023 020f 	bic.w	r2, r3, #15
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	490e      	ldr	r1, [pc, #56]	; (80048b0 <HAL_RCC_ClockConfig+0x244>)
 8004878:	4313      	orrs	r3, r2
 800487a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_RCC_ClockConfig+0x240>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d214      	bcs.n	80048b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b08      	ldr	r3, [pc, #32]	; (80048ac <HAL_RCC_ClockConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 020f 	bic.w	r2, r3, #15
 8004892:	4906      	ldr	r1, [pc, #24]	; (80048ac <HAL_RCC_ClockConfig+0x240>)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b04      	ldr	r3, [pc, #16]	; (80048ac <HAL_RCC_ClockConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e086      	b.n	80049ba <HAL_RCC_ClockConfig+0x34e>
 80048ac:	52002000 	.word	0x52002000
 80048b0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	4b3f      	ldr	r3, [pc, #252]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d208      	bcs.n	80048e2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048d0:	4b3c      	ldr	r3, [pc, #240]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	4939      	ldr	r1, [pc, #228]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d010      	beq.n	8004910 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d208      	bcs.n	8004910 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048fe:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	492e      	ldr	r1, [pc, #184]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 800490c:	4313      	orrs	r3, r2
 800490e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	d010      	beq.n	800493e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699a      	ldr	r2, [r3, #24]
 8004920:	4b28      	ldr	r3, [pc, #160]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004928:	429a      	cmp	r2, r3
 800492a:	d208      	bcs.n	800493e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800492c:	4b25      	ldr	r3, [pc, #148]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	4922      	ldr	r1, [pc, #136]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 800493a:	4313      	orrs	r3, r2
 800493c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d010      	beq.n	800496c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004956:	429a      	cmp	r2, r3
 8004958:	d208      	bcs.n	800496c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800495a:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	4917      	ldr	r1, [pc, #92]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 8004968:	4313      	orrs	r3, r2
 800496a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800496c:	f000 f834 	bl	80049d8 <HAL_RCC_GetSysClockFreq>
 8004970:	4602      	mov	r2, r0
 8004972:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	0a1b      	lsrs	r3, r3, #8
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	4912      	ldr	r1, [pc, #72]	; (80049c8 <HAL_RCC_ClockConfig+0x35c>)
 800497e:	5ccb      	ldrb	r3, [r1, r3]
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
 8004988:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800498a:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <HAL_RCC_ClockConfig+0x358>)
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	4a0d      	ldr	r2, [pc, #52]	; (80049c8 <HAL_RCC_ClockConfig+0x35c>)
 8004994:	5cd3      	ldrb	r3, [r2, r3]
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
 80049a0:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <HAL_RCC_ClockConfig+0x360>)
 80049a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049a4:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <HAL_RCC_ClockConfig+0x364>)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <HAL_RCC_ClockConfig+0x368>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fc f94c 	bl	8000c4c <HAL_InitTick>
 80049b4:	4603      	mov	r3, r0
 80049b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	58024400 	.word	0x58024400
 80049c8:	0801a508 	.word	0x0801a508
 80049cc:	24000004 	.word	0x24000004
 80049d0:	24000000 	.word	0x24000000
 80049d4:	24000008 	.word	0x24000008

080049d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	b089      	sub	sp, #36	; 0x24
 80049dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049de:	4bb3      	ldr	r3, [pc, #716]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049e6:	2b18      	cmp	r3, #24
 80049e8:	f200 8155 	bhi.w	8004c96 <HAL_RCC_GetSysClockFreq+0x2be>
 80049ec:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a59 	.word	0x08004a59
 80049f8:	08004c97 	.word	0x08004c97
 80049fc:	08004c97 	.word	0x08004c97
 8004a00:	08004c97 	.word	0x08004c97
 8004a04:	08004c97 	.word	0x08004c97
 8004a08:	08004c97 	.word	0x08004c97
 8004a0c:	08004c97 	.word	0x08004c97
 8004a10:	08004c97 	.word	0x08004c97
 8004a14:	08004a7f 	.word	0x08004a7f
 8004a18:	08004c97 	.word	0x08004c97
 8004a1c:	08004c97 	.word	0x08004c97
 8004a20:	08004c97 	.word	0x08004c97
 8004a24:	08004c97 	.word	0x08004c97
 8004a28:	08004c97 	.word	0x08004c97
 8004a2c:	08004c97 	.word	0x08004c97
 8004a30:	08004c97 	.word	0x08004c97
 8004a34:	08004a85 	.word	0x08004a85
 8004a38:	08004c97 	.word	0x08004c97
 8004a3c:	08004c97 	.word	0x08004c97
 8004a40:	08004c97 	.word	0x08004c97
 8004a44:	08004c97 	.word	0x08004c97
 8004a48:	08004c97 	.word	0x08004c97
 8004a4c:	08004c97 	.word	0x08004c97
 8004a50:	08004c97 	.word	0x08004c97
 8004a54:	08004a8b 	.word	0x08004a8b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a58:	4b94      	ldr	r3, [pc, #592]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d009      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a64:	4b91      	ldr	r3, [pc, #580]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	08db      	lsrs	r3, r3, #3
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	4a90      	ldr	r2, [pc, #576]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a70:	fa22 f303 	lsr.w	r3, r2, r3
 8004a74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004a76:	e111      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a78:	4b8d      	ldr	r3, [pc, #564]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a7a:	61bb      	str	r3, [r7, #24]
    break;
 8004a7c:	e10e      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a7e:	4b8d      	ldr	r3, [pc, #564]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a80:	61bb      	str	r3, [r7, #24]
    break;
 8004a82:	e10b      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004a84:	4b8c      	ldr	r3, [pc, #560]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a86:	61bb      	str	r3, [r7, #24]
    break;
 8004a88:	e108      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a8a:	4b88      	ldr	r3, [pc, #544]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a94:	4b85      	ldr	r3, [pc, #532]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a9e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004aa0:	4b82      	ldr	r3, [pc, #520]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004aaa:	4b80      	ldr	r3, [pc, #512]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aae:	08db      	lsrs	r3, r3, #3
 8004ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80e1 	beq.w	8004c90 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	f000 8083 	beq.w	8004bdc <HAL_RCC_GetSysClockFreq+0x204>
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	f200 80a1 	bhi.w	8004c20 <HAL_RCC_GetSysClockFreq+0x248>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x114>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d056      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004aea:	e099      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aec:	4b6f      	ldr	r3, [pc, #444]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02d      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004af8:	4b6c      	ldr	r3, [pc, #432]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	08db      	lsrs	r3, r3, #3
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	4a6b      	ldr	r2, [pc, #428]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
 8004b08:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	ee07 3a90 	vmov	s15, r3
 8004b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b22:	4b62      	ldr	r3, [pc, #392]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b36:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004b52:	e087      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004cc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b66:	4b51      	ldr	r3, [pc, #324]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b96:	e065      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004cc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004baa:	4b40      	ldr	r3, [pc, #256]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bbe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bda:	e043      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004cc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bee:	4b2f      	ldr	r3, [pc, #188]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c1e:	e021      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004cc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c32:	4b1e      	ldr	r3, [pc, #120]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c62:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004c64:	4b11      	ldr	r3, [pc, #68]	; (8004cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	0a5b      	lsrs	r3, r3, #9
 8004c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c6e:	3301      	adds	r3, #1
 8004c70:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	ee07 3a90 	vmov	s15, r3
 8004c78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c88:	ee17 3a90 	vmov	r3, s15
 8004c8c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004c8e:	e005      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61bb      	str	r3, [r7, #24]
    break;
 8004c94:	e002      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004c96:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c98:	61bb      	str	r3, [r7, #24]
    break;
 8004c9a:	bf00      	nop
  }

  return sysclockfreq;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3724      	adds	r7, #36	; 0x24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	58024400 	.word	0x58024400
 8004cb0:	03d09000 	.word	0x03d09000
 8004cb4:	003d0900 	.word	0x003d0900
 8004cb8:	007a1200 	.word	0x007a1200
 8004cbc:	46000000 	.word	0x46000000
 8004cc0:	4c742400 	.word	0x4c742400
 8004cc4:	4a742400 	.word	0x4a742400
 8004cc8:	4af42400 	.word	0x4af42400

08004ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004cd2:	f7ff fe81 	bl	80049d8 <HAL_RCC_GetSysClockFreq>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <HAL_RCC_GetHCLKFreq+0x50>)
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	490f      	ldr	r1, [pc, #60]	; (8004d20 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ce4:	5ccb      	ldrb	r3, [r1, r3]
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	fa22 f303 	lsr.w	r3, r2, r3
 8004cee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <HAL_RCC_GetHCLKFreq+0x50>)
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cfa:	5cd3      	ldrb	r3, [r2, r3]
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	fa22 f303 	lsr.w	r3, r2, r3
 8004d06:	4a07      	ldr	r2, [pc, #28]	; (8004d24 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d0a:	4a07      	ldr	r2, [pc, #28]	; (8004d28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d12:	681b      	ldr	r3, [r3, #0]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	58024400 	.word	0x58024400
 8004d20:	0801a508 	.word	0x0801a508
 8004d24:	24000004 	.word	0x24000004
 8004d28:	24000000 	.word	0x24000000

08004d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d30:	f7ff ffcc 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8004d34:	4602      	mov	r2, r0
 8004d36:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	091b      	lsrs	r3, r3, #4
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	4904      	ldr	r1, [pc, #16]	; (8004d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d42:	5ccb      	ldrb	r3, [r1, r3]
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	58024400 	.word	0x58024400
 8004d54:	0801a508 	.word	0x0801a508

08004d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d5c:	f7ff ffb6 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8004d60:	4602      	mov	r2, r0
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	4904      	ldr	r1, [pc, #16]	; (8004d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d6e:	5ccb      	ldrb	r3, [r1, r3]
 8004d70:	f003 031f 	and.w	r3, r3, #31
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	58024400 	.word	0x58024400
 8004d80:	0801a508 	.word	0x0801a508

08004d84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	223f      	movs	r2, #63	; 0x3f
 8004d92:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d94:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <HAL_RCC_GetClockConfig+0x7c>)
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0207 	and.w	r2, r3, #7
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004da0:	4b17      	ldr	r3, [pc, #92]	; (8004e00 <HAL_RCC_GetClockConfig+0x7c>)
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004dac:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <HAL_RCC_GetClockConfig+0x7c>)
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 020f 	and.w	r2, r3, #15
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004db8:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <HAL_RCC_GetClockConfig+0x7c>)
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004dc4:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <HAL_RCC_GetClockConfig+0x7c>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_RCC_GetClockConfig+0x7c>)
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004ddc:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <HAL_RCC_GetClockConfig+0x7c>)
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <HAL_RCC_GetClockConfig+0x80>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	601a      	str	r2, [r3, #0]
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	58024400 	.word	0x58024400
 8004e04:	52002000 	.word	0x52002000

08004e08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e10:	2300      	movs	r3, #0
 8004e12:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e14:	2300      	movs	r3, #0
 8004e16:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d03f      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e2c:	d02a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e32:	d824      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e38:	d018      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e3e:	d81e      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e48:	d007      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e4a:	e018      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4c:	4bab      	ldr	r3, [pc, #684]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	4aaa      	ldr	r2, [pc, #680]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e58:	e015      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	2102      	movs	r1, #2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f001 f9cf 	bl	8006204 <RCCEx_PLL2_Config>
 8004e66:	4603      	mov	r3, r0
 8004e68:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e6a:	e00c      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3324      	adds	r3, #36	; 0x24
 8004e70:	2102      	movs	r1, #2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f001 fa78 	bl	8006368 <RCCEx_PLL3_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e7c:	e003      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	75fb      	strb	r3, [r7, #23]
      break;
 8004e82:	e000      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d109      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e8c:	4b9b      	ldr	r3, [pc, #620]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e98:	4998      	ldr	r1, [pc, #608]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	650b      	str	r3, [r1, #80]	; 0x50
 8004e9e:	e001      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
 8004ea2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d03d      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d826      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ed5 	.word	0x08004ed5
 8004ec4:	08004ee3 	.word	0x08004ee3
 8004ec8:	08004ef5 	.word	0x08004ef5
 8004ecc:	08004f0d 	.word	0x08004f0d
 8004ed0:	08004f0d 	.word	0x08004f0d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed4:	4b89      	ldr	r3, [pc, #548]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	4a88      	ldr	r2, [pc, #544]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ede:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ee0:	e015      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 f98b 	bl	8006204 <RCCEx_PLL2_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ef2:	e00c      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3324      	adds	r3, #36	; 0x24
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 fa34 	bl	8006368 <RCCEx_PLL3_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f04:	e003      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0a:	e000      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f14:	4b79      	ldr	r3, [pc, #484]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f18:	f023 0207 	bic.w	r2, r3, #7
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	4976      	ldr	r1, [pc, #472]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	650b      	str	r3, [r1, #80]	; 0x50
 8004f26:	e001      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d042      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f40:	d02b      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f46:	d825      	bhi.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f48:	2bc0      	cmp	r3, #192	; 0xc0
 8004f4a:	d028      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f4c:	2bc0      	cmp	r3, #192	; 0xc0
 8004f4e:	d821      	bhi.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d016      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d81d      	bhi.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d007      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004f60:	e018      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f62:	4b66      	ldr	r3, [pc, #408]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	4a65      	ldr	r2, [pc, #404]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f6e:	e017      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3304      	adds	r3, #4
 8004f74:	2100      	movs	r1, #0
 8004f76:	4618      	mov	r0, r3
 8004f78:	f001 f944 	bl	8006204 <RCCEx_PLL2_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f80:	e00e      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3324      	adds	r3, #36	; 0x24
 8004f86:	2100      	movs	r1, #0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f001 f9ed 	bl	8006368 <RCCEx_PLL3_Config>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f92:	e005      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	75fb      	strb	r3, [r7, #23]
      break;
 8004f98:	e002      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e000      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004fa6:	4b55      	ldr	r3, [pc, #340]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004faa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb2:	4952      	ldr	r1, [pc, #328]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	650b      	str	r3, [r1, #80]	; 0x50
 8004fb8:	e001      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
 8004fbc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d049      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd4:	d030      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004fd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fda:	d82a      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004fdc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fe0:	d02c      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004fe2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fe6:	d824      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fec:	d018      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ff2:	d81e      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004ff8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ffc:	d007      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004ffe:	e018      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005000:	4b3e      	ldr	r3, [pc, #248]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	4a3d      	ldr	r2, [pc, #244]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800500a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800500c:	e017      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3304      	adds	r3, #4
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f001 f8f5 	bl	8006204 <RCCEx_PLL2_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800501e:	e00e      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3324      	adds	r3, #36	; 0x24
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f001 f99e 	bl	8006368 <RCCEx_PLL3_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005030:	e005      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	75fb      	strb	r3, [r7, #23]
      break;
 8005036:	e002      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005038:	bf00      	nop
 800503a:	e000      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800503c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800503e:	7dfb      	ldrb	r3, [r7, #23]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10a      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005044:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005052:	492a      	ldr	r1, [pc, #168]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005054:	4313      	orrs	r3, r2
 8005056:	658b      	str	r3, [r1, #88]	; 0x58
 8005058:	e001      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005066:	2b00      	cmp	r3, #0
 8005068:	d04c      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005070:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005074:	d030      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005076:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800507a:	d82a      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800507c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005080:	d02c      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005082:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005086:	d824      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800508c:	d018      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800508e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005092:	d81e      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800509c:	d007      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800509e:	e018      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a0:	4b16      	ldr	r3, [pc, #88]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	4a15      	ldr	r2, [pc, #84]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050ac:	e017      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3304      	adds	r3, #4
 80050b2:	2100      	movs	r1, #0
 80050b4:	4618      	mov	r0, r3
 80050b6:	f001 f8a5 	bl	8006204 <RCCEx_PLL2_Config>
 80050ba:	4603      	mov	r3, r0
 80050bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80050be:	e00e      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3324      	adds	r3, #36	; 0x24
 80050c4:	2100      	movs	r1, #0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f001 f94e 	bl	8006368 <RCCEx_PLL3_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050d0:	e005      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	75fb      	strb	r3, [r7, #23]
      break;
 80050d6:	e002      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80050dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10d      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050f2:	4902      	ldr	r1, [pc, #8]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	658b      	str	r3, [r1, #88]	; 0x58
 80050f8:	e004      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80050fa:	bf00      	nop
 80050fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d032      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005114:	2b30      	cmp	r3, #48	; 0x30
 8005116:	d01c      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005118:	2b30      	cmp	r3, #48	; 0x30
 800511a:	d817      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800511c:	2b20      	cmp	r3, #32
 800511e:	d00c      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005120:	2b20      	cmp	r3, #32
 8005122:	d813      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d016      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005128:	2b10      	cmp	r3, #16
 800512a:	d10f      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800512c:	4baf      	ldr	r3, [pc, #700]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	4aae      	ldr	r2, [pc, #696]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005136:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005138:	e00e      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3304      	adds	r3, #4
 800513e:	2102      	movs	r1, #2
 8005140:	4618      	mov	r0, r3
 8005142:	f001 f85f 	bl	8006204 <RCCEx_PLL2_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800514a:	e005      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
      break;
 8005150:	e002      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005152:	bf00      	nop
 8005154:	e000      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d109      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800515e:	4ba3      	ldr	r3, [pc, #652]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005162:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516a:	49a0      	ldr	r1, [pc, #640]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800516c:	4313      	orrs	r3, r2
 800516e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005170:	e001      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d047      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518a:	d030      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800518c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005190:	d82a      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005192:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005196:	d02c      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005198:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800519c:	d824      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800519e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a2:	d018      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80051a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a8:	d81e      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80051ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b2:	d007      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80051b4:	e018      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b6:	4b8d      	ldr	r3, [pc, #564]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	4a8c      	ldr	r2, [pc, #560]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051c2:	e017      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 f81a 	bl	8006204 <RCCEx_PLL2_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051d4:	e00e      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3324      	adds	r3, #36	; 0x24
 80051da:	2100      	movs	r1, #0
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 f8c3 	bl	8006368 <RCCEx_PLL3_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051e6:	e005      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	75fb      	strb	r3, [r7, #23]
      break;
 80051ec:	e002      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80051f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80051fa:	4b7c      	ldr	r3, [pc, #496]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80051fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005206:	4979      	ldr	r1, [pc, #484]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005208:	4313      	orrs	r3, r2
 800520a:	650b      	str	r3, [r1, #80]	; 0x50
 800520c:	e001      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d049      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005222:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005226:	d02e      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800522c:	d828      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800522e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005232:	d02a      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005234:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005238:	d822      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800523a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800523e:	d026      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005240:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005244:	d81c      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800524a:	d010      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800524c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005250:	d816      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01d      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525a:	d111      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3304      	adds	r3, #4
 8005260:	2101      	movs	r1, #1
 8005262:	4618      	mov	r0, r3
 8005264:	f000 ffce 	bl	8006204 <RCCEx_PLL2_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800526c:	e012      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3324      	adds	r3, #36	; 0x24
 8005272:	2101      	movs	r1, #1
 8005274:	4618      	mov	r0, r3
 8005276:	f001 f877 	bl	8006368 <RCCEx_PLL3_Config>
 800527a:	4603      	mov	r3, r0
 800527c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800527e:	e009      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	75fb      	strb	r3, [r7, #23]
      break;
 8005284:	e006      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005286:	bf00      	nop
 8005288:	e004      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800528a:	bf00      	nop
 800528c:	e002      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005294:	7dfb      	ldrb	r3, [r7, #23]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800529a:	4b54      	ldr	r3, [pc, #336]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800529c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a6:	4951      	ldr	r1, [pc, #324]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	650b      	str	r3, [r1, #80]	; 0x50
 80052ac:	e001      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d04b      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052c8:	d02e      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80052ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052ce:	d828      	bhi.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d4:	d02a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80052d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052da:	d822      	bhi.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052e0:	d026      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80052e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052e6:	d81c      	bhi.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ec:	d010      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80052ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f2:	d816      	bhi.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01d      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80052f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052fc:	d111      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3304      	adds	r3, #4
 8005302:	2101      	movs	r1, #1
 8005304:	4618      	mov	r0, r3
 8005306:	f000 ff7d 	bl	8006204 <RCCEx_PLL2_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800530e:	e012      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3324      	adds	r3, #36	; 0x24
 8005314:	2101      	movs	r1, #1
 8005316:	4618      	mov	r0, r3
 8005318:	f001 f826 	bl	8006368 <RCCEx_PLL3_Config>
 800531c:	4603      	mov	r3, r0
 800531e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005320:	e009      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	75fb      	strb	r3, [r7, #23]
      break;
 8005326:	e006      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005328:	bf00      	nop
 800532a:	e004      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800532c:	bf00      	nop
 800532e:	e002      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005330:	bf00      	nop
 8005332:	e000      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800533c:	4b2b      	ldr	r3, [pc, #172]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800533e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005340:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800534a:	4928      	ldr	r1, [pc, #160]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800534c:	4313      	orrs	r3, r2
 800534e:	658b      	str	r3, [r1, #88]	; 0x58
 8005350:	e001      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005352:	7dfb      	ldrb	r3, [r7, #23]
 8005354:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d02f      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536a:	d00e      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800536c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005370:	d814      	bhi.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d015      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800537a:	d10f      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537c:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	4a1a      	ldr	r2, [pc, #104]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005386:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005388:	e00c      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3304      	adds	r3, #4
 800538e:	2101      	movs	r1, #1
 8005390:	4618      	mov	r0, r3
 8005392:	f000 ff37 	bl	8006204 <RCCEx_PLL2_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800539a:	e003      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	75fb      	strb	r3, [r7, #23]
      break;
 80053a0:	e000      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80053a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053aa:	4b10      	ldr	r3, [pc, #64]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80053ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b6:	490d      	ldr	r1, [pc, #52]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	650b      	str	r3, [r1, #80]	; 0x50
 80053bc:	e001      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d033      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d81c      	bhi.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80053d6:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	08005417 	.word	0x08005417
 80053e0:	080053f1 	.word	0x080053f1
 80053e4:	080053ff 	.word	0x080053ff
 80053e8:	08005417 	.word	0x08005417
 80053ec:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f0:	4bb8      	ldr	r3, [pc, #736]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	4ab7      	ldr	r2, [pc, #732]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80053fc:	e00c      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3304      	adds	r3, #4
 8005402:	2102      	movs	r1, #2
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fefd 	bl	8006204 <RCCEx_PLL2_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800540e:	e003      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
      break;
 8005414:	e000      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800541e:	4bad      	ldr	r3, [pc, #692]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005422:	f023 0203 	bic.w	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	49aa      	ldr	r1, [pc, #680]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800542c:	4313      	orrs	r3, r2
 800542e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005430:	e001      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005432:	7dfb      	ldrb	r3, [r7, #23]
 8005434:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 8086 	beq.w	8005550 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005444:	4ba4      	ldr	r3, [pc, #656]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4aa3      	ldr	r2, [pc, #652]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800544a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005450:	f7fc f92c 	bl	80016ac <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005456:	e009      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005458:	f7fc f928 	bl	80016ac <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	; 0x64
 8005464:	d902      	bls.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	75fb      	strb	r3, [r7, #23]
        break;
 800546a:	e005      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800546c:	4b9a      	ldr	r3, [pc, #616]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0ef      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d166      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800547e:	4b95      	ldr	r3, [pc, #596]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005480:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005488:	4053      	eors	r3, r2
 800548a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548e:	2b00      	cmp	r3, #0
 8005490:	d013      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005492:	4b90      	ldr	r3, [pc, #576]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800549c:	4b8d      	ldr	r3, [pc, #564]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	4a8c      	ldr	r2, [pc, #560]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054a8:	4b8a      	ldr	r3, [pc, #552]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	4a89      	ldr	r2, [pc, #548]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80054b4:	4a87      	ldr	r2, [pc, #540]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c4:	d115      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fc f8f1 	bl	80016ac <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054cc:	e00b      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ce:	f7fc f8ed 	bl	80016ac <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054dc:	4293      	cmp	r3, r2
 80054de:	d902      	bls.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	75fb      	strb	r3, [r7, #23]
            break;
 80054e4:	e005      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054e6:	4b7b      	ldr	r3, [pc, #492]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0ed      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d126      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005506:	d10d      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005508:	4b72      	ldr	r3, [pc, #456]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005516:	0919      	lsrs	r1, r3, #4
 8005518:	4b70      	ldr	r3, [pc, #448]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800551a:	400b      	ands	r3, r1
 800551c:	496d      	ldr	r1, [pc, #436]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800551e:	4313      	orrs	r3, r2
 8005520:	610b      	str	r3, [r1, #16]
 8005522:	e005      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005524:	4b6b      	ldr	r3, [pc, #428]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	4a6a      	ldr	r2, [pc, #424]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800552a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800552e:	6113      	str	r3, [r2, #16]
 8005530:	4b68      	ldr	r3, [pc, #416]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800553a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553e:	4965      	ldr	r1, [pc, #404]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005540:	4313      	orrs	r3, r2
 8005542:	670b      	str	r3, [r1, #112]	; 0x70
 8005544:	e004      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005546:	7dfb      	ldrb	r3, [r7, #23]
 8005548:	75bb      	strb	r3, [r7, #22]
 800554a:	e001      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	7dfb      	ldrb	r3, [r7, #23]
 800554e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d07e      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005560:	2b28      	cmp	r3, #40	; 0x28
 8005562:	d867      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005564:	a201      	add	r2, pc, #4	; (adr r2, 800556c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556a:	bf00      	nop
 800556c:	0800563b 	.word	0x0800563b
 8005570:	08005635 	.word	0x08005635
 8005574:	08005635 	.word	0x08005635
 8005578:	08005635 	.word	0x08005635
 800557c:	08005635 	.word	0x08005635
 8005580:	08005635 	.word	0x08005635
 8005584:	08005635 	.word	0x08005635
 8005588:	08005635 	.word	0x08005635
 800558c:	08005611 	.word	0x08005611
 8005590:	08005635 	.word	0x08005635
 8005594:	08005635 	.word	0x08005635
 8005598:	08005635 	.word	0x08005635
 800559c:	08005635 	.word	0x08005635
 80055a0:	08005635 	.word	0x08005635
 80055a4:	08005635 	.word	0x08005635
 80055a8:	08005635 	.word	0x08005635
 80055ac:	08005623 	.word	0x08005623
 80055b0:	08005635 	.word	0x08005635
 80055b4:	08005635 	.word	0x08005635
 80055b8:	08005635 	.word	0x08005635
 80055bc:	08005635 	.word	0x08005635
 80055c0:	08005635 	.word	0x08005635
 80055c4:	08005635 	.word	0x08005635
 80055c8:	08005635 	.word	0x08005635
 80055cc:	0800563b 	.word	0x0800563b
 80055d0:	08005635 	.word	0x08005635
 80055d4:	08005635 	.word	0x08005635
 80055d8:	08005635 	.word	0x08005635
 80055dc:	08005635 	.word	0x08005635
 80055e0:	08005635 	.word	0x08005635
 80055e4:	08005635 	.word	0x08005635
 80055e8:	08005635 	.word	0x08005635
 80055ec:	0800563b 	.word	0x0800563b
 80055f0:	08005635 	.word	0x08005635
 80055f4:	08005635 	.word	0x08005635
 80055f8:	08005635 	.word	0x08005635
 80055fc:	08005635 	.word	0x08005635
 8005600:	08005635 	.word	0x08005635
 8005604:	08005635 	.word	0x08005635
 8005608:	08005635 	.word	0x08005635
 800560c:	0800563b 	.word	0x0800563b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3304      	adds	r3, #4
 8005614:	2101      	movs	r1, #1
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fdf4 	bl	8006204 <RCCEx_PLL2_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005620:	e00c      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3324      	adds	r3, #36	; 0x24
 8005626:	2101      	movs	r1, #1
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fe9d 	bl	8006368 <RCCEx_PLL3_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005632:	e003      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	75fb      	strb	r3, [r7, #23]
      break;
 8005638:	e000      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800563a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800563c:	7dfb      	ldrb	r3, [r7, #23]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005642:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800564e:	4921      	ldr	r1, [pc, #132]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005650:	4313      	orrs	r3, r2
 8005652:	654b      	str	r3, [r1, #84]	; 0x54
 8005654:	e001      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d03e      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566a:	2b05      	cmp	r3, #5
 800566c:	d820      	bhi.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800566e:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	080056b7 	.word	0x080056b7
 8005678:	0800568d 	.word	0x0800568d
 800567c:	0800569f 	.word	0x0800569f
 8005680:	080056b7 	.word	0x080056b7
 8005684:	080056b7 	.word	0x080056b7
 8005688:	080056b7 	.word	0x080056b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3304      	adds	r3, #4
 8005690:	2101      	movs	r1, #1
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fdb6 	bl	8006204 <RCCEx_PLL2_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800569c:	e00c      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3324      	adds	r3, #36	; 0x24
 80056a2:	2101      	movs	r1, #1
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fe5f 	bl	8006368 <RCCEx_PLL3_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80056ae:	e003      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	75fb      	strb	r3, [r7, #23]
      break;
 80056b4:	e000      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80056b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b8:	7dfb      	ldrb	r3, [r7, #23]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d110      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056be:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c2:	f023 0207 	bic.w	r2, r3, #7
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ca:	4902      	ldr	r1, [pc, #8]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	654b      	str	r3, [r1, #84]	; 0x54
 80056d0:	e008      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80056d2:	bf00      	nop
 80056d4:	58024400 	.word	0x58024400
 80056d8:	58024800 	.word	0x58024800
 80056dc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d039      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d820      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005743 	.word	0x08005743
 8005704:	08005719 	.word	0x08005719
 8005708:	0800572b 	.word	0x0800572b
 800570c:	08005743 	.word	0x08005743
 8005710:	08005743 	.word	0x08005743
 8005714:	08005743 	.word	0x08005743
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3304      	adds	r3, #4
 800571c:	2101      	movs	r1, #1
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fd70 	bl	8006204 <RCCEx_PLL2_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005728:	e00c      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3324      	adds	r3, #36	; 0x24
 800572e:	2101      	movs	r1, #1
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fe19 	bl	8006368 <RCCEx_PLL3_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800573a:	e003      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
      break;
 8005740:	e000      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005744:	7dfb      	ldrb	r3, [r7, #23]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800574a:	4bb7      	ldr	r3, [pc, #732]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574e:	f023 0207 	bic.w	r2, r3, #7
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005758:	49b3      	ldr	r1, [pc, #716]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800575a:	4313      	orrs	r3, r2
 800575c:	658b      	str	r3, [r1, #88]	; 0x58
 800575e:	e001      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	7dfb      	ldrb	r3, [r7, #23]
 8005762:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d04b      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005776:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800577a:	d02e      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800577c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005780:	d828      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005786:	d02a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d822      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800578e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005792:	d026      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005794:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005798:	d81c      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800579a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579e:	d010      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80057a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a4:	d816      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d01d      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80057aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ae:	d111      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3304      	adds	r3, #4
 80057b4:	2100      	movs	r1, #0
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fd24 	bl	8006204 <RCCEx_PLL2_Config>
 80057bc:	4603      	mov	r3, r0
 80057be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057c0:	e012      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3324      	adds	r3, #36	; 0x24
 80057c6:	2102      	movs	r1, #2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fdcd 	bl	8006368 <RCCEx_PLL3_Config>
 80057ce:	4603      	mov	r3, r0
 80057d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057d2:	e009      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	75fb      	strb	r3, [r7, #23]
      break;
 80057d8:	e006      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80057da:	bf00      	nop
 80057dc:	e004      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80057de:	bf00      	nop
 80057e0:	e002      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80057e2:	bf00      	nop
 80057e4:	e000      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80057e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ee:	4b8e      	ldr	r3, [pc, #568]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057fc:	498a      	ldr	r1, [pc, #552]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	654b      	str	r3, [r1, #84]	; 0x54
 8005802:	e001      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d04b      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800581a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800581e:	d02e      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005820:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005824:	d828      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582a:	d02a      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800582c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005830:	d822      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005832:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005836:	d026      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005838:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800583c:	d81c      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800583e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005842:	d010      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005848:	d816      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d01d      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800584e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005852:	d111      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fcd2 	bl	8006204 <RCCEx_PLL2_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005864:	e012      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3324      	adds	r3, #36	; 0x24
 800586a:	2102      	movs	r1, #2
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fd7b 	bl	8006368 <RCCEx_PLL3_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005876:	e009      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	75fb      	strb	r3, [r7, #23]
      break;
 800587c:	e006      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800587e:	bf00      	nop
 8005880:	e004      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005882:	bf00      	nop
 8005884:	e002      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005886:	bf00      	nop
 8005888:	e000      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800588a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800588c:	7dfb      	ldrb	r3, [r7, #23]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005892:	4b65      	ldr	r3, [pc, #404]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005896:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058a0:	4961      	ldr	r1, [pc, #388]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	658b      	str	r3, [r1, #88]	; 0x58
 80058a6:	e001      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
 80058aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d04b      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80058c2:	d02e      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80058c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80058c8:	d828      	bhi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80058ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ce:	d02a      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80058d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d4:	d822      	bhi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80058d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80058da:	d026      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80058dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80058e0:	d81c      	bhi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80058e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e6:	d010      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80058e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058ec:	d816      	bhi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01d      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80058f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f6:	d111      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	2100      	movs	r1, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fc80 	bl	8006204 <RCCEx_PLL2_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005908:	e012      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3324      	adds	r3, #36	; 0x24
 800590e:	2102      	movs	r1, #2
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fd29 	bl	8006368 <RCCEx_PLL3_Config>
 8005916:	4603      	mov	r3, r0
 8005918:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800591a:	e009      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	75fb      	strb	r3, [r7, #23]
      break;
 8005920:	e006      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005922:	bf00      	nop
 8005924:	e004      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005926:	bf00      	nop
 8005928:	e002      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800592a:	bf00      	nop
 800592c:	e000      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800592e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10a      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005936:	4b3c      	ldr	r3, [pc, #240]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005944:	4938      	ldr	r1, [pc, #224]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005946:	4313      	orrs	r3, r2
 8005948:	658b      	str	r3, [r1, #88]	; 0x58
 800594a:	e001      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594c:	7dfb      	ldrb	r3, [r7, #23]
 800594e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	d10a      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3324      	adds	r3, #36	; 0x24
 800596c:	2102      	movs	r1, #2
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fcfa 	bl	8006368 <RCCEx_PLL3_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800597e:	4b2a      	ldr	r3, [pc, #168]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800598c:	4926      	ldr	r1, [pc, #152]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800598e:	4313      	orrs	r3, r2
 8005990:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a8:	d10a      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3324      	adds	r3, #36	; 0x24
 80059ae:	2102      	movs	r1, #2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fcd9 	bl	8006368 <RCCEx_PLL3_Config>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059c0:	4b19      	ldr	r3, [pc, #100]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80059c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ce:	4916      	ldr	r1, [pc, #88]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d036      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ea:	d01f      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80059ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059f0:	d817      	bhi.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80059f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fa:	d009      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80059fc:	e011      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3304      	adds	r3, #4
 8005a02:	2100      	movs	r1, #0
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fbfd 	bl	8006204 <RCCEx_PLL2_Config>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a0e:	e00e      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3324      	adds	r3, #36	; 0x24
 8005a14:	2102      	movs	r1, #2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fca6 	bl	8006368 <RCCEx_PLL3_Config>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a20:	e005      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	75fb      	strb	r3, [r7, #23]
      break;
 8005a26:	e002      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005a28:	58024400 	.word	0x58024400
      break;
 8005a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a2e:	7dfb      	ldrb	r3, [r7, #23]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a34:	4b93      	ldr	r3, [pc, #588]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a42:	4990      	ldr	r1, [pc, #576]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	658b      	str	r3, [r1, #88]	; 0x58
 8005a48:	e001      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
 8005a4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d033      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a64:	d01c      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005a66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a6a:	d816      	bhi.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a70:	d003      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005a72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a76:	d007      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005a78:	e00f      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7a:	4b82      	ldr	r3, [pc, #520]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	4a81      	ldr	r2, [pc, #516]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a86:	e00c      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3324      	adds	r3, #36	; 0x24
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fc6a 	bl	8006368 <RCCEx_PLL3_Config>
 8005a94:	4603      	mov	r3, r0
 8005a96:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a98:	e003      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aa8:	4b76      	ldr	r3, [pc, #472]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab6:	4973      	ldr	r1, [pc, #460]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	654b      	str	r3, [r1, #84]	; 0x54
 8005abc:	e001      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d029      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ada:	d007      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005adc:	e00f      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ade:	4b69      	ldr	r3, [pc, #420]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	4a68      	ldr	r2, [pc, #416]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005aea:	e00b      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	2102      	movs	r1, #2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fb86 	bl	8006204 <RCCEx_PLL2_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005afc:	e002      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
      break;
 8005b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b0a:	4b5e      	ldr	r3, [pc, #376]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b16:	495b      	ldr	r1, [pc, #364]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b1c:	e001      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3324      	adds	r3, #36	; 0x24
 8005b32:	2102      	movs	r1, #2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fc17 	bl	8006368 <RCCEx_PLL3_Config>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d030      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b58:	d017      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b5e:	d811      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b64:	d013      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b6a:	d80b      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d010      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b74:	d106      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b76:	4b43      	ldr	r3, [pc, #268]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	4a42      	ldr	r2, [pc, #264]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005b82:	e007      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	75fb      	strb	r3, [r7, #23]
      break;
 8005b88:	e004      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005b8a:	bf00      	nop
 8005b8c:	e002      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005b8e:	bf00      	nop
 8005b90:	e000      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b9a:	4b3a      	ldr	r3, [pc, #232]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba6:	4937      	ldr	r1, [pc, #220]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	654b      	str	r3, [r1, #84]	; 0x54
 8005bac:	e001      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bbe:	4b31      	ldr	r3, [pc, #196]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	492e      	ldr	r1, [pc, #184]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005bdc:	4b29      	ldr	r3, [pc, #164]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bea:	4926      	ldr	r1, [pc, #152]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bfc:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c08:	491e      	ldr	r1, [pc, #120]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00d      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c1a:	4b1a      	ldr	r3, [pc, #104]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	4a19      	ldr	r2, [pc, #100]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c24:	6113      	str	r3, [r2, #16]
 8005c26:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c30:	4914      	ldr	r1, [pc, #80]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	da08      	bge.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c3e:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4a:	490e      	ldr	r1, [pc, #56]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d009      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c5c:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6a:	4906      	ldr	r1, [pc, #24]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005c70:	7dbb      	ldrb	r3, [r7, #22]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e000      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	58024400 	.word	0x58024400

08005c88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c8c:	f7ff f81e 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	091b      	lsrs	r3, r3, #4
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4904      	ldr	r1, [pc, #16]	; (8005cb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	58024400 	.word	0x58024400
 8005cb0:	0801a508 	.word	0x0801a508

08005cb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b089      	sub	sp, #36	; 0x24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cbc:	4ba1      	ldr	r3, [pc, #644]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	f003 0303 	and.w	r3, r3, #3
 8005cc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005cc6:	4b9f      	ldr	r3, [pc, #636]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	0b1b      	lsrs	r3, r3, #12
 8005ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cd2:	4b9c      	ldr	r3, [pc, #624]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	091b      	lsrs	r3, r3, #4
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005cde:	4b99      	ldr	r3, [pc, #612]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce2:	08db      	lsrs	r3, r3, #3
 8005ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8111 	beq.w	8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	f000 8083 	beq.w	8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	f200 80a1 	bhi.w	8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d056      	beq.n	8005dcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d1e:	e099      	b.n	8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d20:	4b88      	ldr	r3, [pc, #544]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d02d      	beq.n	8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d2c:	4b85      	ldr	r3, [pc, #532]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	08db      	lsrs	r3, r3, #3
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	4a84      	ldr	r2, [pc, #528]	; (8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d56:	4b7b      	ldr	r3, [pc, #492]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d86:	e087      	b.n	8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9a:	4b6a      	ldr	r3, [pc, #424]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dca:	e065      	b.n	8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dde:	4b59      	ldr	r3, [pc, #356]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e0e:	e043      	b.n	8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e22:	4b48      	ldr	r3, [pc, #288]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e52:	e021      	b.n	8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e66:	4b37      	ldr	r3, [pc, #220]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e98:	4b2a      	ldr	r3, [pc, #168]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	0a5b      	lsrs	r3, r3, #9
 8005e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ebe:	ee17 2a90 	vmov	r2, s15
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ec6:	4b1f      	ldr	r3, [pc, #124]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	0c1b      	lsrs	r3, r3, #16
 8005ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eec:	ee17 2a90 	vmov	r2, s15
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005ef4:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	0e1b      	lsrs	r3, r3, #24
 8005efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f1a:	ee17 2a90 	vmov	r2, s15
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f22:	e008      	b.n	8005f36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	609a      	str	r2, [r3, #8]
}
 8005f36:	bf00      	nop
 8005f38:	3724      	adds	r7, #36	; 0x24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	58024400 	.word	0x58024400
 8005f48:	03d09000 	.word	0x03d09000
 8005f4c:	46000000 	.word	0x46000000
 8005f50:	4c742400 	.word	0x4c742400
 8005f54:	4a742400 	.word	0x4a742400
 8005f58:	4af42400 	.word	0x4af42400

08005f5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f64:	4ba1      	ldr	r3, [pc, #644]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f6e:	4b9f      	ldr	r3, [pc, #636]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	0d1b      	lsrs	r3, r3, #20
 8005f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f7a:	4b9c      	ldr	r3, [pc, #624]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f86:	4b99      	ldr	r3, [pc, #612]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8a:	08db      	lsrs	r3, r3, #3
 8005f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8111 	beq.w	80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	f000 8083 	beq.w	80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	f200 80a1 	bhi.w	80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d056      	beq.n	8006074 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005fc6:	e099      	b.n	80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fc8:	4b88      	ldr	r3, [pc, #544]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0320 	and.w	r3, r3, #32
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d02d      	beq.n	8006030 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fd4:	4b85      	ldr	r3, [pc, #532]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	08db      	lsrs	r3, r3, #3
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	4a84      	ldr	r2, [pc, #528]	; (80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	ee07 3a90 	vmov	s15, r3
 8005fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffe:	4b7b      	ldr	r3, [pc, #492]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006012:	eddf 5a78 	vldr	s11, [pc, #480]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800602e:	e087      	b.n	8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800603e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006042:	4b6a      	ldr	r3, [pc, #424]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006052:	ed97 6a03 	vldr	s12, [r7, #12]
 8006056:	eddf 5a67 	vldr	s11, [pc, #412]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800605a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006072:	e065      	b.n	8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80061fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006086:	4b59      	ldr	r3, [pc, #356]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006096:	ed97 6a03 	vldr	s12, [r7, #12]
 800609a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800609e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060b6:	e043      	b.n	8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ca:	4b48      	ldr	r3, [pc, #288]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060da:	ed97 6a03 	vldr	s12, [r7, #12]
 80060de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060fa:	e021      	b.n	8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006106:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800610a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610e:	4b37      	ldr	r3, [pc, #220]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006116:	ee07 3a90 	vmov	s15, r3
 800611a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006122:	eddf 5a34 	vldr	s11, [pc, #208]	; 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800612a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800612e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800613a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800613e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006140:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	0a5b      	lsrs	r3, r3, #9
 8006146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800615a:	edd7 6a07 	vldr	s13, [r7, #28]
 800615e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006166:	ee17 2a90 	vmov	r2, s15
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800616e:	4b1f      	ldr	r3, [pc, #124]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	0c1b      	lsrs	r3, r3, #16
 8006174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006178:	ee07 3a90 	vmov	s15, r3
 800617c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006180:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006184:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006188:	edd7 6a07 	vldr	s13, [r7, #28]
 800618c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006194:	ee17 2a90 	vmov	r2, s15
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800619c:	4b13      	ldr	r3, [pc, #76]	; (80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	0e1b      	lsrs	r3, r3, #24
 80061a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c2:	ee17 2a90 	vmov	r2, s15
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061ca:	e008      	b.n	80061de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	609a      	str	r2, [r3, #8]
}
 80061de:	bf00      	nop
 80061e0:	3724      	adds	r7, #36	; 0x24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	58024400 	.word	0x58024400
 80061f0:	03d09000 	.word	0x03d09000
 80061f4:	46000000 	.word	0x46000000
 80061f8:	4c742400 	.word	0x4c742400
 80061fc:	4a742400 	.word	0x4a742400
 8006200:	4af42400 	.word	0x4af42400

08006204 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006212:	4b53      	ldr	r3, [pc, #332]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 8006214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b03      	cmp	r3, #3
 800621c:	d101      	bne.n	8006222 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e099      	b.n	8006356 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006222:	4b4f      	ldr	r3, [pc, #316]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a4e      	ldr	r2, [pc, #312]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 8006228:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800622c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800622e:	f7fb fa3d 	bl	80016ac <HAL_GetTick>
 8006232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006234:	e008      	b.n	8006248 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006236:	f7fb fa39 	bl	80016ac <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e086      	b.n	8006356 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006248:	4b45      	ldr	r3, [pc, #276]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f0      	bne.n	8006236 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006254:	4b42      	ldr	r3, [pc, #264]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	031b      	lsls	r3, r3, #12
 8006262:	493f      	ldr	r1, [pc, #252]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 8006264:	4313      	orrs	r3, r2
 8006266:	628b      	str	r3, [r1, #40]	; 0x28
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	3b01      	subs	r3, #1
 800626e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	3b01      	subs	r3, #1
 8006278:	025b      	lsls	r3, r3, #9
 800627a:	b29b      	uxth	r3, r3
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	3b01      	subs	r3, #1
 8006284:	041b      	lsls	r3, r3, #16
 8006286:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	3b01      	subs	r3, #1
 8006292:	061b      	lsls	r3, r3, #24
 8006294:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006298:	4931      	ldr	r1, [pc, #196]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 800629a:	4313      	orrs	r3, r2
 800629c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800629e:	4b30      	ldr	r3, [pc, #192]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	492d      	ldr	r1, [pc, #180]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80062b0:	4b2b      	ldr	r3, [pc, #172]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	f023 0220 	bic.w	r2, r3, #32
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	4928      	ldr	r1, [pc, #160]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062c2:	4b27      	ldr	r3, [pc, #156]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	4a26      	ldr	r2, [pc, #152]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 80062c8:	f023 0310 	bic.w	r3, r3, #16
 80062cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062ce:	4b24      	ldr	r3, [pc, #144]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 80062d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062d2:	4b24      	ldr	r3, [pc, #144]	; (8006364 <RCCEx_PLL2_Config+0x160>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	69d2      	ldr	r2, [r2, #28]
 80062da:	00d2      	lsls	r2, r2, #3
 80062dc:	4920      	ldr	r1, [pc, #128]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062e2:	4b1f      	ldr	r3, [pc, #124]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 80062e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e6:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 80062e8:	f043 0310 	orr.w	r3, r3, #16
 80062ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d106      	bne.n	8006302 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062f4:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	4a19      	ldr	r2, [pc, #100]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 80062fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006300:	e00f      	b.n	8006322 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d106      	bne.n	8006316 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006308:	4b15      	ldr	r3, [pc, #84]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	4a14      	ldr	r2, [pc, #80]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 800630e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006312:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006314:	e005      	b.n	8006322 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006316:	4b12      	ldr	r3, [pc, #72]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 8006318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631a:	4a11      	ldr	r2, [pc, #68]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 800631c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006320:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006322:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a0e      	ldr	r2, [pc, #56]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 8006328:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800632c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632e:	f7fb f9bd 	bl	80016ac <HAL_GetTick>
 8006332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006334:	e008      	b.n	8006348 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006336:	f7fb f9b9 	bl	80016ac <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e006      	b.n	8006356 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006348:	4b05      	ldr	r3, [pc, #20]	; (8006360 <RCCEx_PLL2_Config+0x15c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0f0      	beq.n	8006336 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	58024400 	.word	0x58024400
 8006364:	ffff0007 	.word	0xffff0007

08006368 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006376:	4b53      	ldr	r3, [pc, #332]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b03      	cmp	r3, #3
 8006380:	d101      	bne.n	8006386 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e099      	b.n	80064ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006386:	4b4f      	ldr	r3, [pc, #316]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a4e      	ldr	r2, [pc, #312]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 800638c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006392:	f7fb f98b 	bl	80016ac <HAL_GetTick>
 8006396:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006398:	e008      	b.n	80063ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800639a:	f7fb f987 	bl	80016ac <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e086      	b.n	80064ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063ac:	4b45      	ldr	r3, [pc, #276]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f0      	bne.n	800639a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80063b8:	4b42      	ldr	r3, [pc, #264]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	051b      	lsls	r3, r3, #20
 80063c6:	493f      	ldr	r1, [pc, #252]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	628b      	str	r3, [r1, #40]	; 0x28
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	3b01      	subs	r3, #1
 80063dc:	025b      	lsls	r3, r3, #9
 80063de:	b29b      	uxth	r3, r3
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	041b      	lsls	r3, r3, #16
 80063ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	061b      	lsls	r3, r3, #24
 80063f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063fc:	4931      	ldr	r1, [pc, #196]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006402:	4b30      	ldr	r3, [pc, #192]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	492d      	ldr	r1, [pc, #180]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006410:	4313      	orrs	r3, r2
 8006412:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006414:	4b2b      	ldr	r3, [pc, #172]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	4928      	ldr	r1, [pc, #160]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006422:	4313      	orrs	r3, r2
 8006424:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006426:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	4a26      	ldr	r2, [pc, #152]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 800642c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006430:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006432:	4b24      	ldr	r3, [pc, #144]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006436:	4b24      	ldr	r3, [pc, #144]	; (80064c8 <RCCEx_PLL3_Config+0x160>)
 8006438:	4013      	ands	r3, r2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	69d2      	ldr	r2, [r2, #28]
 800643e:	00d2      	lsls	r2, r2, #3
 8006440:	4920      	ldr	r1, [pc, #128]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006442:	4313      	orrs	r3, r2
 8006444:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006446:	4b1f      	ldr	r3, [pc, #124]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	4a1e      	ldr	r2, [pc, #120]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 800644c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006450:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006458:	4b1a      	ldr	r3, [pc, #104]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	4a19      	ldr	r2, [pc, #100]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 800645e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006462:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006464:	e00f      	b.n	8006486 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d106      	bne.n	800647a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800646c:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	4a14      	ldr	r2, [pc, #80]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006472:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006476:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006478:	e005      	b.n	8006486 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800647a:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	4a11      	ldr	r2, [pc, #68]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006480:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006484:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006486:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a0e      	ldr	r2, [pc, #56]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 800648c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006492:	f7fb f90b 	bl	80016ac <HAL_GetTick>
 8006496:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006498:	e008      	b.n	80064ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800649a:	f7fb f907 	bl	80016ac <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d901      	bls.n	80064ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e006      	b.n	80064ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <RCCEx_PLL3_Config+0x15c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0f0      	beq.n	800649a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	58024400 	.word	0x58024400
 80064c8:	ffff0007 	.word	0xffff0007

080064cc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e054      	b.n	8006588 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	7a5b      	ldrb	r3, [r3, #9]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d105      	bne.n	80064f4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fa fb56 	bl	8000ba0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f023 0120 	bic.w	r1, r3, #32
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0204 	orr.w	r2, r2, #4
 800651e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d104      	bne.n	8006538 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2204      	movs	r2, #4
 8006532:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e027      	b.n	8006588 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8006538:	f7fb f8b8 	bl	80016ac <HAL_GetTick>
 800653c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800653e:	e015      	b.n	800656c <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006540:	f7fb f8b4 	bl	80016ac <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d90e      	bls.n	800656c <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b04      	cmp	r3, #4
 800655a:	d107      	bne.n	800656c <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2204      	movs	r2, #4
 8006560:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2202      	movs	r2, #2
 8006566:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e00d      	b.n	8006588 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b04      	cmp	r3, #4
 8006578:	d0e2      	beq.n	8006540 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e049      	b.n	8006636 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f841 	bl	800663e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4619      	mov	r1, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	f000 fa00 	bl	80069d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
	...

08006654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b01      	cmp	r3, #1
 8006666:	d001      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e054      	b.n	8006716 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a26      	ldr	r2, [pc, #152]	; (8006724 <HAL_TIM_Base_Start_IT+0xd0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d022      	beq.n	80066d4 <HAL_TIM_Base_Start_IT+0x80>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006696:	d01d      	beq.n	80066d4 <HAL_TIM_Base_Start_IT+0x80>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a22      	ldr	r2, [pc, #136]	; (8006728 <HAL_TIM_Base_Start_IT+0xd4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d018      	beq.n	80066d4 <HAL_TIM_Base_Start_IT+0x80>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a21      	ldr	r2, [pc, #132]	; (800672c <HAL_TIM_Base_Start_IT+0xd8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d013      	beq.n	80066d4 <HAL_TIM_Base_Start_IT+0x80>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1f      	ldr	r2, [pc, #124]	; (8006730 <HAL_TIM_Base_Start_IT+0xdc>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00e      	beq.n	80066d4 <HAL_TIM_Base_Start_IT+0x80>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1e      	ldr	r2, [pc, #120]	; (8006734 <HAL_TIM_Base_Start_IT+0xe0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d009      	beq.n	80066d4 <HAL_TIM_Base_Start_IT+0x80>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1c      	ldr	r2, [pc, #112]	; (8006738 <HAL_TIM_Base_Start_IT+0xe4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d004      	beq.n	80066d4 <HAL_TIM_Base_Start_IT+0x80>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1b      	ldr	r2, [pc, #108]	; (800673c <HAL_TIM_Base_Start_IT+0xe8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d115      	bne.n	8006700 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	4b19      	ldr	r3, [pc, #100]	; (8006740 <HAL_TIM_Base_Start_IT+0xec>)
 80066dc:	4013      	ands	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b06      	cmp	r3, #6
 80066e4:	d015      	beq.n	8006712 <HAL_TIM_Base_Start_IT+0xbe>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ec:	d011      	beq.n	8006712 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0201 	orr.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066fe:	e008      	b.n	8006712 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	e000      	b.n	8006714 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40010000 	.word	0x40010000
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	40010400 	.word	0x40010400
 8006738:	40001800 	.word	0x40001800
 800673c:	40014000 	.word	0x40014000
 8006740:	00010007 	.word	0x00010007

08006744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b02      	cmp	r3, #2
 8006758:	d122      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	d11b      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0202 	mvn.w	r2, #2
 8006770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f905 	bl	8006996 <HAL_TIM_IC_CaptureCallback>
 800678c:	e005      	b.n	800679a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f8f7 	bl	8006982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f908 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d122      	bne.n	80067f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d11b      	bne.n	80067f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f06f 0204 	mvn.w	r2, #4
 80067c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f8db 	bl	8006996 <HAL_TIM_IC_CaptureCallback>
 80067e0:	e005      	b.n	80067ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f8cd 	bl	8006982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f8de 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d122      	bne.n	8006848 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b08      	cmp	r3, #8
 800680e:	d11b      	bne.n	8006848 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0208 	mvn.w	r2, #8
 8006818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2204      	movs	r2, #4
 800681e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f8b1 	bl	8006996 <HAL_TIM_IC_CaptureCallback>
 8006834:	e005      	b.n	8006842 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f8a3 	bl	8006982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f8b4 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0310 	and.w	r3, r3, #16
 8006852:	2b10      	cmp	r3, #16
 8006854:	d122      	bne.n	800689c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0310 	and.w	r3, r3, #16
 8006860:	2b10      	cmp	r3, #16
 8006862:	d11b      	bne.n	800689c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0210 	mvn.w	r2, #16
 800686c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2208      	movs	r2, #8
 8006872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f887 	bl	8006996 <HAL_TIM_IC_CaptureCallback>
 8006888:	e005      	b.n	8006896 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f879 	bl	8006982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f88a 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d10e      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d107      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0201 	mvn.w	r2, #1
 80068c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fa f93e 	bl	8000b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d2:	2b80      	cmp	r3, #128	; 0x80
 80068d4:	d10e      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e0:	2b80      	cmp	r3, #128	; 0x80
 80068e2:	d107      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f914 	bl	8006b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006902:	d10e      	bne.n	8006922 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690e:	2b80      	cmp	r3, #128	; 0x80
 8006910:	d107      	bne.n	8006922 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800691a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f907 	bl	8006b30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b40      	cmp	r3, #64	; 0x40
 800692e:	d10e      	bne.n	800694e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d107      	bne.n	800694e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f838 	bl	80069be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b20      	cmp	r3, #32
 800695a:	d10e      	bne.n	800697a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b20      	cmp	r3, #32
 8006968:	d107      	bne.n	800697a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f06f 0220 	mvn.w	r2, #32
 8006972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f8c7 	bl	8006b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a40      	ldr	r2, [pc, #256]	; (8006ae8 <TIM_Base_SetConfig+0x114>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d013      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f2:	d00f      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a3d      	ldr	r2, [pc, #244]	; (8006aec <TIM_Base_SetConfig+0x118>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00b      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a3c      	ldr	r2, [pc, #240]	; (8006af0 <TIM_Base_SetConfig+0x11c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d007      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a3b      	ldr	r2, [pc, #236]	; (8006af4 <TIM_Base_SetConfig+0x120>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a3a      	ldr	r2, [pc, #232]	; (8006af8 <TIM_Base_SetConfig+0x124>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d108      	bne.n	8006a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2f      	ldr	r2, [pc, #188]	; (8006ae8 <TIM_Base_SetConfig+0x114>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01f      	beq.n	8006a6e <TIM_Base_SetConfig+0x9a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a34:	d01b      	beq.n	8006a6e <TIM_Base_SetConfig+0x9a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2c      	ldr	r2, [pc, #176]	; (8006aec <TIM_Base_SetConfig+0x118>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d017      	beq.n	8006a6e <TIM_Base_SetConfig+0x9a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2b      	ldr	r2, [pc, #172]	; (8006af0 <TIM_Base_SetConfig+0x11c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <TIM_Base_SetConfig+0x9a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2a      	ldr	r2, [pc, #168]	; (8006af4 <TIM_Base_SetConfig+0x120>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00f      	beq.n	8006a6e <TIM_Base_SetConfig+0x9a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a29      	ldr	r2, [pc, #164]	; (8006af8 <TIM_Base_SetConfig+0x124>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00b      	beq.n	8006a6e <TIM_Base_SetConfig+0x9a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a28      	ldr	r2, [pc, #160]	; (8006afc <TIM_Base_SetConfig+0x128>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d007      	beq.n	8006a6e <TIM_Base_SetConfig+0x9a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a27      	ldr	r2, [pc, #156]	; (8006b00 <TIM_Base_SetConfig+0x12c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d003      	beq.n	8006a6e <TIM_Base_SetConfig+0x9a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a26      	ldr	r2, [pc, #152]	; (8006b04 <TIM_Base_SetConfig+0x130>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d108      	bne.n	8006a80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a10      	ldr	r2, [pc, #64]	; (8006ae8 <TIM_Base_SetConfig+0x114>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00f      	beq.n	8006acc <TIM_Base_SetConfig+0xf8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a12      	ldr	r2, [pc, #72]	; (8006af8 <TIM_Base_SetConfig+0x124>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00b      	beq.n	8006acc <TIM_Base_SetConfig+0xf8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a11      	ldr	r2, [pc, #68]	; (8006afc <TIM_Base_SetConfig+0x128>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d007      	beq.n	8006acc <TIM_Base_SetConfig+0xf8>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a10      	ldr	r2, [pc, #64]	; (8006b00 <TIM_Base_SetConfig+0x12c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_Base_SetConfig+0xf8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a0f      	ldr	r2, [pc, #60]	; (8006b04 <TIM_Base_SetConfig+0x130>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d103      	bne.n	8006ad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	615a      	str	r2, [r3, #20]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40010400 	.word	0x40010400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40014400 	.word	0x40014400
 8006b04:	40014800 	.word	0x40014800

08006b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e042      	b.n	8006bdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7fa fab3 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2224      	movs	r2, #36	; 0x24
 8006b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0201 	bic.w	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f82c 	bl	8006be4 <UART_SetConfig>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e022      	b.n	8006bdc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fd80 	bl	80076a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fe07 	bl	80077e8 <UART_CheckIdleState>
 8006bda:	4603      	mov	r3, r0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be4:	b5b0      	push	{r4, r5, r7, lr}
 8006be6:	b08e      	sub	sp, #56	; 0x38
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	431a      	orrs	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	4bbf      	ldr	r3, [pc, #764]	; (8006f10 <UART_SetConfig+0x32c>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6812      	ldr	r2, [r2, #0]
 8006c18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4ab5      	ldr	r2, [pc, #724]	; (8006f14 <UART_SetConfig+0x330>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d004      	beq.n	8006c4e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	4bb0      	ldr	r3, [pc, #704]	; (8006f18 <UART_SetConfig+0x334>)
 8006c56:	4013      	ands	r3, r2
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6812      	ldr	r2, [r2, #0]
 8006c5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	f023 010f 	bic.w	r1, r3, #15
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4aa7      	ldr	r2, [pc, #668]	; (8006f1c <UART_SetConfig+0x338>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d176      	bne.n	8006d70 <UART_SetConfig+0x18c>
 8006c82:	4ba7      	ldr	r3, [pc, #668]	; (8006f20 <UART_SetConfig+0x33c>)
 8006c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c8a:	2b28      	cmp	r3, #40	; 0x28
 8006c8c:	d86c      	bhi.n	8006d68 <UART_SetConfig+0x184>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <UART_SetConfig+0xb0>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006d39 	.word	0x08006d39
 8006c98:	08006d69 	.word	0x08006d69
 8006c9c:	08006d69 	.word	0x08006d69
 8006ca0:	08006d69 	.word	0x08006d69
 8006ca4:	08006d69 	.word	0x08006d69
 8006ca8:	08006d69 	.word	0x08006d69
 8006cac:	08006d69 	.word	0x08006d69
 8006cb0:	08006d69 	.word	0x08006d69
 8006cb4:	08006d41 	.word	0x08006d41
 8006cb8:	08006d69 	.word	0x08006d69
 8006cbc:	08006d69 	.word	0x08006d69
 8006cc0:	08006d69 	.word	0x08006d69
 8006cc4:	08006d69 	.word	0x08006d69
 8006cc8:	08006d69 	.word	0x08006d69
 8006ccc:	08006d69 	.word	0x08006d69
 8006cd0:	08006d69 	.word	0x08006d69
 8006cd4:	08006d49 	.word	0x08006d49
 8006cd8:	08006d69 	.word	0x08006d69
 8006cdc:	08006d69 	.word	0x08006d69
 8006ce0:	08006d69 	.word	0x08006d69
 8006ce4:	08006d69 	.word	0x08006d69
 8006ce8:	08006d69 	.word	0x08006d69
 8006cec:	08006d69 	.word	0x08006d69
 8006cf0:	08006d69 	.word	0x08006d69
 8006cf4:	08006d51 	.word	0x08006d51
 8006cf8:	08006d69 	.word	0x08006d69
 8006cfc:	08006d69 	.word	0x08006d69
 8006d00:	08006d69 	.word	0x08006d69
 8006d04:	08006d69 	.word	0x08006d69
 8006d08:	08006d69 	.word	0x08006d69
 8006d0c:	08006d69 	.word	0x08006d69
 8006d10:	08006d69 	.word	0x08006d69
 8006d14:	08006d59 	.word	0x08006d59
 8006d18:	08006d69 	.word	0x08006d69
 8006d1c:	08006d69 	.word	0x08006d69
 8006d20:	08006d69 	.word	0x08006d69
 8006d24:	08006d69 	.word	0x08006d69
 8006d28:	08006d69 	.word	0x08006d69
 8006d2c:	08006d69 	.word	0x08006d69
 8006d30:	08006d69 	.word	0x08006d69
 8006d34:	08006d61 	.word	0x08006d61
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d3e:	e222      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006d40:	2304      	movs	r3, #4
 8006d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d46:	e21e      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006d48:	2308      	movs	r3, #8
 8006d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d4e:	e21a      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006d50:	2310      	movs	r3, #16
 8006d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d56:	e216      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006d58:	2320      	movs	r3, #32
 8006d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d5e:	e212      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006d60:	2340      	movs	r3, #64	; 0x40
 8006d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d66:	e20e      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006d68:	2380      	movs	r3, #128	; 0x80
 8006d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d6e:	e20a      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a6b      	ldr	r2, [pc, #428]	; (8006f24 <UART_SetConfig+0x340>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d130      	bne.n	8006ddc <UART_SetConfig+0x1f8>
 8006d7a:	4b69      	ldr	r3, [pc, #420]	; (8006f20 <UART_SetConfig+0x33c>)
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	2b05      	cmp	r3, #5
 8006d84:	d826      	bhi.n	8006dd4 <UART_SetConfig+0x1f0>
 8006d86:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <UART_SetConfig+0x1a8>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006da5 	.word	0x08006da5
 8006d90:	08006dad 	.word	0x08006dad
 8006d94:	08006db5 	.word	0x08006db5
 8006d98:	08006dbd 	.word	0x08006dbd
 8006d9c:	08006dc5 	.word	0x08006dc5
 8006da0:	08006dcd 	.word	0x08006dcd
 8006da4:	2300      	movs	r3, #0
 8006da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006daa:	e1ec      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006dac:	2304      	movs	r3, #4
 8006dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db2:	e1e8      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006db4:	2308      	movs	r3, #8
 8006db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dba:	e1e4      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006dbc:	2310      	movs	r3, #16
 8006dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dc2:	e1e0      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006dc4:	2320      	movs	r3, #32
 8006dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dca:	e1dc      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006dcc:	2340      	movs	r3, #64	; 0x40
 8006dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dd2:	e1d8      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dda:	e1d4      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a51      	ldr	r2, [pc, #324]	; (8006f28 <UART_SetConfig+0x344>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d130      	bne.n	8006e48 <UART_SetConfig+0x264>
 8006de6:	4b4e      	ldr	r3, [pc, #312]	; (8006f20 <UART_SetConfig+0x33c>)
 8006de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b05      	cmp	r3, #5
 8006df0:	d826      	bhi.n	8006e40 <UART_SetConfig+0x25c>
 8006df2:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <UART_SetConfig+0x214>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e11 	.word	0x08006e11
 8006dfc:	08006e19 	.word	0x08006e19
 8006e00:	08006e21 	.word	0x08006e21
 8006e04:	08006e29 	.word	0x08006e29
 8006e08:	08006e31 	.word	0x08006e31
 8006e0c:	08006e39 	.word	0x08006e39
 8006e10:	2300      	movs	r3, #0
 8006e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e16:	e1b6      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006e18:	2304      	movs	r3, #4
 8006e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e1e:	e1b2      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006e20:	2308      	movs	r3, #8
 8006e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e26:	e1ae      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e2e:	e1aa      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006e30:	2320      	movs	r3, #32
 8006e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e36:	e1a6      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006e38:	2340      	movs	r3, #64	; 0x40
 8006e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e3e:	e1a2      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e46:	e19e      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a37      	ldr	r2, [pc, #220]	; (8006f2c <UART_SetConfig+0x348>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d130      	bne.n	8006eb4 <UART_SetConfig+0x2d0>
 8006e52:	4b33      	ldr	r3, [pc, #204]	; (8006f20 <UART_SetConfig+0x33c>)
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b05      	cmp	r3, #5
 8006e5c:	d826      	bhi.n	8006eac <UART_SetConfig+0x2c8>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <UART_SetConfig+0x280>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e7d 	.word	0x08006e7d
 8006e68:	08006e85 	.word	0x08006e85
 8006e6c:	08006e8d 	.word	0x08006e8d
 8006e70:	08006e95 	.word	0x08006e95
 8006e74:	08006e9d 	.word	0x08006e9d
 8006e78:	08006ea5 	.word	0x08006ea5
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e82:	e180      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006e84:	2304      	movs	r3, #4
 8006e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8a:	e17c      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006e8c:	2308      	movs	r3, #8
 8006e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e92:	e178      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006e94:	2310      	movs	r3, #16
 8006e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9a:	e174      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ea2:	e170      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006ea4:	2340      	movs	r3, #64	; 0x40
 8006ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eaa:	e16c      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006eac:	2380      	movs	r3, #128	; 0x80
 8006eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eb2:	e168      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a1d      	ldr	r2, [pc, #116]	; (8006f30 <UART_SetConfig+0x34c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d142      	bne.n	8006f44 <UART_SetConfig+0x360>
 8006ebe:	4b18      	ldr	r3, [pc, #96]	; (8006f20 <UART_SetConfig+0x33c>)
 8006ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec2:	f003 0307 	and.w	r3, r3, #7
 8006ec6:	2b05      	cmp	r3, #5
 8006ec8:	d838      	bhi.n	8006f3c <UART_SetConfig+0x358>
 8006eca:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <UART_SetConfig+0x2ec>)
 8006ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed0:	08006ee9 	.word	0x08006ee9
 8006ed4:	08006ef1 	.word	0x08006ef1
 8006ed8:	08006ef9 	.word	0x08006ef9
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006f09 	.word	0x08006f09
 8006ee4:	08006f35 	.word	0x08006f35
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eee:	e14a      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ef6:	e146      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006ef8:	2308      	movs	r3, #8
 8006efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006efe:	e142      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006f00:	2310      	movs	r3, #16
 8006f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f06:	e13e      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006f08:	2320      	movs	r3, #32
 8006f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f0e:	e13a      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006f10:	cfff69f3 	.word	0xcfff69f3
 8006f14:	58000c00 	.word	0x58000c00
 8006f18:	11fff4ff 	.word	0x11fff4ff
 8006f1c:	40011000 	.word	0x40011000
 8006f20:	58024400 	.word	0x58024400
 8006f24:	40004400 	.word	0x40004400
 8006f28:	40004800 	.word	0x40004800
 8006f2c:	40004c00 	.word	0x40004c00
 8006f30:	40005000 	.word	0x40005000
 8006f34:	2340      	movs	r3, #64	; 0x40
 8006f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f3a:	e124      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006f3c:	2380      	movs	r3, #128	; 0x80
 8006f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f42:	e120      	b.n	8007186 <UART_SetConfig+0x5a2>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4acc      	ldr	r2, [pc, #816]	; (800727c <UART_SetConfig+0x698>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d176      	bne.n	800703c <UART_SetConfig+0x458>
 8006f4e:	4bcc      	ldr	r3, [pc, #816]	; (8007280 <UART_SetConfig+0x69c>)
 8006f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f56:	2b28      	cmp	r3, #40	; 0x28
 8006f58:	d86c      	bhi.n	8007034 <UART_SetConfig+0x450>
 8006f5a:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <UART_SetConfig+0x37c>)
 8006f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f60:	08007005 	.word	0x08007005
 8006f64:	08007035 	.word	0x08007035
 8006f68:	08007035 	.word	0x08007035
 8006f6c:	08007035 	.word	0x08007035
 8006f70:	08007035 	.word	0x08007035
 8006f74:	08007035 	.word	0x08007035
 8006f78:	08007035 	.word	0x08007035
 8006f7c:	08007035 	.word	0x08007035
 8006f80:	0800700d 	.word	0x0800700d
 8006f84:	08007035 	.word	0x08007035
 8006f88:	08007035 	.word	0x08007035
 8006f8c:	08007035 	.word	0x08007035
 8006f90:	08007035 	.word	0x08007035
 8006f94:	08007035 	.word	0x08007035
 8006f98:	08007035 	.word	0x08007035
 8006f9c:	08007035 	.word	0x08007035
 8006fa0:	08007015 	.word	0x08007015
 8006fa4:	08007035 	.word	0x08007035
 8006fa8:	08007035 	.word	0x08007035
 8006fac:	08007035 	.word	0x08007035
 8006fb0:	08007035 	.word	0x08007035
 8006fb4:	08007035 	.word	0x08007035
 8006fb8:	08007035 	.word	0x08007035
 8006fbc:	08007035 	.word	0x08007035
 8006fc0:	0800701d 	.word	0x0800701d
 8006fc4:	08007035 	.word	0x08007035
 8006fc8:	08007035 	.word	0x08007035
 8006fcc:	08007035 	.word	0x08007035
 8006fd0:	08007035 	.word	0x08007035
 8006fd4:	08007035 	.word	0x08007035
 8006fd8:	08007035 	.word	0x08007035
 8006fdc:	08007035 	.word	0x08007035
 8006fe0:	08007025 	.word	0x08007025
 8006fe4:	08007035 	.word	0x08007035
 8006fe8:	08007035 	.word	0x08007035
 8006fec:	08007035 	.word	0x08007035
 8006ff0:	08007035 	.word	0x08007035
 8006ff4:	08007035 	.word	0x08007035
 8006ff8:	08007035 	.word	0x08007035
 8006ffc:	08007035 	.word	0x08007035
 8007000:	0800702d 	.word	0x0800702d
 8007004:	2301      	movs	r3, #1
 8007006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800700a:	e0bc      	b.n	8007186 <UART_SetConfig+0x5a2>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007012:	e0b8      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800701a:	e0b4      	b.n	8007186 <UART_SetConfig+0x5a2>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007022:	e0b0      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007024:	2320      	movs	r3, #32
 8007026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800702a:	e0ac      	b.n	8007186 <UART_SetConfig+0x5a2>
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007032:	e0a8      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007034:	2380      	movs	r3, #128	; 0x80
 8007036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800703a:	e0a4      	b.n	8007186 <UART_SetConfig+0x5a2>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a90      	ldr	r2, [pc, #576]	; (8007284 <UART_SetConfig+0x6a0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d130      	bne.n	80070a8 <UART_SetConfig+0x4c4>
 8007046:	4b8e      	ldr	r3, [pc, #568]	; (8007280 <UART_SetConfig+0x69c>)
 8007048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	2b05      	cmp	r3, #5
 8007050:	d826      	bhi.n	80070a0 <UART_SetConfig+0x4bc>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x474>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	08007071 	.word	0x08007071
 800705c:	08007079 	.word	0x08007079
 8007060:	08007081 	.word	0x08007081
 8007064:	08007089 	.word	0x08007089
 8007068:	08007091 	.word	0x08007091
 800706c:	08007099 	.word	0x08007099
 8007070:	2300      	movs	r3, #0
 8007072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007076:	e086      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007078:	2304      	movs	r3, #4
 800707a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800707e:	e082      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007080:	2308      	movs	r3, #8
 8007082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007086:	e07e      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007088:	2310      	movs	r3, #16
 800708a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800708e:	e07a      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007090:	2320      	movs	r3, #32
 8007092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007096:	e076      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007098:	2340      	movs	r3, #64	; 0x40
 800709a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800709e:	e072      	b.n	8007186 <UART_SetConfig+0x5a2>
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070a6:	e06e      	b.n	8007186 <UART_SetConfig+0x5a2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a76      	ldr	r2, [pc, #472]	; (8007288 <UART_SetConfig+0x6a4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d130      	bne.n	8007114 <UART_SetConfig+0x530>
 80070b2:	4b73      	ldr	r3, [pc, #460]	; (8007280 <UART_SetConfig+0x69c>)
 80070b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	2b05      	cmp	r3, #5
 80070bc:	d826      	bhi.n	800710c <UART_SetConfig+0x528>
 80070be:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <UART_SetConfig+0x4e0>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080070dd 	.word	0x080070dd
 80070c8:	080070e5 	.word	0x080070e5
 80070cc:	080070ed 	.word	0x080070ed
 80070d0:	080070f5 	.word	0x080070f5
 80070d4:	080070fd 	.word	0x080070fd
 80070d8:	08007105 	.word	0x08007105
 80070dc:	2300      	movs	r3, #0
 80070de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070e2:	e050      	b.n	8007186 <UART_SetConfig+0x5a2>
 80070e4:	2304      	movs	r3, #4
 80070e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ea:	e04c      	b.n	8007186 <UART_SetConfig+0x5a2>
 80070ec:	2308      	movs	r3, #8
 80070ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070f2:	e048      	b.n	8007186 <UART_SetConfig+0x5a2>
 80070f4:	2310      	movs	r3, #16
 80070f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070fa:	e044      	b.n	8007186 <UART_SetConfig+0x5a2>
 80070fc:	2320      	movs	r3, #32
 80070fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007102:	e040      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007104:	2340      	movs	r3, #64	; 0x40
 8007106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800710a:	e03c      	b.n	8007186 <UART_SetConfig+0x5a2>
 800710c:	2380      	movs	r3, #128	; 0x80
 800710e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007112:	e038      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a5c      	ldr	r2, [pc, #368]	; (800728c <UART_SetConfig+0x6a8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d130      	bne.n	8007180 <UART_SetConfig+0x59c>
 800711e:	4b58      	ldr	r3, [pc, #352]	; (8007280 <UART_SetConfig+0x69c>)
 8007120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	2b05      	cmp	r3, #5
 8007128:	d826      	bhi.n	8007178 <UART_SetConfig+0x594>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <UART_SetConfig+0x54c>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007149 	.word	0x08007149
 8007134:	08007151 	.word	0x08007151
 8007138:	08007159 	.word	0x08007159
 800713c:	08007161 	.word	0x08007161
 8007140:	08007169 	.word	0x08007169
 8007144:	08007171 	.word	0x08007171
 8007148:	2302      	movs	r3, #2
 800714a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800714e:	e01a      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007150:	2304      	movs	r3, #4
 8007152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007156:	e016      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007158:	2308      	movs	r3, #8
 800715a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800715e:	e012      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007160:	2310      	movs	r3, #16
 8007162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007166:	e00e      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007168:	2320      	movs	r3, #32
 800716a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800716e:	e00a      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007170:	2340      	movs	r3, #64	; 0x40
 8007172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007176:	e006      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007178:	2380      	movs	r3, #128	; 0x80
 800717a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717e:	e002      	b.n	8007186 <UART_SetConfig+0x5a2>
 8007180:	2380      	movs	r3, #128	; 0x80
 8007182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a40      	ldr	r2, [pc, #256]	; (800728c <UART_SetConfig+0x6a8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	f040 80ef 	bne.w	8007370 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007192:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007196:	2b20      	cmp	r3, #32
 8007198:	dc46      	bgt.n	8007228 <UART_SetConfig+0x644>
 800719a:	2b02      	cmp	r3, #2
 800719c:	f2c0 8081 	blt.w	80072a2 <UART_SetConfig+0x6be>
 80071a0:	3b02      	subs	r3, #2
 80071a2:	2b1e      	cmp	r3, #30
 80071a4:	d87d      	bhi.n	80072a2 <UART_SetConfig+0x6be>
 80071a6:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <UART_SetConfig+0x5c8>)
 80071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ac:	0800722f 	.word	0x0800722f
 80071b0:	080072a3 	.word	0x080072a3
 80071b4:	08007237 	.word	0x08007237
 80071b8:	080072a3 	.word	0x080072a3
 80071bc:	080072a3 	.word	0x080072a3
 80071c0:	080072a3 	.word	0x080072a3
 80071c4:	08007247 	.word	0x08007247
 80071c8:	080072a3 	.word	0x080072a3
 80071cc:	080072a3 	.word	0x080072a3
 80071d0:	080072a3 	.word	0x080072a3
 80071d4:	080072a3 	.word	0x080072a3
 80071d8:	080072a3 	.word	0x080072a3
 80071dc:	080072a3 	.word	0x080072a3
 80071e0:	080072a3 	.word	0x080072a3
 80071e4:	08007257 	.word	0x08007257
 80071e8:	080072a3 	.word	0x080072a3
 80071ec:	080072a3 	.word	0x080072a3
 80071f0:	080072a3 	.word	0x080072a3
 80071f4:	080072a3 	.word	0x080072a3
 80071f8:	080072a3 	.word	0x080072a3
 80071fc:	080072a3 	.word	0x080072a3
 8007200:	080072a3 	.word	0x080072a3
 8007204:	080072a3 	.word	0x080072a3
 8007208:	080072a3 	.word	0x080072a3
 800720c:	080072a3 	.word	0x080072a3
 8007210:	080072a3 	.word	0x080072a3
 8007214:	080072a3 	.word	0x080072a3
 8007218:	080072a3 	.word	0x080072a3
 800721c:	080072a3 	.word	0x080072a3
 8007220:	080072a3 	.word	0x080072a3
 8007224:	08007295 	.word	0x08007295
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	d036      	beq.n	800729a <UART_SetConfig+0x6b6>
 800722c:	e039      	b.n	80072a2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800722e:	f7fe fd2b 	bl	8005c88 <HAL_RCCEx_GetD3PCLK1Freq>
 8007232:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007234:	e03b      	b.n	80072ae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007236:	f107 0314 	add.w	r3, r7, #20
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fd3a 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007244:	e033      	b.n	80072ae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007246:	f107 0308 	add.w	r3, r7, #8
 800724a:	4618      	mov	r0, r3
 800724c:	f7fe fe86 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007254:	e02b      	b.n	80072ae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007256:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <UART_SetConfig+0x69c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0320 	and.w	r3, r3, #32
 800725e:	2b00      	cmp	r3, #0
 8007260:	d009      	beq.n	8007276 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007262:	4b07      	ldr	r3, [pc, #28]	; (8007280 <UART_SetConfig+0x69c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	08db      	lsrs	r3, r3, #3
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	4a08      	ldr	r2, [pc, #32]	; (8007290 <UART_SetConfig+0x6ac>)
 800726e:	fa22 f303 	lsr.w	r3, r2, r3
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007274:	e01b      	b.n	80072ae <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007276:	4b06      	ldr	r3, [pc, #24]	; (8007290 <UART_SetConfig+0x6ac>)
 8007278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800727a:	e018      	b.n	80072ae <UART_SetConfig+0x6ca>
 800727c:	40011400 	.word	0x40011400
 8007280:	58024400 	.word	0x58024400
 8007284:	40007800 	.word	0x40007800
 8007288:	40007c00 	.word	0x40007c00
 800728c:	58000c00 	.word	0x58000c00
 8007290:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007294:	4bc4      	ldr	r3, [pc, #784]	; (80075a8 <UART_SetConfig+0x9c4>)
 8007296:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007298:	e009      	b.n	80072ae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800729a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800729e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072a0:	e005      	b.n	80072ae <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80072ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 81da 	beq.w	800766a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	4abc      	ldr	r2, [pc, #752]	; (80075ac <UART_SetConfig+0x9c8>)
 80072bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c0:	461a      	mov	r2, r3
 80072c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072c8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	4613      	mov	r3, r2
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	4413      	add	r3, r2
 80072d4:	6a3a      	ldr	r2, [r7, #32]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d305      	bcc.n	80072e6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072e0:	6a3a      	ldr	r2, [r7, #32]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d903      	bls.n	80072ee <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80072ec:	e1bd      	b.n	800766a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f0:	4618      	mov	r0, r3
 80072f2:	f04f 0100 	mov.w	r1, #0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	4aac      	ldr	r2, [pc, #688]	; (80075ac <UART_SetConfig+0x9c8>)
 80072fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007300:	b29a      	uxth	r2, r3
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	f7f9 f843 	bl	8000390 <__aeabi_uldivmod>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	4610      	mov	r0, r2
 8007310:	4619      	mov	r1, r3
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	f04f 0300 	mov.w	r3, #0
 800731a:	020b      	lsls	r3, r1, #8
 800731c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007320:	0202      	lsls	r2, r0, #8
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	6849      	ldr	r1, [r1, #4]
 8007326:	0849      	lsrs	r1, r1, #1
 8007328:	4608      	mov	r0, r1
 800732a:	f04f 0100 	mov.w	r1, #0
 800732e:	1814      	adds	r4, r2, r0
 8007330:	eb43 0501 	adc.w	r5, r3, r1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	461a      	mov	r2, r3
 800733a:	f04f 0300 	mov.w	r3, #0
 800733e:	4620      	mov	r0, r4
 8007340:	4629      	mov	r1, r5
 8007342:	f7f9 f825 	bl	8000390 <__aeabi_uldivmod>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4613      	mov	r3, r2
 800734c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007354:	d308      	bcc.n	8007368 <UART_SetConfig+0x784>
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735c:	d204      	bcs.n	8007368 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007364:	60da      	str	r2, [r3, #12]
 8007366:	e180      	b.n	800766a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800736e:	e17c      	b.n	800766a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007378:	f040 80be 	bne.w	80074f8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800737c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007380:	2b20      	cmp	r3, #32
 8007382:	dc49      	bgt.n	8007418 <UART_SetConfig+0x834>
 8007384:	2b00      	cmp	r3, #0
 8007386:	db7c      	blt.n	8007482 <UART_SetConfig+0x89e>
 8007388:	2b20      	cmp	r3, #32
 800738a:	d87a      	bhi.n	8007482 <UART_SetConfig+0x89e>
 800738c:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <UART_SetConfig+0x7b0>)
 800738e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007392:	bf00      	nop
 8007394:	0800741f 	.word	0x0800741f
 8007398:	08007427 	.word	0x08007427
 800739c:	08007483 	.word	0x08007483
 80073a0:	08007483 	.word	0x08007483
 80073a4:	0800742f 	.word	0x0800742f
 80073a8:	08007483 	.word	0x08007483
 80073ac:	08007483 	.word	0x08007483
 80073b0:	08007483 	.word	0x08007483
 80073b4:	0800743f 	.word	0x0800743f
 80073b8:	08007483 	.word	0x08007483
 80073bc:	08007483 	.word	0x08007483
 80073c0:	08007483 	.word	0x08007483
 80073c4:	08007483 	.word	0x08007483
 80073c8:	08007483 	.word	0x08007483
 80073cc:	08007483 	.word	0x08007483
 80073d0:	08007483 	.word	0x08007483
 80073d4:	0800744f 	.word	0x0800744f
 80073d8:	08007483 	.word	0x08007483
 80073dc:	08007483 	.word	0x08007483
 80073e0:	08007483 	.word	0x08007483
 80073e4:	08007483 	.word	0x08007483
 80073e8:	08007483 	.word	0x08007483
 80073ec:	08007483 	.word	0x08007483
 80073f0:	08007483 	.word	0x08007483
 80073f4:	08007483 	.word	0x08007483
 80073f8:	08007483 	.word	0x08007483
 80073fc:	08007483 	.word	0x08007483
 8007400:	08007483 	.word	0x08007483
 8007404:	08007483 	.word	0x08007483
 8007408:	08007483 	.word	0x08007483
 800740c:	08007483 	.word	0x08007483
 8007410:	08007483 	.word	0x08007483
 8007414:	08007475 	.word	0x08007475
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	d02e      	beq.n	800747a <UART_SetConfig+0x896>
 800741c:	e031      	b.n	8007482 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800741e:	f7fd fc85 	bl	8004d2c <HAL_RCC_GetPCLK1Freq>
 8007422:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007424:	e033      	b.n	800748e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007426:	f7fd fc97 	bl	8004d58 <HAL_RCC_GetPCLK2Freq>
 800742a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800742c:	e02f      	b.n	800748e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800742e:	f107 0314 	add.w	r3, r7, #20
 8007432:	4618      	mov	r0, r3
 8007434:	f7fe fc3e 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800743c:	e027      	b.n	800748e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800743e:	f107 0308 	add.w	r3, r7, #8
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe fd8a 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800744c:	e01f      	b.n	800748e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800744e:	4b58      	ldr	r3, [pc, #352]	; (80075b0 <UART_SetConfig+0x9cc>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d009      	beq.n	800746e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800745a:	4b55      	ldr	r3, [pc, #340]	; (80075b0 <UART_SetConfig+0x9cc>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	08db      	lsrs	r3, r3, #3
 8007460:	f003 0303 	and.w	r3, r3, #3
 8007464:	4a53      	ldr	r2, [pc, #332]	; (80075b4 <UART_SetConfig+0x9d0>)
 8007466:	fa22 f303 	lsr.w	r3, r2, r3
 800746a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800746c:	e00f      	b.n	800748e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800746e:	4b51      	ldr	r3, [pc, #324]	; (80075b4 <UART_SetConfig+0x9d0>)
 8007470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007472:	e00c      	b.n	800748e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007474:	4b4c      	ldr	r3, [pc, #304]	; (80075a8 <UART_SetConfig+0x9c4>)
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007478:	e009      	b.n	800748e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800747a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007480:	e005      	b.n	800748e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800748c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 80ea 	beq.w	800766a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749a:	4a44      	ldr	r2, [pc, #272]	; (80075ac <UART_SetConfig+0x9c8>)
 800749c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074a0:	461a      	mov	r2, r3
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074a8:	005a      	lsls	r2, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	085b      	lsrs	r3, r3, #1
 80074b0:	441a      	add	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	2b0f      	cmp	r3, #15
 80074c0:	d916      	bls.n	80074f0 <UART_SetConfig+0x90c>
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c8:	d212      	bcs.n	80074f0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f023 030f 	bic.w	r3, r3, #15
 80074d2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	085b      	lsrs	r3, r3, #1
 80074d8:	b29b      	uxth	r3, r3
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	b29a      	uxth	r2, r3
 80074e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074e2:	4313      	orrs	r3, r2
 80074e4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80074ec:	60da      	str	r2, [r3, #12]
 80074ee:	e0bc      	b.n	800766a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80074f6:	e0b8      	b.n	800766a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80074fc:	2b20      	cmp	r3, #32
 80074fe:	dc4b      	bgt.n	8007598 <UART_SetConfig+0x9b4>
 8007500:	2b00      	cmp	r3, #0
 8007502:	f2c0 8087 	blt.w	8007614 <UART_SetConfig+0xa30>
 8007506:	2b20      	cmp	r3, #32
 8007508:	f200 8084 	bhi.w	8007614 <UART_SetConfig+0xa30>
 800750c:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <UART_SetConfig+0x930>)
 800750e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007512:	bf00      	nop
 8007514:	0800759f 	.word	0x0800759f
 8007518:	080075b9 	.word	0x080075b9
 800751c:	08007615 	.word	0x08007615
 8007520:	08007615 	.word	0x08007615
 8007524:	080075c1 	.word	0x080075c1
 8007528:	08007615 	.word	0x08007615
 800752c:	08007615 	.word	0x08007615
 8007530:	08007615 	.word	0x08007615
 8007534:	080075d1 	.word	0x080075d1
 8007538:	08007615 	.word	0x08007615
 800753c:	08007615 	.word	0x08007615
 8007540:	08007615 	.word	0x08007615
 8007544:	08007615 	.word	0x08007615
 8007548:	08007615 	.word	0x08007615
 800754c:	08007615 	.word	0x08007615
 8007550:	08007615 	.word	0x08007615
 8007554:	080075e1 	.word	0x080075e1
 8007558:	08007615 	.word	0x08007615
 800755c:	08007615 	.word	0x08007615
 8007560:	08007615 	.word	0x08007615
 8007564:	08007615 	.word	0x08007615
 8007568:	08007615 	.word	0x08007615
 800756c:	08007615 	.word	0x08007615
 8007570:	08007615 	.word	0x08007615
 8007574:	08007615 	.word	0x08007615
 8007578:	08007615 	.word	0x08007615
 800757c:	08007615 	.word	0x08007615
 8007580:	08007615 	.word	0x08007615
 8007584:	08007615 	.word	0x08007615
 8007588:	08007615 	.word	0x08007615
 800758c:	08007615 	.word	0x08007615
 8007590:	08007615 	.word	0x08007615
 8007594:	08007607 	.word	0x08007607
 8007598:	2b40      	cmp	r3, #64	; 0x40
 800759a:	d037      	beq.n	800760c <UART_SetConfig+0xa28>
 800759c:	e03a      	b.n	8007614 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800759e:	f7fd fbc5 	bl	8004d2c <HAL_RCC_GetPCLK1Freq>
 80075a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80075a4:	e03c      	b.n	8007620 <UART_SetConfig+0xa3c>
 80075a6:	bf00      	nop
 80075a8:	003d0900 	.word	0x003d0900
 80075ac:	0801a518 	.word	0x0801a518
 80075b0:	58024400 	.word	0x58024400
 80075b4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075b8:	f7fd fbce 	bl	8004d58 <HAL_RCC_GetPCLK2Freq>
 80075bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80075be:	e02f      	b.n	8007620 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c0:	f107 0314 	add.w	r3, r7, #20
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe fb75 	bl	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075ce:	e027      	b.n	8007620 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075d0:	f107 0308 	add.w	r3, r7, #8
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fcc1 	bl	8005f5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075de:	e01f      	b.n	8007620 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075e0:	4b2c      	ldr	r3, [pc, #176]	; (8007694 <UART_SetConfig+0xab0>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d009      	beq.n	8007600 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075ec:	4b29      	ldr	r3, [pc, #164]	; (8007694 <UART_SetConfig+0xab0>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	08db      	lsrs	r3, r3, #3
 80075f2:	f003 0303 	and.w	r3, r3, #3
 80075f6:	4a28      	ldr	r2, [pc, #160]	; (8007698 <UART_SetConfig+0xab4>)
 80075f8:	fa22 f303 	lsr.w	r3, r2, r3
 80075fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075fe:	e00f      	b.n	8007620 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007600:	4b25      	ldr	r3, [pc, #148]	; (8007698 <UART_SetConfig+0xab4>)
 8007602:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007604:	e00c      	b.n	8007620 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007606:	4b25      	ldr	r3, [pc, #148]	; (800769c <UART_SetConfig+0xab8>)
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800760a:	e009      	b.n	8007620 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800760c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007612:	e005      	b.n	8007620 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800761e:	bf00      	nop
    }

    if (pclk != 0U)
 8007620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d021      	beq.n	800766a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	4a1d      	ldr	r2, [pc, #116]	; (80076a0 <UART_SetConfig+0xabc>)
 800762c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007630:	461a      	mov	r2, r3
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	fbb3 f2f2 	udiv	r2, r3, r2
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	085b      	lsrs	r3, r3, #1
 800763e:	441a      	add	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	fbb2 f3f3 	udiv	r3, r2, r3
 8007648:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800764a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764c:	2b0f      	cmp	r3, #15
 800764e:	d909      	bls.n	8007664 <UART_SetConfig+0xa80>
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007656:	d205      	bcs.n	8007664 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	b29a      	uxth	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	e002      	b.n	800766a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007686:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800768a:	4618      	mov	r0, r3
 800768c:	3738      	adds	r7, #56	; 0x38
 800768e:	46bd      	mov	sp, r7
 8007690:	bdb0      	pop	{r4, r5, r7, pc}
 8007692:	bf00      	nop
 8007694:	58024400 	.word	0x58024400
 8007698:	03d09000 	.word	0x03d09000
 800769c:	003d0900 	.word	0x003d0900
 80076a0:	0801a518 	.word	0x0801a518

080076a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00a      	beq.n	80076ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00a      	beq.n	8007712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	f003 0310 	and.w	r3, r3, #16
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01a      	beq.n	80077ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077a2:	d10a      	bne.n	80077ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	605a      	str	r2, [r3, #4]
  }
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077f8:	f7f9 ff58 	bl	80016ac <HAL_GetTick>
 80077fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0308 	and.w	r3, r3, #8
 8007808:	2b08      	cmp	r3, #8
 800780a:	d10e      	bne.n	800782a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800780c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f82f 	bl	800787e <UART_WaitOnFlagUntilTimeout>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e025      	b.n	8007876 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b04      	cmp	r3, #4
 8007836:	d10e      	bne.n	8007856 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f819 	bl	800787e <UART_WaitOnFlagUntilTimeout>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e00f      	b.n	8007876 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b09c      	sub	sp, #112	; 0x70
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	603b      	str	r3, [r7, #0]
 800788a:	4613      	mov	r3, r2
 800788c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800788e:	e0a9      	b.n	80079e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007896:	f000 80a5 	beq.w	80079e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800789a:	f7f9 ff07 	bl	80016ac <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d302      	bcc.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80078aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d140      	bne.n	8007932 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078c4:	667b      	str	r3, [r7, #100]	; 0x64
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e6      	bne.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f4:	f023 0301 	bic.w	r3, r3, #1
 80078f8:	663b      	str	r3, [r7, #96]	; 0x60
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3308      	adds	r3, #8
 8007900:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007902:	64ba      	str	r2, [r7, #72]	; 0x48
 8007904:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e5      	bne.n	80078e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2220      	movs	r2, #32
 800791a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2220      	movs	r2, #32
 8007922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e069      	b.n	8007a06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b00      	cmp	r3, #0
 800793e:	d051      	beq.n	80079e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800794a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800794e:	d149      	bne.n	80079e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007958:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800796e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007978:	637b      	str	r3, [r7, #52]	; 0x34
 800797a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800797e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007980:	e841 2300 	strex	r3, r2, [r1]
 8007984:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e6      	bne.n	800795a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3308      	adds	r3, #8
 8007992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	613b      	str	r3, [r7, #16]
   return(result);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f023 0301 	bic.w	r3, r3, #1
 80079a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3308      	adds	r3, #8
 80079aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079ac:	623a      	str	r2, [r7, #32]
 80079ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	69f9      	ldr	r1, [r7, #28]
 80079b2:	6a3a      	ldr	r2, [r7, #32]
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e5      	bne.n	800798c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e010      	b.n	8007a06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	69da      	ldr	r2, [r3, #28]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	4013      	ands	r3, r2
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	bf0c      	ite	eq
 80079f4:	2301      	moveq	r3, #1
 80079f6:	2300      	movne	r3, #0
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	461a      	mov	r2, r3
 80079fc:	79fb      	ldrb	r3, [r7, #7]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	f43f af46 	beq.w	8007890 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3770      	adds	r7, #112	; 0x70
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b085      	sub	sp, #20
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d101      	bne.n	8007a24 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a20:	2302      	movs	r3, #2
 8007a22:	e027      	b.n	8007a74 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2224      	movs	r2, #36	; 0x24
 8007a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0201 	bic.w	r2, r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d101      	bne.n	8007a98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e02d      	b.n	8007af4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2224      	movs	r2, #36	; 0x24
 8007aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0201 	bic.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f84f 	bl	8007b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e02d      	b.n	8007b70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2224      	movs	r2, #36	; 0x24
 8007b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0201 	bic.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f811 	bl	8007b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d108      	bne.n	8007b9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b98:	e031      	b.n	8007bfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b9a:	2310      	movs	r3, #16
 8007b9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b9e:	2310      	movs	r3, #16
 8007ba0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	0e5b      	lsrs	r3, r3, #25
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f003 0307 	and.w	r3, r3, #7
 8007bb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	0f5b      	lsrs	r3, r3, #29
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	f003 0307 	and.w	r3, r3, #7
 8007bc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	7b3a      	ldrb	r2, [r7, #12]
 8007bc6:	4911      	ldr	r1, [pc, #68]	; (8007c0c <UARTEx_SetNbDataToProcess+0x94>)
 8007bc8:	5c8a      	ldrb	r2, [r1, r2]
 8007bca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bce:	7b3a      	ldrb	r2, [r7, #12]
 8007bd0:	490f      	ldr	r1, [pc, #60]	; (8007c10 <UARTEx_SetNbDataToProcess+0x98>)
 8007bd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	7b7a      	ldrb	r2, [r7, #13]
 8007be4:	4909      	ldr	r1, [pc, #36]	; (8007c0c <UARTEx_SetNbDataToProcess+0x94>)
 8007be6:	5c8a      	ldrb	r2, [r1, r2]
 8007be8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bec:	7b7a      	ldrb	r2, [r7, #13]
 8007bee:	4908      	ldr	r1, [pc, #32]	; (8007c10 <UARTEx_SetNbDataToProcess+0x98>)
 8007bf0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007bfe:	bf00      	nop
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	0801a530 	.word	0x0801a530
 8007c10:	0801a538 	.word	0x0801a538

08007c14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c14:	b084      	sub	sp, #16
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	f107 001c 	add.w	r0, r7, #28
 8007c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d120      	bne.n	8007c6e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68da      	ldr	r2, [r3, #12]
 8007c3c:	4b2a      	ldr	r3, [pc, #168]	; (8007ce8 <USB_CoreInit+0xd4>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d105      	bne.n	8007c62 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 faa8 	bl	80081b8 <USB_CoreReset>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	73fb      	strb	r3, [r7, #15]
 8007c6c:	e01a      	b.n	8007ca4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa9c 	bl	80081b8 <USB_CoreReset>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d106      	bne.n	8007c98 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	639a      	str	r2, [r3, #56]	; 0x38
 8007c96:	e005      	b.n	8007ca4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d116      	bne.n	8007cd8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007cb8:	4b0c      	ldr	r3, [pc, #48]	; (8007cec <USB_CoreInit+0xd8>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f043 0206 	orr.w	r2, r3, #6
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f043 0220 	orr.w	r2, r3, #32
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ce4:	b004      	add	sp, #16
 8007ce6:	4770      	bx	lr
 8007ce8:	ffbdffbf 	.word	0xffbdffbf
 8007cec:	03ee0000 	.word	0x03ee0000

08007cf0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f023 0201 	bic.w	r2, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d115      	bne.n	8007d60 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d40:	2001      	movs	r0, #1
 8007d42:	f7f9 fcbf 	bl	80016c4 <HAL_Delay>
      ms++;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fa25 	bl	800819c <USB_GetMode>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d01e      	beq.n	8007d96 <USB_SetCurrentMode+0x84>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b31      	cmp	r3, #49	; 0x31
 8007d5c:	d9f0      	bls.n	8007d40 <USB_SetCurrentMode+0x2e>
 8007d5e:	e01a      	b.n	8007d96 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d115      	bne.n	8007d92 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d72:	2001      	movs	r0, #1
 8007d74:	f7f9 fca6 	bl	80016c4 <HAL_Delay>
      ms++;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa0c 	bl	800819c <USB_GetMode>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <USB_SetCurrentMode+0x84>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b31      	cmp	r3, #49	; 0x31
 8007d8e:	d9f0      	bls.n	8007d72 <USB_SetCurrentMode+0x60>
 8007d90:	e001      	b.n	8007d96 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e005      	b.n	8007da2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b32      	cmp	r3, #50	; 0x32
 8007d9a:	d101      	bne.n	8007da0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e000      	b.n	8007da2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dac:	b084      	sub	sp, #16
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b086      	sub	sp, #24
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	613b      	str	r3, [r7, #16]
 8007dca:	e009      	b.n	8007de0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	3340      	adds	r3, #64	; 0x40
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	2b0e      	cmp	r3, #14
 8007de4:	d9f2      	bls.n	8007dcc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d11c      	bne.n	8007e26 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dfa:	f043 0302 	orr.w	r3, r3, #2
 8007dfe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	e005      	b.n	8007e32 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e38:	461a      	mov	r2, r3
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e44:	4619      	mov	r1, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	680b      	ldr	r3, [r1, #0]
 8007e50:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d10c      	bne.n	8007e72 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d104      	bne.n	8007e68 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e5e:	2100      	movs	r1, #0
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f961 	bl	8008128 <USB_SetDevSpeed>
 8007e66:	e008      	b.n	8007e7a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e68:	2101      	movs	r1, #1
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f95c 	bl	8008128 <USB_SetDevSpeed>
 8007e70:	e003      	b.n	8007e7a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e72:	2103      	movs	r1, #3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f957 	bl	8008128 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e7a:	2110      	movs	r1, #16
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f8f3 	bl	8008068 <USB_FlushTxFifo>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f91d 	bl	80080cc <USB_FlushRxFifo>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eae:	461a      	mov	r2, r3
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eba:	461a      	mov	r2, r3
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	613b      	str	r3, [r7, #16]
 8007ec4:	e043      	b.n	8007f4e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007edc:	d118      	bne.n	8007f10 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10a      	bne.n	8007efa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	e013      	b.n	8007f22 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f06:	461a      	mov	r2, r3
 8007f08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	e008      	b.n	8007f22 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	2300      	movs	r3, #0
 8007f20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2e:	461a      	mov	r2, r3
 8007f30:	2300      	movs	r3, #0
 8007f32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f40:	461a      	mov	r2, r3
 8007f42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	613b      	str	r3, [r7, #16]
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d3b7      	bcc.n	8007ec6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f56:	2300      	movs	r3, #0
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	e043      	b.n	8007fe4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f72:	d118      	bne.n	8007fa6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10a      	bne.n	8007f90 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f86:	461a      	mov	r2, r3
 8007f88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	e013      	b.n	8007fb8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	e008      	b.n	8007fb8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fdc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d3b7      	bcc.n	8007f5c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ffa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ffe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800800c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	2b00      	cmp	r3, #0
 8008012:	d105      	bne.n	8008020 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	f043 0210 	orr.w	r2, r3, #16
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	4b0e      	ldr	r3, [pc, #56]	; (8008060 <USB_DevInit+0x2b4>)
 8008026:	4313      	orrs	r3, r2
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800802c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	f043 0208 	orr.w	r2, r3, #8
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800803e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008040:	2b01      	cmp	r3, #1
 8008042:	d105      	bne.n	8008050 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	699a      	ldr	r2, [r3, #24]
 8008048:	4b06      	ldr	r3, [pc, #24]	; (8008064 <USB_DevInit+0x2b8>)
 800804a:	4313      	orrs	r3, r2
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008050:	7dfb      	ldrb	r3, [r7, #23]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800805c:	b004      	add	sp, #16
 800805e:	4770      	bx	lr
 8008060:	803c3800 	.word	0x803c3800
 8008064:	40000004 	.word	0x40000004

08008068 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3301      	adds	r3, #1
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	4a12      	ldr	r2, [pc, #72]	; (80080c8 <USB_FlushTxFifo+0x60>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d901      	bls.n	8008086 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e01a      	b.n	80080bc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	daf3      	bge.n	8008076 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	019b      	lsls	r3, r3, #6
 8008096:	f043 0220 	orr.w	r2, r3, #32
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3301      	adds	r3, #1
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	4a08      	ldr	r2, [pc, #32]	; (80080c8 <USB_FlushTxFifo+0x60>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d901      	bls.n	80080ae <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e006      	b.n	80080bc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	d0f1      	beq.n	800809e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	00030d40 	.word	0x00030d40

080080cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	3301      	adds	r3, #1
 80080dc:	60fb      	str	r3, [r7, #12]
 80080de:	4a11      	ldr	r2, [pc, #68]	; (8008124 <USB_FlushRxFifo+0x58>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d901      	bls.n	80080e8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e017      	b.n	8008118 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	daf3      	bge.n	80080d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2210      	movs	r2, #16
 80080f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3301      	adds	r3, #1
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	4a08      	ldr	r2, [pc, #32]	; (8008124 <USB_FlushRxFifo+0x58>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d901      	bls.n	800810a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e006      	b.n	8008118 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f003 0310 	and.w	r3, r3, #16
 8008112:	2b10      	cmp	r3, #16
 8008114:	d0f1      	beq.n	80080fa <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	00030d40 	.word	0x00030d40

08008128 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	68f9      	ldr	r1, [r7, #12]
 8008144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008148:	4313      	orrs	r3, r2
 800814a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800815a:	b480      	push	{r7}
 800815c:	b085      	sub	sp, #20
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008174:	f023 0303 	bic.w	r3, r3, #3
 8008178:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008188:	f043 0302 	orr.w	r3, r3, #2
 800818c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	f003 0301 	and.w	r3, r3, #1
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3301      	adds	r3, #1
 80081c8:	60fb      	str	r3, [r7, #12]
 80081ca:	4a13      	ldr	r2, [pc, #76]	; (8008218 <USB_CoreReset+0x60>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d901      	bls.n	80081d4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e01a      	b.n	800820a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	daf3      	bge.n	80081c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f043 0201 	orr.w	r2, r3, #1
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	4a09      	ldr	r2, [pc, #36]	; (8008218 <USB_CoreReset+0x60>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d901      	bls.n	80081fc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e006      	b.n	800820a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b01      	cmp	r3, #1
 8008206:	d0f1      	beq.n	80081ec <USB_CoreReset+0x34>

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	00030d40 	.word	0x00030d40

0800821c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800821c:	b5b0      	push	{r4, r5, r7, lr}
 800821e:	b08c      	sub	sp, #48	; 0x30
 8008220:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008222:	4b96      	ldr	r3, [pc, #600]	; (800847c <MX_LWIP_Init+0x260>)
 8008224:	22c0      	movs	r2, #192	; 0xc0
 8008226:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008228:	4b94      	ldr	r3, [pc, #592]	; (800847c <MX_LWIP_Init+0x260>)
 800822a:	22a8      	movs	r2, #168	; 0xa8
 800822c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800822e:	4b93      	ldr	r3, [pc, #588]	; (800847c <MX_LWIP_Init+0x260>)
 8008230:	2201      	movs	r2, #1
 8008232:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 15;
 8008234:	4b91      	ldr	r3, [pc, #580]	; (800847c <MX_LWIP_Init+0x260>)
 8008236:	220f      	movs	r2, #15
 8008238:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800823a:	4b91      	ldr	r3, [pc, #580]	; (8008480 <MX_LWIP_Init+0x264>)
 800823c:	22ff      	movs	r2, #255	; 0xff
 800823e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008240:	4b8f      	ldr	r3, [pc, #572]	; (8008480 <MX_LWIP_Init+0x264>)
 8008242:	22ff      	movs	r2, #255	; 0xff
 8008244:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008246:	4b8e      	ldr	r3, [pc, #568]	; (8008480 <MX_LWIP_Init+0x264>)
 8008248:	22ff      	movs	r2, #255	; 0xff
 800824a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800824c:	4b8c      	ldr	r3, [pc, #560]	; (8008480 <MX_LWIP_Init+0x264>)
 800824e:	2200      	movs	r2, #0
 8008250:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8008252:	4b8c      	ldr	r3, [pc, #560]	; (8008484 <MX_LWIP_Init+0x268>)
 8008254:	2200      	movs	r2, #0
 8008256:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8008258:	4b8a      	ldr	r3, [pc, #552]	; (8008484 <MX_LWIP_Init+0x268>)
 800825a:	2200      	movs	r2, #0
 800825c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800825e:	4b89      	ldr	r3, [pc, #548]	; (8008484 <MX_LWIP_Init+0x268>)
 8008260:	2200      	movs	r2, #0
 8008262:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8008264:	4b87      	ldr	r3, [pc, #540]	; (8008484 <MX_LWIP_Init+0x268>)
 8008266:	2200      	movs	r2, #0
 8008268:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800826a:	2100      	movs	r1, #0
 800826c:	2000      	movs	r0, #0
 800826e:	f003 fe35 	bl	800bedc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008272:	4b82      	ldr	r3, [pc, #520]	; (800847c <MX_LWIP_Init+0x260>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	061a      	lsls	r2, r3, #24
 8008278:	4b80      	ldr	r3, [pc, #512]	; (800847c <MX_LWIP_Init+0x260>)
 800827a:	785b      	ldrb	r3, [r3, #1]
 800827c:	041b      	lsls	r3, r3, #16
 800827e:	431a      	orrs	r2, r3
 8008280:	4b7e      	ldr	r3, [pc, #504]	; (800847c <MX_LWIP_Init+0x260>)
 8008282:	789b      	ldrb	r3, [r3, #2]
 8008284:	021b      	lsls	r3, r3, #8
 8008286:	4313      	orrs	r3, r2
 8008288:	4a7c      	ldr	r2, [pc, #496]	; (800847c <MX_LWIP_Init+0x260>)
 800828a:	78d2      	ldrb	r2, [r2, #3]
 800828c:	4313      	orrs	r3, r2
 800828e:	061a      	lsls	r2, r3, #24
 8008290:	4b7a      	ldr	r3, [pc, #488]	; (800847c <MX_LWIP_Init+0x260>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	0619      	lsls	r1, r3, #24
 8008296:	4b79      	ldr	r3, [pc, #484]	; (800847c <MX_LWIP_Init+0x260>)
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	041b      	lsls	r3, r3, #16
 800829c:	4319      	orrs	r1, r3
 800829e:	4b77      	ldr	r3, [pc, #476]	; (800847c <MX_LWIP_Init+0x260>)
 80082a0:	789b      	ldrb	r3, [r3, #2]
 80082a2:	021b      	lsls	r3, r3, #8
 80082a4:	430b      	orrs	r3, r1
 80082a6:	4975      	ldr	r1, [pc, #468]	; (800847c <MX_LWIP_Init+0x260>)
 80082a8:	78c9      	ldrb	r1, [r1, #3]
 80082aa:	430b      	orrs	r3, r1
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082b2:	431a      	orrs	r2, r3
 80082b4:	4b71      	ldr	r3, [pc, #452]	; (800847c <MX_LWIP_Init+0x260>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	0619      	lsls	r1, r3, #24
 80082ba:	4b70      	ldr	r3, [pc, #448]	; (800847c <MX_LWIP_Init+0x260>)
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	4319      	orrs	r1, r3
 80082c2:	4b6e      	ldr	r3, [pc, #440]	; (800847c <MX_LWIP_Init+0x260>)
 80082c4:	789b      	ldrb	r3, [r3, #2]
 80082c6:	021b      	lsls	r3, r3, #8
 80082c8:	430b      	orrs	r3, r1
 80082ca:	496c      	ldr	r1, [pc, #432]	; (800847c <MX_LWIP_Init+0x260>)
 80082cc:	78c9      	ldrb	r1, [r1, #3]
 80082ce:	430b      	orrs	r3, r1
 80082d0:	0a1b      	lsrs	r3, r3, #8
 80082d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80082d6:	431a      	orrs	r2, r3
 80082d8:	4b68      	ldr	r3, [pc, #416]	; (800847c <MX_LWIP_Init+0x260>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	0619      	lsls	r1, r3, #24
 80082de:	4b67      	ldr	r3, [pc, #412]	; (800847c <MX_LWIP_Init+0x260>)
 80082e0:	785b      	ldrb	r3, [r3, #1]
 80082e2:	041b      	lsls	r3, r3, #16
 80082e4:	4319      	orrs	r1, r3
 80082e6:	4b65      	ldr	r3, [pc, #404]	; (800847c <MX_LWIP_Init+0x260>)
 80082e8:	789b      	ldrb	r3, [r3, #2]
 80082ea:	021b      	lsls	r3, r3, #8
 80082ec:	430b      	orrs	r3, r1
 80082ee:	4963      	ldr	r1, [pc, #396]	; (800847c <MX_LWIP_Init+0x260>)
 80082f0:	78c9      	ldrb	r1, [r1, #3]
 80082f2:	430b      	orrs	r3, r1
 80082f4:	0e1b      	lsrs	r3, r3, #24
 80082f6:	4313      	orrs	r3, r2
 80082f8:	4a63      	ldr	r2, [pc, #396]	; (8008488 <MX_LWIP_Init+0x26c>)
 80082fa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80082fc:	4b60      	ldr	r3, [pc, #384]	; (8008480 <MX_LWIP_Init+0x264>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	061a      	lsls	r2, r3, #24
 8008302:	4b5f      	ldr	r3, [pc, #380]	; (8008480 <MX_LWIP_Init+0x264>)
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	041b      	lsls	r3, r3, #16
 8008308:	431a      	orrs	r2, r3
 800830a:	4b5d      	ldr	r3, [pc, #372]	; (8008480 <MX_LWIP_Init+0x264>)
 800830c:	789b      	ldrb	r3, [r3, #2]
 800830e:	021b      	lsls	r3, r3, #8
 8008310:	4313      	orrs	r3, r2
 8008312:	4a5b      	ldr	r2, [pc, #364]	; (8008480 <MX_LWIP_Init+0x264>)
 8008314:	78d2      	ldrb	r2, [r2, #3]
 8008316:	4313      	orrs	r3, r2
 8008318:	061a      	lsls	r2, r3, #24
 800831a:	4b59      	ldr	r3, [pc, #356]	; (8008480 <MX_LWIP_Init+0x264>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	0619      	lsls	r1, r3, #24
 8008320:	4b57      	ldr	r3, [pc, #348]	; (8008480 <MX_LWIP_Init+0x264>)
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	041b      	lsls	r3, r3, #16
 8008326:	4319      	orrs	r1, r3
 8008328:	4b55      	ldr	r3, [pc, #340]	; (8008480 <MX_LWIP_Init+0x264>)
 800832a:	789b      	ldrb	r3, [r3, #2]
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	430b      	orrs	r3, r1
 8008330:	4953      	ldr	r1, [pc, #332]	; (8008480 <MX_LWIP_Init+0x264>)
 8008332:	78c9      	ldrb	r1, [r1, #3]
 8008334:	430b      	orrs	r3, r1
 8008336:	021b      	lsls	r3, r3, #8
 8008338:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800833c:	431a      	orrs	r2, r3
 800833e:	4b50      	ldr	r3, [pc, #320]	; (8008480 <MX_LWIP_Init+0x264>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	0619      	lsls	r1, r3, #24
 8008344:	4b4e      	ldr	r3, [pc, #312]	; (8008480 <MX_LWIP_Init+0x264>)
 8008346:	785b      	ldrb	r3, [r3, #1]
 8008348:	041b      	lsls	r3, r3, #16
 800834a:	4319      	orrs	r1, r3
 800834c:	4b4c      	ldr	r3, [pc, #304]	; (8008480 <MX_LWIP_Init+0x264>)
 800834e:	789b      	ldrb	r3, [r3, #2]
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	430b      	orrs	r3, r1
 8008354:	494a      	ldr	r1, [pc, #296]	; (8008480 <MX_LWIP_Init+0x264>)
 8008356:	78c9      	ldrb	r1, [r1, #3]
 8008358:	430b      	orrs	r3, r1
 800835a:	0a1b      	lsrs	r3, r3, #8
 800835c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008360:	431a      	orrs	r2, r3
 8008362:	4b47      	ldr	r3, [pc, #284]	; (8008480 <MX_LWIP_Init+0x264>)
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	0619      	lsls	r1, r3, #24
 8008368:	4b45      	ldr	r3, [pc, #276]	; (8008480 <MX_LWIP_Init+0x264>)
 800836a:	785b      	ldrb	r3, [r3, #1]
 800836c:	041b      	lsls	r3, r3, #16
 800836e:	4319      	orrs	r1, r3
 8008370:	4b43      	ldr	r3, [pc, #268]	; (8008480 <MX_LWIP_Init+0x264>)
 8008372:	789b      	ldrb	r3, [r3, #2]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	430b      	orrs	r3, r1
 8008378:	4941      	ldr	r1, [pc, #260]	; (8008480 <MX_LWIP_Init+0x264>)
 800837a:	78c9      	ldrb	r1, [r1, #3]
 800837c:	430b      	orrs	r3, r1
 800837e:	0e1b      	lsrs	r3, r3, #24
 8008380:	4313      	orrs	r3, r2
 8008382:	4a42      	ldr	r2, [pc, #264]	; (800848c <MX_LWIP_Init+0x270>)
 8008384:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008386:	4b3f      	ldr	r3, [pc, #252]	; (8008484 <MX_LWIP_Init+0x268>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	061a      	lsls	r2, r3, #24
 800838c:	4b3d      	ldr	r3, [pc, #244]	; (8008484 <MX_LWIP_Init+0x268>)
 800838e:	785b      	ldrb	r3, [r3, #1]
 8008390:	041b      	lsls	r3, r3, #16
 8008392:	431a      	orrs	r2, r3
 8008394:	4b3b      	ldr	r3, [pc, #236]	; (8008484 <MX_LWIP_Init+0x268>)
 8008396:	789b      	ldrb	r3, [r3, #2]
 8008398:	021b      	lsls	r3, r3, #8
 800839a:	4313      	orrs	r3, r2
 800839c:	4a39      	ldr	r2, [pc, #228]	; (8008484 <MX_LWIP_Init+0x268>)
 800839e:	78d2      	ldrb	r2, [r2, #3]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	061a      	lsls	r2, r3, #24
 80083a4:	4b37      	ldr	r3, [pc, #220]	; (8008484 <MX_LWIP_Init+0x268>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	0619      	lsls	r1, r3, #24
 80083aa:	4b36      	ldr	r3, [pc, #216]	; (8008484 <MX_LWIP_Init+0x268>)
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	041b      	lsls	r3, r3, #16
 80083b0:	4319      	orrs	r1, r3
 80083b2:	4b34      	ldr	r3, [pc, #208]	; (8008484 <MX_LWIP_Init+0x268>)
 80083b4:	789b      	ldrb	r3, [r3, #2]
 80083b6:	021b      	lsls	r3, r3, #8
 80083b8:	430b      	orrs	r3, r1
 80083ba:	4932      	ldr	r1, [pc, #200]	; (8008484 <MX_LWIP_Init+0x268>)
 80083bc:	78c9      	ldrb	r1, [r1, #3]
 80083be:	430b      	orrs	r3, r1
 80083c0:	021b      	lsls	r3, r3, #8
 80083c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083c6:	431a      	orrs	r2, r3
 80083c8:	4b2e      	ldr	r3, [pc, #184]	; (8008484 <MX_LWIP_Init+0x268>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	0619      	lsls	r1, r3, #24
 80083ce:	4b2d      	ldr	r3, [pc, #180]	; (8008484 <MX_LWIP_Init+0x268>)
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	041b      	lsls	r3, r3, #16
 80083d4:	4319      	orrs	r1, r3
 80083d6:	4b2b      	ldr	r3, [pc, #172]	; (8008484 <MX_LWIP_Init+0x268>)
 80083d8:	789b      	ldrb	r3, [r3, #2]
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	430b      	orrs	r3, r1
 80083de:	4929      	ldr	r1, [pc, #164]	; (8008484 <MX_LWIP_Init+0x268>)
 80083e0:	78c9      	ldrb	r1, [r1, #3]
 80083e2:	430b      	orrs	r3, r1
 80083e4:	0a1b      	lsrs	r3, r3, #8
 80083e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80083ea:	431a      	orrs	r2, r3
 80083ec:	4b25      	ldr	r3, [pc, #148]	; (8008484 <MX_LWIP_Init+0x268>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	0619      	lsls	r1, r3, #24
 80083f2:	4b24      	ldr	r3, [pc, #144]	; (8008484 <MX_LWIP_Init+0x268>)
 80083f4:	785b      	ldrb	r3, [r3, #1]
 80083f6:	041b      	lsls	r3, r3, #16
 80083f8:	4319      	orrs	r1, r3
 80083fa:	4b22      	ldr	r3, [pc, #136]	; (8008484 <MX_LWIP_Init+0x268>)
 80083fc:	789b      	ldrb	r3, [r3, #2]
 80083fe:	021b      	lsls	r3, r3, #8
 8008400:	430b      	orrs	r3, r1
 8008402:	4920      	ldr	r1, [pc, #128]	; (8008484 <MX_LWIP_Init+0x268>)
 8008404:	78c9      	ldrb	r1, [r1, #3]
 8008406:	430b      	orrs	r3, r1
 8008408:	0e1b      	lsrs	r3, r3, #24
 800840a:	4313      	orrs	r3, r2
 800840c:	4a20      	ldr	r2, [pc, #128]	; (8008490 <MX_LWIP_Init+0x274>)
 800840e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008410:	4b20      	ldr	r3, [pc, #128]	; (8008494 <MX_LWIP_Init+0x278>)
 8008412:	9302      	str	r3, [sp, #8]
 8008414:	4b20      	ldr	r3, [pc, #128]	; (8008498 <MX_LWIP_Init+0x27c>)
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	2300      	movs	r3, #0
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	4b1c      	ldr	r3, [pc, #112]	; (8008490 <MX_LWIP_Init+0x274>)
 800841e:	4a1b      	ldr	r2, [pc, #108]	; (800848c <MX_LWIP_Init+0x270>)
 8008420:	4919      	ldr	r1, [pc, #100]	; (8008488 <MX_LWIP_Init+0x26c>)
 8008422:	481e      	ldr	r0, [pc, #120]	; (800849c <MX_LWIP_Init+0x280>)
 8008424:	f004 fbec 	bl	800cc00 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008428:	481c      	ldr	r0, [pc, #112]	; (800849c <MX_LWIP_Init+0x280>)
 800842a:	f004 fe09 	bl	800d040 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800842e:	4b1b      	ldr	r3, [pc, #108]	; (800849c <MX_LWIP_Init+0x280>)
 8008430:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008434:	089b      	lsrs	r3, r3, #2
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008440:	4816      	ldr	r0, [pc, #88]	; (800849c <MX_LWIP_Init+0x280>)
 8008442:	f004 fe0d 	bl	800d060 <netif_set_up>
 8008446:	e002      	b.n	800844e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008448:	4814      	ldr	r0, [pc, #80]	; (800849c <MX_LWIP_Init+0x280>)
 800844a:	f004 fe87 	bl	800d15c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800844e:	4914      	ldr	r1, [pc, #80]	; (80084a0 <MX_LWIP_Init+0x284>)
 8008450:	4812      	ldr	r0, [pc, #72]	; (800849c <MX_LWIP_Init+0x280>)
 8008452:	f004 ff3f 	bl	800d2d4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8008456:	4b13      	ldr	r3, [pc, #76]	; (80084a4 <MX_LWIP_Init+0x288>)
 8008458:	1d3c      	adds	r4, r7, #4
 800845a:	461d      	mov	r5, r3
 800845c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800845e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008460:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008464:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8008468:	1d3b      	adds	r3, r7, #4
 800846a:	490c      	ldr	r1, [pc, #48]	; (800849c <MX_LWIP_Init+0x280>)
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fcf0 	bl	8008e52 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008472:	bf00      	nop
 8008474:	3720      	adds	r7, #32
 8008476:	46bd      	mov	sp, r7
 8008478:	bdb0      	pop	{r4, r5, r7, pc}
 800847a:	bf00      	nop
 800847c:	24064ba8 	.word	0x24064ba8
 8008480:	24064ba4 	.word	0x24064ba4
 8008484:	24064b64 	.word	0x24064b64
 8008488:	24064ba0 	.word	0x24064ba0
 800848c:	24064bac 	.word	0x24064bac
 8008490:	24064bb0 	.word	0x24064bb0
 8008494:	0800be19 	.word	0x0800be19
 8008498:	08008b9d 	.word	0x08008b9d
 800849c:	24064b68 	.word	0x24064b68
 80084a0:	080084a9 	.word	0x080084a9
 80084a4:	0801798c 	.word	0x0801798c

080084a8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08e      	sub	sp, #56	; 0x38
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	605a      	str	r2, [r3, #4]
 80084ce:	609a      	str	r2, [r3, #8]
 80084d0:	60da      	str	r2, [r3, #12]
 80084d2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a69      	ldr	r2, [pc, #420]	; (8008680 <HAL_ETH_MspInit+0x1c4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	f040 80cb 	bne.w	8008676 <HAL_ETH_MspInit+0x1ba>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80084e0:	4b68      	ldr	r3, [pc, #416]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 80084e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80084e6:	4a67      	ldr	r2, [pc, #412]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 80084e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80084f0:	4b64      	ldr	r3, [pc, #400]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 80084f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80084f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084fa:	623b      	str	r3, [r7, #32]
 80084fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80084fe:	4b61      	ldr	r3, [pc, #388]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 8008500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008504:	4a5f      	ldr	r2, [pc, #380]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 8008506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800850a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800850e:	4b5d      	ldr	r3, [pc, #372]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 8008510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008518:	61fb      	str	r3, [r7, #28]
 800851a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800851c:	4b59      	ldr	r3, [pc, #356]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 800851e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008522:	4a58      	ldr	r2, [pc, #352]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 8008524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008528:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800852c:	4b55      	ldr	r3, [pc, #340]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 800852e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008536:	61bb      	str	r3, [r7, #24]
 8008538:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800853a:	4b52      	ldr	r3, [pc, #328]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 800853c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008540:	4a50      	ldr	r2, [pc, #320]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 8008542:	f043 0304 	orr.w	r3, r3, #4
 8008546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800854a:	4b4e      	ldr	r3, [pc, #312]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 800854c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008558:	4b4a      	ldr	r3, [pc, #296]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 800855a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800855e:	4a49      	ldr	r2, [pc, #292]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 8008560:	f043 0301 	orr.w	r3, r3, #1
 8008564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008568:	4b46      	ldr	r3, [pc, #280]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 800856a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008576:	4b43      	ldr	r3, [pc, #268]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 8008578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800857c:	4a41      	ldr	r2, [pc, #260]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 800857e:	f043 0302 	orr.w	r3, r3, #2
 8008582:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008586:	4b3f      	ldr	r3, [pc, #252]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 8008588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800858c:	f003 0302 	and.w	r3, r3, #2
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008594:	4b3b      	ldr	r3, [pc, #236]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 8008596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800859a:	4a3a      	ldr	r2, [pc, #232]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 800859c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80085a4:	4b37      	ldr	r3, [pc, #220]	; (8008684 <HAL_ETH_MspInit+0x1c8>)
 80085a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ae:	60bb      	str	r3, [r7, #8]
 80085b0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin;
 80085b2:	2302      	movs	r3, #2
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085b6:	2302      	movs	r3, #2
 80085b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085be:	2300      	movs	r3, #0
 80085c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085c2:	230b      	movs	r3, #11
 80085c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 80085c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ca:	4619      	mov	r1, r3
 80085cc:	482e      	ldr	r0, [pc, #184]	; (8008688 <HAL_ETH_MspInit+0x1cc>)
 80085ce:	f7fb f8c5 	bl	800375c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80085d2:	2386      	movs	r3, #134	; 0x86
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085d6:	2302      	movs	r3, #2
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085da:	2300      	movs	r3, #0
 80085dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085de:	2303      	movs	r3, #3
 80085e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085e2:	230b      	movs	r3, #11
 80085e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ea:	4619      	mov	r1, r3
 80085ec:	4827      	ldr	r0, [pc, #156]	; (800868c <HAL_ETH_MspInit+0x1d0>)
 80085ee:	f7fb f8b5 	bl	800375c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 80085f2:	2330      	movs	r3, #48	; 0x30
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085f6:	2302      	movs	r3, #2
 80085f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085fe:	2303      	movs	r3, #3
 8008600:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008602:	230b      	movs	r3, #11
 8008604:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800860a:	4619      	mov	r1, r3
 800860c:	481e      	ldr	r0, [pc, #120]	; (8008688 <HAL_ETH_MspInit+0x1cc>)
 800860e:	f7fb f8a5 	bl	800375c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008618:	2302      	movs	r3, #2
 800861a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800861c:	2300      	movs	r3, #0
 800861e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008620:	2303      	movs	r3, #3
 8008622:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008624:	230b      	movs	r3, #11
 8008626:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800862c:	4619      	mov	r1, r3
 800862e:	4818      	ldr	r0, [pc, #96]	; (8008690 <HAL_ETH_MspInit+0x1d4>)
 8008630:	f7fb f894 	bl	800375c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008634:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800863a:	2302      	movs	r3, #2
 800863c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800863e:	2300      	movs	r3, #0
 8008640:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008642:	2303      	movs	r3, #3
 8008644:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008646:	230b      	movs	r3, #11
 8008648:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800864a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800864e:	4619      	mov	r1, r3
 8008650:	4810      	ldr	r0, [pc, #64]	; (8008694 <HAL_ETH_MspInit+0x1d8>)
 8008652:	f7fb f883 	bl	800375c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008656:	2200      	movs	r2, #0
 8008658:	2105      	movs	r1, #5
 800865a:	203d      	movs	r0, #61	; 0x3d
 800865c:	f7f9 f92e 	bl	80018bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008660:	203d      	movs	r0, #61	; 0x3d
 8008662:	f7f9 f945 	bl	80018f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8008666:	2200      	movs	r2, #0
 8008668:	2105      	movs	r1, #5
 800866a:	203e      	movs	r0, #62	; 0x3e
 800866c:	f7f9 f926 	bl	80018bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8008670:	203e      	movs	r0, #62	; 0x3e
 8008672:	f7f9 f93d 	bl	80018f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008676:	bf00      	nop
 8008678:	3738      	adds	r7, #56	; 0x38
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	40028000 	.word	0x40028000
 8008684:	58024400 	.word	0x58024400
 8008688:	58020800 	.word	0x58020800
 800868c:	58020000 	.word	0x58020000
 8008690:	58020400 	.word	0x58020400
 8008694:	58021800 	.word	0x58021800

08008698 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80086a0:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <HAL_ETH_RxCpltCallback+0x1c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 fd51 	bl	800914c <osSemaphoreRelease>
}
 80086aa:	bf00      	nop
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	2400036c 	.word	0x2400036c

080086b8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80086b8:	b5b0      	push	{r4, r5, r7, lr}
 80086ba:	b0ac      	sub	sp, #176	; 0xb0
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80086d2:	4b91      	ldr	r3, [pc, #580]	; (8008918 <low_level_init+0x260>)
 80086d4:	4a91      	ldr	r2, [pc, #580]	; (800891c <low_level_init+0x264>)
 80086d6:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80086d8:	2300      	movs	r3, #0
 80086da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80086de:	2380      	movs	r3, #128	; 0x80
 80086e0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80086e4:	23e1      	movs	r3, #225	; 0xe1
 80086e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80086ea:	2300      	movs	r3, #0
 80086ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80086f0:	2300      	movs	r3, #0
 80086f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80086f6:	2300      	movs	r3, #0
 80086f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80086fc:	4a86      	ldr	r2, [pc, #536]	; (8008918 <low_level_init+0x260>)
 80086fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008702:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008704:	4b84      	ldr	r3, [pc, #528]	; (8008918 <low_level_init+0x260>)
 8008706:	2201      	movs	r2, #1
 8008708:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800870a:	4b83      	ldr	r3, [pc, #524]	; (8008918 <low_level_init+0x260>)
 800870c:	4a84      	ldr	r2, [pc, #528]	; (8008920 <low_level_init+0x268>)
 800870e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008710:	4b81      	ldr	r3, [pc, #516]	; (8008918 <low_level_init+0x260>)
 8008712:	4a84      	ldr	r2, [pc, #528]	; (8008924 <low_level_init+0x26c>)
 8008714:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8008716:	4b80      	ldr	r3, [pc, #512]	; (8008918 <low_level_init+0x260>)
 8008718:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800871c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800871e:	487e      	ldr	r0, [pc, #504]	; (8008918 <low_level_init+0x260>)
 8008720:	f7f9 f970 	bl	8001a04 <HAL_ETH_Init>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800872a:	2234      	movs	r2, #52	; 0x34
 800872c:	2100      	movs	r1, #0
 800872e:	487e      	ldr	r0, [pc, #504]	; (8008928 <low_level_init+0x270>)
 8008730:	f00e f951 	bl	80169d6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008734:	4b7c      	ldr	r3, [pc, #496]	; (8008928 <low_level_init+0x270>)
 8008736:	2221      	movs	r2, #33	; 0x21
 8008738:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800873a:	4b7b      	ldr	r3, [pc, #492]	; (8008928 <low_level_init+0x270>)
 800873c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008740:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008742:	4b79      	ldr	r3, [pc, #484]	; (8008928 <low_level_init+0x270>)
 8008744:	2200      	movs	r2, #0
 8008746:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008748:	4878      	ldr	r0, [pc, #480]	; (800892c <low_level_init+0x274>)
 800874a:	f004 f913 	bl	800c974 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2206      	movs	r2, #6
 8008752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008756:	4b70      	ldr	r3, [pc, #448]	; (8008918 <low_level_init+0x260>)
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	781a      	ldrb	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008762:	4b6d      	ldr	r3, [pc, #436]	; (8008918 <low_level_init+0x260>)
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	785a      	ldrb	r2, [r3, #1]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800876e:	4b6a      	ldr	r3, [pc, #424]	; (8008918 <low_level_init+0x260>)
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	789a      	ldrb	r2, [r3, #2]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800877a:	4b67      	ldr	r3, [pc, #412]	; (8008918 <low_level_init+0x260>)
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	78da      	ldrb	r2, [r3, #3]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008786:	4b64      	ldr	r3, [pc, #400]	; (8008918 <low_level_init+0x260>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	791a      	ldrb	r2, [r3, #4]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008792:	4b61      	ldr	r3, [pc, #388]	; (8008918 <low_level_init+0x260>)
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	795a      	ldrb	r2, [r3, #5]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80087a4:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80087ac:	f043 030a 	orr.w	r3, r3, #10
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80087b8:	2300      	movs	r3, #0
 80087ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087be:	e012      	b.n	80087e6 <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80087c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80087c8:	fb02 f303 	mul.w	r3, r2, r3
 80087cc:	4a58      	ldr	r2, [pc, #352]	; (8008930 <low_level_init+0x278>)
 80087ce:	441a      	add	r2, r3
 80087d0:	2300      	movs	r3, #0
 80087d2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80087d6:	4850      	ldr	r0, [pc, #320]	; (8008918 <low_level_init+0x260>)
 80087d8:	f7f9 f9ee 	bl	8001bb8 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80087dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087e0:	3301      	adds	r3, #1
 80087e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d9e8      	bls.n	80087c0 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80087ee:	2300      	movs	r3, #0
 80087f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80087f2:	2300      	movs	r3, #0
 80087f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80087f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087fa:	2101      	movs	r1, #1
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 fc25 	bl	800904c <osSemaphoreCreate>
 8008802:	4603      	mov	r3, r0
 8008804:	4a4b      	ldr	r2, [pc, #300]	; (8008934 <low_level_init+0x27c>)
 8008806:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008808:	4b4b      	ldr	r3, [pc, #300]	; (8008938 <low_level_init+0x280>)
 800880a:	f107 040c 	add.w	r4, r7, #12
 800880e:	461d      	mov	r5, r3
 8008810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008814:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008818:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800881c:	f107 030c 	add.w	r3, r7, #12
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 fb15 	bl	8008e52 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008828:	4944      	ldr	r1, [pc, #272]	; (800893c <low_level_init+0x284>)
 800882a:	4845      	ldr	r0, [pc, #276]	; (8008940 <low_level_init+0x288>)
 800882c:	f7f8 fd8d 	bl	800134a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008830:	4843      	ldr	r0, [pc, #268]	; (8008940 <low_level_init+0x288>)
 8008832:	f7f8 fdbc 	bl	80013ae <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008836:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d165      	bne.n	800890a <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800883e:	4840      	ldr	r0, [pc, #256]	; (8008940 <low_level_init+0x288>)
 8008840:	f7f8 fe5d 	bl	80014fe <LAN8742_GetLinkState>
 8008844:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800884c:	2b01      	cmp	r3, #1
 800884e:	dc06      	bgt.n	800885e <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f004 fd05 	bl	800d260 <netif_set_link_down>
      netif_set_down(netif);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f004 fc80 	bl	800d15c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800885c:	e057      	b.n	800890e <low_level_init+0x256>
 800885e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008862:	3b02      	subs	r3, #2
 8008864:	2b03      	cmp	r3, #3
 8008866:	d82b      	bhi.n	80088c0 <low_level_init+0x208>
 8008868:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <low_level_init+0x1b8>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	08008881 	.word	0x08008881
 8008874:	08008893 	.word	0x08008893
 8008878:	080088a3 	.word	0x080088a3
 800887c:	080088b3 	.word	0x080088b3
        duplex = ETH_FULLDUPLEX_MODE;
 8008880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800888c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008890:	e01f      	b.n	80088d2 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 8008892:	2300      	movs	r3, #0
 8008894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800889c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80088a0:	e017      	b.n	80088d2 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 80088a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80088aa:	2300      	movs	r3, #0
 80088ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80088b0:	e00f      	b.n	80088d2 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 80088b2:	2300      	movs	r3, #0
 80088b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80088b8:	2300      	movs	r3, #0
 80088ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80088be:	e008      	b.n	80088d2 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 80088c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80088c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80088cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80088d0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80088d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80088d6:	4619      	mov	r1, r3
 80088d8:	480f      	ldr	r0, [pc, #60]	; (8008918 <low_level_init+0x260>)
 80088da:	f7f9 ff3f 	bl	800275c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80088de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088e2:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 80088e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80088ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80088ee:	4619      	mov	r1, r3
 80088f0:	4809      	ldr	r0, [pc, #36]	; (8008918 <low_level_init+0x260>)
 80088f2:	f7fa f907 	bl	8002b04 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80088f6:	4808      	ldr	r0, [pc, #32]	; (8008918 <low_level_init+0x260>)
 80088f8:	f7f9 f99f 	bl	8001c3a <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f004 fbaf 	bl	800d060 <netif_set_up>
    netif_set_link_up(netif);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f004 fc6e 	bl	800d1e4 <netif_set_link_up>
}
 8008908:	e001      	b.n	800890e <low_level_init+0x256>
    Error_Handler();
 800890a:	f7f8 f92d 	bl	8000b68 <Error_Handler>
}
 800890e:	bf00      	nop
 8008910:	37b0      	adds	r7, #176	; 0xb0
 8008912:	46bd      	mov	sp, r7
 8008914:	bdb0      	pop	{r4, r5, r7, pc}
 8008916:	bf00      	nop
 8008918:	24064ca0 	.word	0x24064ca0
 800891c:	40028000 	.word	0x40028000
 8008920:	30040060 	.word	0x30040060
 8008924:	30040000 	.word	0x30040000
 8008928:	24064d28 	.word	0x24064d28
 800892c:	0801a540 	.word	0x0801a540
 8008930:	30040200 	.word	0x30040200
 8008934:	2400036c 	.word	0x2400036c
 8008938:	080179b0 	.word	0x080179b0
 800893c:	24000010 	.word	0x24000010
 8008940:	24064c80 	.word	0x24064c80

08008944 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b092      	sub	sp, #72	; 0x48
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800894e:	2300      	movs	r3, #0
 8008950:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008958:	f107 030c 	add.w	r3, r7, #12
 800895c:	2230      	movs	r2, #48	; 0x30
 800895e:	2100      	movs	r1, #0
 8008960:	4618      	mov	r0, r3
 8008962:	f00e f838 	bl	80169d6 <memset>

  for(q = p; q != NULL; q = q->next)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	643b      	str	r3, [r7, #64]	; 0x40
 800896a:	e049      	b.n	8008a00 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800896c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800896e:	2b03      	cmp	r3, #3
 8008970:	d902      	bls.n	8008978 <low_level_output+0x34>
      return ERR_IF;
 8008972:	f06f 030b 	mvn.w	r3, #11
 8008976:	e056      	b.n	8008a26 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8008978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800897a:	6859      	ldr	r1, [r3, #4]
 800897c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800897e:	4613      	mov	r3, r2
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800898a:	4413      	add	r3, r2
 800898c:	3b3c      	subs	r3, #60	; 0x3c
 800898e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008992:	895b      	ldrh	r3, [r3, #10]
 8008994:	4619      	mov	r1, r3
 8008996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008998:	4613      	mov	r3, r2
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80089a4:	4413      	add	r3, r2
 80089a6:	3b38      	subs	r3, #56	; 0x38
 80089a8:	6019      	str	r1, [r3, #0]

    if(i>0)
 80089aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d012      	beq.n	80089d6 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80089b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b2:	1e5a      	subs	r2, r3, #1
 80089b4:	f107 000c 	add.w	r0, r7, #12
 80089b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089ba:	460b      	mov	r3, r1
 80089bc:	005b      	lsls	r3, r3, #1
 80089be:	440b      	add	r3, r1
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	18c1      	adds	r1, r0, r3
 80089c4:	4613      	mov	r3, r2
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	4413      	add	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80089d0:	4413      	add	r3, r2
 80089d2:	3b34      	subs	r3, #52	; 0x34
 80089d4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80089d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10a      	bne.n	80089f4 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 80089de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089e0:	4613      	mov	r3, r2
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80089ec:	4413      	add	r3, r2
 80089ee:	3b34      	subs	r3, #52	; 0x34
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
    }

    i++;
 80089f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f6:	3301      	adds	r3, #1
 80089f8:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80089fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1b2      	bne.n	800896c <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	891b      	ldrh	r3, [r3, #8]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <low_level_output+0xec>)
 8008a0e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008a10:	4a07      	ldr	r2, [pc, #28]	; (8008a30 <low_level_output+0xec>)
 8008a12:	f107 030c 	add.w	r3, r7, #12
 8008a16:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008a18:	2214      	movs	r2, #20
 8008a1a:	4905      	ldr	r1, [pc, #20]	; (8008a30 <low_level_output+0xec>)
 8008a1c:	4805      	ldr	r0, [pc, #20]	; (8008a34 <low_level_output+0xf0>)
 8008a1e:	f7f9 fa0b 	bl	8001e38 <HAL_ETH_Transmit>

  return errval;
 8008a22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3748      	adds	r7, #72	; 0x48
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	24064d28 	.word	0x24064d28
 8008a34:	24064ca0 	.word	0x24064ca0

08008a38 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b098      	sub	sp, #96	; 0x60
 8008a3c:	af02      	add	r7, sp, #8
 8008a3e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	60bb      	str	r3, [r7, #8]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008a4c:	f107 030c 	add.w	r3, r7, #12
 8008a50:	2230      	movs	r2, #48	; 0x30
 8008a52:	2100      	movs	r1, #0
 8008a54:	4618      	mov	r0, r3
 8008a56:	f00d ffbe 	bl	80169d6 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	653b      	str	r3, [r7, #80]	; 0x50
 8008a5e:	e015      	b.n	8008a8c <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8008a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	f107 010c 	add.w	r1, r7, #12
 8008a68:	4613      	mov	r3, r2
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	4413      	add	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4419      	add	r1, r3
 8008a72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a74:	4613      	mov	r3, r2
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	4413      	add	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008a80:	4413      	add	r3, r2
 8008a82:	3b44      	subs	r3, #68	; 0x44
 8008a84:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8008a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a88:	3301      	adds	r3, #1
 8008a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8008a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d9e6      	bls.n	8008a60 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8008a92:	f107 030c 	add.w	r3, r7, #12
 8008a96:	4619      	mov	r1, r3
 8008a98:	4828      	ldr	r0, [pc, #160]	; (8008b3c <low_level_input+0x104>)
 8008a9a:	f7f9 fb46 	bl	800212a <HAL_ETH_GetRxDataBuffer>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d145      	bne.n	8008b30 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8008aa4:	f107 0308 	add.w	r3, r7, #8
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4824      	ldr	r0, [pc, #144]	; (8008b3c <low_level_input+0x104>)
 8008aac:	f7f9 fbdb 	bl	8002266 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8008ab0:	4822      	ldr	r0, [pc, #136]	; (8008b3c <low_level_input+0x104>)
 8008ab2:	f7f9 fc0b 	bl	80022cc <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8008abc:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8008abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	dd1d      	ble.n	8008b00 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ac6:	f003 021f 	and.w	r2, r3, #31
 8008aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008acc:	4413      	add	r3, r2
 8008ace:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8008ad4:	f3bf 8f4f 	dsb	sy
}
 8008ad8:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008ada:	4a19      	ldr	r2, [pc, #100]	; (8008b40 <low_level_input+0x108>)
 8008adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ade:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae4:	3320      	adds	r3, #32
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aea:	3b20      	subs	r3, #32
 8008aec:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8008aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	dcf2      	bgt.n	8008ada <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8008af4:	f3bf 8f4f 	dsb	sy
}
 8008af8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008afa:	f3bf 8f6f 	isb	sy
}
 8008afe:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8008b00:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008b02:	4810      	ldr	r0, [pc, #64]	; (8008b44 <low_level_input+0x10c>)
 8008b04:	f003 ffb2 	bl	800ca6c <memp_malloc_pool>
 8008b08:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 8008b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00f      	beq.n	8008b30 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8008b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b12:	4a0d      	ldr	r2, [pc, #52]	; (8008b48 <low_level_input+0x110>)
 8008b14:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	b299      	uxth	r1, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	b292      	uxth	r2, r2
 8008b20:	9201      	str	r2, [sp, #4]
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b26:	2241      	movs	r2, #65	; 0x41
 8008b28:	2000      	movs	r0, #0
 8008b2a:	f004 fdf9 	bl	800d720 <pbuf_alloced_custom>
 8008b2e:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 8008b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3758      	adds	r7, #88	; 0x58
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	24064ca0 	.word	0x24064ca0
 8008b40:	e000ed00 	.word	0xe000ed00
 8008b44:	0801a540 	.word	0x0801a540
 8008b48:	08008bf9 	.word	0x08008bf9

08008b4c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008b58:	4b0f      	ldr	r3, [pc, #60]	; (8008b98 <ethernetif_input+0x4c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 faa5 	bl	80090b0 <osSemaphoreWait>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1f5      	bne.n	8008b58 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f7ff ff63 	bl	8008a38 <low_level_input>
 8008b72:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	68f9      	ldr	r1, [r7, #12]
 8008b80:	68b8      	ldr	r0, [r7, #8]
 8008b82:	4798      	blx	r3
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8008b8a:	68b8      	ldr	r0, [r7, #8]
 8008b8c:	f004 ff82 	bl	800da94 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1ea      	bne.n	8008b6c <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008b96:	e7df      	b.n	8008b58 <ethernetif_input+0xc>
 8008b98:	2400036c 	.word	0x2400036c

08008b9c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d106      	bne.n	8008bb8 <ethernetif_init+0x1c>
 8008baa:	4b0e      	ldr	r3, [pc, #56]	; (8008be4 <ethernetif_init+0x48>)
 8008bac:	f240 2253 	movw	r2, #595	; 0x253
 8008bb0:	490d      	ldr	r1, [pc, #52]	; (8008be8 <ethernetif_init+0x4c>)
 8008bb2:	480e      	ldr	r0, [pc, #56]	; (8008bec <ethernetif_init+0x50>)
 8008bb4:	f00d ff72 	bl	8016a9c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2273      	movs	r2, #115	; 0x73
 8008bbc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2274      	movs	r2, #116	; 0x74
 8008bc4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a09      	ldr	r2, [pc, #36]	; (8008bf0 <ethernetif_init+0x54>)
 8008bcc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a08      	ldr	r2, [pc, #32]	; (8008bf4 <ethernetif_init+0x58>)
 8008bd2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff fd6f 	bl	80086b8 <low_level_init>

  return ERR_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	080179cc 	.word	0x080179cc
 8008be8:	080179e8 	.word	0x080179e8
 8008bec:	080179f8 	.word	0x080179f8
 8008bf0:	08014805 	.word	0x08014805
 8008bf4:	08008945 	.word	0x08008945

08008bf8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008c04:	68f9      	ldr	r1, [r7, #12]
 8008c06:	4803      	ldr	r0, [pc, #12]	; (8008c14 <pbuf_free_custom+0x1c>)
 8008c08:	f003 ffa4 	bl	800cb54 <memp_free_pool>
}
 8008c0c:	bf00      	nop
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	0801a540 	.word	0x0801a540

08008c18 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008c1c:	f7f8 fd46 	bl	80016ac <HAL_GetTick>
 8008c20:	4603      	mov	r3, r0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008c2c:	4802      	ldr	r0, [pc, #8]	; (8008c38 <ETH_PHY_IO_Init+0x10>)
 8008c2e:	f7f9 ff83 	bl	8002b38 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	24064ca0 	.word	0x24064ca0

08008c3c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
  return 0;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	68f9      	ldr	r1, [r7, #12]
 8008c5e:	4807      	ldr	r0, [pc, #28]	; (8008c7c <ETH_PHY_IO_ReadReg+0x30>)
 8008c60:	f7f9 fcd4 	bl	800260c <HAL_ETH_ReadPHYRegister>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c6e:	e000      	b.n	8008c72 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	24064ca0 	.word	0x24064ca0

08008c80 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	68f9      	ldr	r1, [r7, #12]
 8008c92:	4807      	ldr	r0, [pc, #28]	; (8008cb0 <ETH_PHY_IO_WriteReg+0x30>)
 8008c94:	f7f9 fd0e 	bl	80026b4 <HAL_ETH_WritePHYRegister>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ca2:	e000      	b.n	8008ca6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	24064ca0 	.word	0x24064ca0

08008cb4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008cb8:	f7f8 fcf8 	bl	80016ac <HAL_GetTick>
 8008cbc:	4603      	mov	r3, r0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b0a0      	sub	sp, #128	; 0x80
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008cdc:	483a      	ldr	r0, [pc, #232]	; (8008dc8 <ethernet_link_thread+0x104>)
 8008cde:	f7f8 fc0e 	bl	80014fe <LAN8742_GetLinkState>
 8008ce2:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ce6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008cea:	089b      	lsrs	r3, r3, #2
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00c      	beq.n	8008d10 <ethernet_link_thread+0x4c>
 8008cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	dc09      	bgt.n	8008d10 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 8008cfc:	4833      	ldr	r0, [pc, #204]	; (8008dcc <ethernet_link_thread+0x108>)
 8008cfe:	f7f9 f821 	bl	8001d44 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008d02:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008d04:	f004 fa2a 	bl	800d15c <netif_set_down>
    netif_set_link_down(netif);
 8008d08:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008d0a:	f004 faa9 	bl	800d260 <netif_set_link_down>
 8008d0e:	e056      	b.n	8008dbe <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d16:	f003 0304 	and.w	r3, r3, #4
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d14f      	bne.n	8008dbe <ethernet_link_thread+0xfa>
 8008d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	dd4c      	ble.n	8008dbe <ethernet_link_thread+0xfa>
 8008d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d26:	3b02      	subs	r3, #2
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d82b      	bhi.n	8008d84 <ethernet_link_thread+0xc0>
 8008d2c:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <ethernet_link_thread+0x70>)
 8008d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d32:	bf00      	nop
 8008d34:	08008d45 	.word	0x08008d45
 8008d38:	08008d57 	.word	0x08008d57
 8008d3c:	08008d67 	.word	0x08008d67
 8008d40:	08008d77 	.word	0x08008d77
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d48:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008d4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d4e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008d50:	2301      	movs	r3, #1
 8008d52:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008d54:	e017      	b.n	8008d86 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008d56:	2300      	movs	r3, #0
 8008d58:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008d5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d5e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008d60:	2301      	movs	r3, #1
 8008d62:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008d64:	e00f      	b.n	8008d86 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d6a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008d70:	2301      	movs	r3, #1
 8008d72:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008d74:	e007      	b.n	8008d86 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008d76:	2300      	movs	r3, #0
 8008d78:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008d82:	e000      	b.n	8008d86 <ethernet_link_thread+0xc2>
    default:
      break;
 8008d84:	bf00      	nop
    }

    if(linkchanged)
 8008d86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d018      	beq.n	8008dbe <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008d8c:	f107 0308 	add.w	r3, r7, #8
 8008d90:	4619      	mov	r1, r3
 8008d92:	480e      	ldr	r0, [pc, #56]	; (8008dcc <ethernet_link_thread+0x108>)
 8008d94:	f7f9 fce2 	bl	800275c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d9a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d9e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008da0:	f107 0308 	add.w	r3, r7, #8
 8008da4:	4619      	mov	r1, r3
 8008da6:	4809      	ldr	r0, [pc, #36]	; (8008dcc <ethernet_link_thread+0x108>)
 8008da8:	f7f9 feac 	bl	8002b04 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8008dac:	4807      	ldr	r0, [pc, #28]	; (8008dcc <ethernet_link_thread+0x108>)
 8008dae:	f7f8 ff44 	bl	8001c3a <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008db2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008db4:	f004 f954 	bl	800d060 <netif_set_up>
      netif_set_link_up(netif);
 8008db8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008dba:	f004 fa13 	bl	800d1e4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008dbe:	2064      	movs	r0, #100	; 0x64
 8008dc0:	f000 f893 	bl	8008eea <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008dc4:	e78a      	b.n	8008cdc <ethernet_link_thread+0x18>
 8008dc6:	bf00      	nop
 8008dc8:	24064c80 	.word	0x24064c80
 8008dcc:	24064ca0 	.word	0x24064ca0

08008dd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008de2:	2b84      	cmp	r3, #132	; 0x84
 8008de4:	d005      	beq.n	8008df2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008de6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4413      	add	r3, r2
 8008dee:	3303      	adds	r3, #3
 8008df0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008df2:	68fb      	ldr	r3, [r7, #12]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e06:	f3ef 8305 	mrs	r3, IPSR
 8008e0a:	607b      	str	r3, [r7, #4]
  return(result);
 8008e0c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	bf14      	ite	ne
 8008e12:	2301      	movne	r3, #1
 8008e14:	2300      	moveq	r3, #0
 8008e16:	b2db      	uxtb	r3, r3
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008e28:	f001 fc74 	bl	800a714 <vTaskStartScheduler>
  
  return osOK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008e36:	f7ff ffe3 	bl	8008e00 <inHandlerMode>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d003      	beq.n	8008e48 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008e40:	f001 fd8c 	bl	800a95c <xTaskGetTickCountFromISR>
 8008e44:	4603      	mov	r3, r0
 8008e46:	e002      	b.n	8008e4e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008e48:	f001 fd78 	bl	800a93c <xTaskGetTickCount>
 8008e4c:	4603      	mov	r3, r0
  }
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e54:	b089      	sub	sp, #36	; 0x24
 8008e56:	af04      	add	r7, sp, #16
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d020      	beq.n	8008ea6 <osThreadCreate+0x54>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d01c      	beq.n	8008ea6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685c      	ldr	r4, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681d      	ldr	r5, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	691e      	ldr	r6, [r3, #16]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff ffa6 	bl	8008dd0 <makeFreeRtosPriority>
 8008e84:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e8e:	9202      	str	r2, [sp, #8]
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	9100      	str	r1, [sp, #0]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	4632      	mov	r2, r6
 8008e98:	4629      	mov	r1, r5
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f001 fa5c 	bl	800a358 <xTaskCreateStatic>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	e01c      	b.n	8008ee0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685c      	ldr	r4, [r3, #4]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008eb2:	b29e      	uxth	r6, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7ff ff88 	bl	8008dd0 <makeFreeRtosPriority>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	f107 030c 	add.w	r3, r7, #12
 8008ec6:	9301      	str	r3, [sp, #4]
 8008ec8:	9200      	str	r2, [sp, #0]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	4632      	mov	r2, r6
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f001 fa9e 	bl	800a412 <xTaskCreate>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d001      	beq.n	8008ee0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	e000      	b.n	8008ee2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008eea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <osDelay+0x16>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	e000      	b.n	8008f02 <osDelay+0x18>
 8008f00:	2301      	movs	r3, #1
 8008f02:	4618      	mov	r0, r3
 8008f04:	f001 fbd2 	bl	800a6ac <vTaskDelay>
  
  return osOK;
 8008f08:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d007      	beq.n	8008f32 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	4619      	mov	r1, r3
 8008f28:	2001      	movs	r0, #1
 8008f2a:	f000 fc40 	bl	80097ae <xQueueCreateMutexStatic>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	e003      	b.n	8008f3a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008f32:	2001      	movs	r0, #1
 8008f34:	f000 fc23 	bl	800977e <xQueueCreateMutex>
 8008f38:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
	...

08008f44 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d101      	bne.n	8008f5c <osMutexWait+0x18>
    return osErrorParameter;
 8008f58:	2380      	movs	r3, #128	; 0x80
 8008f5a:	e03a      	b.n	8008fd2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f66:	d103      	bne.n	8008f70 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	e009      	b.n	8008f84 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d006      	beq.n	8008f84 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <osMutexWait+0x40>
      ticks = 1;
 8008f80:	2301      	movs	r3, #1
 8008f82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008f84:	f7ff ff3c 	bl	8008e00 <inHandlerMode>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d017      	beq.n	8008fbe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008f8e:	f107 0308 	add.w	r3, r7, #8
 8008f92:	461a      	mov	r2, r3
 8008f94:	2100      	movs	r1, #0
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f001 f836 	bl	800a008 <xQueueReceiveFromISR>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d001      	beq.n	8008fa6 <osMutexWait+0x62>
      return osErrorOS;
 8008fa2:	23ff      	movs	r3, #255	; 0xff
 8008fa4:	e015      	b.n	8008fd2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d011      	beq.n	8008fd0 <osMutexWait+0x8c>
 8008fac:	4b0b      	ldr	r3, [pc, #44]	; (8008fdc <osMutexWait+0x98>)
 8008fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	e008      	b.n	8008fd0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008fbe:	68f9      	ldr	r1, [r7, #12]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 ff15 	bl	8009df0 <xQueueSemaphoreTake>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d001      	beq.n	8008fd0 <osMutexWait+0x8c>
    return osErrorOS;
 8008fcc:	23ff      	movs	r3, #255	; 0xff
 8008fce:	e000      	b.n	8008fd2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	e000ed04 	.word	0xe000ed04

08008fe0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008ff0:	f7ff ff06 	bl	8008e00 <inHandlerMode>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d016      	beq.n	8009028 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008ffa:	f107 0308 	add.w	r3, r7, #8
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fd88 	bl	8009b16 <xQueueGiveFromISR>
 8009006:	4603      	mov	r3, r0
 8009008:	2b01      	cmp	r3, #1
 800900a:	d001      	beq.n	8009010 <osMutexRelease+0x30>
      return osErrorOS;
 800900c:	23ff      	movs	r3, #255	; 0xff
 800900e:	e017      	b.n	8009040 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d013      	beq.n	800903e <osMutexRelease+0x5e>
 8009016:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <osMutexRelease+0x68>)
 8009018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	e00a      	b.n	800903e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009028:	2300      	movs	r3, #0
 800902a:	2200      	movs	r2, #0
 800902c:	2100      	movs	r1, #0
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fbd8 	bl	80097e4 <xQueueGenericSend>
 8009034:	4603      	mov	r3, r0
 8009036:	2b01      	cmp	r3, #1
 8009038:	d001      	beq.n	800903e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800903a:	23ff      	movs	r3, #255	; 0xff
 800903c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800903e:	68fb      	ldr	r3, [r7, #12]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	e000ed04 	.word	0xe000ed04

0800904c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af02      	add	r7, sp, #8
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00f      	beq.n	800907e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d10a      	bne.n	800907a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	2203      	movs	r2, #3
 800906a:	9200      	str	r2, [sp, #0]
 800906c:	2200      	movs	r2, #0
 800906e:	2100      	movs	r1, #0
 8009070:	2001      	movs	r0, #1
 8009072:	f000 fa99 	bl	80095a8 <xQueueGenericCreateStatic>
 8009076:	4603      	mov	r3, r0
 8009078:	e016      	b.n	80090a8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800907a:	2300      	movs	r3, #0
 800907c:	e014      	b.n	80090a8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d110      	bne.n	80090a6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009084:	2203      	movs	r2, #3
 8009086:	2100      	movs	r1, #0
 8009088:	2001      	movs	r0, #1
 800908a:	f000 fb05 	bl	8009698 <xQueueGenericCreate>
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d005      	beq.n	80090a2 <osSemaphoreCreate+0x56>
 8009096:	2300      	movs	r3, #0
 8009098:	2200      	movs	r2, #0
 800909a:	2100      	movs	r1, #0
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 fba1 	bl	80097e4 <xQueueGenericSend>
      return sema;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	e000      	b.n	80090a8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80090a6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80090ba:	2300      	movs	r3, #0
 80090bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80090c4:	2380      	movs	r3, #128	; 0x80
 80090c6:	e03a      	b.n	800913e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090d2:	d103      	bne.n	80090dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80090d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	e009      	b.n	80090f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d006      	beq.n	80090f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <osSemaphoreWait+0x40>
      ticks = 1;
 80090ec:	2301      	movs	r3, #1
 80090ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80090f0:	f7ff fe86 	bl	8008e00 <inHandlerMode>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d017      	beq.n	800912a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80090fa:	f107 0308 	add.w	r3, r7, #8
 80090fe:	461a      	mov	r2, r3
 8009100:	2100      	movs	r1, #0
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 ff80 	bl	800a008 <xQueueReceiveFromISR>
 8009108:	4603      	mov	r3, r0
 800910a:	2b01      	cmp	r3, #1
 800910c:	d001      	beq.n	8009112 <osSemaphoreWait+0x62>
      return osErrorOS;
 800910e:	23ff      	movs	r3, #255	; 0xff
 8009110:	e015      	b.n	800913e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d011      	beq.n	800913c <osSemaphoreWait+0x8c>
 8009118:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <osSemaphoreWait+0x98>)
 800911a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	e008      	b.n	800913c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800912a:	68f9      	ldr	r1, [r7, #12]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fe5f 	bl	8009df0 <xQueueSemaphoreTake>
 8009132:	4603      	mov	r3, r0
 8009134:	2b01      	cmp	r3, #1
 8009136:	d001      	beq.n	800913c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009138:	23ff      	movs	r3, #255	; 0xff
 800913a:	e000      	b.n	800913e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009154:	2300      	movs	r3, #0
 8009156:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009158:	2300      	movs	r3, #0
 800915a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800915c:	f7ff fe50 	bl	8008e00 <inHandlerMode>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d016      	beq.n	8009194 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009166:	f107 0308 	add.w	r3, r7, #8
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fcd2 	bl	8009b16 <xQueueGiveFromISR>
 8009172:	4603      	mov	r3, r0
 8009174:	2b01      	cmp	r3, #1
 8009176:	d001      	beq.n	800917c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009178:	23ff      	movs	r3, #255	; 0xff
 800917a:	e017      	b.n	80091ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d013      	beq.n	80091aa <osSemaphoreRelease+0x5e>
 8009182:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <osSemaphoreRelease+0x68>)
 8009184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	e00a      	b.n	80091aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009194:	2300      	movs	r3, #0
 8009196:	2200      	movs	r2, #0
 8009198:	2100      	movs	r1, #0
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fb22 	bl	80097e4 <xQueueGenericSend>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d001      	beq.n	80091aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80091a6:	23ff      	movs	r3, #255	; 0xff
 80091a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80091aa:	68fb      	ldr	r3, [r7, #12]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	e000ed04 	.word	0xe000ed04

080091b8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80091b8:	b590      	push	{r4, r7, lr}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af02      	add	r7, sp, #8
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d011      	beq.n	80091ee <osMessageCreate+0x36>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00d      	beq.n	80091ee <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6859      	ldr	r1, [r3, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689a      	ldr	r2, [r3, #8]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	2400      	movs	r4, #0
 80091e4:	9400      	str	r4, [sp, #0]
 80091e6:	f000 f9df 	bl	80095a8 <xQueueGenericCreateStatic>
 80091ea:	4603      	mov	r3, r0
 80091ec:	e008      	b.n	8009200 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	4619      	mov	r1, r3
 80091fa:	f000 fa4d 	bl	8009698 <xQueueGenericCreate>
 80091fe:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	bd90      	pop	{r4, r7, pc}

08009208 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009214:	2300      	movs	r3, #0
 8009216:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <osMessagePut+0x1e>
    ticks = 1;
 8009222:	2301      	movs	r3, #1
 8009224:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009226:	f7ff fdeb 	bl	8008e00 <inHandlerMode>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d018      	beq.n	8009262 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009230:	f107 0210 	add.w	r2, r7, #16
 8009234:	f107 0108 	add.w	r1, r7, #8
 8009238:	2300      	movs	r3, #0
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 fbd0 	bl	80099e0 <xQueueGenericSendFromISR>
 8009240:	4603      	mov	r3, r0
 8009242:	2b01      	cmp	r3, #1
 8009244:	d001      	beq.n	800924a <osMessagePut+0x42>
      return osErrorOS;
 8009246:	23ff      	movs	r3, #255	; 0xff
 8009248:	e018      	b.n	800927c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d014      	beq.n	800927a <osMessagePut+0x72>
 8009250:	4b0c      	ldr	r3, [pc, #48]	; (8009284 <osMessagePut+0x7c>)
 8009252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	e00b      	b.n	800927a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009262:	f107 0108 	add.w	r1, r7, #8
 8009266:	2300      	movs	r3, #0
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f000 faba 	bl	80097e4 <xQueueGenericSend>
 8009270:	4603      	mov	r3, r0
 8009272:	2b01      	cmp	r3, #1
 8009274:	d001      	beq.n	800927a <osMessagePut+0x72>
      return osErrorOS;
 8009276:	23ff      	movs	r3, #255	; 0xff
 8009278:	e000      	b.n	800927c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	e000ed04 	.word	0xe000ed04

08009288 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009288:	b590      	push	{r4, r7, lr}
 800928a:	b08b      	sub	sp, #44	; 0x2c
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10a      	bne.n	80092b8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80092a2:	2380      	movs	r3, #128	; 0x80
 80092a4:	617b      	str	r3, [r7, #20]
    return event;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	461c      	mov	r4, r3
 80092aa:	f107 0314 	add.w	r3, r7, #20
 80092ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80092b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80092b6:	e054      	b.n	8009362 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80092b8:	2300      	movs	r3, #0
 80092ba:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80092bc:	2300      	movs	r3, #0
 80092be:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c6:	d103      	bne.n	80092d0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80092c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
 80092ce:	e009      	b.n	80092e4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d006      	beq.n	80092e4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <osMessageGet+0x5c>
      ticks = 1;
 80092e0:	2301      	movs	r3, #1
 80092e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80092e4:	f7ff fd8c 	bl	8008e00 <inHandlerMode>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d01c      	beq.n	8009328 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80092ee:	f107 0220 	add.w	r2, r7, #32
 80092f2:	f107 0314 	add.w	r3, r7, #20
 80092f6:	3304      	adds	r3, #4
 80092f8:	4619      	mov	r1, r3
 80092fa:	68b8      	ldr	r0, [r7, #8]
 80092fc:	f000 fe84 	bl	800a008 <xQueueReceiveFromISR>
 8009300:	4603      	mov	r3, r0
 8009302:	2b01      	cmp	r3, #1
 8009304:	d102      	bne.n	800930c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009306:	2310      	movs	r3, #16
 8009308:	617b      	str	r3, [r7, #20]
 800930a:	e001      	b.n	8009310 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800930c:	2300      	movs	r3, #0
 800930e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d01d      	beq.n	8009352 <osMessageGet+0xca>
 8009316:	4b15      	ldr	r3, [pc, #84]	; (800936c <osMessageGet+0xe4>)
 8009318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	e014      	b.n	8009352 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009328:	f107 0314 	add.w	r3, r7, #20
 800932c:	3304      	adds	r3, #4
 800932e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009330:	4619      	mov	r1, r3
 8009332:	68b8      	ldr	r0, [r7, #8]
 8009334:	f000 fc7c 	bl	8009c30 <xQueueReceive>
 8009338:	4603      	mov	r3, r0
 800933a:	2b01      	cmp	r3, #1
 800933c:	d102      	bne.n	8009344 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800933e:	2310      	movs	r3, #16
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	e006      	b.n	8009352 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <osMessageGet+0xc6>
 800934a:	2300      	movs	r3, #0
 800934c:	e000      	b.n	8009350 <osMessageGet+0xc8>
 800934e:	2340      	movs	r3, #64	; 0x40
 8009350:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	461c      	mov	r4, r3
 8009356:	f107 0314 	add.w	r3, r7, #20
 800935a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800935e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	372c      	adds	r7, #44	; 0x2c
 8009366:	46bd      	mov	sp, r7
 8009368:	bd90      	pop	{r4, r7, pc}
 800936a:	bf00      	nop
 800936c:	e000ed04 	.word	0xe000ed04

08009370 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f103 0208 	add.w	r2, r3, #8
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009388:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f103 0208 	add.w	r2, r3, #8
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f103 0208 	add.w	r2, r3, #8
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689a      	ldr	r2, [r3, #8]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	601a      	str	r2, [r3, #0]
}
 8009406:	bf00      	nop
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009412:	b480      	push	{r7}
 8009414:	b085      	sub	sp, #20
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009428:	d103      	bne.n	8009432 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	e00c      	b.n	800944c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3308      	adds	r3, #8
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	e002      	b.n	8009440 <vListInsert+0x2e>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	429a      	cmp	r2, r3
 800944a:	d2f6      	bcs.n	800943a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	601a      	str	r2, [r3, #0]
}
 8009478:	bf00      	nop
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6892      	ldr	r2, [r2, #8]
 800949a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	6852      	ldr	r2, [r2, #4]
 80094a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d103      	bne.n	80094b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	1e5a      	subs	r2, r3, #1
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10a      	bne.n	8009502 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80094fe:	bf00      	nop
 8009500:	e7fe      	b.n	8009500 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009502:	f002 f887 	bl	800b614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950e:	68f9      	ldr	r1, [r7, #12]
 8009510:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009512:	fb01 f303 	mul.w	r3, r1, r3
 8009516:	441a      	add	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009532:	3b01      	subs	r3, #1
 8009534:	68f9      	ldr	r1, [r7, #12]
 8009536:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009538:	fb01 f303 	mul.w	r3, r1, r3
 800953c:	441a      	add	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	22ff      	movs	r2, #255	; 0xff
 8009546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	22ff      	movs	r2, #255	; 0xff
 800954e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d114      	bne.n	8009582 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01a      	beq.n	8009596 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3310      	adds	r3, #16
 8009564:	4618      	mov	r0, r3
 8009566:	f001 fb49 	bl	800abfc <xTaskRemoveFromEventList>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d012      	beq.n	8009596 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009570:	4b0c      	ldr	r3, [pc, #48]	; (80095a4 <xQueueGenericReset+0xcc>)
 8009572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	e009      	b.n	8009596 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3310      	adds	r3, #16
 8009586:	4618      	mov	r0, r3
 8009588:	f7ff fef2 	bl	8009370 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	3324      	adds	r3, #36	; 0x24
 8009590:	4618      	mov	r0, r3
 8009592:	f7ff feed 	bl	8009370 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009596:	f002 f86d 	bl	800b674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800959a:	2301      	movs	r3, #1
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	e000ed04 	.word	0xe000ed04

080095a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08e      	sub	sp, #56	; 0x38
 80095ac:	af02      	add	r7, sp, #8
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10a      	bne.n	80095ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80095d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095ea:	bf00      	nop
 80095ec:	e7fe      	b.n	80095ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <xQueueGenericCreateStatic+0x52>
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <xQueueGenericCreateStatic+0x56>
 80095fa:	2301      	movs	r3, #1
 80095fc:	e000      	b.n	8009600 <xQueueGenericCreateStatic+0x58>
 80095fe:	2300      	movs	r3, #0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10a      	bne.n	800961a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	623b      	str	r3, [r7, #32]
}
 8009616:	bf00      	nop
 8009618:	e7fe      	b.n	8009618 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d102      	bne.n	8009626 <xQueueGenericCreateStatic+0x7e>
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <xQueueGenericCreateStatic+0x82>
 8009626:	2301      	movs	r3, #1
 8009628:	e000      	b.n	800962c <xQueueGenericCreateStatic+0x84>
 800962a:	2300      	movs	r3, #0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10a      	bne.n	8009646 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	61fb      	str	r3, [r7, #28]
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009646:	2348      	movs	r3, #72	; 0x48
 8009648:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2b48      	cmp	r3, #72	; 0x48
 800964e:	d00a      	beq.n	8009666 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	61bb      	str	r3, [r7, #24]
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009666:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00d      	beq.n	800968e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800967a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800967e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	4613      	mov	r3, r2
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	68b9      	ldr	r1, [r7, #8]
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f000 f83f 	bl	800970c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009690:	4618      	mov	r0, r3
 8009692:	3730      	adds	r7, #48	; 0x30
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08a      	sub	sp, #40	; 0x28
 800969c:	af02      	add	r7, sp, #8
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	4613      	mov	r3, r2
 80096a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10a      	bne.n	80096c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	613b      	str	r3, [r7, #16]
}
 80096be:	bf00      	nop
 80096c0:	e7fe      	b.n	80096c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	fb02 f303 	mul.w	r3, r2, r3
 80096ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	3348      	adds	r3, #72	; 0x48
 80096d0:	4618      	mov	r0, r3
 80096d2:	f002 f8c1 	bl	800b858 <pvPortMalloc>
 80096d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d011      	beq.n	8009702 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	3348      	adds	r3, #72	; 0x48
 80096e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096f0:	79fa      	ldrb	r2, [r7, #7]
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	4613      	mov	r3, r2
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	68b9      	ldr	r1, [r7, #8]
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f000 f805 	bl	800970c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009702:	69bb      	ldr	r3, [r7, #24]
	}
 8009704:	4618      	mov	r0, r3
 8009706:	3720      	adds	r7, #32
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d103      	bne.n	8009728 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	69ba      	ldr	r2, [r7, #24]
 8009724:	601a      	str	r2, [r3, #0]
 8009726:	e002      	b.n	800972e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800973a:	2101      	movs	r1, #1
 800973c:	69b8      	ldr	r0, [r7, #24]
 800973e:	f7ff fecb 	bl	80094d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009742:	bf00      	nop
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800974a:	b580      	push	{r7, lr}
 800974c:	b082      	sub	sp, #8
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00e      	beq.n	8009776 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800976a:	2300      	movs	r3, #0
 800976c:	2200      	movs	r2, #0
 800976e:	2100      	movs	r1, #0
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f837 	bl	80097e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800977e:	b580      	push	{r7, lr}
 8009780:	b086      	sub	sp, #24
 8009782:	af00      	add	r7, sp, #0
 8009784:	4603      	mov	r3, r0
 8009786:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009788:	2301      	movs	r3, #1
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	2300      	movs	r3, #0
 800978e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009790:	79fb      	ldrb	r3, [r7, #7]
 8009792:	461a      	mov	r2, r3
 8009794:	6939      	ldr	r1, [r7, #16]
 8009796:	6978      	ldr	r0, [r7, #20]
 8009798:	f7ff ff7e 	bl	8009698 <xQueueGenericCreate>
 800979c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f7ff ffd3 	bl	800974a <prvInitialiseMutex>

		return xNewQueue;
 80097a4:	68fb      	ldr	r3, [r7, #12]
	}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b088      	sub	sp, #32
 80097b2:	af02      	add	r7, sp, #8
 80097b4:	4603      	mov	r3, r0
 80097b6:	6039      	str	r1, [r7, #0]
 80097b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80097ba:	2301      	movs	r3, #1
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	2300      	movs	r3, #0
 80097c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2200      	movs	r2, #0
 80097ca:	6939      	ldr	r1, [r7, #16]
 80097cc:	6978      	ldr	r0, [r7, #20]
 80097ce:	f7ff feeb 	bl	80095a8 <xQueueGenericCreateStatic>
 80097d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f7ff ffb8 	bl	800974a <prvInitialiseMutex>

		return xNewQueue;
 80097da:	68fb      	ldr	r3, [r7, #12]
	}
 80097dc:	4618      	mov	r0, r3
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08e      	sub	sp, #56	; 0x38
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097f2:	2300      	movs	r3, #0
 80097f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10a      	bne.n	8009816 <xQueueGenericSend+0x32>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d103      	bne.n	8009824 <xQueueGenericSend+0x40>
 800981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <xQueueGenericSend+0x44>
 8009824:	2301      	movs	r3, #1
 8009826:	e000      	b.n	800982a <xQueueGenericSend+0x46>
 8009828:	2300      	movs	r3, #0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10a      	bne.n	8009844 <xQueueGenericSend+0x60>
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009840:	bf00      	nop
 8009842:	e7fe      	b.n	8009842 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d103      	bne.n	8009852 <xQueueGenericSend+0x6e>
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <xQueueGenericSend+0x72>
 8009852:	2301      	movs	r3, #1
 8009854:	e000      	b.n	8009858 <xQueueGenericSend+0x74>
 8009856:	2300      	movs	r3, #0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10a      	bne.n	8009872 <xQueueGenericSend+0x8e>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	623b      	str	r3, [r7, #32]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009872:	f001 fb83 	bl	800af7c <xTaskGetSchedulerState>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d102      	bne.n	8009882 <xQueueGenericSend+0x9e>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <xQueueGenericSend+0xa2>
 8009882:	2301      	movs	r3, #1
 8009884:	e000      	b.n	8009888 <xQueueGenericSend+0xa4>
 8009886:	2300      	movs	r3, #0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10a      	bne.n	80098a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	61fb      	str	r3, [r7, #28]
}
 800989e:	bf00      	nop
 80098a0:	e7fe      	b.n	80098a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098a2:	f001 feb7 	bl	800b614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d302      	bcc.n	80098b8 <xQueueGenericSend+0xd4>
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d129      	bne.n	800990c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	68b9      	ldr	r1, [r7, #8]
 80098bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098be:	f000 fc3b 	bl	800a138 <prvCopyDataToQueue>
 80098c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d010      	beq.n	80098ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ce:	3324      	adds	r3, #36	; 0x24
 80098d0:	4618      	mov	r0, r3
 80098d2:	f001 f993 	bl	800abfc <xTaskRemoveFromEventList>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d013      	beq.n	8009904 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098dc:	4b3f      	ldr	r3, [pc, #252]	; (80099dc <xQueueGenericSend+0x1f8>)
 80098de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	e00a      	b.n	8009904 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d007      	beq.n	8009904 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098f4:	4b39      	ldr	r3, [pc, #228]	; (80099dc <xQueueGenericSend+0x1f8>)
 80098f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009904:	f001 feb6 	bl	800b674 <vPortExitCritical>
				return pdPASS;
 8009908:	2301      	movs	r3, #1
 800990a:	e063      	b.n	80099d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d103      	bne.n	800991a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009912:	f001 feaf 	bl	800b674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009916:	2300      	movs	r3, #0
 8009918:	e05c      	b.n	80099d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800991a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800991c:	2b00      	cmp	r3, #0
 800991e:	d106      	bne.n	800992e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009920:	f107 0314 	add.w	r3, r7, #20
 8009924:	4618      	mov	r0, r3
 8009926:	f001 f9cb 	bl	800acc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800992a:	2301      	movs	r3, #1
 800992c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800992e:	f001 fea1 	bl	800b674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009932:	f000 ff59 	bl	800a7e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009936:	f001 fe6d 	bl	800b614 <vPortEnterCritical>
 800993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009940:	b25b      	sxtb	r3, r3
 8009942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009946:	d103      	bne.n	8009950 <xQueueGenericSend+0x16c>
 8009948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994a:	2200      	movs	r2, #0
 800994c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009956:	b25b      	sxtb	r3, r3
 8009958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800995c:	d103      	bne.n	8009966 <xQueueGenericSend+0x182>
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009966:	f001 fe85 	bl	800b674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800996a:	1d3a      	adds	r2, r7, #4
 800996c:	f107 0314 	add.w	r3, r7, #20
 8009970:	4611      	mov	r1, r2
 8009972:	4618      	mov	r0, r3
 8009974:	f001 f9ba 	bl	800acec <xTaskCheckForTimeOut>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d124      	bne.n	80099c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800997e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009980:	f000 fcd2 	bl	800a328 <prvIsQueueFull>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d018      	beq.n	80099bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998c:	3310      	adds	r3, #16
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f001 f90e 	bl	800abb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800999a:	f000 fc5d 	bl	800a258 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800999e:	f000 ff31 	bl	800a804 <xTaskResumeAll>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f47f af7c 	bne.w	80098a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80099aa:	4b0c      	ldr	r3, [pc, #48]	; (80099dc <xQueueGenericSend+0x1f8>)
 80099ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	e772      	b.n	80098a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80099bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099be:	f000 fc4b 	bl	800a258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099c2:	f000 ff1f 	bl	800a804 <xTaskResumeAll>
 80099c6:	e76c      	b.n	80098a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80099c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099ca:	f000 fc45 	bl	800a258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099ce:	f000 ff19 	bl	800a804 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3738      	adds	r7, #56	; 0x38
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	e000ed04 	.word	0xe000ed04

080099e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b090      	sub	sp, #64	; 0x40
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80099f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10a      	bne.n	8009a0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a0a:	bf00      	nop
 8009a0c:	e7fe      	b.n	8009a0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d103      	bne.n	8009a1c <xQueueGenericSendFromISR+0x3c>
 8009a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <xQueueGenericSendFromISR+0x40>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e000      	b.n	8009a22 <xQueueGenericSendFromISR+0x42>
 8009a20:	2300      	movs	r3, #0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10a      	bne.n	8009a3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a38:	bf00      	nop
 8009a3a:	e7fe      	b.n	8009a3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d103      	bne.n	8009a4a <xQueueGenericSendFromISR+0x6a>
 8009a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d101      	bne.n	8009a4e <xQueueGenericSendFromISR+0x6e>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e000      	b.n	8009a50 <xQueueGenericSendFromISR+0x70>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10a      	bne.n	8009a6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	623b      	str	r3, [r7, #32]
}
 8009a66:	bf00      	nop
 8009a68:	e7fe      	b.n	8009a68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a6a:	f001 feb5 	bl	800b7d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	61fa      	str	r2, [r7, #28]
 8009a84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d302      	bcc.n	8009a9c <xQueueGenericSendFromISR+0xbc>
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d12f      	bne.n	8009afc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	68b9      	ldr	r1, [r7, #8]
 8009ab0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ab2:	f000 fb41 	bl	800a138 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ab6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009abe:	d112      	bne.n	8009ae6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d016      	beq.n	8009af6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	3324      	adds	r3, #36	; 0x24
 8009acc:	4618      	mov	r0, r3
 8009ace:	f001 f895 	bl	800abfc <xTaskRemoveFromEventList>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00e      	beq.n	8009af6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00b      	beq.n	8009af6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	e007      	b.n	8009af6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ae6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009aea:	3301      	adds	r3, #1
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	b25a      	sxtb	r2, r3
 8009af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009af6:	2301      	movs	r3, #1
 8009af8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009afa:	e001      	b.n	8009b00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009afc:	2300      	movs	r3, #0
 8009afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3740      	adds	r7, #64	; 0x40
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b08e      	sub	sp, #56	; 0x38
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10a      	bne.n	8009b40 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	623b      	str	r3, [r7, #32]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00a      	beq.n	8009b5e <xQueueGiveFromISR+0x48>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	61fb      	str	r3, [r7, #28]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d103      	bne.n	8009b6e <xQueueGiveFromISR+0x58>
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <xQueueGiveFromISR+0x5c>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e000      	b.n	8009b74 <xQueueGiveFromISR+0x5e>
 8009b72:	2300      	movs	r3, #0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <xQueueGiveFromISR+0x78>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	61bb      	str	r3, [r7, #24]
}
 8009b8a:	bf00      	nop
 8009b8c:	e7fe      	b.n	8009b8c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b8e:	f001 fe23 	bl	800b7d8 <vPortValidateInterruptPriority>
	__asm volatile
 8009b92:	f3ef 8211 	mrs	r2, BASEPRI
 8009b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	617a      	str	r2, [r7, #20]
 8009ba8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009baa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009bac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d22b      	bcs.n	8009c16 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009bd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bd8:	d112      	bne.n	8009c00 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d016      	beq.n	8009c10 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	3324      	adds	r3, #36	; 0x24
 8009be6:	4618      	mov	r0, r3
 8009be8:	f001 f808 	bl	800abfc <xTaskRemoveFromEventList>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00e      	beq.n	8009c10 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00b      	beq.n	8009c10 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	e007      	b.n	8009c10 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c04:	3301      	adds	r3, #1
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	b25a      	sxtb	r2, r3
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009c10:	2301      	movs	r3, #1
 8009c12:	637b      	str	r3, [r7, #52]	; 0x34
 8009c14:	e001      	b.n	8009c1a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	637b      	str	r3, [r7, #52]	; 0x34
 8009c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f383 8811 	msr	BASEPRI, r3
}
 8009c24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3738      	adds	r7, #56	; 0x38
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08c      	sub	sp, #48	; 0x30
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10a      	bne.n	8009c60 <xQueueReceive+0x30>
	__asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	623b      	str	r3, [r7, #32]
}
 8009c5c:	bf00      	nop
 8009c5e:	e7fe      	b.n	8009c5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d103      	bne.n	8009c6e <xQueueReceive+0x3e>
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d101      	bne.n	8009c72 <xQueueReceive+0x42>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e000      	b.n	8009c74 <xQueueReceive+0x44>
 8009c72:	2300      	movs	r3, #0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <xQueueReceive+0x5e>
	__asm volatile
 8009c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	61fb      	str	r3, [r7, #28]
}
 8009c8a:	bf00      	nop
 8009c8c:	e7fe      	b.n	8009c8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c8e:	f001 f975 	bl	800af7c <xTaskGetSchedulerState>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d102      	bne.n	8009c9e <xQueueReceive+0x6e>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <xQueueReceive+0x72>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <xQueueReceive+0x74>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <xQueueReceive+0x8e>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	61bb      	str	r3, [r7, #24]
}
 8009cba:	bf00      	nop
 8009cbc:	e7fe      	b.n	8009cbc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cbe:	f001 fca9 	bl	800b614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d01f      	beq.n	8009d0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd2:	f000 fa9b 	bl	800a20c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	1e5a      	subs	r2, r3, #1
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00f      	beq.n	8009d06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	3310      	adds	r3, #16
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 ff86 	bl	800abfc <xTaskRemoveFromEventList>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d007      	beq.n	8009d06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009cf6:	4b3d      	ldr	r3, [pc, #244]	; (8009dec <xQueueReceive+0x1bc>)
 8009cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cfc:	601a      	str	r2, [r3, #0]
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d06:	f001 fcb5 	bl	800b674 <vPortExitCritical>
				return pdPASS;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e069      	b.n	8009de2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d103      	bne.n	8009d1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d14:	f001 fcae 	bl	800b674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e062      	b.n	8009de2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d106      	bne.n	8009d30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d22:	f107 0310 	add.w	r3, r7, #16
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 ffca 	bl	800acc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d30:	f001 fca0 	bl	800b674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d34:	f000 fd58 	bl	800a7e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d38:	f001 fc6c 	bl	800b614 <vPortEnterCritical>
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d42:	b25b      	sxtb	r3, r3
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d48:	d103      	bne.n	8009d52 <xQueueReceive+0x122>
 8009d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d58:	b25b      	sxtb	r3, r3
 8009d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d5e:	d103      	bne.n	8009d68 <xQueueReceive+0x138>
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d68:	f001 fc84 	bl	800b674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d6c:	1d3a      	adds	r2, r7, #4
 8009d6e:	f107 0310 	add.w	r3, r7, #16
 8009d72:	4611      	mov	r1, r2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 ffb9 	bl	800acec <xTaskCheckForTimeOut>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d123      	bne.n	8009dc8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d82:	f000 fabb 	bl	800a2fc <prvIsQueueEmpty>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d017      	beq.n	8009dbc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8e:	3324      	adds	r3, #36	; 0x24
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	4611      	mov	r1, r2
 8009d94:	4618      	mov	r0, r3
 8009d96:	f000 ff0d 	bl	800abb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d9c:	f000 fa5c 	bl	800a258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009da0:	f000 fd30 	bl	800a804 <xTaskResumeAll>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d189      	bne.n	8009cbe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009daa:	4b10      	ldr	r3, [pc, #64]	; (8009dec <xQueueReceive+0x1bc>)
 8009dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	e780      	b.n	8009cbe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dbe:	f000 fa4b 	bl	800a258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009dc2:	f000 fd1f 	bl	800a804 <xTaskResumeAll>
 8009dc6:	e77a      	b.n	8009cbe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dca:	f000 fa45 	bl	800a258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009dce:	f000 fd19 	bl	800a804 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dd4:	f000 fa92 	bl	800a2fc <prvIsQueueEmpty>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f43f af6f 	beq.w	8009cbe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009de0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3730      	adds	r7, #48	; 0x30
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	e000ed04 	.word	0xe000ed04

08009df0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b08e      	sub	sp, #56	; 0x38
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009e02:	2300      	movs	r3, #0
 8009e04:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	623b      	str	r3, [r7, #32]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	61fb      	str	r3, [r7, #28]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e40:	f001 f89c 	bl	800af7c <xTaskGetSchedulerState>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d102      	bne.n	8009e50 <xQueueSemaphoreTake+0x60>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <xQueueSemaphoreTake+0x64>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e000      	b.n	8009e56 <xQueueSemaphoreTake+0x66>
 8009e54:	2300      	movs	r3, #0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10a      	bne.n	8009e70 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	61bb      	str	r3, [r7, #24]
}
 8009e6c:	bf00      	nop
 8009e6e:	e7fe      	b.n	8009e6e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e70:	f001 fbd0 	bl	800b614 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e78:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d024      	beq.n	8009eca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	1e5a      	subs	r2, r3, #1
 8009e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009e90:	f001 fa1c 	bl	800b2cc <pvTaskIncrementMutexHeldCount>
 8009e94:	4602      	mov	r2, r0
 8009e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e98:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00f      	beq.n	8009ec2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea4:	3310      	adds	r3, #16
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fea8 	bl	800abfc <xTaskRemoveFromEventList>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d007      	beq.n	8009ec2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009eb2:	4b54      	ldr	r3, [pc, #336]	; (800a004 <xQueueSemaphoreTake+0x214>)
 8009eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ec2:	f001 fbd7 	bl	800b674 <vPortExitCritical>
				return pdPASS;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e097      	b.n	8009ffa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d111      	bne.n	8009ef4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00a      	beq.n	8009eec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	617b      	str	r3, [r7, #20]
}
 8009ee8:	bf00      	nop
 8009eea:	e7fe      	b.n	8009eea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009eec:	f001 fbc2 	bl	800b674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	e082      	b.n	8009ffa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d106      	bne.n	8009f08 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009efa:	f107 030c 	add.w	r3, r7, #12
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 fede 	bl	800acc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f04:	2301      	movs	r3, #1
 8009f06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f08:	f001 fbb4 	bl	800b674 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f0c:	f000 fc6c 	bl	800a7e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f10:	f001 fb80 	bl	800b614 <vPortEnterCritical>
 8009f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f1a:	b25b      	sxtb	r3, r3
 8009f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f20:	d103      	bne.n	8009f2a <xQueueSemaphoreTake+0x13a>
 8009f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f30:	b25b      	sxtb	r3, r3
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f36:	d103      	bne.n	8009f40 <xQueueSemaphoreTake+0x150>
 8009f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f40:	f001 fb98 	bl	800b674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f44:	463a      	mov	r2, r7
 8009f46:	f107 030c 	add.w	r3, r7, #12
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 fecd 	bl	800acec <xTaskCheckForTimeOut>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d132      	bne.n	8009fbe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f5a:	f000 f9cf 	bl	800a2fc <prvIsQueueEmpty>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d026      	beq.n	8009fb2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d109      	bne.n	8009f80 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009f6c:	f001 fb52 	bl	800b614 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 f81f 	bl	800afb8 <xTaskPriorityInherit>
 8009f7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009f7c:	f001 fb7a 	bl	800b674 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f82:	3324      	adds	r3, #36	; 0x24
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	4611      	mov	r1, r2
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f000 fe13 	bl	800abb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f90:	f000 f962 	bl	800a258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f94:	f000 fc36 	bl	800a804 <xTaskResumeAll>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f47f af68 	bne.w	8009e70 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009fa0:	4b18      	ldr	r3, [pc, #96]	; (800a004 <xQueueSemaphoreTake+0x214>)
 8009fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	e75e      	b.n	8009e70 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009fb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fb4:	f000 f950 	bl	800a258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fb8:	f000 fc24 	bl	800a804 <xTaskResumeAll>
 8009fbc:	e758      	b.n	8009e70 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fc0:	f000 f94a 	bl	800a258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fc4:	f000 fc1e 	bl	800a804 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fca:	f000 f997 	bl	800a2fc <prvIsQueueEmpty>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f43f af4d 	beq.w	8009e70 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00d      	beq.n	8009ff8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009fdc:	f001 fb1a 	bl	800b614 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009fe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fe2:	f000 f891 	bl	800a108 <prvGetDisinheritPriorityAfterTimeout>
 8009fe6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f001 f8de 	bl	800b1b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009ff4:	f001 fb3e 	bl	800b674 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ff8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3738      	adds	r7, #56	; 0x38
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	e000ed04 	.word	0xe000ed04

0800a008 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08e      	sub	sp, #56	; 0x38
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10a      	bne.n	800a034 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	623b      	str	r3, [r7, #32]
}
 800a030:	bf00      	nop
 800a032:	e7fe      	b.n	800a032 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d103      	bne.n	800a042 <xQueueReceiveFromISR+0x3a>
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <xQueueReceiveFromISR+0x3e>
 800a042:	2301      	movs	r3, #1
 800a044:	e000      	b.n	800a048 <xQueueReceiveFromISR+0x40>
 800a046:	2300      	movs	r3, #0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10a      	bne.n	800a062 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	61fb      	str	r3, [r7, #28]
}
 800a05e:	bf00      	nop
 800a060:	e7fe      	b.n	800a060 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a062:	f001 fbb9 	bl	800b7d8 <vPortValidateInterruptPriority>
	__asm volatile
 800a066:	f3ef 8211 	mrs	r2, BASEPRI
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	61ba      	str	r2, [r7, #24]
 800a07c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a07e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a080:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a086:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d02f      	beq.n	800a0ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a09c:	f000 f8b6 	bl	800a20c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	1e5a      	subs	r2, r3, #1
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a0a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0b0:	d112      	bne.n	800a0d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d016      	beq.n	800a0e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	3310      	adds	r3, #16
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 fd9c 	bl	800abfc <xTaskRemoveFromEventList>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00e      	beq.n	800a0e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	e007      	b.n	800a0e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a0d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0dc:	3301      	adds	r3, #1
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	b25a      	sxtb	r2, r3
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ec:	e001      	b.n	800a0f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	f383 8811 	msr	BASEPRI, r3
}
 800a0fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a100:	4618      	mov	r0, r3
 800a102:	3738      	adds	r7, #56	; 0x38
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a114:	2b00      	cmp	r3, #0
 800a116:	d006      	beq.n	800a126 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f1c3 0307 	rsb	r3, r3, #7
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	e001      	b.n	800a12a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a126:	2300      	movs	r3, #0
 800a128:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a12a:	68fb      	ldr	r3, [r7, #12]
	}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10d      	bne.n	800a172 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d14d      	bne.n	800a1fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	4618      	mov	r0, r3
 800a164:	f000 ff9e 	bl	800b0a4 <xTaskPriorityDisinherit>
 800a168:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	609a      	str	r2, [r3, #8]
 800a170:	e043      	b.n	800a1fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d119      	bne.n	800a1ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6858      	ldr	r0, [r3, #4]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a180:	461a      	mov	r2, r3
 800a182:	68b9      	ldr	r1, [r7, #8]
 800a184:	f00c fc19 	bl	80169ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a190:	441a      	add	r2, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	685a      	ldr	r2, [r3, #4]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d32b      	bcc.n	800a1fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	605a      	str	r2, [r3, #4]
 800a1aa:	e026      	b.n	800a1fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	68d8      	ldr	r0, [r3, #12]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	68b9      	ldr	r1, [r7, #8]
 800a1b8:	f00c fbff 	bl	80169ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	68da      	ldr	r2, [r3, #12]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c4:	425b      	negs	r3, r3
 800a1c6:	441a      	add	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	68da      	ldr	r2, [r3, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d207      	bcs.n	800a1e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e0:	425b      	negs	r3, r3
 800a1e2:	441a      	add	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d105      	bne.n	800a1fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	1c5a      	adds	r2, r3, #1
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a202:	697b      	ldr	r3, [r7, #20]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3718      	adds	r7, #24
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d018      	beq.n	800a250 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68da      	ldr	r2, [r3, #12]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a226:	441a      	add	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	68da      	ldr	r2, [r3, #12]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	429a      	cmp	r2, r3
 800a236:	d303      	bcc.n	800a240 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	68d9      	ldr	r1, [r3, #12]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a248:	461a      	mov	r2, r3
 800a24a:	6838      	ldr	r0, [r7, #0]
 800a24c:	f00c fbb5 	bl	80169ba <memcpy>
	}
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a260:	f001 f9d8 	bl	800b614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a26a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a26c:	e011      	b.n	800a292 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a272:	2b00      	cmp	r3, #0
 800a274:	d012      	beq.n	800a29c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3324      	adds	r3, #36	; 0x24
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fcbe 	bl	800abfc <xTaskRemoveFromEventList>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a286:	f000 fd93 	bl	800adb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a296:	2b00      	cmp	r3, #0
 800a298:	dce9      	bgt.n	800a26e <prvUnlockQueue+0x16>
 800a29a:	e000      	b.n	800a29e <prvUnlockQueue+0x46>
					break;
 800a29c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	22ff      	movs	r2, #255	; 0xff
 800a2a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a2a6:	f001 f9e5 	bl	800b674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2aa:	f001 f9b3 	bl	800b614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2b6:	e011      	b.n	800a2dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d012      	beq.n	800a2e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3310      	adds	r3, #16
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f000 fc99 	bl	800abfc <xTaskRemoveFromEventList>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2d0:	f000 fd6e 	bl	800adb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2d4:	7bbb      	ldrb	r3, [r7, #14]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	dce9      	bgt.n	800a2b8 <prvUnlockQueue+0x60>
 800a2e4:	e000      	b.n	800a2e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	22ff      	movs	r2, #255	; 0xff
 800a2ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a2f0:	f001 f9c0 	bl	800b674 <vPortExitCritical>
}
 800a2f4:	bf00      	nop
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a304:	f001 f986 	bl	800b614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d102      	bne.n	800a316 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a310:	2301      	movs	r3, #1
 800a312:	60fb      	str	r3, [r7, #12]
 800a314:	e001      	b.n	800a31a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a316:	2300      	movs	r3, #0
 800a318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a31a:	f001 f9ab 	bl	800b674 <vPortExitCritical>

	return xReturn;
 800a31e:	68fb      	ldr	r3, [r7, #12]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a330:	f001 f970 	bl	800b614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d102      	bne.n	800a346 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a340:	2301      	movs	r3, #1
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	e001      	b.n	800a34a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a346:	2300      	movs	r3, #0
 800a348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a34a:	f001 f993 	bl	800b674 <vPortExitCritical>

	return xReturn;
 800a34e:	68fb      	ldr	r3, [r7, #12]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08e      	sub	sp, #56	; 0x38
 800a35c:	af04      	add	r7, sp, #16
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	623b      	str	r3, [r7, #32]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10a      	bne.n	800a39e <xTaskCreateStatic+0x46>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	61fb      	str	r3, [r7, #28]
}
 800a39a:	bf00      	nop
 800a39c:	e7fe      	b.n	800a39c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a39e:	23b4      	movs	r3, #180	; 0xb4
 800a3a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	2bb4      	cmp	r3, #180	; 0xb4
 800a3a6:	d00a      	beq.n	800a3be <xTaskCreateStatic+0x66>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	61bb      	str	r3, [r7, #24]
}
 800a3ba:	bf00      	nop
 800a3bc:	e7fe      	b.n	800a3bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a3be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d01e      	beq.n	800a404 <xTaskCreateStatic+0xac>
 800a3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d01b      	beq.n	800a404 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	2202      	movs	r2, #2
 800a3da:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a3de:	2300      	movs	r3, #0
 800a3e0:	9303      	str	r3, [sp, #12]
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	9302      	str	r3, [sp, #8]
 800a3e6:	f107 0314 	add.w	r3, r7, #20
 800a3ea:	9301      	str	r3, [sp, #4]
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	68b9      	ldr	r1, [r7, #8]
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 f850 	bl	800a49c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3fe:	f000 f8eb 	bl	800a5d8 <prvAddNewTaskToReadyList>
 800a402:	e001      	b.n	800a408 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a404:	2300      	movs	r3, #0
 800a406:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a408:	697b      	ldr	r3, [r7, #20]
	}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3728      	adds	r7, #40	; 0x28
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a412:	b580      	push	{r7, lr}
 800a414:	b08c      	sub	sp, #48	; 0x30
 800a416:	af04      	add	r7, sp, #16
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	60b9      	str	r1, [r7, #8]
 800a41c:	603b      	str	r3, [r7, #0]
 800a41e:	4613      	mov	r3, r2
 800a420:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a422:	88fb      	ldrh	r3, [r7, #6]
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4618      	mov	r0, r3
 800a428:	f001 fa16 	bl	800b858 <pvPortMalloc>
 800a42c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00e      	beq.n	800a452 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a434:	20b4      	movs	r0, #180	; 0xb4
 800a436:	f001 fa0f 	bl	800b858 <pvPortMalloc>
 800a43a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d003      	beq.n	800a44a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	631a      	str	r2, [r3, #48]	; 0x30
 800a448:	e005      	b.n	800a456 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a44a:	6978      	ldr	r0, [r7, #20]
 800a44c:	f001 fad0 	bl	800b9f0 <vPortFree>
 800a450:	e001      	b.n	800a456 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a452:	2300      	movs	r3, #0
 800a454:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d017      	beq.n	800a48c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a464:	88fa      	ldrh	r2, [r7, #6]
 800a466:	2300      	movs	r3, #0
 800a468:	9303      	str	r3, [sp, #12]
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	9302      	str	r3, [sp, #8]
 800a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	68b9      	ldr	r1, [r7, #8]
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 f80e 	bl	800a49c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a480:	69f8      	ldr	r0, [r7, #28]
 800a482:	f000 f8a9 	bl	800a5d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a486:	2301      	movs	r3, #1
 800a488:	61bb      	str	r3, [r7, #24]
 800a48a:	e002      	b.n	800a492 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a48c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a490:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a492:	69bb      	ldr	r3, [r7, #24]
	}
 800a494:	4618      	mov	r0, r3
 800a496:	3720      	adds	r7, #32
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ae:	6879      	ldr	r1, [r7, #4]
 800a4b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a4b4:	440b      	add	r3, r1
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4413      	add	r3, r2
 800a4ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	f023 0307 	bic.w	r3, r3, #7
 800a4c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	f003 0307 	and.w	r3, r3, #7
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00a      	beq.n	800a4e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	617b      	str	r3, [r7, #20]
}
 800a4e0:	bf00      	nop
 800a4e2:	e7fe      	b.n	800a4e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d01f      	beq.n	800a52a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	61fb      	str	r3, [r7, #28]
 800a4ee:	e012      	b.n	800a516 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	7819      	ldrb	r1, [r3, #0]
 800a4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	3334      	adds	r3, #52	; 0x34
 800a500:	460a      	mov	r2, r1
 800a502:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	4413      	add	r3, r2
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d006      	beq.n	800a51e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	3301      	adds	r3, #1
 800a514:	61fb      	str	r3, [r7, #28]
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	2b0f      	cmp	r3, #15
 800a51a:	d9e9      	bls.n	800a4f0 <prvInitialiseNewTask+0x54>
 800a51c:	e000      	b.n	800a520 <prvInitialiseNewTask+0x84>
			{
				break;
 800a51e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	2200      	movs	r2, #0
 800a524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a528:	e003      	b.n	800a532 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a534:	2b06      	cmp	r3, #6
 800a536:	d901      	bls.n	800a53c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a538:	2306      	movs	r3, #6
 800a53a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a540:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a546:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	2200      	movs	r2, #0
 800a54c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a550:	3304      	adds	r3, #4
 800a552:	4618      	mov	r0, r3
 800a554:	f7fe ff2c 	bl	80093b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55a:	3318      	adds	r3, #24
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fe ff27 	bl	80093b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a566:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56a:	f1c3 0207 	rsb	r2, r3, #7
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a576:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	2200      	movs	r2, #0
 800a584:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58a:	334c      	adds	r3, #76	; 0x4c
 800a58c:	2260      	movs	r2, #96	; 0x60
 800a58e:	2100      	movs	r1, #0
 800a590:	4618      	mov	r0, r3
 800a592:	f00c fa20 	bl	80169d6 <memset>
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	4a0c      	ldr	r2, [pc, #48]	; (800a5cc <prvInitialiseNewTask+0x130>)
 800a59a:	651a      	str	r2, [r3, #80]	; 0x50
 800a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59e:	4a0c      	ldr	r2, [pc, #48]	; (800a5d0 <prvInitialiseNewTask+0x134>)
 800a5a0:	655a      	str	r2, [r3, #84]	; 0x54
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	4a0b      	ldr	r2, [pc, #44]	; (800a5d4 <prvInitialiseNewTask+0x138>)
 800a5a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	68f9      	ldr	r1, [r7, #12]
 800a5ac:	69b8      	ldr	r0, [r7, #24]
 800a5ae:	f000 ff07 	bl	800b3c0 <pxPortInitialiseStack>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5c4:	bf00      	nop
 800a5c6:	3720      	adds	r7, #32
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	0801a698 	.word	0x0801a698
 800a5d0:	0801a6b8 	.word	0x0801a6b8
 800a5d4:	0801a678 	.word	0x0801a678

0800a5d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a5e0:	f001 f818 	bl	800b614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a5e4:	4b2a      	ldr	r3, [pc, #168]	; (800a690 <prvAddNewTaskToReadyList+0xb8>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	4a29      	ldr	r2, [pc, #164]	; (800a690 <prvAddNewTaskToReadyList+0xb8>)
 800a5ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a5ee:	4b29      	ldr	r3, [pc, #164]	; (800a694 <prvAddNewTaskToReadyList+0xbc>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d109      	bne.n	800a60a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a5f6:	4a27      	ldr	r2, [pc, #156]	; (800a694 <prvAddNewTaskToReadyList+0xbc>)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a5fc:	4b24      	ldr	r3, [pc, #144]	; (800a690 <prvAddNewTaskToReadyList+0xb8>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d110      	bne.n	800a626 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a604:	f000 fbf8 	bl	800adf8 <prvInitialiseTaskLists>
 800a608:	e00d      	b.n	800a626 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a60a:	4b23      	ldr	r3, [pc, #140]	; (800a698 <prvAddNewTaskToReadyList+0xc0>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d109      	bne.n	800a626 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a612:	4b20      	ldr	r3, [pc, #128]	; (800a694 <prvAddNewTaskToReadyList+0xbc>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d802      	bhi.n	800a626 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a620:	4a1c      	ldr	r2, [pc, #112]	; (800a694 <prvAddNewTaskToReadyList+0xbc>)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a626:	4b1d      	ldr	r3, [pc, #116]	; (800a69c <prvAddNewTaskToReadyList+0xc4>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3301      	adds	r3, #1
 800a62c:	4a1b      	ldr	r2, [pc, #108]	; (800a69c <prvAddNewTaskToReadyList+0xc4>)
 800a62e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a634:	2201      	movs	r2, #1
 800a636:	409a      	lsls	r2, r3
 800a638:	4b19      	ldr	r3, [pc, #100]	; (800a6a0 <prvAddNewTaskToReadyList+0xc8>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	4a18      	ldr	r2, [pc, #96]	; (800a6a0 <prvAddNewTaskToReadyList+0xc8>)
 800a640:	6013      	str	r3, [r2, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a646:	4613      	mov	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4a15      	ldr	r2, [pc, #84]	; (800a6a4 <prvAddNewTaskToReadyList+0xcc>)
 800a650:	441a      	add	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	3304      	adds	r3, #4
 800a656:	4619      	mov	r1, r3
 800a658:	4610      	mov	r0, r2
 800a65a:	f7fe feb6 	bl	80093ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a65e:	f001 f809 	bl	800b674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a662:	4b0d      	ldr	r3, [pc, #52]	; (800a698 <prvAddNewTaskToReadyList+0xc0>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00e      	beq.n	800a688 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a66a:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <prvAddNewTaskToReadyList+0xbc>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a674:	429a      	cmp	r2, r3
 800a676:	d207      	bcs.n	800a688 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a678:	4b0b      	ldr	r3, [pc, #44]	; (800a6a8 <prvAddNewTaskToReadyList+0xd0>)
 800a67a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	24000474 	.word	0x24000474
 800a694:	24000374 	.word	0x24000374
 800a698:	24000480 	.word	0x24000480
 800a69c:	24000490 	.word	0x24000490
 800a6a0:	2400047c 	.word	0x2400047c
 800a6a4:	24000378 	.word	0x24000378
 800a6a8:	e000ed04 	.word	0xe000ed04

0800a6ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d017      	beq.n	800a6ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6be:	4b13      	ldr	r3, [pc, #76]	; (800a70c <vTaskDelay+0x60>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00a      	beq.n	800a6dc <vTaskDelay+0x30>
	__asm volatile
 800a6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	60bb      	str	r3, [r7, #8]
}
 800a6d8:	bf00      	nop
 800a6da:	e7fe      	b.n	800a6da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a6dc:	f000 f884 	bl	800a7e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fe06 	bl	800b2f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a6e8:	f000 f88c 	bl	800a804 <xTaskResumeAll>
 800a6ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d107      	bne.n	800a704 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a6f4:	4b06      	ldr	r3, [pc, #24]	; (800a710 <vTaskDelay+0x64>)
 800a6f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6fa:	601a      	str	r2, [r3, #0]
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a704:	bf00      	nop
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	2400049c 	.word	0x2400049c
 800a710:	e000ed04 	.word	0xe000ed04

0800a714 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08a      	sub	sp, #40	; 0x28
 800a718:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a71e:	2300      	movs	r3, #0
 800a720:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a722:	463a      	mov	r2, r7
 800a724:	1d39      	adds	r1, r7, #4
 800a726:	f107 0308 	add.w	r3, r7, #8
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7f5 ffac 	bl	8000688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a730:	6839      	ldr	r1, [r7, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	9202      	str	r2, [sp, #8]
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	2300      	movs	r3, #0
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	2300      	movs	r3, #0
 800a740:	460a      	mov	r2, r1
 800a742:	4921      	ldr	r1, [pc, #132]	; (800a7c8 <vTaskStartScheduler+0xb4>)
 800a744:	4821      	ldr	r0, [pc, #132]	; (800a7cc <vTaskStartScheduler+0xb8>)
 800a746:	f7ff fe07 	bl	800a358 <xTaskCreateStatic>
 800a74a:	4603      	mov	r3, r0
 800a74c:	4a20      	ldr	r2, [pc, #128]	; (800a7d0 <vTaskStartScheduler+0xbc>)
 800a74e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a750:	4b1f      	ldr	r3, [pc, #124]	; (800a7d0 <vTaskStartScheduler+0xbc>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a758:	2301      	movs	r3, #1
 800a75a:	617b      	str	r3, [r7, #20]
 800a75c:	e001      	b.n	800a762 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a75e:	2300      	movs	r3, #0
 800a760:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d11b      	bne.n	800a7a0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76c:	f383 8811 	msr	BASEPRI, r3
 800a770:	f3bf 8f6f 	isb	sy
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	613b      	str	r3, [r7, #16]
}
 800a77a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a77c:	4b15      	ldr	r3, [pc, #84]	; (800a7d4 <vTaskStartScheduler+0xc0>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	334c      	adds	r3, #76	; 0x4c
 800a782:	4a15      	ldr	r2, [pc, #84]	; (800a7d8 <vTaskStartScheduler+0xc4>)
 800a784:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a786:	4b15      	ldr	r3, [pc, #84]	; (800a7dc <vTaskStartScheduler+0xc8>)
 800a788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a78c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a78e:	4b14      	ldr	r3, [pc, #80]	; (800a7e0 <vTaskStartScheduler+0xcc>)
 800a790:	2201      	movs	r2, #1
 800a792:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a794:	4b13      	ldr	r3, [pc, #76]	; (800a7e4 <vTaskStartScheduler+0xd0>)
 800a796:	2200      	movs	r2, #0
 800a798:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a79a:	f000 fe99 	bl	800b4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a79e:	e00e      	b.n	800a7be <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7a6:	d10a      	bne.n	800a7be <vTaskStartScheduler+0xaa>
	__asm volatile
 800a7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ac:	f383 8811 	msr	BASEPRI, r3
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	60fb      	str	r3, [r7, #12]
}
 800a7ba:	bf00      	nop
 800a7bc:	e7fe      	b.n	800a7bc <vTaskStartScheduler+0xa8>
}
 800a7be:	bf00      	nop
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	08017a20 	.word	0x08017a20
 800a7cc:	0800adc9 	.word	0x0800adc9
 800a7d0:	24000498 	.word	0x24000498
 800a7d4:	24000374 	.word	0x24000374
 800a7d8:	24000034 	.word	0x24000034
 800a7dc:	24000494 	.word	0x24000494
 800a7e0:	24000480 	.word	0x24000480
 800a7e4:	24000478 	.word	0x24000478

0800a7e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a7ec:	4b04      	ldr	r3, [pc, #16]	; (800a800 <vTaskSuspendAll+0x18>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	4a03      	ldr	r2, [pc, #12]	; (800a800 <vTaskSuspendAll+0x18>)
 800a7f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a7f6:	bf00      	nop
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	2400049c 	.word	0x2400049c

0800a804 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a80e:	2300      	movs	r3, #0
 800a810:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a812:	4b41      	ldr	r3, [pc, #260]	; (800a918 <xTaskResumeAll+0x114>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10a      	bne.n	800a830 <xTaskResumeAll+0x2c>
	__asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	603b      	str	r3, [r7, #0]
}
 800a82c:	bf00      	nop
 800a82e:	e7fe      	b.n	800a82e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a830:	f000 fef0 	bl	800b614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a834:	4b38      	ldr	r3, [pc, #224]	; (800a918 <xTaskResumeAll+0x114>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3b01      	subs	r3, #1
 800a83a:	4a37      	ldr	r2, [pc, #220]	; (800a918 <xTaskResumeAll+0x114>)
 800a83c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a83e:	4b36      	ldr	r3, [pc, #216]	; (800a918 <xTaskResumeAll+0x114>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d161      	bne.n	800a90a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a846:	4b35      	ldr	r3, [pc, #212]	; (800a91c <xTaskResumeAll+0x118>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d05d      	beq.n	800a90a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a84e:	e02e      	b.n	800a8ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a850:	4b33      	ldr	r3, [pc, #204]	; (800a920 <xTaskResumeAll+0x11c>)
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3318      	adds	r3, #24
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fe fe11 	bl	8009484 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3304      	adds	r3, #4
 800a866:	4618      	mov	r0, r3
 800a868:	f7fe fe0c 	bl	8009484 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a870:	2201      	movs	r2, #1
 800a872:	409a      	lsls	r2, r3
 800a874:	4b2b      	ldr	r3, [pc, #172]	; (800a924 <xTaskResumeAll+0x120>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4313      	orrs	r3, r2
 800a87a:	4a2a      	ldr	r2, [pc, #168]	; (800a924 <xTaskResumeAll+0x120>)
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4a27      	ldr	r2, [pc, #156]	; (800a928 <xTaskResumeAll+0x124>)
 800a88c:	441a      	add	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3304      	adds	r3, #4
 800a892:	4619      	mov	r1, r3
 800a894:	4610      	mov	r0, r2
 800a896:	f7fe fd98 	bl	80093ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a89e:	4b23      	ldr	r3, [pc, #140]	; (800a92c <xTaskResumeAll+0x128>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d302      	bcc.n	800a8ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a8a8:	4b21      	ldr	r3, [pc, #132]	; (800a930 <xTaskResumeAll+0x12c>)
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8ae:	4b1c      	ldr	r3, [pc, #112]	; (800a920 <xTaskResumeAll+0x11c>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1cc      	bne.n	800a850 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d001      	beq.n	800a8c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8bc:	f000 fb3e 	bl	800af3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a8c0:	4b1c      	ldr	r3, [pc, #112]	; (800a934 <xTaskResumeAll+0x130>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d010      	beq.n	800a8ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a8cc:	f000 f858 	bl	800a980 <xTaskIncrementTick>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d002      	beq.n	800a8dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a8d6:	4b16      	ldr	r3, [pc, #88]	; (800a930 <xTaskResumeAll+0x12c>)
 800a8d8:	2201      	movs	r2, #1
 800a8da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1f1      	bne.n	800a8cc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a8e8:	4b12      	ldr	r3, [pc, #72]	; (800a934 <xTaskResumeAll+0x130>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a8ee:	4b10      	ldr	r3, [pc, #64]	; (800a930 <xTaskResumeAll+0x12c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d009      	beq.n	800a90a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a8fa:	4b0f      	ldr	r3, [pc, #60]	; (800a938 <xTaskResumeAll+0x134>)
 800a8fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a900:	601a      	str	r2, [r3, #0]
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a90a:	f000 feb3 	bl	800b674 <vPortExitCritical>

	return xAlreadyYielded;
 800a90e:	68bb      	ldr	r3, [r7, #8]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	2400049c 	.word	0x2400049c
 800a91c:	24000474 	.word	0x24000474
 800a920:	24000434 	.word	0x24000434
 800a924:	2400047c 	.word	0x2400047c
 800a928:	24000378 	.word	0x24000378
 800a92c:	24000374 	.word	0x24000374
 800a930:	24000488 	.word	0x24000488
 800a934:	24000484 	.word	0x24000484
 800a938:	e000ed04 	.word	0xe000ed04

0800a93c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a942:	4b05      	ldr	r3, [pc, #20]	; (800a958 <xTaskGetTickCount+0x1c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a948:	687b      	ldr	r3, [r7, #4]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	24000478 	.word	0x24000478

0800a95c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a962:	f000 ff39 	bl	800b7d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a966:	2300      	movs	r3, #0
 800a968:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a96a:	4b04      	ldr	r3, [pc, #16]	; (800a97c <xTaskGetTickCountFromISR+0x20>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a970:	683b      	ldr	r3, [r7, #0]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	24000478 	.word	0x24000478

0800a980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a986:	2300      	movs	r3, #0
 800a988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a98a:	4b4e      	ldr	r3, [pc, #312]	; (800aac4 <xTaskIncrementTick+0x144>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f040 808e 	bne.w	800aab0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a994:	4b4c      	ldr	r3, [pc, #304]	; (800aac8 <xTaskIncrementTick+0x148>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3301      	adds	r3, #1
 800a99a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a99c:	4a4a      	ldr	r2, [pc, #296]	; (800aac8 <xTaskIncrementTick+0x148>)
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d120      	bne.n	800a9ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a9a8:	4b48      	ldr	r3, [pc, #288]	; (800aacc <xTaskIncrementTick+0x14c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00a      	beq.n	800a9c8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	603b      	str	r3, [r7, #0]
}
 800a9c4:	bf00      	nop
 800a9c6:	e7fe      	b.n	800a9c6 <xTaskIncrementTick+0x46>
 800a9c8:	4b40      	ldr	r3, [pc, #256]	; (800aacc <xTaskIncrementTick+0x14c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	4b40      	ldr	r3, [pc, #256]	; (800aad0 <xTaskIncrementTick+0x150>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a3e      	ldr	r2, [pc, #248]	; (800aacc <xTaskIncrementTick+0x14c>)
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	4a3e      	ldr	r2, [pc, #248]	; (800aad0 <xTaskIncrementTick+0x150>)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6013      	str	r3, [r2, #0]
 800a9dc:	4b3d      	ldr	r3, [pc, #244]	; (800aad4 <xTaskIncrementTick+0x154>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	4a3c      	ldr	r2, [pc, #240]	; (800aad4 <xTaskIncrementTick+0x154>)
 800a9e4:	6013      	str	r3, [r2, #0]
 800a9e6:	f000 faa9 	bl	800af3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9ea:	4b3b      	ldr	r3, [pc, #236]	; (800aad8 <xTaskIncrementTick+0x158>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	693a      	ldr	r2, [r7, #16]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d348      	bcc.n	800aa86 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9f4:	4b35      	ldr	r3, [pc, #212]	; (800aacc <xTaskIncrementTick+0x14c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d104      	bne.n	800aa08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9fe:	4b36      	ldr	r3, [pc, #216]	; (800aad8 <xTaskIncrementTick+0x158>)
 800aa00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa04:	601a      	str	r2, [r3, #0]
					break;
 800aa06:	e03e      	b.n	800aa86 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa08:	4b30      	ldr	r3, [pc, #192]	; (800aacc <xTaskIncrementTick+0x14c>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d203      	bcs.n	800aa28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa20:	4a2d      	ldr	r2, [pc, #180]	; (800aad8 <xTaskIncrementTick+0x158>)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa26:	e02e      	b.n	800aa86 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	3304      	adds	r3, #4
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fe fd29 	bl	8009484 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d004      	beq.n	800aa44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	3318      	adds	r3, #24
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe fd20 	bl	8009484 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa48:	2201      	movs	r2, #1
 800aa4a:	409a      	lsls	r2, r3
 800aa4c:	4b23      	ldr	r3, [pc, #140]	; (800aadc <xTaskIncrementTick+0x15c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	4a22      	ldr	r2, [pc, #136]	; (800aadc <xTaskIncrementTick+0x15c>)
 800aa54:	6013      	str	r3, [r2, #0]
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	4a1f      	ldr	r2, [pc, #124]	; (800aae0 <xTaskIncrementTick+0x160>)
 800aa64:	441a      	add	r2, r3
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	3304      	adds	r3, #4
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	f7fe fcac 	bl	80093ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa76:	4b1b      	ldr	r3, [pc, #108]	; (800aae4 <xTaskIncrementTick+0x164>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d3b9      	bcc.n	800a9f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aa80:	2301      	movs	r3, #1
 800aa82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa84:	e7b6      	b.n	800a9f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa86:	4b17      	ldr	r3, [pc, #92]	; (800aae4 <xTaskIncrementTick+0x164>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa8c:	4914      	ldr	r1, [pc, #80]	; (800aae0 <xTaskIncrementTick+0x160>)
 800aa8e:	4613      	mov	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	440b      	add	r3, r1
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d901      	bls.n	800aaa2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aaa2:	4b11      	ldr	r3, [pc, #68]	; (800aae8 <xTaskIncrementTick+0x168>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d007      	beq.n	800aaba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	617b      	str	r3, [r7, #20]
 800aaae:	e004      	b.n	800aaba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aab0:	4b0e      	ldr	r3, [pc, #56]	; (800aaec <xTaskIncrementTick+0x16c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3301      	adds	r3, #1
 800aab6:	4a0d      	ldr	r2, [pc, #52]	; (800aaec <xTaskIncrementTick+0x16c>)
 800aab8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aaba:	697b      	ldr	r3, [r7, #20]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3718      	adds	r7, #24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	2400049c 	.word	0x2400049c
 800aac8:	24000478 	.word	0x24000478
 800aacc:	2400042c 	.word	0x2400042c
 800aad0:	24000430 	.word	0x24000430
 800aad4:	2400048c 	.word	0x2400048c
 800aad8:	24000494 	.word	0x24000494
 800aadc:	2400047c 	.word	0x2400047c
 800aae0:	24000378 	.word	0x24000378
 800aae4:	24000374 	.word	0x24000374
 800aae8:	24000488 	.word	0x24000488
 800aaec:	24000484 	.word	0x24000484

0800aaf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aaf6:	4b29      	ldr	r3, [pc, #164]	; (800ab9c <vTaskSwitchContext+0xac>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d003      	beq.n	800ab06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aafe:	4b28      	ldr	r3, [pc, #160]	; (800aba0 <vTaskSwitchContext+0xb0>)
 800ab00:	2201      	movs	r2, #1
 800ab02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab04:	e044      	b.n	800ab90 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800ab06:	4b26      	ldr	r3, [pc, #152]	; (800aba0 <vTaskSwitchContext+0xb0>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab0c:	4b25      	ldr	r3, [pc, #148]	; (800aba4 <vTaskSwitchContext+0xb4>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	fab3 f383 	clz	r3, r3
 800ab18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ab1a:	7afb      	ldrb	r3, [r7, #11]
 800ab1c:	f1c3 031f 	rsb	r3, r3, #31
 800ab20:	617b      	str	r3, [r7, #20]
 800ab22:	4921      	ldr	r1, [pc, #132]	; (800aba8 <vTaskSwitchContext+0xb8>)
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	4613      	mov	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	440b      	add	r3, r1
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10a      	bne.n	800ab4c <vTaskSwitchContext+0x5c>
	__asm volatile
 800ab36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	607b      	str	r3, [r7, #4]
}
 800ab48:	bf00      	nop
 800ab4a:	e7fe      	b.n	800ab4a <vTaskSwitchContext+0x5a>
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4413      	add	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4a14      	ldr	r2, [pc, #80]	; (800aba8 <vTaskSwitchContext+0xb8>)
 800ab58:	4413      	add	r3, r2
 800ab5a:	613b      	str	r3, [r7, #16]
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	605a      	str	r2, [r3, #4]
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	685a      	ldr	r2, [r3, #4]
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d104      	bne.n	800ab7c <vTaskSwitchContext+0x8c>
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	685a      	ldr	r2, [r3, #4]
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	605a      	str	r2, [r3, #4]
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	4a0a      	ldr	r2, [pc, #40]	; (800abac <vTaskSwitchContext+0xbc>)
 800ab84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab86:	4b09      	ldr	r3, [pc, #36]	; (800abac <vTaskSwitchContext+0xbc>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	334c      	adds	r3, #76	; 0x4c
 800ab8c:	4a08      	ldr	r2, [pc, #32]	; (800abb0 <vTaskSwitchContext+0xc0>)
 800ab8e:	6013      	str	r3, [r2, #0]
}
 800ab90:	bf00      	nop
 800ab92:	371c      	adds	r7, #28
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	2400049c 	.word	0x2400049c
 800aba0:	24000488 	.word	0x24000488
 800aba4:	2400047c 	.word	0x2400047c
 800aba8:	24000378 	.word	0x24000378
 800abac:	24000374 	.word	0x24000374
 800abb0:	24000034 	.word	0x24000034

0800abb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10a      	bne.n	800abda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	60fb      	str	r3, [r7, #12]
}
 800abd6:	bf00      	nop
 800abd8:	e7fe      	b.n	800abd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abda:	4b07      	ldr	r3, [pc, #28]	; (800abf8 <vTaskPlaceOnEventList+0x44>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3318      	adds	r3, #24
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7fe fc15 	bl	8009412 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800abe8:	2101      	movs	r1, #1
 800abea:	6838      	ldr	r0, [r7, #0]
 800abec:	f000 fb82 	bl	800b2f4 <prvAddCurrentTaskToDelayedList>
}
 800abf0:	bf00      	nop
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	24000374 	.word	0x24000374

0800abfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10a      	bne.n	800ac28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	60fb      	str	r3, [r7, #12]
}
 800ac24:	bf00      	nop
 800ac26:	e7fe      	b.n	800ac26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	3318      	adds	r3, #24
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fe fc29 	bl	8009484 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac32:	4b1d      	ldr	r3, [pc, #116]	; (800aca8 <xTaskRemoveFromEventList+0xac>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d11c      	bne.n	800ac74 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fe fc20 	bl	8009484 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac48:	2201      	movs	r2, #1
 800ac4a:	409a      	lsls	r2, r3
 800ac4c:	4b17      	ldr	r3, [pc, #92]	; (800acac <xTaskRemoveFromEventList+0xb0>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	4a16      	ldr	r2, [pc, #88]	; (800acac <xTaskRemoveFromEventList+0xb0>)
 800ac54:	6013      	str	r3, [r2, #0]
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4a13      	ldr	r2, [pc, #76]	; (800acb0 <xTaskRemoveFromEventList+0xb4>)
 800ac64:	441a      	add	r2, r3
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	f7fe fbac 	bl	80093ca <vListInsertEnd>
 800ac72:	e005      	b.n	800ac80 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	3318      	adds	r3, #24
 800ac78:	4619      	mov	r1, r3
 800ac7a:	480e      	ldr	r0, [pc, #56]	; (800acb4 <xTaskRemoveFromEventList+0xb8>)
 800ac7c:	f7fe fba5 	bl	80093ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac84:	4b0c      	ldr	r3, [pc, #48]	; (800acb8 <xTaskRemoveFromEventList+0xbc>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d905      	bls.n	800ac9a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac92:	4b0a      	ldr	r3, [pc, #40]	; (800acbc <xTaskRemoveFromEventList+0xc0>)
 800ac94:	2201      	movs	r2, #1
 800ac96:	601a      	str	r2, [r3, #0]
 800ac98:	e001      	b.n	800ac9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac9e:	697b      	ldr	r3, [r7, #20]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	2400049c 	.word	0x2400049c
 800acac:	2400047c 	.word	0x2400047c
 800acb0:	24000378 	.word	0x24000378
 800acb4:	24000434 	.word	0x24000434
 800acb8:	24000374 	.word	0x24000374
 800acbc:	24000488 	.word	0x24000488

0800acc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acc8:	4b06      	ldr	r3, [pc, #24]	; (800ace4 <vTaskInternalSetTimeOutState+0x24>)
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800acd0:	4b05      	ldr	r3, [pc, #20]	; (800ace8 <vTaskInternalSetTimeOutState+0x28>)
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	605a      	str	r2, [r3, #4]
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr
 800ace4:	2400048c 	.word	0x2400048c
 800ace8:	24000478 	.word	0x24000478

0800acec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b088      	sub	sp, #32
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	613b      	str	r3, [r7, #16]
}
 800ad0e:	bf00      	nop
 800ad10:	e7fe      	b.n	800ad10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10a      	bne.n	800ad2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	60fb      	str	r3, [r7, #12]
}
 800ad2a:	bf00      	nop
 800ad2c:	e7fe      	b.n	800ad2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ad2e:	f000 fc71 	bl	800b614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad32:	4b1d      	ldr	r3, [pc, #116]	; (800ada8 <xTaskCheckForTimeOut+0xbc>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	69ba      	ldr	r2, [r7, #24]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad4a:	d102      	bne.n	800ad52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	61fb      	str	r3, [r7, #28]
 800ad50:	e023      	b.n	800ad9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	4b15      	ldr	r3, [pc, #84]	; (800adac <xTaskCheckForTimeOut+0xc0>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d007      	beq.n	800ad6e <xTaskCheckForTimeOut+0x82>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	69ba      	ldr	r2, [r7, #24]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d302      	bcc.n	800ad6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	61fb      	str	r3, [r7, #28]
 800ad6c:	e015      	b.n	800ad9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d20b      	bcs.n	800ad90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	1ad2      	subs	r2, r2, r3
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7ff ff9b 	bl	800acc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	61fb      	str	r3, [r7, #28]
 800ad8e:	e004      	b.n	800ad9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad96:	2301      	movs	r3, #1
 800ad98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad9a:	f000 fc6b 	bl	800b674 <vPortExitCritical>

	return xReturn;
 800ad9e:	69fb      	ldr	r3, [r7, #28]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3720      	adds	r7, #32
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	24000478 	.word	0x24000478
 800adac:	2400048c 	.word	0x2400048c

0800adb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800adb0:	b480      	push	{r7}
 800adb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800adb4:	4b03      	ldr	r3, [pc, #12]	; (800adc4 <vTaskMissedYield+0x14>)
 800adb6:	2201      	movs	r2, #1
 800adb8:	601a      	str	r2, [r3, #0]
}
 800adba:	bf00      	nop
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	24000488 	.word	0x24000488

0800adc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800add0:	f000 f852 	bl	800ae78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800add4:	4b06      	ldr	r3, [pc, #24]	; (800adf0 <prvIdleTask+0x28>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b01      	cmp	r3, #1
 800adda:	d9f9      	bls.n	800add0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800addc:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <prvIdleTask+0x2c>)
 800adde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800adec:	e7f0      	b.n	800add0 <prvIdleTask+0x8>
 800adee:	bf00      	nop
 800adf0:	24000378 	.word	0x24000378
 800adf4:	e000ed04 	.word	0xe000ed04

0800adf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adfe:	2300      	movs	r3, #0
 800ae00:	607b      	str	r3, [r7, #4]
 800ae02:	e00c      	b.n	800ae1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	4613      	mov	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4a12      	ldr	r2, [pc, #72]	; (800ae58 <prvInitialiseTaskLists+0x60>)
 800ae10:	4413      	add	r3, r2
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fe faac 	bl	8009370 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	607b      	str	r3, [r7, #4]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b06      	cmp	r3, #6
 800ae22:	d9ef      	bls.n	800ae04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae24:	480d      	ldr	r0, [pc, #52]	; (800ae5c <prvInitialiseTaskLists+0x64>)
 800ae26:	f7fe faa3 	bl	8009370 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae2a:	480d      	ldr	r0, [pc, #52]	; (800ae60 <prvInitialiseTaskLists+0x68>)
 800ae2c:	f7fe faa0 	bl	8009370 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae30:	480c      	ldr	r0, [pc, #48]	; (800ae64 <prvInitialiseTaskLists+0x6c>)
 800ae32:	f7fe fa9d 	bl	8009370 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae36:	480c      	ldr	r0, [pc, #48]	; (800ae68 <prvInitialiseTaskLists+0x70>)
 800ae38:	f7fe fa9a 	bl	8009370 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae3c:	480b      	ldr	r0, [pc, #44]	; (800ae6c <prvInitialiseTaskLists+0x74>)
 800ae3e:	f7fe fa97 	bl	8009370 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae42:	4b0b      	ldr	r3, [pc, #44]	; (800ae70 <prvInitialiseTaskLists+0x78>)
 800ae44:	4a05      	ldr	r2, [pc, #20]	; (800ae5c <prvInitialiseTaskLists+0x64>)
 800ae46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae48:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <prvInitialiseTaskLists+0x7c>)
 800ae4a:	4a05      	ldr	r2, [pc, #20]	; (800ae60 <prvInitialiseTaskLists+0x68>)
 800ae4c:	601a      	str	r2, [r3, #0]
}
 800ae4e:	bf00      	nop
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	24000378 	.word	0x24000378
 800ae5c:	24000404 	.word	0x24000404
 800ae60:	24000418 	.word	0x24000418
 800ae64:	24000434 	.word	0x24000434
 800ae68:	24000448 	.word	0x24000448
 800ae6c:	24000460 	.word	0x24000460
 800ae70:	2400042c 	.word	0x2400042c
 800ae74:	24000430 	.word	0x24000430

0800ae78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae7e:	e019      	b.n	800aeb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae80:	f000 fbc8 	bl	800b614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae84:	4b10      	ldr	r3, [pc, #64]	; (800aec8 <prvCheckTasksWaitingTermination+0x50>)
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3304      	adds	r3, #4
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fe faf7 	bl	8009484 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae96:	4b0d      	ldr	r3, [pc, #52]	; (800aecc <prvCheckTasksWaitingTermination+0x54>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	4a0b      	ldr	r2, [pc, #44]	; (800aecc <prvCheckTasksWaitingTermination+0x54>)
 800ae9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aea0:	4b0b      	ldr	r3, [pc, #44]	; (800aed0 <prvCheckTasksWaitingTermination+0x58>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3b01      	subs	r3, #1
 800aea6:	4a0a      	ldr	r2, [pc, #40]	; (800aed0 <prvCheckTasksWaitingTermination+0x58>)
 800aea8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aeaa:	f000 fbe3 	bl	800b674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f810 	bl	800aed4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aeb4:	4b06      	ldr	r3, [pc, #24]	; (800aed0 <prvCheckTasksWaitingTermination+0x58>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1e1      	bne.n	800ae80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aebc:	bf00      	nop
 800aebe:	bf00      	nop
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	24000448 	.word	0x24000448
 800aecc:	24000474 	.word	0x24000474
 800aed0:	2400045c 	.word	0x2400045c

0800aed4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	334c      	adds	r3, #76	; 0x4c
 800aee0:	4618      	mov	r0, r3
 800aee2:	f00b fe41 	bl	8016b68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d108      	bne.n	800af02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef4:	4618      	mov	r0, r3
 800aef6:	f000 fd7b 	bl	800b9f0 <vPortFree>
				vPortFree( pxTCB );
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fd78 	bl	800b9f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af00:	e018      	b.n	800af34 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d103      	bne.n	800af14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fd6f 	bl	800b9f0 <vPortFree>
	}
 800af12:	e00f      	b.n	800af34 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d00a      	beq.n	800af34 <prvDeleteTCB+0x60>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	60fb      	str	r3, [r7, #12]
}
 800af30:	bf00      	nop
 800af32:	e7fe      	b.n	800af32 <prvDeleteTCB+0x5e>
	}
 800af34:	bf00      	nop
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af42:	4b0c      	ldr	r3, [pc, #48]	; (800af74 <prvResetNextTaskUnblockTime+0x38>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d104      	bne.n	800af56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af4c:	4b0a      	ldr	r3, [pc, #40]	; (800af78 <prvResetNextTaskUnblockTime+0x3c>)
 800af4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af54:	e008      	b.n	800af68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af56:	4b07      	ldr	r3, [pc, #28]	; (800af74 <prvResetNextTaskUnblockTime+0x38>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	4a04      	ldr	r2, [pc, #16]	; (800af78 <prvResetNextTaskUnblockTime+0x3c>)
 800af66:	6013      	str	r3, [r2, #0]
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr
 800af74:	2400042c 	.word	0x2400042c
 800af78:	24000494 	.word	0x24000494

0800af7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af82:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <xTaskGetSchedulerState+0x34>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d102      	bne.n	800af90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af8a:	2301      	movs	r3, #1
 800af8c:	607b      	str	r3, [r7, #4]
 800af8e:	e008      	b.n	800afa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af90:	4b08      	ldr	r3, [pc, #32]	; (800afb4 <xTaskGetSchedulerState+0x38>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d102      	bne.n	800af9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af98:	2302      	movs	r3, #2
 800af9a:	607b      	str	r3, [r7, #4]
 800af9c:	e001      	b.n	800afa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af9e:	2300      	movs	r3, #0
 800afa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800afa2:	687b      	ldr	r3, [r7, #4]
	}
 800afa4:	4618      	mov	r0, r3
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	24000480 	.word	0x24000480
 800afb4:	2400049c 	.word	0x2400049c

0800afb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800afc4:	2300      	movs	r3, #0
 800afc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d05e      	beq.n	800b08c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd2:	4b31      	ldr	r3, [pc, #196]	; (800b098 <xTaskPriorityInherit+0xe0>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd8:	429a      	cmp	r2, r3
 800afda:	d24e      	bcs.n	800b07a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	db06      	blt.n	800aff2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afe4:	4b2c      	ldr	r3, [pc, #176]	; (800b098 <xTaskPriorityInherit+0xe0>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afea:	f1c3 0207 	rsb	r2, r3, #7
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	6959      	ldr	r1, [r3, #20]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affa:	4613      	mov	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4413      	add	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4a26      	ldr	r2, [pc, #152]	; (800b09c <xTaskPriorityInherit+0xe4>)
 800b004:	4413      	add	r3, r2
 800b006:	4299      	cmp	r1, r3
 800b008:	d12f      	bne.n	800b06a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	3304      	adds	r3, #4
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fe fa38 	bl	8009484 <uxListRemove>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10a      	bne.n	800b030 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01e:	2201      	movs	r2, #1
 800b020:	fa02 f303 	lsl.w	r3, r2, r3
 800b024:	43da      	mvns	r2, r3
 800b026:	4b1e      	ldr	r3, [pc, #120]	; (800b0a0 <xTaskPriorityInherit+0xe8>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4013      	ands	r3, r2
 800b02c:	4a1c      	ldr	r2, [pc, #112]	; (800b0a0 <xTaskPriorityInherit+0xe8>)
 800b02e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b030:	4b19      	ldr	r3, [pc, #100]	; (800b098 <xTaskPriorityInherit+0xe0>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03e:	2201      	movs	r2, #1
 800b040:	409a      	lsls	r2, r3
 800b042:	4b17      	ldr	r3, [pc, #92]	; (800b0a0 <xTaskPriorityInherit+0xe8>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4313      	orrs	r3, r2
 800b048:	4a15      	ldr	r2, [pc, #84]	; (800b0a0 <xTaskPriorityInherit+0xe8>)
 800b04a:	6013      	str	r3, [r2, #0]
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b050:	4613      	mov	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4a10      	ldr	r2, [pc, #64]	; (800b09c <xTaskPriorityInherit+0xe4>)
 800b05a:	441a      	add	r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	3304      	adds	r3, #4
 800b060:	4619      	mov	r1, r3
 800b062:	4610      	mov	r0, r2
 800b064:	f7fe f9b1 	bl	80093ca <vListInsertEnd>
 800b068:	e004      	b.n	800b074 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b06a:	4b0b      	ldr	r3, [pc, #44]	; (800b098 <xTaskPriorityInherit+0xe0>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b074:	2301      	movs	r3, #1
 800b076:	60fb      	str	r3, [r7, #12]
 800b078:	e008      	b.n	800b08c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b07e:	4b06      	ldr	r3, [pc, #24]	; (800b098 <xTaskPriorityInherit+0xe0>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b084:	429a      	cmp	r2, r3
 800b086:	d201      	bcs.n	800b08c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b088:	2301      	movs	r3, #1
 800b08a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b08c:	68fb      	ldr	r3, [r7, #12]
	}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	24000374 	.word	0x24000374
 800b09c:	24000378 	.word	0x24000378
 800b0a0:	2400047c 	.word	0x2400047c

0800b0a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d06e      	beq.n	800b198 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0ba:	4b3a      	ldr	r3, [pc, #232]	; (800b1a4 <xTaskPriorityDisinherit+0x100>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	693a      	ldr	r2, [r7, #16]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d00a      	beq.n	800b0da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	60fb      	str	r3, [r7, #12]
}
 800b0d6:	bf00      	nop
 800b0d8:	e7fe      	b.n	800b0d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10a      	bne.n	800b0f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	60bb      	str	r3, [r7, #8]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0fc:	1e5a      	subs	r2, r3, #1
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d044      	beq.n	800b198 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b112:	2b00      	cmp	r3, #0
 800b114:	d140      	bne.n	800b198 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	3304      	adds	r3, #4
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe f9b2 	bl	8009484 <uxListRemove>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d115      	bne.n	800b152 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b12a:	491f      	ldr	r1, [pc, #124]	; (800b1a8 <xTaskPriorityDisinherit+0x104>)
 800b12c:	4613      	mov	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	440b      	add	r3, r1
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10a      	bne.n	800b152 <xTaskPriorityDisinherit+0xae>
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	2201      	movs	r2, #1
 800b142:	fa02 f303 	lsl.w	r3, r2, r3
 800b146:	43da      	mvns	r2, r3
 800b148:	4b18      	ldr	r3, [pc, #96]	; (800b1ac <xTaskPriorityDisinherit+0x108>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4013      	ands	r3, r2
 800b14e:	4a17      	ldr	r2, [pc, #92]	; (800b1ac <xTaskPriorityDisinherit+0x108>)
 800b150:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15e:	f1c3 0207 	rsb	r2, r3, #7
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16a:	2201      	movs	r2, #1
 800b16c:	409a      	lsls	r2, r3
 800b16e:	4b0f      	ldr	r3, [pc, #60]	; (800b1ac <xTaskPriorityDisinherit+0x108>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4313      	orrs	r3, r2
 800b174:	4a0d      	ldr	r2, [pc, #52]	; (800b1ac <xTaskPriorityDisinherit+0x108>)
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17c:	4613      	mov	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	4413      	add	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4a08      	ldr	r2, [pc, #32]	; (800b1a8 <xTaskPriorityDisinherit+0x104>)
 800b186:	441a      	add	r2, r3
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	3304      	adds	r3, #4
 800b18c:	4619      	mov	r1, r3
 800b18e:	4610      	mov	r0, r2
 800b190:	f7fe f91b 	bl	80093ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b194:	2301      	movs	r3, #1
 800b196:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b198:	697b      	ldr	r3, [r7, #20]
	}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3718      	adds	r7, #24
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	24000374 	.word	0x24000374
 800b1a8:	24000378 	.word	0x24000378
 800b1ac:	2400047c 	.word	0x2400047c

0800b1b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b088      	sub	sp, #32
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d077      	beq.n	800b2b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10a      	bne.n	800b1e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	60fb      	str	r3, [r7, #12]
}
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d902      	bls.n	800b1f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	61fb      	str	r3, [r7, #28]
 800b1f4:	e002      	b.n	800b1fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b200:	69fa      	ldr	r2, [r7, #28]
 800b202:	429a      	cmp	r2, r3
 800b204:	d058      	beq.n	800b2b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b20a:	697a      	ldr	r2, [r7, #20]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d153      	bne.n	800b2b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b210:	4b2b      	ldr	r3, [pc, #172]	; (800b2c0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	429a      	cmp	r2, r3
 800b218:	d10a      	bne.n	800b230 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	60bb      	str	r3, [r7, #8]
}
 800b22c:	bf00      	nop
 800b22e:	e7fe      	b.n	800b22e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b234:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	69fa      	ldr	r2, [r7, #28]
 800b23a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	2b00      	cmp	r3, #0
 800b242:	db04      	blt.n	800b24e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	f1c3 0207 	rsb	r2, r3, #7
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	6959      	ldr	r1, [r3, #20]
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4a19      	ldr	r2, [pc, #100]	; (800b2c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b25e:	4413      	add	r3, r2
 800b260:	4299      	cmp	r1, r3
 800b262:	d129      	bne.n	800b2b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	3304      	adds	r3, #4
 800b268:	4618      	mov	r0, r3
 800b26a:	f7fe f90b 	bl	8009484 <uxListRemove>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10a      	bne.n	800b28a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b278:	2201      	movs	r2, #1
 800b27a:	fa02 f303 	lsl.w	r3, r2, r3
 800b27e:	43da      	mvns	r2, r3
 800b280:	4b11      	ldr	r3, [pc, #68]	; (800b2c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4013      	ands	r3, r2
 800b286:	4a10      	ldr	r2, [pc, #64]	; (800b2c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b288:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28e:	2201      	movs	r2, #1
 800b290:	409a      	lsls	r2, r3
 800b292:	4b0d      	ldr	r3, [pc, #52]	; (800b2c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4313      	orrs	r3, r2
 800b298:	4a0b      	ldr	r2, [pc, #44]	; (800b2c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b29a:	6013      	str	r3, [r2, #0]
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4a06      	ldr	r2, [pc, #24]	; (800b2c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b2aa:	441a      	add	r2, r3
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	3304      	adds	r3, #4
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	f7fe f889 	bl	80093ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2b8:	bf00      	nop
 800b2ba:	3720      	adds	r7, #32
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	24000374 	.word	0x24000374
 800b2c4:	24000378 	.word	0x24000378
 800b2c8:	2400047c 	.word	0x2400047c

0800b2cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b2cc:	b480      	push	{r7}
 800b2ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b2d0:	4b07      	ldr	r3, [pc, #28]	; (800b2f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d004      	beq.n	800b2e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b2d8:	4b05      	ldr	r3, [pc, #20]	; (800b2f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b2de:	3201      	adds	r2, #1
 800b2e0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b2e2:	4b03      	ldr	r3, [pc, #12]	; (800b2f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
	}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	24000374 	.word	0x24000374

0800b2f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2fe:	4b29      	ldr	r3, [pc, #164]	; (800b3a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b304:	4b28      	ldr	r3, [pc, #160]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3304      	adds	r3, #4
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fe f8ba 	bl	8009484 <uxListRemove>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10b      	bne.n	800b32e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b316:	4b24      	ldr	r3, [pc, #144]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31c:	2201      	movs	r2, #1
 800b31e:	fa02 f303 	lsl.w	r3, r2, r3
 800b322:	43da      	mvns	r2, r3
 800b324:	4b21      	ldr	r3, [pc, #132]	; (800b3ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4013      	ands	r3, r2
 800b32a:	4a20      	ldr	r2, [pc, #128]	; (800b3ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800b32c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b334:	d10a      	bne.n	800b34c <prvAddCurrentTaskToDelayedList+0x58>
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d007      	beq.n	800b34c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b33c:	4b1a      	ldr	r3, [pc, #104]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3304      	adds	r3, #4
 800b342:	4619      	mov	r1, r3
 800b344:	481a      	ldr	r0, [pc, #104]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b346:	f7fe f840 	bl	80093ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b34a:	e026      	b.n	800b39a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4413      	add	r3, r2
 800b352:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b354:	4b14      	ldr	r3, [pc, #80]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	429a      	cmp	r2, r3
 800b362:	d209      	bcs.n	800b378 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b364:	4b13      	ldr	r3, [pc, #76]	; (800b3b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	4b0f      	ldr	r3, [pc, #60]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3304      	adds	r3, #4
 800b36e:	4619      	mov	r1, r3
 800b370:	4610      	mov	r0, r2
 800b372:	f7fe f84e 	bl	8009412 <vListInsert>
}
 800b376:	e010      	b.n	800b39a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b378:	4b0f      	ldr	r3, [pc, #60]	; (800b3b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	4b0a      	ldr	r3, [pc, #40]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	3304      	adds	r3, #4
 800b382:	4619      	mov	r1, r3
 800b384:	4610      	mov	r0, r2
 800b386:	f7fe f844 	bl	8009412 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b38a:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	429a      	cmp	r2, r3
 800b392:	d202      	bcs.n	800b39a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b394:	4a09      	ldr	r2, [pc, #36]	; (800b3bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	6013      	str	r3, [r2, #0]
}
 800b39a:	bf00      	nop
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	24000478 	.word	0x24000478
 800b3a8:	24000374 	.word	0x24000374
 800b3ac:	2400047c 	.word	0x2400047c
 800b3b0:	24000460 	.word	0x24000460
 800b3b4:	24000430 	.word	0x24000430
 800b3b8:	2400042c 	.word	0x2400042c
 800b3bc:	24000494 	.word	0x24000494

0800b3c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	3b04      	subs	r3, #4
 800b3d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	3b04      	subs	r3, #4
 800b3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f023 0201 	bic.w	r2, r3, #1
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	3b04      	subs	r3, #4
 800b3ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3f0:	4a0c      	ldr	r2, [pc, #48]	; (800b424 <pxPortInitialiseStack+0x64>)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3b14      	subs	r3, #20
 800b3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3b04      	subs	r3, #4
 800b406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f06f 0202 	mvn.w	r2, #2
 800b40e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	3b20      	subs	r3, #32
 800b414:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b416:	68fb      	ldr	r3, [r7, #12]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	0800b429 	.word	0x0800b429

0800b428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b42e:	2300      	movs	r3, #0
 800b430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b432:	4b12      	ldr	r3, [pc, #72]	; (800b47c <prvTaskExitError+0x54>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b43a:	d00a      	beq.n	800b452 <prvTaskExitError+0x2a>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b440:	f383 8811 	msr	BASEPRI, r3
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	60fb      	str	r3, [r7, #12]
}
 800b44e:	bf00      	nop
 800b450:	e7fe      	b.n	800b450 <prvTaskExitError+0x28>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b456:	f383 8811 	msr	BASEPRI, r3
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	60bb      	str	r3, [r7, #8]
}
 800b464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b466:	bf00      	nop
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0fc      	beq.n	800b468 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b46e:	bf00      	nop
 800b470:	bf00      	nop
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	24000024 	.word	0x24000024

0800b480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b480:	4b07      	ldr	r3, [pc, #28]	; (800b4a0 <pxCurrentTCBConst2>)
 800b482:	6819      	ldr	r1, [r3, #0]
 800b484:	6808      	ldr	r0, [r1, #0]
 800b486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48a:	f380 8809 	msr	PSP, r0
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f04f 0000 	mov.w	r0, #0
 800b496:	f380 8811 	msr	BASEPRI, r0
 800b49a:	4770      	bx	lr
 800b49c:	f3af 8000 	nop.w

0800b4a0 <pxCurrentTCBConst2>:
 800b4a0:	24000374 	.word	0x24000374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop

0800b4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4a8:	4808      	ldr	r0, [pc, #32]	; (800b4cc <prvPortStartFirstTask+0x24>)
 800b4aa:	6800      	ldr	r0, [r0, #0]
 800b4ac:	6800      	ldr	r0, [r0, #0]
 800b4ae:	f380 8808 	msr	MSP, r0
 800b4b2:	f04f 0000 	mov.w	r0, #0
 800b4b6:	f380 8814 	msr	CONTROL, r0
 800b4ba:	b662      	cpsie	i
 800b4bc:	b661      	cpsie	f
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	df00      	svc	0
 800b4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b4ca:	bf00      	nop
 800b4cc:	e000ed08 	.word	0xe000ed08

0800b4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4d6:	4b46      	ldr	r3, [pc, #280]	; (800b5f0 <xPortStartScheduler+0x120>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a46      	ldr	r2, [pc, #280]	; (800b5f4 <xPortStartScheduler+0x124>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d10a      	bne.n	800b4f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	613b      	str	r3, [r7, #16]
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4f6:	4b3e      	ldr	r3, [pc, #248]	; (800b5f0 <xPortStartScheduler+0x120>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a3f      	ldr	r2, [pc, #252]	; (800b5f8 <xPortStartScheduler+0x128>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d10a      	bne.n	800b516 <xPortStartScheduler+0x46>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	60fb      	str	r3, [r7, #12]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b516:	4b39      	ldr	r3, [pc, #228]	; (800b5fc <xPortStartScheduler+0x12c>)
 800b518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	22ff      	movs	r2, #255	; 0xff
 800b526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b530:	78fb      	ldrb	r3, [r7, #3]
 800b532:	b2db      	uxtb	r3, r3
 800b534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	4b31      	ldr	r3, [pc, #196]	; (800b600 <xPortStartScheduler+0x130>)
 800b53c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b53e:	4b31      	ldr	r3, [pc, #196]	; (800b604 <xPortStartScheduler+0x134>)
 800b540:	2207      	movs	r2, #7
 800b542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b544:	e009      	b.n	800b55a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b546:	4b2f      	ldr	r3, [pc, #188]	; (800b604 <xPortStartScheduler+0x134>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	4a2d      	ldr	r2, [pc, #180]	; (800b604 <xPortStartScheduler+0x134>)
 800b54e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b550:	78fb      	ldrb	r3, [r7, #3]
 800b552:	b2db      	uxtb	r3, r3
 800b554:	005b      	lsls	r3, r3, #1
 800b556:	b2db      	uxtb	r3, r3
 800b558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b55a:	78fb      	ldrb	r3, [r7, #3]
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b562:	2b80      	cmp	r3, #128	; 0x80
 800b564:	d0ef      	beq.n	800b546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b566:	4b27      	ldr	r3, [pc, #156]	; (800b604 <xPortStartScheduler+0x134>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f1c3 0307 	rsb	r3, r3, #7
 800b56e:	2b04      	cmp	r3, #4
 800b570:	d00a      	beq.n	800b588 <xPortStartScheduler+0xb8>
	__asm volatile
 800b572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	60bb      	str	r3, [r7, #8]
}
 800b584:	bf00      	nop
 800b586:	e7fe      	b.n	800b586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b588:	4b1e      	ldr	r3, [pc, #120]	; (800b604 <xPortStartScheduler+0x134>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	4a1d      	ldr	r2, [pc, #116]	; (800b604 <xPortStartScheduler+0x134>)
 800b590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b592:	4b1c      	ldr	r3, [pc, #112]	; (800b604 <xPortStartScheduler+0x134>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b59a:	4a1a      	ldr	r2, [pc, #104]	; (800b604 <xPortStartScheduler+0x134>)
 800b59c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5a6:	4b18      	ldr	r3, [pc, #96]	; (800b608 <xPortStartScheduler+0x138>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a17      	ldr	r2, [pc, #92]	; (800b608 <xPortStartScheduler+0x138>)
 800b5ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5b2:	4b15      	ldr	r3, [pc, #84]	; (800b608 <xPortStartScheduler+0x138>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a14      	ldr	r2, [pc, #80]	; (800b608 <xPortStartScheduler+0x138>)
 800b5b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b5bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5be:	f000 f8dd 	bl	800b77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b5c2:	4b12      	ldr	r3, [pc, #72]	; (800b60c <xPortStartScheduler+0x13c>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b5c8:	f000 f8fc 	bl	800b7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b5cc:	4b10      	ldr	r3, [pc, #64]	; (800b610 <xPortStartScheduler+0x140>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a0f      	ldr	r2, [pc, #60]	; (800b610 <xPortStartScheduler+0x140>)
 800b5d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b5d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5d8:	f7ff ff66 	bl	800b4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5dc:	f7ff fa88 	bl	800aaf0 <vTaskSwitchContext>
	prvTaskExitError();
 800b5e0:	f7ff ff22 	bl	800b428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3718      	adds	r7, #24
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	e000ed00 	.word	0xe000ed00
 800b5f4:	410fc271 	.word	0x410fc271
 800b5f8:	410fc270 	.word	0x410fc270
 800b5fc:	e000e400 	.word	0xe000e400
 800b600:	240004a0 	.word	0x240004a0
 800b604:	240004a4 	.word	0x240004a4
 800b608:	e000ed20 	.word	0xe000ed20
 800b60c:	24000024 	.word	0x24000024
 800b610:	e000ef34 	.word	0xe000ef34

0800b614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	607b      	str	r3, [r7, #4]
}
 800b62c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b62e:	4b0f      	ldr	r3, [pc, #60]	; (800b66c <vPortEnterCritical+0x58>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3301      	adds	r3, #1
 800b634:	4a0d      	ldr	r2, [pc, #52]	; (800b66c <vPortEnterCritical+0x58>)
 800b636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b638:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <vPortEnterCritical+0x58>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d10f      	bne.n	800b660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b640:	4b0b      	ldr	r3, [pc, #44]	; (800b670 <vPortEnterCritical+0x5c>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <vPortEnterCritical+0x4c>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	603b      	str	r3, [r7, #0]
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <vPortEnterCritical+0x4a>
	}
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	24000024 	.word	0x24000024
 800b670:	e000ed04 	.word	0xe000ed04

0800b674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b67a:	4b12      	ldr	r3, [pc, #72]	; (800b6c4 <vPortExitCritical+0x50>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d10a      	bne.n	800b698 <vPortExitCritical+0x24>
	__asm volatile
 800b682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	607b      	str	r3, [r7, #4]
}
 800b694:	bf00      	nop
 800b696:	e7fe      	b.n	800b696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b698:	4b0a      	ldr	r3, [pc, #40]	; (800b6c4 <vPortExitCritical+0x50>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	4a09      	ldr	r2, [pc, #36]	; (800b6c4 <vPortExitCritical+0x50>)
 800b6a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6a2:	4b08      	ldr	r3, [pc, #32]	; (800b6c4 <vPortExitCritical+0x50>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d105      	bne.n	800b6b6 <vPortExitCritical+0x42>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	f383 8811 	msr	BASEPRI, r3
}
 800b6b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6b6:	bf00      	nop
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	24000024 	.word	0x24000024
	...

0800b6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6d0:	f3ef 8009 	mrs	r0, PSP
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	4b15      	ldr	r3, [pc, #84]	; (800b730 <pxCurrentTCBConst>)
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	f01e 0f10 	tst.w	lr, #16
 800b6e0:	bf08      	it	eq
 800b6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ea:	6010      	str	r0, [r2, #0]
 800b6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b6f4:	f380 8811 	msr	BASEPRI, r0
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f7ff f9f6 	bl	800aaf0 <vTaskSwitchContext>
 800b704:	f04f 0000 	mov.w	r0, #0
 800b708:	f380 8811 	msr	BASEPRI, r0
 800b70c:	bc09      	pop	{r0, r3}
 800b70e:	6819      	ldr	r1, [r3, #0]
 800b710:	6808      	ldr	r0, [r1, #0]
 800b712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b716:	f01e 0f10 	tst.w	lr, #16
 800b71a:	bf08      	it	eq
 800b71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b720:	f380 8809 	msr	PSP, r0
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	f3af 8000 	nop.w

0800b730 <pxCurrentTCBConst>:
 800b730:	24000374 	.word	0x24000374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop

0800b738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	607b      	str	r3, [r7, #4]
}
 800b750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b752:	f7ff f915 	bl	800a980 <xTaskIncrementTick>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d003      	beq.n	800b764 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b75c:	4b06      	ldr	r3, [pc, #24]	; (800b778 <SysTick_Handler+0x40>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	2300      	movs	r3, #0
 800b766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	f383 8811 	msr	BASEPRI, r3
}
 800b76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b770:	bf00      	nop
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	e000ed04 	.word	0xe000ed04

0800b77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b780:	4b0b      	ldr	r3, [pc, #44]	; (800b7b0 <vPortSetupTimerInterrupt+0x34>)
 800b782:	2200      	movs	r2, #0
 800b784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b786:	4b0b      	ldr	r3, [pc, #44]	; (800b7b4 <vPortSetupTimerInterrupt+0x38>)
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b78c:	4b0a      	ldr	r3, [pc, #40]	; (800b7b8 <vPortSetupTimerInterrupt+0x3c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a0a      	ldr	r2, [pc, #40]	; (800b7bc <vPortSetupTimerInterrupt+0x40>)
 800b792:	fba2 2303 	umull	r2, r3, r2, r3
 800b796:	099b      	lsrs	r3, r3, #6
 800b798:	4a09      	ldr	r2, [pc, #36]	; (800b7c0 <vPortSetupTimerInterrupt+0x44>)
 800b79a:	3b01      	subs	r3, #1
 800b79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b79e:	4b04      	ldr	r3, [pc, #16]	; (800b7b0 <vPortSetupTimerInterrupt+0x34>)
 800b7a0:	2207      	movs	r2, #7
 800b7a2:	601a      	str	r2, [r3, #0]
}
 800b7a4:	bf00      	nop
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	e000e010 	.word	0xe000e010
 800b7b4:	e000e018 	.word	0xe000e018
 800b7b8:	24000000 	.word	0x24000000
 800b7bc:	10624dd3 	.word	0x10624dd3
 800b7c0:	e000e014 	.word	0xe000e014

0800b7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b7d4 <vPortEnableVFP+0x10>
 800b7c8:	6801      	ldr	r1, [r0, #0]
 800b7ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b7ce:	6001      	str	r1, [r0, #0]
 800b7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7d2:	bf00      	nop
 800b7d4:	e000ed88 	.word	0xe000ed88

0800b7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b7de:	f3ef 8305 	mrs	r3, IPSR
 800b7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2b0f      	cmp	r3, #15
 800b7e8:	d914      	bls.n	800b814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b7ea:	4a17      	ldr	r2, [pc, #92]	; (800b848 <vPortValidateInterruptPriority+0x70>)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b7f4:	4b15      	ldr	r3, [pc, #84]	; (800b84c <vPortValidateInterruptPriority+0x74>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	7afa      	ldrb	r2, [r7, #11]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d20a      	bcs.n	800b814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	607b      	str	r3, [r7, #4]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b814:	4b0e      	ldr	r3, [pc, #56]	; (800b850 <vPortValidateInterruptPriority+0x78>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b81c:	4b0d      	ldr	r3, [pc, #52]	; (800b854 <vPortValidateInterruptPriority+0x7c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	429a      	cmp	r2, r3
 800b822:	d90a      	bls.n	800b83a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b828:	f383 8811 	msr	BASEPRI, r3
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	603b      	str	r3, [r7, #0]
}
 800b836:	bf00      	nop
 800b838:	e7fe      	b.n	800b838 <vPortValidateInterruptPriority+0x60>
	}
 800b83a:	bf00      	nop
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	e000e3f0 	.word	0xe000e3f0
 800b84c:	240004a0 	.word	0x240004a0
 800b850:	e000ed0c 	.word	0xe000ed0c
 800b854:	240004a4 	.word	0x240004a4

0800b858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b08a      	sub	sp, #40	; 0x28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b860:	2300      	movs	r3, #0
 800b862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b864:	f7fe ffc0 	bl	800a7e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b868:	4b5b      	ldr	r3, [pc, #364]	; (800b9d8 <pvPortMalloc+0x180>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b870:	f000 f920 	bl	800bab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b874:	4b59      	ldr	r3, [pc, #356]	; (800b9dc <pvPortMalloc+0x184>)
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4013      	ands	r3, r2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f040 8093 	bne.w	800b9a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d01d      	beq.n	800b8c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b888:	2208      	movs	r2, #8
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4413      	add	r3, r2
 800b88e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f003 0307 	and.w	r3, r3, #7
 800b896:	2b00      	cmp	r3, #0
 800b898:	d014      	beq.n	800b8c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f023 0307 	bic.w	r3, r3, #7
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f003 0307 	and.w	r3, r3, #7
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <pvPortMalloc+0x6c>
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	617b      	str	r3, [r7, #20]
}
 800b8c0:	bf00      	nop
 800b8c2:	e7fe      	b.n	800b8c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d06e      	beq.n	800b9a8 <pvPortMalloc+0x150>
 800b8ca:	4b45      	ldr	r3, [pc, #276]	; (800b9e0 <pvPortMalloc+0x188>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d869      	bhi.n	800b9a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b8d4:	4b43      	ldr	r3, [pc, #268]	; (800b9e4 <pvPortMalloc+0x18c>)
 800b8d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b8d8:	4b42      	ldr	r3, [pc, #264]	; (800b9e4 <pvPortMalloc+0x18c>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8de:	e004      	b.n	800b8ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d903      	bls.n	800b8fc <pvPortMalloc+0xa4>
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1f1      	bne.n	800b8e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b8fc:	4b36      	ldr	r3, [pc, #216]	; (800b9d8 <pvPortMalloc+0x180>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b902:	429a      	cmp	r2, r3
 800b904:	d050      	beq.n	800b9a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b906:	6a3b      	ldr	r3, [r7, #32]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2208      	movs	r2, #8
 800b90c:	4413      	add	r3, r2
 800b90e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	6a3b      	ldr	r3, [r7, #32]
 800b916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	1ad2      	subs	r2, r2, r3
 800b920:	2308      	movs	r3, #8
 800b922:	005b      	lsls	r3, r3, #1
 800b924:	429a      	cmp	r2, r3
 800b926:	d91f      	bls.n	800b968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4413      	add	r3, r2
 800b92e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	f003 0307 	and.w	r3, r3, #7
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00a      	beq.n	800b950 <pvPortMalloc+0xf8>
	__asm volatile
 800b93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	613b      	str	r3, [r7, #16]
}
 800b94c:	bf00      	nop
 800b94e:	e7fe      	b.n	800b94e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	685a      	ldr	r2, [r3, #4]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	1ad2      	subs	r2, r2, r3
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b962:	69b8      	ldr	r0, [r7, #24]
 800b964:	f000 f908 	bl	800bb78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b968:	4b1d      	ldr	r3, [pc, #116]	; (800b9e0 <pvPortMalloc+0x188>)
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	4a1b      	ldr	r2, [pc, #108]	; (800b9e0 <pvPortMalloc+0x188>)
 800b974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b976:	4b1a      	ldr	r3, [pc, #104]	; (800b9e0 <pvPortMalloc+0x188>)
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	4b1b      	ldr	r3, [pc, #108]	; (800b9e8 <pvPortMalloc+0x190>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d203      	bcs.n	800b98a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b982:	4b17      	ldr	r3, [pc, #92]	; (800b9e0 <pvPortMalloc+0x188>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a18      	ldr	r2, [pc, #96]	; (800b9e8 <pvPortMalloc+0x190>)
 800b988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	685a      	ldr	r2, [r3, #4]
 800b98e:	4b13      	ldr	r3, [pc, #76]	; (800b9dc <pvPortMalloc+0x184>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	431a      	orrs	r2, r3
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99a:	2200      	movs	r2, #0
 800b99c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b99e:	4b13      	ldr	r3, [pc, #76]	; (800b9ec <pvPortMalloc+0x194>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	4a11      	ldr	r2, [pc, #68]	; (800b9ec <pvPortMalloc+0x194>)
 800b9a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9a8:	f7fe ff2c 	bl	800a804 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	f003 0307 	and.w	r3, r3, #7
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00a      	beq.n	800b9cc <pvPortMalloc+0x174>
	__asm volatile
 800b9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ba:	f383 8811 	msr	BASEPRI, r3
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	60fb      	str	r3, [r7, #12]
}
 800b9c8:	bf00      	nop
 800b9ca:	e7fe      	b.n	800b9ca <pvPortMalloc+0x172>
	return pvReturn;
 800b9cc:	69fb      	ldr	r3, [r7, #28]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3728      	adds	r7, #40	; 0x28
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	240644b0 	.word	0x240644b0
 800b9dc:	240644c4 	.word	0x240644c4
 800b9e0:	240644b4 	.word	0x240644b4
 800b9e4:	240644a8 	.word	0x240644a8
 800b9e8:	240644b8 	.word	0x240644b8
 800b9ec:	240644bc 	.word	0x240644bc

0800b9f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d04d      	beq.n	800ba9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba02:	2308      	movs	r3, #8
 800ba04:	425b      	negs	r3, r3
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	4413      	add	r3, r2
 800ba0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	685a      	ldr	r2, [r3, #4]
 800ba14:	4b24      	ldr	r3, [pc, #144]	; (800baa8 <vPortFree+0xb8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4013      	ands	r3, r2
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10a      	bne.n	800ba34 <vPortFree+0x44>
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	60fb      	str	r3, [r7, #12]
}
 800ba30:	bf00      	nop
 800ba32:	e7fe      	b.n	800ba32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00a      	beq.n	800ba52 <vPortFree+0x62>
	__asm volatile
 800ba3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba40:	f383 8811 	msr	BASEPRI, r3
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	60bb      	str	r3, [r7, #8]
}
 800ba4e:	bf00      	nop
 800ba50:	e7fe      	b.n	800ba50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	685a      	ldr	r2, [r3, #4]
 800ba56:	4b14      	ldr	r3, [pc, #80]	; (800baa8 <vPortFree+0xb8>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d01e      	beq.n	800ba9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d11a      	bne.n	800ba9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	4b0e      	ldr	r3, [pc, #56]	; (800baa8 <vPortFree+0xb8>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	43db      	mvns	r3, r3
 800ba72:	401a      	ands	r2, r3
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba78:	f7fe feb6 	bl	800a7e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	685a      	ldr	r2, [r3, #4]
 800ba80:	4b0a      	ldr	r3, [pc, #40]	; (800baac <vPortFree+0xbc>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4413      	add	r3, r2
 800ba86:	4a09      	ldr	r2, [pc, #36]	; (800baac <vPortFree+0xbc>)
 800ba88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba8a:	6938      	ldr	r0, [r7, #16]
 800ba8c:	f000 f874 	bl	800bb78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba90:	4b07      	ldr	r3, [pc, #28]	; (800bab0 <vPortFree+0xc0>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	4a06      	ldr	r2, [pc, #24]	; (800bab0 <vPortFree+0xc0>)
 800ba98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba9a:	f7fe feb3 	bl	800a804 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba9e:	bf00      	nop
 800baa0:	3718      	adds	r7, #24
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	240644c4 	.word	0x240644c4
 800baac:	240644b4 	.word	0x240644b4
 800bab0:	240644c0 	.word	0x240644c0

0800bab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800baba:	f44f 23c8 	mov.w	r3, #409600	; 0x64000
 800babe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bac0:	4b27      	ldr	r3, [pc, #156]	; (800bb60 <prvHeapInit+0xac>)
 800bac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f003 0307 	and.w	r3, r3, #7
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00c      	beq.n	800bae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	3307      	adds	r3, #7
 800bad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f023 0307 	bic.w	r3, r3, #7
 800bada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	4a1f      	ldr	r2, [pc, #124]	; (800bb60 <prvHeapInit+0xac>)
 800bae4:	4413      	add	r3, r2
 800bae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800baec:	4a1d      	ldr	r2, [pc, #116]	; (800bb64 <prvHeapInit+0xb0>)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800baf2:	4b1c      	ldr	r3, [pc, #112]	; (800bb64 <prvHeapInit+0xb0>)
 800baf4:	2200      	movs	r2, #0
 800baf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	4413      	add	r3, r2
 800bafe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb00:	2208      	movs	r2, #8
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	1a9b      	subs	r3, r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 0307 	bic.w	r3, r3, #7
 800bb0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4a15      	ldr	r2, [pc, #84]	; (800bb68 <prvHeapInit+0xb4>)
 800bb14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb16:	4b14      	ldr	r3, [pc, #80]	; (800bb68 <prvHeapInit+0xb4>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb1e:	4b12      	ldr	r3, [pc, #72]	; (800bb68 <prvHeapInit+0xb4>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2200      	movs	r2, #0
 800bb24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	1ad2      	subs	r2, r2, r3
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb34:	4b0c      	ldr	r3, [pc, #48]	; (800bb68 <prvHeapInit+0xb4>)
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	4a0a      	ldr	r2, [pc, #40]	; (800bb6c <prvHeapInit+0xb8>)
 800bb42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	4a09      	ldr	r2, [pc, #36]	; (800bb70 <prvHeapInit+0xbc>)
 800bb4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb4c:	4b09      	ldr	r3, [pc, #36]	; (800bb74 <prvHeapInit+0xc0>)
 800bb4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb52:	601a      	str	r2, [r3, #0]
}
 800bb54:	bf00      	nop
 800bb56:	3714      	adds	r7, #20
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	240004a8 	.word	0x240004a8
 800bb64:	240644a8 	.word	0x240644a8
 800bb68:	240644b0 	.word	0x240644b0
 800bb6c:	240644b8 	.word	0x240644b8
 800bb70:	240644b4 	.word	0x240644b4
 800bb74:	240644c4 	.word	0x240644c4

0800bb78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb80:	4b28      	ldr	r3, [pc, #160]	; (800bc24 <prvInsertBlockIntoFreeList+0xac>)
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	e002      	b.n	800bb8c <prvInsertBlockIntoFreeList+0x14>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	60fb      	str	r3, [r7, #12]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d8f7      	bhi.n	800bb86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	4413      	add	r3, r2
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d108      	bne.n	800bbba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	441a      	add	r2, r3
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	441a      	add	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d118      	bne.n	800bc00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	4b15      	ldr	r3, [pc, #84]	; (800bc28 <prvInsertBlockIntoFreeList+0xb0>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d00d      	beq.n	800bbf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	441a      	add	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	e008      	b.n	800bc08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bbf6:	4b0c      	ldr	r3, [pc, #48]	; (800bc28 <prvInsertBlockIntoFreeList+0xb0>)
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	e003      	b.n	800bc08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d002      	beq.n	800bc16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc16:	bf00      	nop
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	240644a8 	.word	0x240644a8
 800bc28:	240644b0 	.word	0x240644b0

0800bc2c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800bc36:	f007 fc77 	bl	8013528 <sys_timeouts_sleeptime>
 800bc3a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc42:	d10b      	bne.n	800bc5c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800bc44:	4813      	ldr	r0, [pc, #76]	; (800bc94 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc46:	f00a fd3c 	bl	80166c2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	6839      	ldr	r1, [r7, #0]
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f00a fcae 	bl	80165b0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bc54:	480f      	ldr	r0, [pc, #60]	; (800bc94 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc56:	f00a fd25 	bl	80166a4 <sys_mutex_lock>
    return;
 800bc5a:	e018      	b.n	800bc8e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d102      	bne.n	800bc68 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800bc62:	f007 fc27 	bl	80134b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bc66:	e7e6      	b.n	800bc36 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800bc68:	480a      	ldr	r0, [pc, #40]	; (800bc94 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc6a:	f00a fd2a 	bl	80166c2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f00a fc9c 	bl	80165b0 <sys_arch_mbox_fetch>
 800bc78:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800bc7a:	4806      	ldr	r0, [pc, #24]	; (800bc94 <tcpip_timeouts_mbox_fetch+0x68>)
 800bc7c:	f00a fd12 	bl	80166a4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc86:	d102      	bne.n	800bc8e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800bc88:	f007 fc14 	bl	80134b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bc8c:	e7d3      	b.n	800bc36 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	24064d5c 	.word	0x24064d5c

0800bc98 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800bca0:	4810      	ldr	r0, [pc, #64]	; (800bce4 <tcpip_thread+0x4c>)
 800bca2:	f00a fcff 	bl	80166a4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800bca6:	4b10      	ldr	r3, [pc, #64]	; (800bce8 <tcpip_thread+0x50>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d005      	beq.n	800bcba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800bcae:	4b0e      	ldr	r3, [pc, #56]	; (800bce8 <tcpip_thread+0x50>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a0e      	ldr	r2, [pc, #56]	; (800bcec <tcpip_thread+0x54>)
 800bcb4:	6812      	ldr	r2, [r2, #0]
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bcba:	f107 030c 	add.w	r3, r7, #12
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	480b      	ldr	r0, [pc, #44]	; (800bcf0 <tcpip_thread+0x58>)
 800bcc2:	f7ff ffb3 	bl	800bc2c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d106      	bne.n	800bcda <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bccc:	4b09      	ldr	r3, [pc, #36]	; (800bcf4 <tcpip_thread+0x5c>)
 800bcce:	2291      	movs	r2, #145	; 0x91
 800bcd0:	4909      	ldr	r1, [pc, #36]	; (800bcf8 <tcpip_thread+0x60>)
 800bcd2:	480a      	ldr	r0, [pc, #40]	; (800bcfc <tcpip_thread+0x64>)
 800bcd4:	f00a fee2 	bl	8016a9c <iprintf>
      continue;
 800bcd8:	e003      	b.n	800bce2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 f80f 	bl	800bd00 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bce2:	e7ea      	b.n	800bcba <tcpip_thread+0x22>
 800bce4:	24064d5c 	.word	0x24064d5c
 800bce8:	240644c8 	.word	0x240644c8
 800bcec:	240644cc 	.word	0x240644cc
 800bcf0:	240644d0 	.word	0x240644d0
 800bcf4:	08017a28 	.word	0x08017a28
 800bcf8:	08017a58 	.word	0x08017a58
 800bcfc:	08017a78 	.word	0x08017a78

0800bd00 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d026      	beq.n	800bd5e <tcpip_thread_handle_msg+0x5e>
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	dc2b      	bgt.n	800bd6c <tcpip_thread_handle_msg+0x6c>
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d002      	beq.n	800bd1e <tcpip_thread_handle_msg+0x1e>
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d015      	beq.n	800bd48 <tcpip_thread_handle_msg+0x48>
 800bd1c:	e026      	b.n	800bd6c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	6850      	ldr	r0, [r2, #4]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	6892      	ldr	r2, [r2, #8]
 800bd2a:	4611      	mov	r1, r2
 800bd2c:	4798      	blx	r3
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d004      	beq.n	800bd3e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f001 feab 	bl	800da94 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bd3e:	6879      	ldr	r1, [r7, #4]
 800bd40:	2009      	movs	r0, #9
 800bd42:	f000 ff2b 	bl	800cb9c <memp_free>
      break;
 800bd46:	e018      	b.n	800bd7a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	6892      	ldr	r2, [r2, #8]
 800bd50:	4610      	mov	r0, r2
 800bd52:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bd54:	6879      	ldr	r1, [r7, #4]
 800bd56:	2008      	movs	r0, #8
 800bd58:	f000 ff20 	bl	800cb9c <memp_free>
      break;
 800bd5c:	e00d      	b.n	800bd7a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	6892      	ldr	r2, [r2, #8]
 800bd66:	4610      	mov	r0, r2
 800bd68:	4798      	blx	r3
      break;
 800bd6a:	e006      	b.n	800bd7a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bd6c:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <tcpip_thread_handle_msg+0x84>)
 800bd6e:	22cf      	movs	r2, #207	; 0xcf
 800bd70:	4905      	ldr	r1, [pc, #20]	; (800bd88 <tcpip_thread_handle_msg+0x88>)
 800bd72:	4806      	ldr	r0, [pc, #24]	; (800bd8c <tcpip_thread_handle_msg+0x8c>)
 800bd74:	f00a fe92 	bl	8016a9c <iprintf>
      break;
 800bd78:	bf00      	nop
  }
}
 800bd7a:	bf00      	nop
 800bd7c:	3708      	adds	r7, #8
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	08017a28 	.word	0x08017a28
 800bd88:	08017a58 	.word	0x08017a58
 800bd8c:	08017a78 	.word	0x08017a78

0800bd90 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bd9c:	481a      	ldr	r0, [pc, #104]	; (800be08 <tcpip_inpkt+0x78>)
 800bd9e:	f00a fc46 	bl	801662e <sys_mbox_valid>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d105      	bne.n	800bdb4 <tcpip_inpkt+0x24>
 800bda8:	4b18      	ldr	r3, [pc, #96]	; (800be0c <tcpip_inpkt+0x7c>)
 800bdaa:	22fc      	movs	r2, #252	; 0xfc
 800bdac:	4918      	ldr	r1, [pc, #96]	; (800be10 <tcpip_inpkt+0x80>)
 800bdae:	4819      	ldr	r0, [pc, #100]	; (800be14 <tcpip_inpkt+0x84>)
 800bdb0:	f00a fe74 	bl	8016a9c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800bdb4:	2009      	movs	r0, #9
 800bdb6:	f000 fe7b 	bl	800cab0 <memp_malloc>
 800bdba:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d102      	bne.n	800bdc8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800bdc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdc6:	e01a      	b.n	800bdfe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bde0:	6979      	ldr	r1, [r7, #20]
 800bde2:	4809      	ldr	r0, [pc, #36]	; (800be08 <tcpip_inpkt+0x78>)
 800bde4:	f00a fbca 	bl	801657c <sys_mbox_trypost>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d006      	beq.n	800bdfc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bdee:	6979      	ldr	r1, [r7, #20]
 800bdf0:	2009      	movs	r0, #9
 800bdf2:	f000 fed3 	bl	800cb9c <memp_free>
    return ERR_MEM;
 800bdf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdfa:	e000      	b.n	800bdfe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800bdfc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3718      	adds	r7, #24
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	240644d0 	.word	0x240644d0
 800be0c:	08017a28 	.word	0x08017a28
 800be10:	08017aa0 	.word	0x08017aa0
 800be14:	08017a78 	.word	0x08017a78

0800be18 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800be28:	f003 0318 	and.w	r3, r3, #24
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d006      	beq.n	800be3e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800be30:	4a08      	ldr	r2, [pc, #32]	; (800be54 <tcpip_input+0x3c>)
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff ffab 	bl	800bd90 <tcpip_inpkt>
 800be3a:	4603      	mov	r3, r0
 800be3c:	e005      	b.n	800be4a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800be3e:	4a06      	ldr	r2, [pc, #24]	; (800be58 <tcpip_input+0x40>)
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7ff ffa4 	bl	800bd90 <tcpip_inpkt>
 800be48:	4603      	mov	r3, r0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	0801638d 	.word	0x0801638d
 800be58:	080152a1 	.word	0x080152a1

0800be5c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800be66:	4819      	ldr	r0, [pc, #100]	; (800becc <tcpip_try_callback+0x70>)
 800be68:	f00a fbe1 	bl	801662e <sys_mbox_valid>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d106      	bne.n	800be80 <tcpip_try_callback+0x24>
 800be72:	4b17      	ldr	r3, [pc, #92]	; (800bed0 <tcpip_try_callback+0x74>)
 800be74:	f240 125d 	movw	r2, #349	; 0x15d
 800be78:	4916      	ldr	r1, [pc, #88]	; (800bed4 <tcpip_try_callback+0x78>)
 800be7a:	4817      	ldr	r0, [pc, #92]	; (800bed8 <tcpip_try_callback+0x7c>)
 800be7c:	f00a fe0e 	bl	8016a9c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800be80:	2008      	movs	r0, #8
 800be82:	f000 fe15 	bl	800cab0 <memp_malloc>
 800be86:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d102      	bne.n	800be94 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800be8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be92:	e017      	b.n	800bec4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2201      	movs	r2, #1
 800be98:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	683a      	ldr	r2, [r7, #0]
 800bea4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bea6:	68f9      	ldr	r1, [r7, #12]
 800bea8:	4808      	ldr	r0, [pc, #32]	; (800becc <tcpip_try_callback+0x70>)
 800beaa:	f00a fb67 	bl	801657c <sys_mbox_trypost>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d006      	beq.n	800bec2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800beb4:	68f9      	ldr	r1, [r7, #12]
 800beb6:	2008      	movs	r0, #8
 800beb8:	f000 fe70 	bl	800cb9c <memp_free>
    return ERR_MEM;
 800bebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bec0:	e000      	b.n	800bec4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3710      	adds	r7, #16
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	240644d0 	.word	0x240644d0
 800bed0:	08017a28 	.word	0x08017a28
 800bed4:	08017aa0 	.word	0x08017aa0
 800bed8:	08017a78 	.word	0x08017a78

0800bedc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af02      	add	r7, sp, #8
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bee6:	f000 f92d 	bl	800c144 <lwip_init>

  tcpip_init_done = initfunc;
 800beea:	4a17      	ldr	r2, [pc, #92]	; (800bf48 <tcpip_init+0x6c>)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bef0:	4a16      	ldr	r2, [pc, #88]	; (800bf4c <tcpip_init+0x70>)
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bef6:	2106      	movs	r1, #6
 800bef8:	4815      	ldr	r0, [pc, #84]	; (800bf50 <tcpip_init+0x74>)
 800befa:	f00a fb1d 	bl	8016538 <sys_mbox_new>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d006      	beq.n	800bf12 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bf04:	4b13      	ldr	r3, [pc, #76]	; (800bf54 <tcpip_init+0x78>)
 800bf06:	f240 2261 	movw	r2, #609	; 0x261
 800bf0a:	4913      	ldr	r1, [pc, #76]	; (800bf58 <tcpip_init+0x7c>)
 800bf0c:	4813      	ldr	r0, [pc, #76]	; (800bf5c <tcpip_init+0x80>)
 800bf0e:	f00a fdc5 	bl	8016a9c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bf12:	4813      	ldr	r0, [pc, #76]	; (800bf60 <tcpip_init+0x84>)
 800bf14:	f00a fbaa 	bl	801666c <sys_mutex_new>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d006      	beq.n	800bf2c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800bf1e:	4b0d      	ldr	r3, [pc, #52]	; (800bf54 <tcpip_init+0x78>)
 800bf20:	f240 2265 	movw	r2, #613	; 0x265
 800bf24:	490f      	ldr	r1, [pc, #60]	; (800bf64 <tcpip_init+0x88>)
 800bf26:	480d      	ldr	r0, [pc, #52]	; (800bf5c <tcpip_init+0x80>)
 800bf28:	f00a fdb8 	bl	8016a9c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf34:	2200      	movs	r2, #0
 800bf36:	490c      	ldr	r1, [pc, #48]	; (800bf68 <tcpip_init+0x8c>)
 800bf38:	480c      	ldr	r0, [pc, #48]	; (800bf6c <tcpip_init+0x90>)
 800bf3a:	f00a fbcf 	bl	80166dc <sys_thread_new>
}
 800bf3e:	bf00      	nop
 800bf40:	3708      	adds	r7, #8
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	240644c8 	.word	0x240644c8
 800bf4c:	240644cc 	.word	0x240644cc
 800bf50:	240644d0 	.word	0x240644d0
 800bf54:	08017a28 	.word	0x08017a28
 800bf58:	08017ab0 	.word	0x08017ab0
 800bf5c:	08017a78 	.word	0x08017a78
 800bf60:	24064d5c 	.word	0x24064d5c
 800bf64:	08017ad4 	.word	0x08017ad4
 800bf68:	0800bc99 	.word	0x0800bc99
 800bf6c:	08017af8 	.word	0x08017af8

0800bf70 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	4603      	mov	r3, r0
 800bf78:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bf7a:	88fb      	ldrh	r3, [r7, #6]
 800bf7c:	021b      	lsls	r3, r3, #8
 800bf7e:	b21a      	sxth	r2, r3
 800bf80:	88fb      	ldrh	r3, [r7, #6]
 800bf82:	0a1b      	lsrs	r3, r3, #8
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	b21b      	sxth	r3, r3
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	b21b      	sxth	r3, r3
 800bf8c:	b29b      	uxth	r3, r3
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	370c      	adds	r7, #12
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b083      	sub	sp, #12
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	061a      	lsls	r2, r3, #24
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	021b      	lsls	r3, r3, #8
 800bfaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	0a1b      	lsrs	r3, r3, #8
 800bfb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bfb8:	431a      	orrs	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	0e1b      	lsrs	r3, r3, #24
 800bfbe:	4313      	orrs	r3, r2
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b089      	sub	sp, #36	; 0x24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	f003 0301 	and.w	r3, r3, #1
 800bfe8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00d      	beq.n	800c00c <lwip_standard_chksum+0x40>
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	dd0a      	ble.n	800c00c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800bff6:	69fa      	ldr	r2, [r7, #28]
 800bff8:	1c53      	adds	r3, r2, #1
 800bffa:	61fb      	str	r3, [r7, #28]
 800bffc:	f107 030e 	add.w	r3, r7, #14
 800c000:	3301      	adds	r3, #1
 800c002:	7812      	ldrb	r2, [r2, #0]
 800c004:	701a      	strb	r2, [r3, #0]
    len--;
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	3b01      	subs	r3, #1
 800c00a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800c010:	e00a      	b.n	800c028 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	1c9a      	adds	r2, r3, #2
 800c016:	61ba      	str	r2, [r7, #24]
 800c018:	881b      	ldrh	r3, [r3, #0]
 800c01a:	461a      	mov	r2, r3
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	4413      	add	r3, r2
 800c020:	617b      	str	r3, [r7, #20]
    len -= 2;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	3b02      	subs	r3, #2
 800c026:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	dcf1      	bgt.n	800c012 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	dd04      	ble.n	800c03e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800c034:	f107 030e 	add.w	r3, r7, #14
 800c038:	69ba      	ldr	r2, [r7, #24]
 800c03a:	7812      	ldrb	r2, [r2, #0]
 800c03c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800c03e:	89fb      	ldrh	r3, [r7, #14]
 800c040:	461a      	mov	r2, r3
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	4413      	add	r3, r2
 800c046:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	0c1a      	lsrs	r2, r3, #16
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	b29b      	uxth	r3, r3
 800c050:	4413      	add	r3, r2
 800c052:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	0c1a      	lsrs	r2, r3, #16
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	4413      	add	r3, r2
 800c05e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d007      	beq.n	800c076 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	021b      	lsls	r3, r3, #8
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	0a1b      	lsrs	r3, r3, #8
 800c070:	b2db      	uxtb	r3, r3
 800c072:	4313      	orrs	r3, r2
 800c074:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	b29b      	uxth	r3, r3
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3724      	adds	r7, #36	; 0x24
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b082      	sub	sp, #8
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	460b      	mov	r3, r1
 800c090:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800c092:	887b      	ldrh	r3, [r7, #2]
 800c094:	4619      	mov	r1, r3
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f7ff ff98 	bl	800bfcc <lwip_standard_chksum>
 800c09c:	4603      	mov	r3, r0
 800c09e:	43db      	mvns	r3, r3
 800c0a0:	b29b      	uxth	r3, r3
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b086      	sub	sp, #24
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	613b      	str	r3, [r7, #16]
 800c0be:	e02b      	b.n	800c118 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	895b      	ldrh	r3, [r3, #10]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	4610      	mov	r0, r2
 800c0cc:	f7ff ff7e 	bl	800bfcc <lwip_standard_chksum>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	0c1a      	lsrs	r2, r3, #16
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	4413      	add	r3, r2
 800c0e4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	895b      	ldrh	r3, [r3, #10]
 800c0ea:	f003 0301 	and.w	r3, r3, #1
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d00e      	beq.n	800c112 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	bf0c      	ite	eq
 800c0fa:	2301      	moveq	r3, #1
 800c0fc:	2300      	movne	r3, #0
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	021b      	lsls	r3, r3, #8
 800c106:	b29a      	uxth	r2, r3
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	0a1b      	lsrs	r3, r3, #8
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	4313      	orrs	r3, r2
 800c110:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	613b      	str	r3, [r7, #16]
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1d0      	bne.n	800c0c0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d007      	beq.n	800c134 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	021b      	lsls	r3, r3, #8
 800c128:	b29a      	uxth	r2, r3
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	0a1b      	lsrs	r3, r3, #8
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	4313      	orrs	r3, r2
 800c132:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	b29b      	uxth	r3, r3
 800c138:	43db      	mvns	r3, r3
 800c13a:	b29b      	uxth	r3, r3
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3718      	adds	r7, #24
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c14a:	2300      	movs	r3, #0
 800c14c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c14e:	f00a fa7f 	bl	8016650 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c152:	f000 f8d9 	bl	800c308 <mem_init>
  memp_init();
 800c156:	f000 fc3d 	bl	800c9d4 <memp_init>
  pbuf_init();
  netif_init();
 800c15a:	f000 fd49 	bl	800cbf0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c15e:	f007 fa1b 	bl	8013598 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c162:	f001 ff41 	bl	800dfe8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c166:	f007 f95d 	bl	8013424 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c16a:	bf00      	nop
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
	...

0800c174 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	4603      	mov	r3, r0
 800c17c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c17e:	4b05      	ldr	r3, [pc, #20]	; (800c194 <ptr_to_mem+0x20>)
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	88fb      	ldrh	r3, [r7, #6]
 800c184:	4413      	add	r3, r2
}
 800c186:	4618      	mov	r0, r3
 800c188:	370c      	adds	r7, #12
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	240644d4 	.word	0x240644d4

0800c198 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c1a0:	4b05      	ldr	r3, [pc, #20]	; (800c1b8 <mem_to_ptr+0x20>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	b29b      	uxth	r3, r3
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	240644d4 	.word	0x240644d4

0800c1bc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c1bc:	b590      	push	{r4, r7, lr}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c1c4:	4b47      	ldr	r3, [pc, #284]	; (800c2e4 <plug_holes+0x128>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d206      	bcs.n	800c1dc <plug_holes+0x20>
 800c1ce:	4b46      	ldr	r3, [pc, #280]	; (800c2e8 <plug_holes+0x12c>)
 800c1d0:	f240 12df 	movw	r2, #479	; 0x1df
 800c1d4:	4945      	ldr	r1, [pc, #276]	; (800c2ec <plug_holes+0x130>)
 800c1d6:	4846      	ldr	r0, [pc, #280]	; (800c2f0 <plug_holes+0x134>)
 800c1d8:	f00a fc60 	bl	8016a9c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c1dc:	4b45      	ldr	r3, [pc, #276]	; (800c2f4 <plug_holes+0x138>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d306      	bcc.n	800c1f4 <plug_holes+0x38>
 800c1e6:	4b40      	ldr	r3, [pc, #256]	; (800c2e8 <plug_holes+0x12c>)
 800c1e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c1ec:	4942      	ldr	r1, [pc, #264]	; (800c2f8 <plug_holes+0x13c>)
 800c1ee:	4840      	ldr	r0, [pc, #256]	; (800c2f0 <plug_holes+0x134>)
 800c1f0:	f00a fc54 	bl	8016a9c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	791b      	ldrb	r3, [r3, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d006      	beq.n	800c20a <plug_holes+0x4e>
 800c1fc:	4b3a      	ldr	r3, [pc, #232]	; (800c2e8 <plug_holes+0x12c>)
 800c1fe:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c202:	493e      	ldr	r1, [pc, #248]	; (800c2fc <plug_holes+0x140>)
 800c204:	483a      	ldr	r0, [pc, #232]	; (800c2f0 <plug_holes+0x134>)
 800c206:	f00a fc49 	bl	8016a9c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	881b      	ldrh	r3, [r3, #0]
 800c20e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c212:	4293      	cmp	r3, r2
 800c214:	d906      	bls.n	800c224 <plug_holes+0x68>
 800c216:	4b34      	ldr	r3, [pc, #208]	; (800c2e8 <plug_holes+0x12c>)
 800c218:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c21c:	4938      	ldr	r1, [pc, #224]	; (800c300 <plug_holes+0x144>)
 800c21e:	4834      	ldr	r0, [pc, #208]	; (800c2f0 <plug_holes+0x134>)
 800c220:	f00a fc3c 	bl	8016a9c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	881b      	ldrh	r3, [r3, #0]
 800c228:	4618      	mov	r0, r3
 800c22a:	f7ff ffa3 	bl	800c174 <ptr_to_mem>
 800c22e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	429a      	cmp	r2, r3
 800c236:	d025      	beq.n	800c284 <plug_holes+0xc8>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	791b      	ldrb	r3, [r3, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d121      	bne.n	800c284 <plug_holes+0xc8>
 800c240:	4b2c      	ldr	r3, [pc, #176]	; (800c2f4 <plug_holes+0x138>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	429a      	cmp	r2, r3
 800c248:	d01c      	beq.n	800c284 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c24a:	4b2e      	ldr	r3, [pc, #184]	; (800c304 <plug_holes+0x148>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	429a      	cmp	r2, r3
 800c252:	d102      	bne.n	800c25a <plug_holes+0x9e>
      lfree = mem;
 800c254:	4a2b      	ldr	r2, [pc, #172]	; (800c304 <plug_holes+0x148>)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	881a      	ldrh	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	881b      	ldrh	r3, [r3, #0]
 800c266:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d00a      	beq.n	800c284 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	881b      	ldrh	r3, [r3, #0]
 800c272:	4618      	mov	r0, r3
 800c274:	f7ff ff7e 	bl	800c174 <ptr_to_mem>
 800c278:	4604      	mov	r4, r0
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff ff8c 	bl	800c198 <mem_to_ptr>
 800c280:	4603      	mov	r3, r0
 800c282:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	885b      	ldrh	r3, [r3, #2]
 800c288:	4618      	mov	r0, r3
 800c28a:	f7ff ff73 	bl	800c174 <ptr_to_mem>
 800c28e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c290:	68ba      	ldr	r2, [r7, #8]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	429a      	cmp	r2, r3
 800c296:	d020      	beq.n	800c2da <plug_holes+0x11e>
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	791b      	ldrb	r3, [r3, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d11c      	bne.n	800c2da <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c2a0:	4b18      	ldr	r3, [pc, #96]	; (800c304 <plug_holes+0x148>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d102      	bne.n	800c2b0 <plug_holes+0xf4>
      lfree = pmem;
 800c2aa:	4a16      	ldr	r2, [pc, #88]	; (800c304 <plug_holes+0x148>)
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	881a      	ldrh	r2, [r3, #0]
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d00a      	beq.n	800c2da <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	881b      	ldrh	r3, [r3, #0]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7ff ff53 	bl	800c174 <ptr_to_mem>
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	68b8      	ldr	r0, [r7, #8]
 800c2d2:	f7ff ff61 	bl	800c198 <mem_to_ptr>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c2da:	bf00      	nop
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd90      	pop	{r4, r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	240644d4 	.word	0x240644d4
 800c2e8:	08017b08 	.word	0x08017b08
 800c2ec:	08017b38 	.word	0x08017b38
 800c2f0:	08017b50 	.word	0x08017b50
 800c2f4:	240644d8 	.word	0x240644d8
 800c2f8:	08017b78 	.word	0x08017b78
 800c2fc:	08017b94 	.word	0x08017b94
 800c300:	08017bb0 	.word	0x08017bb0
 800c304:	240644e0 	.word	0x240644e0

0800c308 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c30e:	4b1d      	ldr	r3, [pc, #116]	; (800c384 <mem_init+0x7c>)
 800c310:	4a1d      	ldr	r2, [pc, #116]	; (800c388 <mem_init+0x80>)
 800c312:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c314:	4b1b      	ldr	r3, [pc, #108]	; (800c384 <mem_init+0x7c>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c320:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c32e:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800c332:	f7ff ff1f 	bl	800c174 <ptr_to_mem>
 800c336:	4603      	mov	r3, r0
 800c338:	4a14      	ldr	r2, [pc, #80]	; (800c38c <mem_init+0x84>)
 800c33a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c33c:	4b13      	ldr	r3, [pc, #76]	; (800c38c <mem_init+0x84>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2201      	movs	r2, #1
 800c342:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c344:	4b11      	ldr	r3, [pc, #68]	; (800c38c <mem_init+0x84>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c34c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c34e:	4b0f      	ldr	r3, [pc, #60]	; (800c38c <mem_init+0x84>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c356:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c358:	4b0a      	ldr	r3, [pc, #40]	; (800c384 <mem_init+0x7c>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a0c      	ldr	r2, [pc, #48]	; (800c390 <mem_init+0x88>)
 800c35e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c360:	480c      	ldr	r0, [pc, #48]	; (800c394 <mem_init+0x8c>)
 800c362:	f00a f983 	bl	801666c <sys_mutex_new>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d006      	beq.n	800c37a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c36c:	4b0a      	ldr	r3, [pc, #40]	; (800c398 <mem_init+0x90>)
 800c36e:	f240 221f 	movw	r2, #543	; 0x21f
 800c372:	490a      	ldr	r1, [pc, #40]	; (800c39c <mem_init+0x94>)
 800c374:	480a      	ldr	r0, [pc, #40]	; (800c3a0 <mem_init+0x98>)
 800c376:	f00a fb91 	bl	8016a9c <iprintf>
  }
}
 800c37a:	bf00      	nop
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	240644d4 	.word	0x240644d4
 800c388:	30044000 	.word	0x30044000
 800c38c:	240644d8 	.word	0x240644d8
 800c390:	240644e0 	.word	0x240644e0
 800c394:	240644dc 	.word	0x240644dc
 800c398:	08017b08 	.word	0x08017b08
 800c39c:	08017bdc 	.word	0x08017bdc
 800c3a0:	08017b50 	.word	0x08017b50

0800c3a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff fef3 	bl	800c198 <mem_to_ptr>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7ff feda 	bl	800c174 <ptr_to_mem>
 800c3c0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	885b      	ldrh	r3, [r3, #2]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff fed4 	bl	800c174 <ptr_to_mem>
 800c3cc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d819      	bhi.n	800c40e <mem_link_valid+0x6a>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	885b      	ldrh	r3, [r3, #2]
 800c3de:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d813      	bhi.n	800c40e <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c3ea:	8afa      	ldrh	r2, [r7, #22]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d004      	beq.n	800c3fa <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	881b      	ldrh	r3, [r3, #0]
 800c3f4:	8afa      	ldrh	r2, [r7, #22]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d109      	bne.n	800c40e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c3fa:	4b08      	ldr	r3, [pc, #32]	; (800c41c <mem_link_valid+0x78>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c3fe:	693a      	ldr	r2, [r7, #16]
 800c400:	429a      	cmp	r2, r3
 800c402:	d006      	beq.n	800c412 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	885b      	ldrh	r3, [r3, #2]
 800c408:	8afa      	ldrh	r2, [r7, #22]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d001      	beq.n	800c412 <mem_link_valid+0x6e>
    return 0;
 800c40e:	2300      	movs	r3, #0
 800c410:	e000      	b.n	800c414 <mem_link_valid+0x70>
  }
  return 1;
 800c412:	2301      	movs	r3, #1
}
 800c414:	4618      	mov	r0, r3
 800c416:	3718      	adds	r7, #24
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	240644d8 	.word	0x240644d8

0800c420 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b088      	sub	sp, #32
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d070      	beq.n	800c510 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f003 0303 	and.w	r3, r3, #3
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00d      	beq.n	800c454 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c438:	4b37      	ldr	r3, [pc, #220]	; (800c518 <mem_free+0xf8>)
 800c43a:	f240 2273 	movw	r2, #627	; 0x273
 800c43e:	4937      	ldr	r1, [pc, #220]	; (800c51c <mem_free+0xfc>)
 800c440:	4837      	ldr	r0, [pc, #220]	; (800c520 <mem_free+0x100>)
 800c442:	f00a fb2b 	bl	8016a9c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c446:	f00a f96f 	bl	8016728 <sys_arch_protect>
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f00a f979 	bl	8016744 <sys_arch_unprotect>
    return;
 800c452:	e05e      	b.n	800c512 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	3b08      	subs	r3, #8
 800c458:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c45a:	4b32      	ldr	r3, [pc, #200]	; (800c524 <mem_free+0x104>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	69fa      	ldr	r2, [r7, #28]
 800c460:	429a      	cmp	r2, r3
 800c462:	d306      	bcc.n	800c472 <mem_free+0x52>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f103 020c 	add.w	r2, r3, #12
 800c46a:	4b2f      	ldr	r3, [pc, #188]	; (800c528 <mem_free+0x108>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d90d      	bls.n	800c48e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c472:	4b29      	ldr	r3, [pc, #164]	; (800c518 <mem_free+0xf8>)
 800c474:	f240 227f 	movw	r2, #639	; 0x27f
 800c478:	492c      	ldr	r1, [pc, #176]	; (800c52c <mem_free+0x10c>)
 800c47a:	4829      	ldr	r0, [pc, #164]	; (800c520 <mem_free+0x100>)
 800c47c:	f00a fb0e 	bl	8016a9c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c480:	f00a f952 	bl	8016728 <sys_arch_protect>
 800c484:	6138      	str	r0, [r7, #16]
 800c486:	6938      	ldr	r0, [r7, #16]
 800c488:	f00a f95c 	bl	8016744 <sys_arch_unprotect>
    return;
 800c48c:	e041      	b.n	800c512 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c48e:	4828      	ldr	r0, [pc, #160]	; (800c530 <mem_free+0x110>)
 800c490:	f00a f908 	bl	80166a4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	791b      	ldrb	r3, [r3, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d110      	bne.n	800c4be <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c49c:	4b1e      	ldr	r3, [pc, #120]	; (800c518 <mem_free+0xf8>)
 800c49e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c4a2:	4924      	ldr	r1, [pc, #144]	; (800c534 <mem_free+0x114>)
 800c4a4:	481e      	ldr	r0, [pc, #120]	; (800c520 <mem_free+0x100>)
 800c4a6:	f00a faf9 	bl	8016a9c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c4aa:	4821      	ldr	r0, [pc, #132]	; (800c530 <mem_free+0x110>)
 800c4ac:	f00a f909 	bl	80166c2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c4b0:	f00a f93a 	bl	8016728 <sys_arch_protect>
 800c4b4:	6178      	str	r0, [r7, #20]
 800c4b6:	6978      	ldr	r0, [r7, #20]
 800c4b8:	f00a f944 	bl	8016744 <sys_arch_unprotect>
    return;
 800c4bc:	e029      	b.n	800c512 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c4be:	69f8      	ldr	r0, [r7, #28]
 800c4c0:	f7ff ff70 	bl	800c3a4 <mem_link_valid>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d110      	bne.n	800c4ec <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c4ca:	4b13      	ldr	r3, [pc, #76]	; (800c518 <mem_free+0xf8>)
 800c4cc:	f240 2295 	movw	r2, #661	; 0x295
 800c4d0:	4919      	ldr	r1, [pc, #100]	; (800c538 <mem_free+0x118>)
 800c4d2:	4813      	ldr	r0, [pc, #76]	; (800c520 <mem_free+0x100>)
 800c4d4:	f00a fae2 	bl	8016a9c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c4d8:	4815      	ldr	r0, [pc, #84]	; (800c530 <mem_free+0x110>)
 800c4da:	f00a f8f2 	bl	80166c2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c4de:	f00a f923 	bl	8016728 <sys_arch_protect>
 800c4e2:	61b8      	str	r0, [r7, #24]
 800c4e4:	69b8      	ldr	r0, [r7, #24]
 800c4e6:	f00a f92d 	bl	8016744 <sys_arch_unprotect>
    return;
 800c4ea:	e012      	b.n	800c512 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c4f2:	4b12      	ldr	r3, [pc, #72]	; (800c53c <mem_free+0x11c>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	69fa      	ldr	r2, [r7, #28]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d202      	bcs.n	800c502 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c4fc:	4a0f      	ldr	r2, [pc, #60]	; (800c53c <mem_free+0x11c>)
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c502:	69f8      	ldr	r0, [r7, #28]
 800c504:	f7ff fe5a 	bl	800c1bc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c508:	4809      	ldr	r0, [pc, #36]	; (800c530 <mem_free+0x110>)
 800c50a:	f00a f8da 	bl	80166c2 <sys_mutex_unlock>
 800c50e:	e000      	b.n	800c512 <mem_free+0xf2>
    return;
 800c510:	bf00      	nop
}
 800c512:	3720      	adds	r7, #32
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	08017b08 	.word	0x08017b08
 800c51c:	08017bf8 	.word	0x08017bf8
 800c520:	08017b50 	.word	0x08017b50
 800c524:	240644d4 	.word	0x240644d4
 800c528:	240644d8 	.word	0x240644d8
 800c52c:	08017c1c 	.word	0x08017c1c
 800c530:	240644dc 	.word	0x240644dc
 800c534:	08017c38 	.word	0x08017c38
 800c538:	08017c60 	.word	0x08017c60
 800c53c:	240644e0 	.word	0x240644e0

0800c540 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b088      	sub	sp, #32
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	460b      	mov	r3, r1
 800c54a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c54c:	887b      	ldrh	r3, [r7, #2]
 800c54e:	3303      	adds	r3, #3
 800c550:	b29b      	uxth	r3, r3
 800c552:	f023 0303 	bic.w	r3, r3, #3
 800c556:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c558:	8bfb      	ldrh	r3, [r7, #30]
 800c55a:	2b0b      	cmp	r3, #11
 800c55c:	d801      	bhi.n	800c562 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c55e:	230c      	movs	r3, #12
 800c560:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c562:	8bfb      	ldrh	r3, [r7, #30]
 800c564:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c568:	4293      	cmp	r3, r2
 800c56a:	d803      	bhi.n	800c574 <mem_trim+0x34>
 800c56c:	8bfa      	ldrh	r2, [r7, #30]
 800c56e:	887b      	ldrh	r3, [r7, #2]
 800c570:	429a      	cmp	r2, r3
 800c572:	d201      	bcs.n	800c578 <mem_trim+0x38>
    return NULL;
 800c574:	2300      	movs	r3, #0
 800c576:	e0dc      	b.n	800c732 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c578:	4b70      	ldr	r3, [pc, #448]	; (800c73c <mem_trim+0x1fc>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d304      	bcc.n	800c58c <mem_trim+0x4c>
 800c582:	4b6f      	ldr	r3, [pc, #444]	; (800c740 <mem_trim+0x200>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d306      	bcc.n	800c59a <mem_trim+0x5a>
 800c58c:	4b6d      	ldr	r3, [pc, #436]	; (800c744 <mem_trim+0x204>)
 800c58e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c592:	496d      	ldr	r1, [pc, #436]	; (800c748 <mem_trim+0x208>)
 800c594:	486d      	ldr	r0, [pc, #436]	; (800c74c <mem_trim+0x20c>)
 800c596:	f00a fa81 	bl	8016a9c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c59a:	4b68      	ldr	r3, [pc, #416]	; (800c73c <mem_trim+0x1fc>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d304      	bcc.n	800c5ae <mem_trim+0x6e>
 800c5a4:	4b66      	ldr	r3, [pc, #408]	; (800c740 <mem_trim+0x200>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d307      	bcc.n	800c5be <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c5ae:	f00a f8bb 	bl	8016728 <sys_arch_protect>
 800c5b2:	60b8      	str	r0, [r7, #8]
 800c5b4:	68b8      	ldr	r0, [r7, #8]
 800c5b6:	f00a f8c5 	bl	8016744 <sys_arch_unprotect>
    return rmem;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	e0b9      	b.n	800c732 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	3b08      	subs	r3, #8
 800c5c2:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c5c4:	69b8      	ldr	r0, [r7, #24]
 800c5c6:	f7ff fde7 	bl	800c198 <mem_to_ptr>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	881a      	ldrh	r2, [r3, #0]
 800c5d2:	8afb      	ldrh	r3, [r7, #22]
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	3b08      	subs	r3, #8
 800c5da:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c5dc:	8bfa      	ldrh	r2, [r7, #30]
 800c5de:	8abb      	ldrh	r3, [r7, #20]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d906      	bls.n	800c5f2 <mem_trim+0xb2>
 800c5e4:	4b57      	ldr	r3, [pc, #348]	; (800c744 <mem_trim+0x204>)
 800c5e6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c5ea:	4959      	ldr	r1, [pc, #356]	; (800c750 <mem_trim+0x210>)
 800c5ec:	4857      	ldr	r0, [pc, #348]	; (800c74c <mem_trim+0x20c>)
 800c5ee:	f00a fa55 	bl	8016a9c <iprintf>
  if (newsize > size) {
 800c5f2:	8bfa      	ldrh	r2, [r7, #30]
 800c5f4:	8abb      	ldrh	r3, [r7, #20]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d901      	bls.n	800c5fe <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	e099      	b.n	800c732 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800c5fe:	8bfa      	ldrh	r2, [r7, #30]
 800c600:	8abb      	ldrh	r3, [r7, #20]
 800c602:	429a      	cmp	r2, r3
 800c604:	d101      	bne.n	800c60a <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	e093      	b.n	800c732 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c60a:	4852      	ldr	r0, [pc, #328]	; (800c754 <mem_trim+0x214>)
 800c60c:	f00a f84a 	bl	80166a4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff fdad 	bl	800c174 <ptr_to_mem>
 800c61a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	791b      	ldrb	r3, [r3, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d141      	bne.n	800c6a8 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	881b      	ldrh	r3, [r3, #0]
 800c628:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d106      	bne.n	800c63e <mem_trim+0xfe>
 800c630:	4b44      	ldr	r3, [pc, #272]	; (800c744 <mem_trim+0x204>)
 800c632:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c636:	4948      	ldr	r1, [pc, #288]	; (800c758 <mem_trim+0x218>)
 800c638:	4844      	ldr	r0, [pc, #272]	; (800c74c <mem_trim+0x20c>)
 800c63a:	f00a fa2f 	bl	8016a9c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	881b      	ldrh	r3, [r3, #0]
 800c642:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c644:	8afa      	ldrh	r2, [r7, #22]
 800c646:	8bfb      	ldrh	r3, [r7, #30]
 800c648:	4413      	add	r3, r2
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	3308      	adds	r3, #8
 800c64e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c650:	4b42      	ldr	r3, [pc, #264]	; (800c75c <mem_trim+0x21c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	693a      	ldr	r2, [r7, #16]
 800c656:	429a      	cmp	r2, r3
 800c658:	d106      	bne.n	800c668 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800c65a:	89fb      	ldrh	r3, [r7, #14]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7ff fd89 	bl	800c174 <ptr_to_mem>
 800c662:	4603      	mov	r3, r0
 800c664:	4a3d      	ldr	r2, [pc, #244]	; (800c75c <mem_trim+0x21c>)
 800c666:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c668:	89fb      	ldrh	r3, [r7, #14]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7ff fd82 	bl	800c174 <ptr_to_mem>
 800c670:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	2200      	movs	r2, #0
 800c676:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	89ba      	ldrh	r2, [r7, #12]
 800c67c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	8afa      	ldrh	r2, [r7, #22]
 800c682:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	89fa      	ldrh	r2, [r7, #14]
 800c688:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	881b      	ldrh	r3, [r3, #0]
 800c68e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c692:	4293      	cmp	r3, r2
 800c694:	d049      	beq.n	800c72a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	881b      	ldrh	r3, [r3, #0]
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7ff fd6a 	bl	800c174 <ptr_to_mem>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	89fb      	ldrh	r3, [r7, #14]
 800c6a4:	8053      	strh	r3, [r2, #2]
 800c6a6:	e040      	b.n	800c72a <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c6a8:	8bfb      	ldrh	r3, [r7, #30]
 800c6aa:	f103 0214 	add.w	r2, r3, #20
 800c6ae:	8abb      	ldrh	r3, [r7, #20]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d83a      	bhi.n	800c72a <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c6b4:	8afa      	ldrh	r2, [r7, #22]
 800c6b6:	8bfb      	ldrh	r3, [r7, #30]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	3308      	adds	r3, #8
 800c6be:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	881b      	ldrh	r3, [r3, #0]
 800c6c4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d106      	bne.n	800c6da <mem_trim+0x19a>
 800c6cc:	4b1d      	ldr	r3, [pc, #116]	; (800c744 <mem_trim+0x204>)
 800c6ce:	f240 3216 	movw	r2, #790	; 0x316
 800c6d2:	4921      	ldr	r1, [pc, #132]	; (800c758 <mem_trim+0x218>)
 800c6d4:	481d      	ldr	r0, [pc, #116]	; (800c74c <mem_trim+0x20c>)
 800c6d6:	f00a f9e1 	bl	8016a9c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c6da:	89fb      	ldrh	r3, [r7, #14]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7ff fd49 	bl	800c174 <ptr_to_mem>
 800c6e2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c6e4:	4b1d      	ldr	r3, [pc, #116]	; (800c75c <mem_trim+0x21c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d202      	bcs.n	800c6f4 <mem_trim+0x1b4>
      lfree = mem2;
 800c6ee:	4a1b      	ldr	r2, [pc, #108]	; (800c75c <mem_trim+0x21c>)
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	881a      	ldrh	r2, [r3, #0]
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	8afa      	ldrh	r2, [r7, #22]
 800c706:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	89fa      	ldrh	r2, [r7, #14]
 800c70c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	881b      	ldrh	r3, [r3, #0]
 800c712:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c716:	4293      	cmp	r3, r2
 800c718:	d007      	beq.n	800c72a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7ff fd28 	bl	800c174 <ptr_to_mem>
 800c724:	4602      	mov	r2, r0
 800c726:	89fb      	ldrh	r3, [r7, #14]
 800c728:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c72a:	480a      	ldr	r0, [pc, #40]	; (800c754 <mem_trim+0x214>)
 800c72c:	f009 ffc9 	bl	80166c2 <sys_mutex_unlock>
  return rmem;
 800c730:	687b      	ldr	r3, [r7, #4]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3720      	adds	r7, #32
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	240644d4 	.word	0x240644d4
 800c740:	240644d8 	.word	0x240644d8
 800c744:	08017b08 	.word	0x08017b08
 800c748:	08017c94 	.word	0x08017c94
 800c74c:	08017b50 	.word	0x08017b50
 800c750:	08017cac 	.word	0x08017cac
 800c754:	240644dc 	.word	0x240644dc
 800c758:	08017ccc 	.word	0x08017ccc
 800c75c:	240644e0 	.word	0x240644e0

0800c760 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b088      	sub	sp, #32
 800c764:	af00      	add	r7, sp, #0
 800c766:	4603      	mov	r3, r0
 800c768:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c76a:	88fb      	ldrh	r3, [r7, #6]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d101      	bne.n	800c774 <mem_malloc+0x14>
    return NULL;
 800c770:	2300      	movs	r3, #0
 800c772:	e0e6      	b.n	800c942 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c774:	88fb      	ldrh	r3, [r7, #6]
 800c776:	3303      	adds	r3, #3
 800c778:	b29b      	uxth	r3, r3
 800c77a:	f023 0303 	bic.w	r3, r3, #3
 800c77e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c780:	8bbb      	ldrh	r3, [r7, #28]
 800c782:	2b0b      	cmp	r3, #11
 800c784:	d801      	bhi.n	800c78a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c786:	230c      	movs	r3, #12
 800c788:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c78a:	8bbb      	ldrh	r3, [r7, #28]
 800c78c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c790:	4293      	cmp	r3, r2
 800c792:	d803      	bhi.n	800c79c <mem_malloc+0x3c>
 800c794:	8bba      	ldrh	r2, [r7, #28]
 800c796:	88fb      	ldrh	r3, [r7, #6]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d201      	bcs.n	800c7a0 <mem_malloc+0x40>
    return NULL;
 800c79c:	2300      	movs	r3, #0
 800c79e:	e0d0      	b.n	800c942 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c7a0:	486a      	ldr	r0, [pc, #424]	; (800c94c <mem_malloc+0x1ec>)
 800c7a2:	f009 ff7f 	bl	80166a4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c7a6:	4b6a      	ldr	r3, [pc, #424]	; (800c950 <mem_malloc+0x1f0>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7ff fcf4 	bl	800c198 <mem_to_ptr>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	83fb      	strh	r3, [r7, #30]
 800c7b4:	e0b9      	b.n	800c92a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c7b6:	8bfb      	ldrh	r3, [r7, #30]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff fcdb 	bl	800c174 <ptr_to_mem>
 800c7be:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	791b      	ldrb	r3, [r3, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f040 80a9 	bne.w	800c91c <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	8bfb      	ldrh	r3, [r7, #30]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	f1a3 0208 	sub.w	r2, r3, #8
 800c7d8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	f0c0 809e 	bcc.w	800c91c <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	8bfb      	ldrh	r3, [r7, #30]
 800c7e8:	1ad3      	subs	r3, r2, r3
 800c7ea:	f1a3 0208 	sub.w	r2, r3, #8
 800c7ee:	8bbb      	ldrh	r3, [r7, #28]
 800c7f0:	3314      	adds	r3, #20
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d335      	bcc.n	800c862 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c7f6:	8bfa      	ldrh	r2, [r7, #30]
 800c7f8:	8bbb      	ldrh	r3, [r7, #28]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	3308      	adds	r3, #8
 800c800:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c802:	8a7b      	ldrh	r3, [r7, #18]
 800c804:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c808:	4293      	cmp	r3, r2
 800c80a:	d106      	bne.n	800c81a <mem_malloc+0xba>
 800c80c:	4b51      	ldr	r3, [pc, #324]	; (800c954 <mem_malloc+0x1f4>)
 800c80e:	f240 3287 	movw	r2, #903	; 0x387
 800c812:	4951      	ldr	r1, [pc, #324]	; (800c958 <mem_malloc+0x1f8>)
 800c814:	4851      	ldr	r0, [pc, #324]	; (800c95c <mem_malloc+0x1fc>)
 800c816:	f00a f941 	bl	8016a9c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c81a:	8a7b      	ldrh	r3, [r7, #18]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7ff fca9 	bl	800c174 <ptr_to_mem>
 800c822:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2200      	movs	r2, #0
 800c828:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	881a      	ldrh	r2, [r3, #0]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	8bfa      	ldrh	r2, [r7, #30]
 800c836:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	8a7a      	ldrh	r2, [r7, #18]
 800c83c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	2201      	movs	r2, #1
 800c842:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d00b      	beq.n	800c868 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	881b      	ldrh	r3, [r3, #0]
 800c854:	4618      	mov	r0, r3
 800c856:	f7ff fc8d 	bl	800c174 <ptr_to_mem>
 800c85a:	4602      	mov	r2, r0
 800c85c:	8a7b      	ldrh	r3, [r7, #18]
 800c85e:	8053      	strh	r3, [r2, #2]
 800c860:	e002      	b.n	800c868 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	2201      	movs	r2, #1
 800c866:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c868:	4b39      	ldr	r3, [pc, #228]	; (800c950 <mem_malloc+0x1f0>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	697a      	ldr	r2, [r7, #20]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d127      	bne.n	800c8c2 <mem_malloc+0x162>
          struct mem *cur = lfree;
 800c872:	4b37      	ldr	r3, [pc, #220]	; (800c950 <mem_malloc+0x1f0>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c878:	e005      	b.n	800c886 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	4618      	mov	r0, r3
 800c880:	f7ff fc78 	bl	800c174 <ptr_to_mem>
 800c884:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c886:	69bb      	ldr	r3, [r7, #24]
 800c888:	791b      	ldrb	r3, [r3, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d004      	beq.n	800c898 <mem_malloc+0x138>
 800c88e:	4b34      	ldr	r3, [pc, #208]	; (800c960 <mem_malloc+0x200>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	69ba      	ldr	r2, [r7, #24]
 800c894:	429a      	cmp	r2, r3
 800c896:	d1f0      	bne.n	800c87a <mem_malloc+0x11a>
          }
          lfree = cur;
 800c898:	4a2d      	ldr	r2, [pc, #180]	; (800c950 <mem_malloc+0x1f0>)
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c89e:	4b2c      	ldr	r3, [pc, #176]	; (800c950 <mem_malloc+0x1f0>)
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	4b2f      	ldr	r3, [pc, #188]	; (800c960 <mem_malloc+0x200>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d00b      	beq.n	800c8c2 <mem_malloc+0x162>
 800c8aa:	4b29      	ldr	r3, [pc, #164]	; (800c950 <mem_malloc+0x1f0>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	791b      	ldrb	r3, [r3, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d006      	beq.n	800c8c2 <mem_malloc+0x162>
 800c8b4:	4b27      	ldr	r3, [pc, #156]	; (800c954 <mem_malloc+0x1f4>)
 800c8b6:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c8ba:	492a      	ldr	r1, [pc, #168]	; (800c964 <mem_malloc+0x204>)
 800c8bc:	4827      	ldr	r0, [pc, #156]	; (800c95c <mem_malloc+0x1fc>)
 800c8be:	f00a f8ed 	bl	8016a9c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c8c2:	4822      	ldr	r0, [pc, #136]	; (800c94c <mem_malloc+0x1ec>)
 800c8c4:	f009 fefd 	bl	80166c2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c8c8:	8bba      	ldrh	r2, [r7, #28]
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	3308      	adds	r3, #8
 800c8d0:	4a23      	ldr	r2, [pc, #140]	; (800c960 <mem_malloc+0x200>)
 800c8d2:	6812      	ldr	r2, [r2, #0]
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d906      	bls.n	800c8e6 <mem_malloc+0x186>
 800c8d8:	4b1e      	ldr	r3, [pc, #120]	; (800c954 <mem_malloc+0x1f4>)
 800c8da:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c8de:	4922      	ldr	r1, [pc, #136]	; (800c968 <mem_malloc+0x208>)
 800c8e0:	481e      	ldr	r0, [pc, #120]	; (800c95c <mem_malloc+0x1fc>)
 800c8e2:	f00a f8db 	bl	8016a9c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	f003 0303 	and.w	r3, r3, #3
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d006      	beq.n	800c8fe <mem_malloc+0x19e>
 800c8f0:	4b18      	ldr	r3, [pc, #96]	; (800c954 <mem_malloc+0x1f4>)
 800c8f2:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c8f6:	491d      	ldr	r1, [pc, #116]	; (800c96c <mem_malloc+0x20c>)
 800c8f8:	4818      	ldr	r0, [pc, #96]	; (800c95c <mem_malloc+0x1fc>)
 800c8fa:	f00a f8cf 	bl	8016a9c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	f003 0303 	and.w	r3, r3, #3
 800c904:	2b00      	cmp	r3, #0
 800c906:	d006      	beq.n	800c916 <mem_malloc+0x1b6>
 800c908:	4b12      	ldr	r3, [pc, #72]	; (800c954 <mem_malloc+0x1f4>)
 800c90a:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c90e:	4918      	ldr	r1, [pc, #96]	; (800c970 <mem_malloc+0x210>)
 800c910:	4812      	ldr	r0, [pc, #72]	; (800c95c <mem_malloc+0x1fc>)
 800c912:	f00a f8c3 	bl	8016a9c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	3308      	adds	r3, #8
 800c91a:	e012      	b.n	800c942 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800c91c:	8bfb      	ldrh	r3, [r7, #30]
 800c91e:	4618      	mov	r0, r3
 800c920:	f7ff fc28 	bl	800c174 <ptr_to_mem>
 800c924:	4603      	mov	r3, r0
 800c926:	881b      	ldrh	r3, [r3, #0]
 800c928:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c92a:	8bfa      	ldrh	r2, [r7, #30]
 800c92c:	8bb9      	ldrh	r1, [r7, #28]
 800c92e:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800c932:	1a5b      	subs	r3, r3, r1
 800c934:	429a      	cmp	r2, r3
 800c936:	f4ff af3e 	bcc.w	800c7b6 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c93a:	4804      	ldr	r0, [pc, #16]	; (800c94c <mem_malloc+0x1ec>)
 800c93c:	f009 fec1 	bl	80166c2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3720      	adds	r7, #32
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	240644dc 	.word	0x240644dc
 800c950:	240644e0 	.word	0x240644e0
 800c954:	08017b08 	.word	0x08017b08
 800c958:	08017ccc 	.word	0x08017ccc
 800c95c:	08017b50 	.word	0x08017b50
 800c960:	240644d8 	.word	0x240644d8
 800c964:	08017ce0 	.word	0x08017ce0
 800c968:	08017cfc 	.word	0x08017cfc
 800c96c:	08017d2c 	.word	0x08017d2c
 800c970:	08017d5c 	.word	0x08017d5c

0800c974 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	2200      	movs	r2, #0
 800c982:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	3303      	adds	r3, #3
 800c98a:	f023 0303 	bic.w	r3, r3, #3
 800c98e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c990:	2300      	movs	r3, #0
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	e011      	b.n	800c9ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	881b      	ldrh	r3, [r3, #0]
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	60fb      	str	r3, [r7, #12]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	885b      	ldrh	r3, [r3, #2]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	dbe7      	blt.n	800c996 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c9c6:	bf00      	nop
 800c9c8:	bf00      	nop
 800c9ca:	3714      	adds	r7, #20
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c9da:	2300      	movs	r3, #0
 800c9dc:	80fb      	strh	r3, [r7, #6]
 800c9de:	e009      	b.n	800c9f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c9e0:	88fb      	ldrh	r3, [r7, #6]
 800c9e2:	4a08      	ldr	r2, [pc, #32]	; (800ca04 <memp_init+0x30>)
 800c9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7ff ffc3 	bl	800c974 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c9ee:	88fb      	ldrh	r3, [r7, #6]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	80fb      	strh	r3, [r7, #6]
 800c9f4:	88fb      	ldrh	r3, [r7, #6]
 800c9f6:	2b0c      	cmp	r3, #12
 800c9f8:	d9f2      	bls.n	800c9e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c9fa:	bf00      	nop
 800c9fc:	bf00      	nop
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	0801a5e8 	.word	0x0801a5e8

0800ca08 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ca10:	f009 fe8a 	bl	8016728 <sys_arch_protect>
 800ca14:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d015      	beq.n	800ca50 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	68ba      	ldr	r2, [r7, #8]
 800ca2a:	6812      	ldr	r2, [r2, #0]
 800ca2c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	f003 0303 	and.w	r3, r3, #3
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d006      	beq.n	800ca46 <do_memp_malloc_pool+0x3e>
 800ca38:	4b09      	ldr	r3, [pc, #36]	; (800ca60 <do_memp_malloc_pool+0x58>)
 800ca3a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ca3e:	4909      	ldr	r1, [pc, #36]	; (800ca64 <do_memp_malloc_pool+0x5c>)
 800ca40:	4809      	ldr	r0, [pc, #36]	; (800ca68 <do_memp_malloc_pool+0x60>)
 800ca42:	f00a f82b 	bl	8016a9c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f009 fe7c 	bl	8016744 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	e003      	b.n	800ca58 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f009 fe77 	bl	8016744 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	08017d80 	.word	0x08017d80
 800ca64:	08017db0 	.word	0x08017db0
 800ca68:	08017dd4 	.word	0x08017dd4

0800ca6c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d106      	bne.n	800ca88 <memp_malloc_pool+0x1c>
 800ca7a:	4b0a      	ldr	r3, [pc, #40]	; (800caa4 <memp_malloc_pool+0x38>)
 800ca7c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ca80:	4909      	ldr	r1, [pc, #36]	; (800caa8 <memp_malloc_pool+0x3c>)
 800ca82:	480a      	ldr	r0, [pc, #40]	; (800caac <memp_malloc_pool+0x40>)
 800ca84:	f00a f80a 	bl	8016a9c <iprintf>
  if (desc == NULL) {
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <memp_malloc_pool+0x26>
    return NULL;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	e003      	b.n	800ca9a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f7ff ffb8 	bl	800ca08 <do_memp_malloc_pool>
 800ca98:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	08017d80 	.word	0x08017d80
 800caa8:	08017dfc 	.word	0x08017dfc
 800caac:	08017dd4 	.word	0x08017dd4

0800cab0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	4603      	mov	r3, r0
 800cab8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800caba:	79fb      	ldrb	r3, [r7, #7]
 800cabc:	2b0c      	cmp	r3, #12
 800cabe:	d908      	bls.n	800cad2 <memp_malloc+0x22>
 800cac0:	4b0a      	ldr	r3, [pc, #40]	; (800caec <memp_malloc+0x3c>)
 800cac2:	f240 1257 	movw	r2, #343	; 0x157
 800cac6:	490a      	ldr	r1, [pc, #40]	; (800caf0 <memp_malloc+0x40>)
 800cac8:	480a      	ldr	r0, [pc, #40]	; (800caf4 <memp_malloc+0x44>)
 800caca:	f009 ffe7 	bl	8016a9c <iprintf>
 800cace:	2300      	movs	r3, #0
 800cad0:	e008      	b.n	800cae4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cad2:	79fb      	ldrb	r3, [r7, #7]
 800cad4:	4a08      	ldr	r2, [pc, #32]	; (800caf8 <memp_malloc+0x48>)
 800cad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cada:	4618      	mov	r0, r3
 800cadc:	f7ff ff94 	bl	800ca08 <do_memp_malloc_pool>
 800cae0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cae2:	68fb      	ldr	r3, [r7, #12]
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3710      	adds	r7, #16
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	08017d80 	.word	0x08017d80
 800caf0:	08017e10 	.word	0x08017e10
 800caf4:	08017dd4 	.word	0x08017dd4
 800caf8:	0801a5e8 	.word	0x0801a5e8

0800cafc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	f003 0303 	and.w	r3, r3, #3
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d006      	beq.n	800cb1e <do_memp_free_pool+0x22>
 800cb10:	4b0d      	ldr	r3, [pc, #52]	; (800cb48 <do_memp_free_pool+0x4c>)
 800cb12:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800cb16:	490d      	ldr	r1, [pc, #52]	; (800cb4c <do_memp_free_pool+0x50>)
 800cb18:	480d      	ldr	r0, [pc, #52]	; (800cb50 <do_memp_free_pool+0x54>)
 800cb1a:	f009 ffbf 	bl	8016a9c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cb22:	f009 fe01 	bl	8016728 <sys_arch_protect>
 800cb26:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cb3a:	68b8      	ldr	r0, [r7, #8]
 800cb3c:	f009 fe02 	bl	8016744 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cb40:	bf00      	nop
 800cb42:	3710      	adds	r7, #16
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	08017d80 	.word	0x08017d80
 800cb4c:	08017e30 	.word	0x08017e30
 800cb50:	08017dd4 	.word	0x08017dd4

0800cb54 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d106      	bne.n	800cb72 <memp_free_pool+0x1e>
 800cb64:	4b0a      	ldr	r3, [pc, #40]	; (800cb90 <memp_free_pool+0x3c>)
 800cb66:	f240 1295 	movw	r2, #405	; 0x195
 800cb6a:	490a      	ldr	r1, [pc, #40]	; (800cb94 <memp_free_pool+0x40>)
 800cb6c:	480a      	ldr	r0, [pc, #40]	; (800cb98 <memp_free_pool+0x44>)
 800cb6e:	f009 ff95 	bl	8016a9c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d007      	beq.n	800cb88 <memp_free_pool+0x34>
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d004      	beq.n	800cb88 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7ff ffbb 	bl	800cafc <do_memp_free_pool>
 800cb86:	e000      	b.n	800cb8a <memp_free_pool+0x36>
    return;
 800cb88:	bf00      	nop
}
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	08017d80 	.word	0x08017d80
 800cb94:	08017dfc 	.word	0x08017dfc
 800cb98:	08017dd4 	.word	0x08017dd4

0800cb9c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	4603      	mov	r3, r0
 800cba4:	6039      	str	r1, [r7, #0]
 800cba6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cba8:	79fb      	ldrb	r3, [r7, #7]
 800cbaa:	2b0c      	cmp	r3, #12
 800cbac:	d907      	bls.n	800cbbe <memp_free+0x22>
 800cbae:	4b0c      	ldr	r3, [pc, #48]	; (800cbe0 <memp_free+0x44>)
 800cbb0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cbb4:	490b      	ldr	r1, [pc, #44]	; (800cbe4 <memp_free+0x48>)
 800cbb6:	480c      	ldr	r0, [pc, #48]	; (800cbe8 <memp_free+0x4c>)
 800cbb8:	f009 ff70 	bl	8016a9c <iprintf>
 800cbbc:	e00c      	b.n	800cbd8 <memp_free+0x3c>

  if (mem == NULL) {
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d008      	beq.n	800cbd6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cbc4:	79fb      	ldrb	r3, [r7, #7]
 800cbc6:	4a09      	ldr	r2, [pc, #36]	; (800cbec <memp_free+0x50>)
 800cbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbcc:	6839      	ldr	r1, [r7, #0]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7ff ff94 	bl	800cafc <do_memp_free_pool>
 800cbd4:	e000      	b.n	800cbd8 <memp_free+0x3c>
    return;
 800cbd6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	08017d80 	.word	0x08017d80
 800cbe4:	08017e50 	.word	0x08017e50
 800cbe8:	08017dd4 	.word	0x08017dd4
 800cbec:	0801a5e8 	.word	0x0801a5e8

0800cbf0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cbf4:	bf00      	nop
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
	...

0800cc00 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
 800cc0c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d108      	bne.n	800cc26 <netif_add+0x26>
 800cc14:	4b5b      	ldr	r3, [pc, #364]	; (800cd84 <netif_add+0x184>)
 800cc16:	f240 1227 	movw	r2, #295	; 0x127
 800cc1a:	495b      	ldr	r1, [pc, #364]	; (800cd88 <netif_add+0x188>)
 800cc1c:	485b      	ldr	r0, [pc, #364]	; (800cd8c <netif_add+0x18c>)
 800cc1e:	f009 ff3d 	bl	8016a9c <iprintf>
 800cc22:	2300      	movs	r3, #0
 800cc24:	e0aa      	b.n	800cd7c <netif_add+0x17c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d108      	bne.n	800cc3e <netif_add+0x3e>
 800cc2c:	4b55      	ldr	r3, [pc, #340]	; (800cd84 <netif_add+0x184>)
 800cc2e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cc32:	4957      	ldr	r1, [pc, #348]	; (800cd90 <netif_add+0x190>)
 800cc34:	4855      	ldr	r0, [pc, #340]	; (800cd8c <netif_add+0x18c>)
 800cc36:	f009 ff31 	bl	8016a9c <iprintf>
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	e09e      	b.n	800cd7c <netif_add+0x17c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d101      	bne.n	800cc48 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cc44:	4b53      	ldr	r3, [pc, #332]	; (800cd94 <netif_add+0x194>)
 800cc46:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cc4e:	4b51      	ldr	r3, [pc, #324]	; (800cd94 <netif_add+0x194>)
 800cc50:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d101      	bne.n	800cc5c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cc58:	4b4e      	ldr	r3, [pc, #312]	; (800cd94 <netif_add+0x194>)
 800cc5a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	4a49      	ldr	r2, [pc, #292]	; (800cd98 <netif_add+0x198>)
 800cc72:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2200      	movs	r2, #0
 800cc78:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2200      	movs	r2, #0
 800cc86:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	6a3a      	ldr	r2, [r7, #32]
 800cc92:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 800cc94:	4b41      	ldr	r3, [pc, #260]	; (800cd9c <netif_add+0x19c>)
 800cc96:	781a      	ldrb	r2, [r3, #0]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cca2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	68b9      	ldr	r1, [r7, #8]
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f000 f946 	bl	800cf3c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	4798      	blx	r3
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d001      	beq.n	800ccc0 <netif_add+0xc0>
    return NULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	e05d      	b.n	800cd7c <netif_add+0x17c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccc6:	2bff      	cmp	r3, #255	; 0xff
 800ccc8:	d103      	bne.n	800ccd2 <netif_add+0xd2>
        netif->num = 0;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ccd6:	4b32      	ldr	r3, [pc, #200]	; (800cda0 <netif_add+0x1a0>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	617b      	str	r3, [r7, #20]
 800ccdc:	e02b      	b.n	800cd36 <netif_add+0x136>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ccde:	697a      	ldr	r2, [r7, #20]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d106      	bne.n	800ccf4 <netif_add+0xf4>
 800cce6:	4b27      	ldr	r3, [pc, #156]	; (800cd84 <netif_add+0x184>)
 800cce8:	f240 128b 	movw	r2, #395	; 0x18b
 800ccec:	492d      	ldr	r1, [pc, #180]	; (800cda4 <netif_add+0x1a4>)
 800ccee:	4827      	ldr	r0, [pc, #156]	; (800cd8c <netif_add+0x18c>)
 800ccf0:	f009 fed4 	bl	8016a9c <iprintf>
        num_netifs++;
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	2bff      	cmp	r3, #255	; 0xff
 800ccfe:	dd06      	ble.n	800cd0e <netif_add+0x10e>
 800cd00:	4b20      	ldr	r3, [pc, #128]	; (800cd84 <netif_add+0x184>)
 800cd02:	f240 128d 	movw	r2, #397	; 0x18d
 800cd06:	4928      	ldr	r1, [pc, #160]	; (800cda8 <netif_add+0x1a8>)
 800cd08:	4820      	ldr	r0, [pc, #128]	; (800cd8c <netif_add+0x18c>)
 800cd0a:	f009 fec7 	bl	8016a9c <iprintf>
        if (netif2->num == netif->num) {
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d108      	bne.n	800cd30 <netif_add+0x130>
          netif->num++;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd24:	3301      	adds	r3, #1
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800cd2e:	e005      	b.n	800cd3c <netif_add+0x13c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	617b      	str	r3, [r7, #20]
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1d0      	bne.n	800ccde <netif_add+0xde>
        }
      }
    } while (netif2 != NULL);
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1be      	bne.n	800ccc0 <netif_add+0xc0>
  }
  if (netif->num == 254) {
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd48:	2bfe      	cmp	r3, #254	; 0xfe
 800cd4a:	d103      	bne.n	800cd54 <netif_add+0x154>
    netif_num = 0;
 800cd4c:	4b13      	ldr	r3, [pc, #76]	; (800cd9c <netif_add+0x19c>)
 800cd4e:	2200      	movs	r2, #0
 800cd50:	701a      	strb	r2, [r3, #0]
 800cd52:	e006      	b.n	800cd62 <netif_add+0x162>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <netif_add+0x19c>)
 800cd60:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cd62:	4b0f      	ldr	r3, [pc, #60]	; (800cda0 <netif_add+0x1a0>)
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cd6a:	4a0d      	ldr	r2, [pc, #52]	; (800cda0 <netif_add+0x1a0>)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);
 800cd70:	2200      	movs	r2, #0
 800cd72:	2101      	movs	r1, #1
 800cd74:	68f8      	ldr	r0, [r7, #12]
 800cd76:	f000 faf3 	bl	800d360 <netif_invoke_ext_callback>

  return netif;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	08017e6c 	.word	0x08017e6c
 800cd88:	08017f00 	.word	0x08017f00
 800cd8c:	08017ebc 	.word	0x08017ebc
 800cd90:	08017f1c 	.word	0x08017f1c
 800cd94:	0801a65c 	.word	0x0801a65c
 800cd98:	0800d2f7 	.word	0x0800d2f7
 800cd9c:	2406451c 	.word	0x2406451c
 800cda0:	2406b450 	.word	0x2406b450
 800cda4:	08017f40 	.word	0x08017f40
 800cda8:	08017f54 	.word	0x08017f54

0800cdac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f002 fc61 	bl	800f680 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cdbe:	6839      	ldr	r1, [r7, #0]
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f007 f8a3 	bl	8013f0c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cdc6:	bf00      	nop
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
	...

0800cdd0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b086      	sub	sp, #24
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d106      	bne.n	800cdf0 <netif_do_set_ipaddr+0x20>
 800cde2:	4b21      	ldr	r3, [pc, #132]	; (800ce68 <netif_do_set_ipaddr+0x98>)
 800cde4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cde8:	4920      	ldr	r1, [pc, #128]	; (800ce6c <netif_do_set_ipaddr+0x9c>)
 800cdea:	4821      	ldr	r0, [pc, #132]	; (800ce70 <netif_do_set_ipaddr+0xa0>)
 800cdec:	f009 fe56 	bl	8016a9c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d106      	bne.n	800ce04 <netif_do_set_ipaddr+0x34>
 800cdf6:	4b1c      	ldr	r3, [pc, #112]	; (800ce68 <netif_do_set_ipaddr+0x98>)
 800cdf8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cdfc:	491b      	ldr	r1, [pc, #108]	; (800ce6c <netif_do_set_ipaddr+0x9c>)
 800cdfe:	481c      	ldr	r0, [pc, #112]	; (800ce70 <netif_do_set_ipaddr+0xa0>)
 800ce00:	f009 fe4c 	bl	8016a9c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	3304      	adds	r3, #4
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d024      	beq.n	800ce5c <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ce22:	f107 0314 	add.w	r3, r7, #20
 800ce26:	4619      	mov	r1, r3
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7ff ffbf 	bl	800cdac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d002      	beq.n	800ce3a <netif_do_set_ipaddr+0x6a>
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	e000      	b.n	800ce3c <netif_do_set_ipaddr+0x6c>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ce40:	2101      	movs	r1, #1
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f000 f94a 	bl	800d0dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	69db      	ldr	r3, [r3, #28]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d003      	beq.n	800ce58 <netif_do_set_ipaddr+0x88>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	69db      	ldr	r3, [r3, #28]
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	4798      	blx	r3
    return 1; /* address changed */
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e000      	b.n	800ce5e <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	08017e6c 	.word	0x08017e6c
 800ce6c:	08017f84 	.word	0x08017f84
 800ce70:	08017ebc 	.word	0x08017ebc

0800ce74 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	3308      	adds	r3, #8
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d019      	beq.n	800cec2 <netif_do_set_netmask+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_nm != NULL);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d106      	bne.n	800cea2 <netif_do_set_netmask+0x2e>
 800ce94:	4b0d      	ldr	r3, [pc, #52]	; (800cecc <netif_do_set_netmask+0x58>)
 800ce96:	f44f 7204 	mov.w	r2, #528	; 0x210
 800ce9a:	490d      	ldr	r1, [pc, #52]	; (800ced0 <netif_do_set_netmask+0x5c>)
 800ce9c:	480d      	ldr	r0, [pc, #52]	; (800ced4 <netif_do_set_netmask+0x60>)
 800ce9e:	f009 fdfd 	bl	8016a9c <iprintf>
    ip_addr_copy(*old_nm, *netif_ip_netmask4(netif));
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	3308      	adds	r3, #8
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d002      	beq.n	800ceb8 <netif_do_set_netmask+0x44>
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	e000      	b.n	800ceba <netif_do_set_netmask+0x46>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	68fa      	ldr	r2, [r7, #12]
 800cebc:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cebe:	2301      	movs	r3, #1
 800cec0:	e000      	b.n	800cec4 <netif_do_set_netmask+0x50>
  }
  return 0; /* netmask unchanged */
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	08017e6c 	.word	0x08017e6c
 800ced0:	08017f84 	.word	0x08017f84
 800ced4:	08017ebc 	.word	0x08017ebc

0800ced8 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	330c      	adds	r3, #12
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d019      	beq.n	800cf26 <netif_do_set_gw+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_gw != NULL);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d106      	bne.n	800cf06 <netif_do_set_gw+0x2e>
 800cef8:	4b0d      	ldr	r3, [pc, #52]	; (800cf30 <netif_do_set_gw+0x58>)
 800cefa:	f44f 7214 	mov.w	r2, #592	; 0x250
 800cefe:	490d      	ldr	r1, [pc, #52]	; (800cf34 <netif_do_set_gw+0x5c>)
 800cf00:	480d      	ldr	r0, [pc, #52]	; (800cf38 <netif_do_set_gw+0x60>)
 800cf02:	f009 fdcb 	bl	8016a9c <iprintf>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	330c      	adds	r3, #12
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d002      	beq.n	800cf1c <netif_do_set_gw+0x44>
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	e000      	b.n	800cf1e <netif_do_set_gw+0x46>
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cf22:	2301      	movs	r3, #1
 800cf24:	e000      	b.n	800cf28 <netif_do_set_gw+0x50>
  }
  return 0; /* gateway unchanged */
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	08017e6c 	.word	0x08017e6c
 800cf34:	08017f84 	.word	0x08017f84
 800cf38:	08017ebc 	.word	0x08017ebc

0800cf3c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b08e      	sub	sp, #56	; 0x38
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
 800cf48:	603b      	str	r3, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  netif_nsc_reason_t change_reason = LWIP_NSC_NONE;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	86fb      	strh	r3, [r7, #54]	; 0x36
  netif_ext_callback_args_t cb_args;
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
 800cf4e:	f107 0318 	add.w	r3, r7, #24
 800cf52:	633b      	str	r3, [r7, #48]	; 0x30
  ip_addr_t *old_gw = &old_gw_val;
 800cf54:	f107 0314 	add.w	r3, r7, #20
 800cf58:	62fb      	str	r3, [r7, #44]	; 0x2c
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d101      	bne.n	800cf64 <netif_set_addr+0x28>
    ipaddr = IP4_ADDR_ANY4;
 800cf60:	4b36      	ldr	r3, [pc, #216]	; (800d03c <netif_set_addr+0x100>)
 800cf62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d101      	bne.n	800cf6e <netif_set_addr+0x32>
    netmask = IP4_ADDR_ANY4;
 800cf6a:	4b34      	ldr	r3, [pc, #208]	; (800d03c <netif_set_addr+0x100>)
 800cf6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d101      	bne.n	800cf78 <netif_set_addr+0x3c>
    gw = IP4_ADDR_ANY4;
 800cf74:	4b31      	ldr	r3, [pc, #196]	; (800d03c <netif_set_addr+0x100>)
 800cf76:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d003      	beq.n	800cf86 <netif_set_addr+0x4a>
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d101      	bne.n	800cf8a <netif_set_addr+0x4e>
 800cf86:	2301      	movs	r3, #1
 800cf88:	e000      	b.n	800cf8c <netif_set_addr+0x50>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (remove) {
 800cf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d010      	beq.n	800cfb6 <netif_set_addr+0x7a>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cf94:	f107 0310 	add.w	r3, r7, #16
 800cf98:	461a      	mov	r2, r3
 800cf9a:	68b9      	ldr	r1, [r7, #8]
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f7ff ff17 	bl	800cdd0 <netif_do_set_ipaddr>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d006      	beq.n	800cfb6 <netif_set_addr+0x7a>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 800cfa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cfaa:	f043 0310 	orr.w	r3, r3, #16
 800cfae:	86fb      	strh	r3, [r7, #54]	; 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 800cfb0:	f107 0310 	add.w	r3, r7, #16
 800cfb4:	61fb      	str	r3, [r7, #28]
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cfb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfb8:	6879      	ldr	r1, [r7, #4]
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f7ff ff5a 	bl	800ce74 <netif_do_set_netmask>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d005      	beq.n	800cfd2 <netif_set_addr+0x96>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
 800cfc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cfc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfcc:	86fb      	strh	r3, [r7, #54]	; 0x36
    cb_args.ipv4_changed.old_netmask = old_nm;
 800cfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd0:	623b      	str	r3, [r7, #32]
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cfd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfd4:	6839      	ldr	r1, [r7, #0]
 800cfd6:	68f8      	ldr	r0, [r7, #12]
 800cfd8:	f7ff ff7e 	bl	800ced8 <netif_do_set_gw>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d005      	beq.n	800cfee <netif_set_addr+0xb2>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
 800cfe2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cfe4:	f043 0320 	orr.w	r3, r3, #32
 800cfe8:	86fb      	strh	r3, [r7, #54]	; 0x36
    cb_args.ipv4_changed.old_gw = old_gw;
 800cfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfec:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  }
  if (!remove) {
 800cfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d110      	bne.n	800d016 <netif_set_addr+0xda>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cff4:	f107 0310 	add.w	r3, r7, #16
 800cff8:	461a      	mov	r2, r3
 800cffa:	68b9      	ldr	r1, [r7, #8]
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f7ff fee7 	bl	800cdd0 <netif_do_set_ipaddr>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d006      	beq.n	800d016 <netif_set_addr+0xda>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 800d008:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d00a:	f043 0310 	orr.w	r3, r3, #16
 800d00e:	86fb      	strh	r3, [r7, #54]	; 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 800d010:	f107 0310 	add.w	r3, r7, #16
 800d014:	61fb      	str	r3, [r7, #28]
#endif
    }
  }

#if LWIP_NETIF_EXT_STATUS_CALLBACK
  if (change_reason != LWIP_NSC_NONE) {
 800d016:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d00a      	beq.n	800d032 <netif_set_addr+0xf6>
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
 800d01c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d01e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d022:	86fb      	strh	r3, [r7, #54]	; 0x36
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
 800d024:	f107 021c 	add.w	r2, r7, #28
 800d028:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d02a:	4619      	mov	r1, r3
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f000 f997 	bl	800d360 <netif_invoke_ext_callback>
  }
#endif
}
 800d032:	bf00      	nop
 800d034:	3738      	adds	r7, #56	; 0x38
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	0801a65c 	.word	0x0801a65c

0800d040 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d048:	4a04      	ldr	r2, [pc, #16]	; (800d05c <netif_set_default+0x1c>)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d04e:	bf00      	nop
 800d050:	370c      	adds	r7, #12
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	2406b454 	.word	0x2406b454

0800d060 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b086      	sub	sp, #24
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d107      	bne.n	800d07e <netif_set_up+0x1e>
 800d06e:	4b18      	ldr	r3, [pc, #96]	; (800d0d0 <netif_set_up+0x70>)
 800d070:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d074:	4917      	ldr	r1, [pc, #92]	; (800d0d4 <netif_set_up+0x74>)
 800d076:	4818      	ldr	r0, [pc, #96]	; (800d0d8 <netif_set_up+0x78>)
 800d078:	f009 fd10 	bl	8016a9c <iprintf>
 800d07c:	e024      	b.n	800d0c8 <netif_set_up+0x68>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d084:	f003 0301 	and.w	r3, r3, #1
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d11d      	bne.n	800d0c8 <netif_set_up+0x68>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d092:	f043 0301 	orr.w	r3, r3, #1
 800d096:	b2da      	uxtb	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	69db      	ldr	r3, [r3, #28]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d003      	beq.n	800d0ae <netif_set_up+0x4e>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	69db      	ldr	r3, [r3, #28]
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	4798      	blx	r3

#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 1;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 800d0b2:	f107 030c 	add.w	r3, r7, #12
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	2108      	movs	r1, #8
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 f950 	bl	800d360 <netif_invoke_ext_callback>
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d0c0:	2103      	movs	r1, #3
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 f80a 	bl	800d0dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d0c8:	3718      	adds	r7, #24
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	08017e6c 	.word	0x08017e6c
 800d0d4:	08017ff4 	.word	0x08017ff4
 800d0d8:	08017ebc 	.word	0x08017ebc

0800d0dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d106      	bne.n	800d0fc <netif_issue_reports+0x20>
 800d0ee:	4b18      	ldr	r3, [pc, #96]	; (800d150 <netif_issue_reports+0x74>)
 800d0f0:	f240 326d 	movw	r2, #877	; 0x36d
 800d0f4:	4917      	ldr	r1, [pc, #92]	; (800d154 <netif_issue_reports+0x78>)
 800d0f6:	4818      	ldr	r0, [pc, #96]	; (800d158 <netif_issue_reports+0x7c>)
 800d0f8:	f009 fcd0 	bl	8016a9c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d102:	f003 0304 	and.w	r3, r3, #4
 800d106:	2b00      	cmp	r3, #0
 800d108:	d01e      	beq.n	800d148 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d110:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d114:	2b00      	cmp	r3, #0
 800d116:	d017      	beq.n	800d148 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d118:	78fb      	ldrb	r3, [r7, #3]
 800d11a:	f003 0301 	and.w	r3, r3, #1
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d013      	beq.n	800d14a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	3304      	adds	r3, #4
 800d126:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00e      	beq.n	800d14a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d132:	f003 0308 	and.w	r3, r3, #8
 800d136:	2b00      	cmp	r3, #0
 800d138:	d007      	beq.n	800d14a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	3304      	adds	r3, #4
 800d13e:	4619      	mov	r1, r3
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f007 fe4d 	bl	8014de0 <etharp_request>
 800d146:	e000      	b.n	800d14a <netif_issue_reports+0x6e>
    return;
 800d148:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	08017e6c 	.word	0x08017e6c
 800d154:	08018010 	.word	0x08018010
 800d158:	08017ebc 	.word	0x08017ebc

0800d15c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d107      	bne.n	800d17a <netif_set_down+0x1e>
 800d16a:	4b1b      	ldr	r3, [pc, #108]	; (800d1d8 <netif_set_down+0x7c>)
 800d16c:	f240 329b 	movw	r2, #923	; 0x39b
 800d170:	491a      	ldr	r1, [pc, #104]	; (800d1dc <netif_set_down+0x80>)
 800d172:	481b      	ldr	r0, [pc, #108]	; (800d1e0 <netif_set_down+0x84>)
 800d174:	f009 fc92 	bl	8016a9c <iprintf>
 800d178:	e02a      	b.n	800d1d0 <netif_set_down+0x74>

  if (netif->flags & NETIF_FLAG_UP) {
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	2b00      	cmp	r3, #0
 800d186:	d023      	beq.n	800d1d0 <netif_set_down+0x74>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 0;
 800d188:	2300      	movs	r3, #0
 800d18a:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 800d18c:	f107 030c 	add.w	r3, r7, #12
 800d190:	461a      	mov	r2, r3
 800d192:	2108      	movs	r1, #8
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 f8e3 	bl	800d360 <netif_invoke_ext_callback>
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d1a0:	f023 0301 	bic.w	r3, r3, #1
 800d1a4:	b2da      	uxtb	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d1b2:	f003 0308 	and.w	r3, r3, #8
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d002      	beq.n	800d1c0 <netif_set_down+0x64>
      etharp_cleanup_netif(netif);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f007 f9ce 	bl	801455c <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	69db      	ldr	r3, [r3, #28]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d003      	beq.n	800d1d0 <netif_set_down+0x74>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	69db      	ldr	r3, [r3, #28]
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	4798      	blx	r3
  }
}
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	08017e6c 	.word	0x08017e6c
 800d1dc:	08018034 	.word	0x08018034
 800d1e0:	08017ebc 	.word	0x08017ebc

0800d1e4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b086      	sub	sp, #24
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d107      	bne.n	800d202 <netif_set_link_up+0x1e>
 800d1f2:	4b18      	ldr	r3, [pc, #96]	; (800d254 <netif_set_link_up+0x70>)
 800d1f4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d1f8:	4917      	ldr	r1, [pc, #92]	; (800d258 <netif_set_link_up+0x74>)
 800d1fa:	4818      	ldr	r0, [pc, #96]	; (800d25c <netif_set_link_up+0x78>)
 800d1fc:	f009 fc4e 	bl	8016a9c <iprintf>
 800d200:	e024      	b.n	800d24c <netif_set_link_up+0x68>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d208:	f003 0304 	and.w	r3, r3, #4
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d11d      	bne.n	800d24c <netif_set_link_up+0x68>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d216:	f043 0304 	orr.w	r3, r3, #4
 800d21a:	b2da      	uxtb	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d222:	2103      	movs	r1, #3
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f7ff ff59 	bl	800d0dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6a1b      	ldr	r3, [r3, #32]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d003      	beq.n	800d23a <netif_set_link_up+0x56>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6a1b      	ldr	r3, [r3, #32]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 1;
 800d23a:	2301      	movs	r3, #1
 800d23c:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 800d23e:	f107 030c 	add.w	r3, r7, #12
 800d242:	461a      	mov	r2, r3
 800d244:	2104      	movs	r1, #4
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 f88a 	bl	800d360 <netif_invoke_ext_callback>
    }
#endif
  }
}
 800d24c:	3718      	adds	r7, #24
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
 800d252:	bf00      	nop
 800d254:	08017e6c 	.word	0x08017e6c
 800d258:	08018054 	.word	0x08018054
 800d25c:	08017ebc 	.word	0x08017ebc

0800d260 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d107      	bne.n	800d27e <netif_set_link_down+0x1e>
 800d26e:	4b16      	ldr	r3, [pc, #88]	; (800d2c8 <netif_set_link_down+0x68>)
 800d270:	f240 4206 	movw	r2, #1030	; 0x406
 800d274:	4915      	ldr	r1, [pc, #84]	; (800d2cc <netif_set_link_down+0x6c>)
 800d276:	4816      	ldr	r0, [pc, #88]	; (800d2d0 <netif_set_link_down+0x70>)
 800d278:	f009 fc10 	bl	8016a9c <iprintf>
 800d27c:	e020      	b.n	800d2c0 <netif_set_link_down+0x60>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d284:	f003 0304 	and.w	r3, r3, #4
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d019      	beq.n	800d2c0 <netif_set_link_down+0x60>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d292:	f023 0304 	bic.w	r3, r3, #4
 800d296:	b2da      	uxtb	r2, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6a1b      	ldr	r3, [r3, #32]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d003      	beq.n	800d2ae <netif_set_link_down+0x4e>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6a1b      	ldr	r3, [r3, #32]
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 0;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 800d2b2:	f107 030c 	add.w	r3, r7, #12
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	2104      	movs	r1, #4
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f850 	bl	800d360 <netif_invoke_ext_callback>
    }
#endif
  }
}
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	08017e6c 	.word	0x08017e6c
 800d2cc:	08018078 	.word	0x08018078
 800d2d0:	08017ebc 	.word	0x08017ebc

0800d2d4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d002      	beq.n	800d2ea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	621a      	str	r2, [r3, #32]
  }
}
 800d2ea:	bf00      	nop
 800d2ec:	370c      	adds	r7, #12
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr

0800d2f6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d2f6:	b480      	push	{r7}
 800d2f8:	b085      	sub	sp, #20
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	60f8      	str	r0, [r7, #12]
 800d2fe:	60b9      	str	r1, [r7, #8]
 800d300:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d302:	f06f 030b 	mvn.w	r3, #11
}
 800d306:	4618      	mov	r0, r3
 800d308:	3714      	adds	r7, #20
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr
	...

0800d314 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d314:	b480      	push	{r7}
 800d316:	b085      	sub	sp, #20
 800d318:	af00      	add	r7, sp, #0
 800d31a:	4603      	mov	r3, r0
 800d31c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d31e:	79fb      	ldrb	r3, [r7, #7]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d013      	beq.n	800d34c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d324:	4b0d      	ldr	r3, [pc, #52]	; (800d35c <netif_get_by_index+0x48>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	60fb      	str	r3, [r7, #12]
 800d32a:	e00c      	b.n	800d346 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d332:	3301      	adds	r3, #1
 800d334:	b2db      	uxtb	r3, r3
 800d336:	79fa      	ldrb	r2, [r7, #7]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d101      	bne.n	800d340 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	e006      	b.n	800d34e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	60fb      	str	r3, [r7, #12]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1ef      	bne.n	800d32c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3714      	adds	r7, #20
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr
 800d35a:	bf00      	nop
 800d35c:	2406b450 	.word	0x2406b450

0800d360 <netif_invoke_ext_callback>:
 * @param reason change reason
 * @param args depends on reason, see reason description
 */
void
netif_invoke_ext_callback(struct netif *netif, netif_nsc_reason_t reason, const netif_ext_callback_args_t *args)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	460b      	mov	r3, r1
 800d36a:	607a      	str	r2, [r7, #4]
 800d36c:	817b      	strh	r3, [r7, #10]
  netif_ext_callback_t *callback = ext_callback;
 800d36e:	4b0f      	ldr	r3, [pc, #60]	; (800d3ac <netif_invoke_ext_callback+0x4c>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif must be != NULL", netif != NULL);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d110      	bne.n	800d39c <netif_invoke_ext_callback+0x3c>
 800d37a:	4b0d      	ldr	r3, [pc, #52]	; (800d3b0 <netif_invoke_ext_callback+0x50>)
 800d37c:	f240 62fc 	movw	r2, #1788	; 0x6fc
 800d380:	490c      	ldr	r1, [pc, #48]	; (800d3b4 <netif_invoke_ext_callback+0x54>)
 800d382:	480d      	ldr	r0, [pc, #52]	; (800d3b8 <netif_invoke_ext_callback+0x58>)
 800d384:	f009 fb8a 	bl	8016a9c <iprintf>

  while (callback != NULL) {
 800d388:	e008      	b.n	800d39c <netif_invoke_ext_callback+0x3c>
    callback->callback_fn(netif, reason, args);
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	8979      	ldrh	r1, [r7, #10]
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	4798      	blx	r3
    callback = callback->next;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	617b      	str	r3, [r7, #20]
  while (callback != NULL) {
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d1f3      	bne.n	800d38a <netif_invoke_ext_callback+0x2a>
  }
}
 800d3a2:	bf00      	nop
 800d3a4:	bf00      	nop
 800d3a6:	3718      	adds	r7, #24
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	24064518 	.word	0x24064518
 800d3b0:	08017e6c 	.word	0x08017e6c
 800d3b4:	080180dc 	.word	0x080180dc
 800d3b8:	08017ebc 	.word	0x08017ebc

0800d3bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d3c2:	f009 f9b1 	bl	8016728 <sys_arch_protect>
 800d3c6:	6038      	str	r0, [r7, #0]
 800d3c8:	4b0d      	ldr	r3, [pc, #52]	; (800d400 <pbuf_free_ooseq+0x44>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	701a      	strb	r2, [r3, #0]
 800d3ce:	6838      	ldr	r0, [r7, #0]
 800d3d0:	f009 f9b8 	bl	8016744 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d3d4:	4b0b      	ldr	r3, [pc, #44]	; (800d404 <pbuf_free_ooseq+0x48>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	607b      	str	r3, [r7, #4]
 800d3da:	e00a      	b.n	800d3f2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d003      	beq.n	800d3ec <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f002 f989 	bl	800f6fc <tcp_free_ooseq>
      return;
 800d3ea:	e005      	b.n	800d3f8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	607b      	str	r3, [r7, #4]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1f1      	bne.n	800d3dc <pbuf_free_ooseq+0x20>
    }
  }
}
 800d3f8:	3708      	adds	r7, #8
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	2406b458 	.word	0x2406b458
 800d404:	2406b460 	.word	0x2406b460

0800d408 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d410:	f7ff ffd4 	bl	800d3bc <pbuf_free_ooseq>
}
 800d414:	bf00      	nop
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d422:	f009 f981 	bl	8016728 <sys_arch_protect>
 800d426:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d428:	4b0f      	ldr	r3, [pc, #60]	; (800d468 <pbuf_pool_is_empty+0x4c>)
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d42e:	4b0e      	ldr	r3, [pc, #56]	; (800d468 <pbuf_pool_is_empty+0x4c>)
 800d430:	2201      	movs	r2, #1
 800d432:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f009 f985 	bl	8016744 <sys_arch_unprotect>

  if (!queued) {
 800d43a:	78fb      	ldrb	r3, [r7, #3]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10f      	bne.n	800d460 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d440:	2100      	movs	r1, #0
 800d442:	480a      	ldr	r0, [pc, #40]	; (800d46c <pbuf_pool_is_empty+0x50>)
 800d444:	f7fe fd0a 	bl	800be5c <tcpip_try_callback>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d008      	beq.n	800d460 <pbuf_pool_is_empty+0x44>
 800d44e:	f009 f96b 	bl	8016728 <sys_arch_protect>
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	4b04      	ldr	r3, [pc, #16]	; (800d468 <pbuf_pool_is_empty+0x4c>)
 800d456:	2200      	movs	r2, #0
 800d458:	701a      	strb	r2, [r3, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f009 f972 	bl	8016744 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d460:	bf00      	nop
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	2406b458 	.word	0x2406b458
 800d46c:	0800d409 	.word	0x0800d409

0800d470 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	4611      	mov	r1, r2
 800d47c:	461a      	mov	r2, r3
 800d47e:	460b      	mov	r3, r1
 800d480:	80fb      	strh	r3, [r7, #6]
 800d482:	4613      	mov	r3, r2
 800d484:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2200      	movs	r2, #0
 800d48a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	68ba      	ldr	r2, [r7, #8]
 800d490:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	88fa      	ldrh	r2, [r7, #6]
 800d496:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	88ba      	ldrh	r2, [r7, #4]
 800d49c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d49e:	8b3b      	ldrh	r3, [r7, #24]
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	7f3a      	ldrb	r2, [r7, #28]
 800d4aa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	73da      	strb	r2, [r3, #15]
}
 800d4b8:	bf00      	nop
 800d4ba:	3714      	adds	r7, #20
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b08c      	sub	sp, #48	; 0x30
 800d4c8:	af02      	add	r7, sp, #8
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	71fb      	strb	r3, [r7, #7]
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	80bb      	strh	r3, [r7, #4]
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d4d6:	79fb      	ldrb	r3, [r7, #7]
 800d4d8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d4da:	887b      	ldrh	r3, [r7, #2]
 800d4dc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d4e0:	f000 8082 	beq.w	800d5e8 <pbuf_alloc+0x124>
 800d4e4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d4e8:	f300 80ca 	bgt.w	800d680 <pbuf_alloc+0x1bc>
 800d4ec:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d4f0:	d010      	beq.n	800d514 <pbuf_alloc+0x50>
 800d4f2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d4f6:	f300 80c3 	bgt.w	800d680 <pbuf_alloc+0x1bc>
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d002      	beq.n	800d504 <pbuf_alloc+0x40>
 800d4fe:	2b41      	cmp	r3, #65	; 0x41
 800d500:	f040 80be 	bne.w	800d680 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d504:	887a      	ldrh	r2, [r7, #2]
 800d506:	88bb      	ldrh	r3, [r7, #4]
 800d508:	4619      	mov	r1, r3
 800d50a:	2000      	movs	r0, #0
 800d50c:	f000 f8d4 	bl	800d6b8 <pbuf_alloc_reference>
 800d510:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d512:	e0bf      	b.n	800d694 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d514:	2300      	movs	r3, #0
 800d516:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d518:	2300      	movs	r3, #0
 800d51a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d51c:	88bb      	ldrh	r3, [r7, #4]
 800d51e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d520:	200c      	movs	r0, #12
 800d522:	f7ff fac5 	bl	800cab0 <memp_malloc>
 800d526:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d109      	bne.n	800d542 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800d52e:	f7ff ff75 	bl	800d41c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <pbuf_alloc+0x7a>
            pbuf_free(p);
 800d538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d53a:	f000 faab 	bl	800da94 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d53e:	2300      	movs	r3, #0
 800d540:	e0a9      	b.n	800d696 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d542:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d544:	3303      	adds	r3, #3
 800d546:	b29b      	uxth	r3, r3
 800d548:	f023 0303 	bic.w	r3, r3, #3
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800d552:	1a9b      	subs	r3, r3, r2
 800d554:	b29b      	uxth	r3, r3
 800d556:	8b7a      	ldrh	r2, [r7, #26]
 800d558:	4293      	cmp	r3, r2
 800d55a:	bf28      	it	cs
 800d55c:	4613      	movcs	r3, r2
 800d55e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d562:	3310      	adds	r3, #16
 800d564:	693a      	ldr	r2, [r7, #16]
 800d566:	4413      	add	r3, r2
 800d568:	3303      	adds	r3, #3
 800d56a:	f023 0303 	bic.w	r3, r3, #3
 800d56e:	4618      	mov	r0, r3
 800d570:	89f9      	ldrh	r1, [r7, #14]
 800d572:	8b7a      	ldrh	r2, [r7, #26]
 800d574:	2300      	movs	r3, #0
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	887b      	ldrh	r3, [r7, #2]
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	460b      	mov	r3, r1
 800d57e:	4601      	mov	r1, r0
 800d580:	6938      	ldr	r0, [r7, #16]
 800d582:	f7ff ff75 	bl	800d470 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	f003 0303 	and.w	r3, r3, #3
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d006      	beq.n	800d5a0 <pbuf_alloc+0xdc>
 800d592:	4b43      	ldr	r3, [pc, #268]	; (800d6a0 <pbuf_alloc+0x1dc>)
 800d594:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d598:	4942      	ldr	r1, [pc, #264]	; (800d6a4 <pbuf_alloc+0x1e0>)
 800d59a:	4843      	ldr	r0, [pc, #268]	; (800d6a8 <pbuf_alloc+0x1e4>)
 800d59c:	f009 fa7e 	bl	8016a9c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d5a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5a2:	3303      	adds	r3, #3
 800d5a4:	f023 0303 	bic.w	r3, r3, #3
 800d5a8:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d106      	bne.n	800d5be <pbuf_alloc+0xfa>
 800d5b0:	4b3b      	ldr	r3, [pc, #236]	; (800d6a0 <pbuf_alloc+0x1dc>)
 800d5b2:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d5b6:	493d      	ldr	r1, [pc, #244]	; (800d6ac <pbuf_alloc+0x1e8>)
 800d5b8:	483b      	ldr	r0, [pc, #236]	; (800d6a8 <pbuf_alloc+0x1e4>)
 800d5ba:	f009 fa6f 	bl	8016a9c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d102      	bne.n	800d5ca <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	627b      	str	r3, [r7, #36]	; 0x24
 800d5c8:	e002      	b.n	800d5d0 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	693a      	ldr	r2, [r7, #16]
 800d5ce:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d5d4:	8b7a      	ldrh	r2, [r7, #26]
 800d5d6:	89fb      	ldrh	r3, [r7, #14]
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d5e0:	8b7b      	ldrh	r3, [r7, #26]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d19c      	bne.n	800d520 <pbuf_alloc+0x5c>
      break;
 800d5e6:	e055      	b.n	800d694 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d5e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5ea:	3303      	adds	r3, #3
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	f023 0303 	bic.w	r3, r3, #3
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	88bb      	ldrh	r3, [r7, #4]
 800d5f6:	3303      	adds	r3, #3
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	f023 0303 	bic.w	r3, r3, #3
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	4413      	add	r3, r2
 800d602:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d604:	8b3b      	ldrh	r3, [r7, #24]
 800d606:	3310      	adds	r3, #16
 800d608:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d60a:	8b3a      	ldrh	r2, [r7, #24]
 800d60c:	88bb      	ldrh	r3, [r7, #4]
 800d60e:	3303      	adds	r3, #3
 800d610:	f023 0303 	bic.w	r3, r3, #3
 800d614:	429a      	cmp	r2, r3
 800d616:	d306      	bcc.n	800d626 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d618:	8afa      	ldrh	r2, [r7, #22]
 800d61a:	88bb      	ldrh	r3, [r7, #4]
 800d61c:	3303      	adds	r3, #3
 800d61e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d622:	429a      	cmp	r2, r3
 800d624:	d201      	bcs.n	800d62a <pbuf_alloc+0x166>
        return NULL;
 800d626:	2300      	movs	r3, #0
 800d628:	e035      	b.n	800d696 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d62a:	8afb      	ldrh	r3, [r7, #22]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7ff f897 	bl	800c760 <mem_malloc>
 800d632:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	2b00      	cmp	r3, #0
 800d638:	d101      	bne.n	800d63e <pbuf_alloc+0x17a>
        return NULL;
 800d63a:	2300      	movs	r3, #0
 800d63c:	e02b      	b.n	800d696 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d63e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d640:	3310      	adds	r3, #16
 800d642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d644:	4413      	add	r3, r2
 800d646:	3303      	adds	r3, #3
 800d648:	f023 0303 	bic.w	r3, r3, #3
 800d64c:	4618      	mov	r0, r3
 800d64e:	88b9      	ldrh	r1, [r7, #4]
 800d650:	88ba      	ldrh	r2, [r7, #4]
 800d652:	2300      	movs	r3, #0
 800d654:	9301      	str	r3, [sp, #4]
 800d656:	887b      	ldrh	r3, [r7, #2]
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	460b      	mov	r3, r1
 800d65c:	4601      	mov	r1, r0
 800d65e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d660:	f7ff ff06 	bl	800d470 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	f003 0303 	and.w	r3, r3, #3
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d010      	beq.n	800d692 <pbuf_alloc+0x1ce>
 800d670:	4b0b      	ldr	r3, [pc, #44]	; (800d6a0 <pbuf_alloc+0x1dc>)
 800d672:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d676:	490e      	ldr	r1, [pc, #56]	; (800d6b0 <pbuf_alloc+0x1ec>)
 800d678:	480b      	ldr	r0, [pc, #44]	; (800d6a8 <pbuf_alloc+0x1e4>)
 800d67a:	f009 fa0f 	bl	8016a9c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d67e:	e008      	b.n	800d692 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d680:	4b07      	ldr	r3, [pc, #28]	; (800d6a0 <pbuf_alloc+0x1dc>)
 800d682:	f240 1227 	movw	r2, #295	; 0x127
 800d686:	490b      	ldr	r1, [pc, #44]	; (800d6b4 <pbuf_alloc+0x1f0>)
 800d688:	4807      	ldr	r0, [pc, #28]	; (800d6a8 <pbuf_alloc+0x1e4>)
 800d68a:	f009 fa07 	bl	8016a9c <iprintf>
      return NULL;
 800d68e:	2300      	movs	r3, #0
 800d690:	e001      	b.n	800d696 <pbuf_alloc+0x1d2>
      break;
 800d692:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d696:	4618      	mov	r0, r3
 800d698:	3728      	adds	r7, #40	; 0x28
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	080180f4 	.word	0x080180f4
 800d6a4:	08018124 	.word	0x08018124
 800d6a8:	08018154 	.word	0x08018154
 800d6ac:	0801817c 	.word	0x0801817c
 800d6b0:	080181b0 	.word	0x080181b0
 800d6b4:	080181dc 	.word	0x080181dc

0800d6b8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b086      	sub	sp, #24
 800d6bc:	af02      	add	r7, sp, #8
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	807b      	strh	r3, [r7, #2]
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d6c8:	883b      	ldrh	r3, [r7, #0]
 800d6ca:	2b41      	cmp	r3, #65	; 0x41
 800d6cc:	d009      	beq.n	800d6e2 <pbuf_alloc_reference+0x2a>
 800d6ce:	883b      	ldrh	r3, [r7, #0]
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d006      	beq.n	800d6e2 <pbuf_alloc_reference+0x2a>
 800d6d4:	4b0f      	ldr	r3, [pc, #60]	; (800d714 <pbuf_alloc_reference+0x5c>)
 800d6d6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d6da:	490f      	ldr	r1, [pc, #60]	; (800d718 <pbuf_alloc_reference+0x60>)
 800d6dc:	480f      	ldr	r0, [pc, #60]	; (800d71c <pbuf_alloc_reference+0x64>)
 800d6de:	f009 f9dd 	bl	8016a9c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d6e2:	200b      	movs	r0, #11
 800d6e4:	f7ff f9e4 	bl	800cab0 <memp_malloc>
 800d6e8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d101      	bne.n	800d6f4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	e00b      	b.n	800d70c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d6f4:	8879      	ldrh	r1, [r7, #2]
 800d6f6:	887a      	ldrh	r2, [r7, #2]
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	9301      	str	r3, [sp, #4]
 800d6fc:	883b      	ldrh	r3, [r7, #0]
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	460b      	mov	r3, r1
 800d702:	6879      	ldr	r1, [r7, #4]
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f7ff feb3 	bl	800d470 <pbuf_init_alloced_pbuf>
  return p;
 800d70a:	68fb      	ldr	r3, [r7, #12]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	080180f4 	.word	0x080180f4
 800d718:	080181f8 	.word	0x080181f8
 800d71c:	08018154 	.word	0x08018154

0800d720 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b088      	sub	sp, #32
 800d724:	af02      	add	r7, sp, #8
 800d726:	607b      	str	r3, [r7, #4]
 800d728:	4603      	mov	r3, r0
 800d72a:	73fb      	strb	r3, [r7, #15]
 800d72c:	460b      	mov	r3, r1
 800d72e:	81bb      	strh	r3, [r7, #12]
 800d730:	4613      	mov	r3, r2
 800d732:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d734:	7bfb      	ldrb	r3, [r7, #15]
 800d736:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d738:	8a7b      	ldrh	r3, [r7, #18]
 800d73a:	3303      	adds	r3, #3
 800d73c:	f023 0203 	bic.w	r2, r3, #3
 800d740:	89bb      	ldrh	r3, [r7, #12]
 800d742:	441a      	add	r2, r3
 800d744:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d746:	429a      	cmp	r2, r3
 800d748:	d901      	bls.n	800d74e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d74a:	2300      	movs	r3, #0
 800d74c:	e018      	b.n	800d780 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d74e:	6a3b      	ldr	r3, [r7, #32]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d007      	beq.n	800d764 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d754:	8a7b      	ldrh	r3, [r7, #18]
 800d756:	3303      	adds	r3, #3
 800d758:	f023 0303 	bic.w	r3, r3, #3
 800d75c:	6a3a      	ldr	r2, [r7, #32]
 800d75e:	4413      	add	r3, r2
 800d760:	617b      	str	r3, [r7, #20]
 800d762:	e001      	b.n	800d768 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d764:	2300      	movs	r3, #0
 800d766:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	89b9      	ldrh	r1, [r7, #12]
 800d76c:	89ba      	ldrh	r2, [r7, #12]
 800d76e:	2302      	movs	r3, #2
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	897b      	ldrh	r3, [r7, #10]
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	460b      	mov	r3, r1
 800d778:	6979      	ldr	r1, [r7, #20]
 800d77a:	f7ff fe79 	bl	800d470 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d77e:	687b      	ldr	r3, [r7, #4]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3718      	adds	r7, #24
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	460b      	mov	r3, r1
 800d792:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d106      	bne.n	800d7a8 <pbuf_realloc+0x20>
 800d79a:	4b3a      	ldr	r3, [pc, #232]	; (800d884 <pbuf_realloc+0xfc>)
 800d79c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d7a0:	4939      	ldr	r1, [pc, #228]	; (800d888 <pbuf_realloc+0x100>)
 800d7a2:	483a      	ldr	r0, [pc, #232]	; (800d88c <pbuf_realloc+0x104>)
 800d7a4:	f009 f97a 	bl	8016a9c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	891b      	ldrh	r3, [r3, #8]
 800d7ac:	887a      	ldrh	r2, [r7, #2]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d263      	bcs.n	800d87a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	891a      	ldrh	r2, [r3, #8]
 800d7b6:	887b      	ldrh	r3, [r7, #2]
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d7bc:	887b      	ldrh	r3, [r7, #2]
 800d7be:	817b      	strh	r3, [r7, #10]
  q = p;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d7c4:	e018      	b.n	800d7f8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	895b      	ldrh	r3, [r3, #10]
 800d7ca:	897a      	ldrh	r2, [r7, #10]
 800d7cc:	1ad3      	subs	r3, r2, r3
 800d7ce:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	891a      	ldrh	r2, [r3, #8]
 800d7d4:	893b      	ldrh	r3, [r7, #8]
 800d7d6:	1ad3      	subs	r3, r2, r3
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d106      	bne.n	800d7f8 <pbuf_realloc+0x70>
 800d7ea:	4b26      	ldr	r3, [pc, #152]	; (800d884 <pbuf_realloc+0xfc>)
 800d7ec:	f240 12af 	movw	r2, #431	; 0x1af
 800d7f0:	4927      	ldr	r1, [pc, #156]	; (800d890 <pbuf_realloc+0x108>)
 800d7f2:	4826      	ldr	r0, [pc, #152]	; (800d88c <pbuf_realloc+0x104>)
 800d7f4:	f009 f952 	bl	8016a9c <iprintf>
  while (rem_len > q->len) {
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	895b      	ldrh	r3, [r3, #10]
 800d7fc:	897a      	ldrh	r2, [r7, #10]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d8e1      	bhi.n	800d7c6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	7b1b      	ldrb	r3, [r3, #12]
 800d806:	f003 030f 	and.w	r3, r3, #15
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d121      	bne.n	800d852 <pbuf_realloc+0xca>
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	895b      	ldrh	r3, [r3, #10]
 800d812:	897a      	ldrh	r2, [r7, #10]
 800d814:	429a      	cmp	r2, r3
 800d816:	d01c      	beq.n	800d852 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	7b5b      	ldrb	r3, [r3, #13]
 800d81c:	f003 0302 	and.w	r3, r3, #2
 800d820:	2b00      	cmp	r3, #0
 800d822:	d116      	bne.n	800d852 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	685a      	ldr	r2, [r3, #4]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	1ad3      	subs	r3, r2, r3
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	897b      	ldrh	r3, [r7, #10]
 800d830:	4413      	add	r3, r2
 800d832:	b29b      	uxth	r3, r3
 800d834:	4619      	mov	r1, r3
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	f7fe fe82 	bl	800c540 <mem_trim>
 800d83c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d106      	bne.n	800d852 <pbuf_realloc+0xca>
 800d844:	4b0f      	ldr	r3, [pc, #60]	; (800d884 <pbuf_realloc+0xfc>)
 800d846:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d84a:	4912      	ldr	r1, [pc, #72]	; (800d894 <pbuf_realloc+0x10c>)
 800d84c:	480f      	ldr	r0, [pc, #60]	; (800d88c <pbuf_realloc+0x104>)
 800d84e:	f009 f925 	bl	8016a9c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	897a      	ldrh	r2, [r7, #10]
 800d856:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	895a      	ldrh	r2, [r3, #10]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d004      	beq.n	800d872 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4618      	mov	r0, r3
 800d86e:	f000 f911 	bl	800da94 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	601a      	str	r2, [r3, #0]
 800d878:	e000      	b.n	800d87c <pbuf_realloc+0xf4>
    return;
 800d87a:	bf00      	nop

}
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	080180f4 	.word	0x080180f4
 800d888:	0801820c 	.word	0x0801820c
 800d88c:	08018154 	.word	0x08018154
 800d890:	08018224 	.word	0x08018224
 800d894:	0801823c 	.word	0x0801823c

0800d898 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b086      	sub	sp, #24
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d106      	bne.n	800d8ba <pbuf_add_header_impl+0x22>
 800d8ac:	4b2b      	ldr	r3, [pc, #172]	; (800d95c <pbuf_add_header_impl+0xc4>)
 800d8ae:	f240 12df 	movw	r2, #479	; 0x1df
 800d8b2:	492b      	ldr	r1, [pc, #172]	; (800d960 <pbuf_add_header_impl+0xc8>)
 800d8b4:	482b      	ldr	r0, [pc, #172]	; (800d964 <pbuf_add_header_impl+0xcc>)
 800d8b6:	f009 f8f1 	bl	8016a9c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d003      	beq.n	800d8c8 <pbuf_add_header_impl+0x30>
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8c6:	d301      	bcc.n	800d8cc <pbuf_add_header_impl+0x34>
    return 1;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	e043      	b.n	800d954 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d101      	bne.n	800d8d6 <pbuf_add_header_impl+0x3e>
    return 0;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	e03e      	b.n	800d954 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	891a      	ldrh	r2, [r3, #8]
 800d8de:	8a7b      	ldrh	r3, [r7, #18]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	8a7a      	ldrh	r2, [r7, #18]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d901      	bls.n	800d8ee <pbuf_add_header_impl+0x56>
    return 1;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e032      	b.n	800d954 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	7b1b      	ldrb	r3, [r3, #12]
 800d8f2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d8f4:	8a3b      	ldrh	r3, [r7, #16]
 800d8f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00c      	beq.n	800d918 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	685a      	ldr	r2, [r3, #4]
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	425b      	negs	r3, r3
 800d906:	4413      	add	r3, r2
 800d908:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	3310      	adds	r3, #16
 800d90e:	697a      	ldr	r2, [r7, #20]
 800d910:	429a      	cmp	r2, r3
 800d912:	d20d      	bcs.n	800d930 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d914:	2301      	movs	r3, #1
 800d916:	e01d      	b.n	800d954 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d918:	79fb      	ldrb	r3, [r7, #7]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d006      	beq.n	800d92c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	685a      	ldr	r2, [r3, #4]
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	425b      	negs	r3, r3
 800d926:	4413      	add	r3, r2
 800d928:	617b      	str	r3, [r7, #20]
 800d92a:	e001      	b.n	800d930 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d92c:	2301      	movs	r3, #1
 800d92e:	e011      	b.n	800d954 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	697a      	ldr	r2, [r7, #20]
 800d934:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	895a      	ldrh	r2, [r3, #10]
 800d93a:	8a7b      	ldrh	r3, [r7, #18]
 800d93c:	4413      	add	r3, r2
 800d93e:	b29a      	uxth	r2, r3
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	891a      	ldrh	r2, [r3, #8]
 800d948:	8a7b      	ldrh	r3, [r7, #18]
 800d94a:	4413      	add	r3, r2
 800d94c:	b29a      	uxth	r2, r3
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	811a      	strh	r2, [r3, #8]


  return 0;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	3718      	adds	r7, #24
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	080180f4 	.word	0x080180f4
 800d960:	08018258 	.word	0x08018258
 800d964:	08018154 	.word	0x08018154

0800d968 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d972:	2200      	movs	r2, #0
 800d974:	6839      	ldr	r1, [r7, #0]
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f7ff ff8e 	bl	800d898 <pbuf_add_header_impl>
 800d97c:	4603      	mov	r3, r0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
	...

0800d988 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d106      	bne.n	800d9a6 <pbuf_remove_header+0x1e>
 800d998:	4b20      	ldr	r3, [pc, #128]	; (800da1c <pbuf_remove_header+0x94>)
 800d99a:	f240 224b 	movw	r2, #587	; 0x24b
 800d99e:	4920      	ldr	r1, [pc, #128]	; (800da20 <pbuf_remove_header+0x98>)
 800d9a0:	4820      	ldr	r0, [pc, #128]	; (800da24 <pbuf_remove_header+0x9c>)
 800d9a2:	f009 f87b 	bl	8016a9c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d003      	beq.n	800d9b4 <pbuf_remove_header+0x2c>
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9b2:	d301      	bcc.n	800d9b8 <pbuf_remove_header+0x30>
    return 1;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e02c      	b.n	800da12 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d101      	bne.n	800d9c2 <pbuf_remove_header+0x3a>
    return 0;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	e027      	b.n	800da12 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	895b      	ldrh	r3, [r3, #10]
 800d9ca:	89fa      	ldrh	r2, [r7, #14]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d908      	bls.n	800d9e2 <pbuf_remove_header+0x5a>
 800d9d0:	4b12      	ldr	r3, [pc, #72]	; (800da1c <pbuf_remove_header+0x94>)
 800d9d2:	f240 2255 	movw	r2, #597	; 0x255
 800d9d6:	4914      	ldr	r1, [pc, #80]	; (800da28 <pbuf_remove_header+0xa0>)
 800d9d8:	4812      	ldr	r0, [pc, #72]	; (800da24 <pbuf_remove_header+0x9c>)
 800d9da:	f009 f85f 	bl	8016a9c <iprintf>
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e017      	b.n	800da12 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	685a      	ldr	r2, [r3, #4]
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	441a      	add	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	895a      	ldrh	r2, [r3, #10]
 800d9f8:	89fb      	ldrh	r3, [r7, #14]
 800d9fa:	1ad3      	subs	r3, r2, r3
 800d9fc:	b29a      	uxth	r2, r3
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	891a      	ldrh	r2, [r3, #8]
 800da06:	89fb      	ldrh	r3, [r7, #14]
 800da08:	1ad3      	subs	r3, r2, r3
 800da0a:	b29a      	uxth	r2, r3
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	080180f4 	.word	0x080180f4
 800da20:	08018258 	.word	0x08018258
 800da24:	08018154 	.word	0x08018154
 800da28:	08018264 	.word	0x08018264

0800da2c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	460b      	mov	r3, r1
 800da36:	807b      	strh	r3, [r7, #2]
 800da38:	4613      	mov	r3, r2
 800da3a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800da3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da40:	2b00      	cmp	r3, #0
 800da42:	da08      	bge.n	800da56 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800da44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da48:	425b      	negs	r3, r3
 800da4a:	4619      	mov	r1, r3
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7ff ff9b 	bl	800d988 <pbuf_remove_header>
 800da52:	4603      	mov	r3, r0
 800da54:	e007      	b.n	800da66 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800da56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da5a:	787a      	ldrb	r2, [r7, #1]
 800da5c:	4619      	mov	r1, r3
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7ff ff1a 	bl	800d898 <pbuf_add_header_impl>
 800da64:	4603      	mov	r3, r0
  }
}
 800da66:	4618      	mov	r0, r3
 800da68:	3708      	adds	r7, #8
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	b082      	sub	sp, #8
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
 800da76:	460b      	mov	r3, r1
 800da78:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800da7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da7e:	2201      	movs	r2, #1
 800da80:	4619      	mov	r1, r3
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7ff ffd2 	bl	800da2c <pbuf_header_impl>
 800da88:	4603      	mov	r3, r0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3708      	adds	r7, #8
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
	...

0800da94 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b088      	sub	sp, #32
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d10b      	bne.n	800daba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d106      	bne.n	800dab6 <pbuf_free+0x22>
 800daa8:	4b3b      	ldr	r3, [pc, #236]	; (800db98 <pbuf_free+0x104>)
 800daaa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800daae:	493b      	ldr	r1, [pc, #236]	; (800db9c <pbuf_free+0x108>)
 800dab0:	483b      	ldr	r0, [pc, #236]	; (800dba0 <pbuf_free+0x10c>)
 800dab2:	f008 fff3 	bl	8016a9c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	e069      	b.n	800db8e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800daba:	2300      	movs	r3, #0
 800dabc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dabe:	e062      	b.n	800db86 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800dac0:	f008 fe32 	bl	8016728 <sys_arch_protect>
 800dac4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	7b9b      	ldrb	r3, [r3, #14]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d106      	bne.n	800dadc <pbuf_free+0x48>
 800dace:	4b32      	ldr	r3, [pc, #200]	; (800db98 <pbuf_free+0x104>)
 800dad0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800dad4:	4933      	ldr	r1, [pc, #204]	; (800dba4 <pbuf_free+0x110>)
 800dad6:	4832      	ldr	r0, [pc, #200]	; (800dba0 <pbuf_free+0x10c>)
 800dad8:	f008 ffe0 	bl	8016a9c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	7b9b      	ldrb	r3, [r3, #14]
 800dae0:	3b01      	subs	r3, #1
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	739a      	strb	r2, [r3, #14]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	7b9b      	ldrb	r3, [r3, #14]
 800daec:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800daee:	69b8      	ldr	r0, [r7, #24]
 800daf0:	f008 fe28 	bl	8016744 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800daf4:	7dfb      	ldrb	r3, [r7, #23]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d143      	bne.n	800db82 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	7b1b      	ldrb	r3, [r3, #12]
 800db04:	f003 030f 	and.w	r3, r3, #15
 800db08:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	7b5b      	ldrb	r3, [r3, #13]
 800db0e:	f003 0302 	and.w	r3, r3, #2
 800db12:	2b00      	cmp	r3, #0
 800db14:	d011      	beq.n	800db3a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d106      	bne.n	800db30 <pbuf_free+0x9c>
 800db22:	4b1d      	ldr	r3, [pc, #116]	; (800db98 <pbuf_free+0x104>)
 800db24:	f240 22ff 	movw	r2, #767	; 0x2ff
 800db28:	491f      	ldr	r1, [pc, #124]	; (800dba8 <pbuf_free+0x114>)
 800db2a:	481d      	ldr	r0, [pc, #116]	; (800dba0 <pbuf_free+0x10c>)
 800db2c:	f008 ffb6 	bl	8016a9c <iprintf>
        pc->custom_free_function(p);
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	691b      	ldr	r3, [r3, #16]
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	4798      	blx	r3
 800db38:	e01d      	b.n	800db76 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800db3a:	7bfb      	ldrb	r3, [r7, #15]
 800db3c:	2b02      	cmp	r3, #2
 800db3e:	d104      	bne.n	800db4a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800db40:	6879      	ldr	r1, [r7, #4]
 800db42:	200c      	movs	r0, #12
 800db44:	f7ff f82a 	bl	800cb9c <memp_free>
 800db48:	e015      	b.n	800db76 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800db4a:	7bfb      	ldrb	r3, [r7, #15]
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d104      	bne.n	800db5a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800db50:	6879      	ldr	r1, [r7, #4]
 800db52:	200b      	movs	r0, #11
 800db54:	f7ff f822 	bl	800cb9c <memp_free>
 800db58:	e00d      	b.n	800db76 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800db5a:	7bfb      	ldrb	r3, [r7, #15]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d103      	bne.n	800db68 <pbuf_free+0xd4>
          mem_free(p);
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7fe fc5d 	bl	800c420 <mem_free>
 800db66:	e006      	b.n	800db76 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800db68:	4b0b      	ldr	r3, [pc, #44]	; (800db98 <pbuf_free+0x104>)
 800db6a:	f240 320f 	movw	r2, #783	; 0x30f
 800db6e:	490f      	ldr	r1, [pc, #60]	; (800dbac <pbuf_free+0x118>)
 800db70:	480b      	ldr	r0, [pc, #44]	; (800dba0 <pbuf_free+0x10c>)
 800db72:	f008 ff93 	bl	8016a9c <iprintf>
        }
      }
      count++;
 800db76:	7ffb      	ldrb	r3, [r7, #31]
 800db78:	3301      	adds	r3, #1
 800db7a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	607b      	str	r3, [r7, #4]
 800db80:	e001      	b.n	800db86 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800db82:	2300      	movs	r3, #0
 800db84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d199      	bne.n	800dac0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800db8c:	7ffb      	ldrb	r3, [r7, #31]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3720      	adds	r7, #32
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	080180f4 	.word	0x080180f4
 800db9c:	08018258 	.word	0x08018258
 800dba0:	08018154 	.word	0x08018154
 800dba4:	08018284 	.word	0x08018284
 800dba8:	0801829c 	.word	0x0801829c
 800dbac:	080182c0 	.word	0x080182c0

0800dbb0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b085      	sub	sp, #20
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dbbc:	e005      	b.n	800dbca <pbuf_clen+0x1a>
    ++len;
 800dbbe:	89fb      	ldrh	r3, [r7, #14]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d1f6      	bne.n	800dbbe <pbuf_clen+0xe>
  }
  return len;
 800dbd0:	89fb      	ldrh	r3, [r7, #14]
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3714      	adds	r7, #20
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
	...

0800dbe0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d016      	beq.n	800dc1c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dbee:	f008 fd9b 	bl	8016728 <sys_arch_protect>
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	7b9b      	ldrb	r3, [r3, #14]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	b2da      	uxtb	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	739a      	strb	r2, [r3, #14]
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f008 fd9f 	bl	8016744 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	7b9b      	ldrb	r3, [r3, #14]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d106      	bne.n	800dc1c <pbuf_ref+0x3c>
 800dc0e:	4b05      	ldr	r3, [pc, #20]	; (800dc24 <pbuf_ref+0x44>)
 800dc10:	f240 3242 	movw	r2, #834	; 0x342
 800dc14:	4904      	ldr	r1, [pc, #16]	; (800dc28 <pbuf_ref+0x48>)
 800dc16:	4805      	ldr	r0, [pc, #20]	; (800dc2c <pbuf_ref+0x4c>)
 800dc18:	f008 ff40 	bl	8016a9c <iprintf>
  }
}
 800dc1c:	bf00      	nop
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	080180f4 	.word	0x080180f4
 800dc28:	080182d4 	.word	0x080182d4
 800dc2c:	08018154 	.word	0x08018154

0800dc30 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <pbuf_cat+0x16>
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d107      	bne.n	800dc56 <pbuf_cat+0x26>
 800dc46:	4b20      	ldr	r3, [pc, #128]	; (800dcc8 <pbuf_cat+0x98>)
 800dc48:	f240 3259 	movw	r2, #857	; 0x359
 800dc4c:	491f      	ldr	r1, [pc, #124]	; (800dccc <pbuf_cat+0x9c>)
 800dc4e:	4820      	ldr	r0, [pc, #128]	; (800dcd0 <pbuf_cat+0xa0>)
 800dc50:	f008 ff24 	bl	8016a9c <iprintf>
 800dc54:	e034      	b.n	800dcc0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	60fb      	str	r3, [r7, #12]
 800dc5a:	e00a      	b.n	800dc72 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	891a      	ldrh	r2, [r3, #8]
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	891b      	ldrh	r3, [r3, #8]
 800dc64:	4413      	add	r3, r2
 800dc66:	b29a      	uxth	r2, r3
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	60fb      	str	r3, [r7, #12]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1f0      	bne.n	800dc5c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	891a      	ldrh	r2, [r3, #8]
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	895b      	ldrh	r3, [r3, #10]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d006      	beq.n	800dc94 <pbuf_cat+0x64>
 800dc86:	4b10      	ldr	r3, [pc, #64]	; (800dcc8 <pbuf_cat+0x98>)
 800dc88:	f240 3262 	movw	r2, #866	; 0x362
 800dc8c:	4911      	ldr	r1, [pc, #68]	; (800dcd4 <pbuf_cat+0xa4>)
 800dc8e:	4810      	ldr	r0, [pc, #64]	; (800dcd0 <pbuf_cat+0xa0>)
 800dc90:	f008 ff04 	bl	8016a9c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d006      	beq.n	800dcaa <pbuf_cat+0x7a>
 800dc9c:	4b0a      	ldr	r3, [pc, #40]	; (800dcc8 <pbuf_cat+0x98>)
 800dc9e:	f240 3263 	movw	r2, #867	; 0x363
 800dca2:	490d      	ldr	r1, [pc, #52]	; (800dcd8 <pbuf_cat+0xa8>)
 800dca4:	480a      	ldr	r0, [pc, #40]	; (800dcd0 <pbuf_cat+0xa0>)
 800dca6:	f008 fef9 	bl	8016a9c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	891a      	ldrh	r2, [r3, #8]
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	891b      	ldrh	r3, [r3, #8]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	683a      	ldr	r2, [r7, #0]
 800dcbe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	080180f4 	.word	0x080180f4
 800dccc:	080182e8 	.word	0x080182e8
 800dcd0:	08018154 	.word	0x08018154
 800dcd4:	08018320 	.word	0x08018320
 800dcd8:	08018350 	.word	0x08018350

0800dcdc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800dce6:	6839      	ldr	r1, [r7, #0]
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f7ff ffa1 	bl	800dc30 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800dcee:	6838      	ldr	r0, [r7, #0]
 800dcf0:	f7ff ff76 	bl	800dbe0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800dcf4:	bf00      	nop
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dd06:	2300      	movs	r3, #0
 800dd08:	617b      	str	r3, [r7, #20]
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d008      	beq.n	800dd26 <pbuf_copy+0x2a>
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d005      	beq.n	800dd26 <pbuf_copy+0x2a>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	891a      	ldrh	r2, [r3, #8]
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	891b      	ldrh	r3, [r3, #8]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d209      	bcs.n	800dd3a <pbuf_copy+0x3e>
 800dd26:	4b57      	ldr	r3, [pc, #348]	; (800de84 <pbuf_copy+0x188>)
 800dd28:	f240 32c9 	movw	r2, #969	; 0x3c9
 800dd2c:	4956      	ldr	r1, [pc, #344]	; (800de88 <pbuf_copy+0x18c>)
 800dd2e:	4857      	ldr	r0, [pc, #348]	; (800de8c <pbuf_copy+0x190>)
 800dd30:	f008 feb4 	bl	8016a9c <iprintf>
 800dd34:	f06f 030f 	mvn.w	r3, #15
 800dd38:	e09f      	b.n	800de7a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	895b      	ldrh	r3, [r3, #10]
 800dd3e:	461a      	mov	r2, r3
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	1ad2      	subs	r2, r2, r3
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	895b      	ldrh	r3, [r3, #10]
 800dd48:	4619      	mov	r1, r3
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	1acb      	subs	r3, r1, r3
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d306      	bcc.n	800dd60 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	895b      	ldrh	r3, [r3, #10]
 800dd56:	461a      	mov	r2, r3
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	1ad3      	subs	r3, r2, r3
 800dd5c:	60fb      	str	r3, [r7, #12]
 800dd5e:	e005      	b.n	800dd6c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	895b      	ldrh	r3, [r3, #10]
 800dd64:	461a      	mov	r2, r3
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	685a      	ldr	r2, [r3, #4]
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	18d0      	adds	r0, r2, r3
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	4619      	mov	r1, r3
 800dd80:	f008 fe1b 	bl	80169ba <memcpy>
    offset_to += len;
 800dd84:	697a      	ldr	r2, [r7, #20]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	4413      	add	r3, r2
 800dd8a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dd8c:	693a      	ldr	r2, [r7, #16]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	4413      	add	r3, r2
 800dd92:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	895b      	ldrh	r3, [r3, #10]
 800dd98:	461a      	mov	r2, r3
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d906      	bls.n	800ddae <pbuf_copy+0xb2>
 800dda0:	4b38      	ldr	r3, [pc, #224]	; (800de84 <pbuf_copy+0x188>)
 800dda2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800dda6:	493a      	ldr	r1, [pc, #232]	; (800de90 <pbuf_copy+0x194>)
 800dda8:	4838      	ldr	r0, [pc, #224]	; (800de8c <pbuf_copy+0x190>)
 800ddaa:	f008 fe77 	bl	8016a9c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	895b      	ldrh	r3, [r3, #10]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d906      	bls.n	800ddc8 <pbuf_copy+0xcc>
 800ddba:	4b32      	ldr	r3, [pc, #200]	; (800de84 <pbuf_copy+0x188>)
 800ddbc:	f240 32da 	movw	r2, #986	; 0x3da
 800ddc0:	4934      	ldr	r1, [pc, #208]	; (800de94 <pbuf_copy+0x198>)
 800ddc2:	4832      	ldr	r0, [pc, #200]	; (800de8c <pbuf_copy+0x190>)
 800ddc4:	f008 fe6a 	bl	8016a9c <iprintf>
    if (offset_from >= p_from->len) {
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	895b      	ldrh	r3, [r3, #10]
 800ddcc:	461a      	mov	r2, r3
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d304      	bcc.n	800ddde <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	895b      	ldrh	r3, [r3, #10]
 800dde2:	461a      	mov	r2, r3
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d114      	bne.n	800de14 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ddea:	2300      	movs	r3, #0
 800ddec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10c      	bne.n	800de14 <pbuf_copy+0x118>
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d009      	beq.n	800de14 <pbuf_copy+0x118>
 800de00:	4b20      	ldr	r3, [pc, #128]	; (800de84 <pbuf_copy+0x188>)
 800de02:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800de06:	4924      	ldr	r1, [pc, #144]	; (800de98 <pbuf_copy+0x19c>)
 800de08:	4820      	ldr	r0, [pc, #128]	; (800de8c <pbuf_copy+0x190>)
 800de0a:	f008 fe47 	bl	8016a9c <iprintf>
 800de0e:	f06f 030f 	mvn.w	r3, #15
 800de12:	e032      	b.n	800de7a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d013      	beq.n	800de42 <pbuf_copy+0x146>
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	895a      	ldrh	r2, [r3, #10]
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	891b      	ldrh	r3, [r3, #8]
 800de22:	429a      	cmp	r2, r3
 800de24:	d10d      	bne.n	800de42 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d009      	beq.n	800de42 <pbuf_copy+0x146>
 800de2e:	4b15      	ldr	r3, [pc, #84]	; (800de84 <pbuf_copy+0x188>)
 800de30:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800de34:	4919      	ldr	r1, [pc, #100]	; (800de9c <pbuf_copy+0x1a0>)
 800de36:	4815      	ldr	r0, [pc, #84]	; (800de8c <pbuf_copy+0x190>)
 800de38:	f008 fe30 	bl	8016a9c <iprintf>
 800de3c:	f06f 0305 	mvn.w	r3, #5
 800de40:	e01b      	b.n	800de7a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d013      	beq.n	800de70 <pbuf_copy+0x174>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	895a      	ldrh	r2, [r3, #10]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	891b      	ldrh	r3, [r3, #8]
 800de50:	429a      	cmp	r2, r3
 800de52:	d10d      	bne.n	800de70 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d009      	beq.n	800de70 <pbuf_copy+0x174>
 800de5c:	4b09      	ldr	r3, [pc, #36]	; (800de84 <pbuf_copy+0x188>)
 800de5e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800de62:	490e      	ldr	r1, [pc, #56]	; (800de9c <pbuf_copy+0x1a0>)
 800de64:	4809      	ldr	r0, [pc, #36]	; (800de8c <pbuf_copy+0x190>)
 800de66:	f008 fe19 	bl	8016a9c <iprintf>
 800de6a:	f06f 0305 	mvn.w	r3, #5
 800de6e:	e004      	b.n	800de7a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	f47f af61 	bne.w	800dd3a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800de78:	2300      	movs	r3, #0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3718      	adds	r7, #24
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	080180f4 	.word	0x080180f4
 800de88:	0801839c 	.word	0x0801839c
 800de8c:	08018154 	.word	0x08018154
 800de90:	080183cc 	.word	0x080183cc
 800de94:	080183e4 	.word	0x080183e4
 800de98:	08018400 	.word	0x08018400
 800de9c:	08018410 	.word	0x08018410

0800dea0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b088      	sub	sp, #32
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	4611      	mov	r1, r2
 800deac:	461a      	mov	r2, r3
 800deae:	460b      	mov	r3, r1
 800deb0:	80fb      	strh	r3, [r7, #6]
 800deb2:	4613      	mov	r3, r2
 800deb4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800deba:	2300      	movs	r3, #0
 800debc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d108      	bne.n	800ded6 <pbuf_copy_partial+0x36>
 800dec4:	4b2b      	ldr	r3, [pc, #172]	; (800df74 <pbuf_copy_partial+0xd4>)
 800dec6:	f240 420a 	movw	r2, #1034	; 0x40a
 800deca:	492b      	ldr	r1, [pc, #172]	; (800df78 <pbuf_copy_partial+0xd8>)
 800decc:	482b      	ldr	r0, [pc, #172]	; (800df7c <pbuf_copy_partial+0xdc>)
 800dece:	f008 fde5 	bl	8016a9c <iprintf>
 800ded2:	2300      	movs	r3, #0
 800ded4:	e04a      	b.n	800df6c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d108      	bne.n	800deee <pbuf_copy_partial+0x4e>
 800dedc:	4b25      	ldr	r3, [pc, #148]	; (800df74 <pbuf_copy_partial+0xd4>)
 800dede:	f240 420b 	movw	r2, #1035	; 0x40b
 800dee2:	4927      	ldr	r1, [pc, #156]	; (800df80 <pbuf_copy_partial+0xe0>)
 800dee4:	4825      	ldr	r0, [pc, #148]	; (800df7c <pbuf_copy_partial+0xdc>)
 800dee6:	f008 fdd9 	bl	8016a9c <iprintf>
 800deea:	2300      	movs	r3, #0
 800deec:	e03e      	b.n	800df6c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	61fb      	str	r3, [r7, #28]
 800def2:	e034      	b.n	800df5e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800def4:	88bb      	ldrh	r3, [r7, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00a      	beq.n	800df10 <pbuf_copy_partial+0x70>
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	895b      	ldrh	r3, [r3, #10]
 800defe:	88ba      	ldrh	r2, [r7, #4]
 800df00:	429a      	cmp	r2, r3
 800df02:	d305      	bcc.n	800df10 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	895b      	ldrh	r3, [r3, #10]
 800df08:	88ba      	ldrh	r2, [r7, #4]
 800df0a:	1ad3      	subs	r3, r2, r3
 800df0c:	80bb      	strh	r3, [r7, #4]
 800df0e:	e023      	b.n	800df58 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	895a      	ldrh	r2, [r3, #10]
 800df14:	88bb      	ldrh	r3, [r7, #4]
 800df16:	1ad3      	subs	r3, r2, r3
 800df18:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800df1a:	8b3a      	ldrh	r2, [r7, #24]
 800df1c:	88fb      	ldrh	r3, [r7, #6]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d901      	bls.n	800df26 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800df22:	88fb      	ldrh	r3, [r7, #6]
 800df24:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800df26:	8b7b      	ldrh	r3, [r7, #26]
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	18d0      	adds	r0, r2, r3
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	685a      	ldr	r2, [r3, #4]
 800df30:	88bb      	ldrh	r3, [r7, #4]
 800df32:	4413      	add	r3, r2
 800df34:	8b3a      	ldrh	r2, [r7, #24]
 800df36:	4619      	mov	r1, r3
 800df38:	f008 fd3f 	bl	80169ba <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800df3c:	8afa      	ldrh	r2, [r7, #22]
 800df3e:	8b3b      	ldrh	r3, [r7, #24]
 800df40:	4413      	add	r3, r2
 800df42:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800df44:	8b7a      	ldrh	r2, [r7, #26]
 800df46:	8b3b      	ldrh	r3, [r7, #24]
 800df48:	4413      	add	r3, r2
 800df4a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800df4c:	88fa      	ldrh	r2, [r7, #6]
 800df4e:	8b3b      	ldrh	r3, [r7, #24]
 800df50:	1ad3      	subs	r3, r2, r3
 800df52:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800df54:	2300      	movs	r3, #0
 800df56:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	61fb      	str	r3, [r7, #28]
 800df5e:	88fb      	ldrh	r3, [r7, #6]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d002      	beq.n	800df6a <pbuf_copy_partial+0xca>
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1c4      	bne.n	800def4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800df6a:	8afb      	ldrh	r3, [r7, #22]
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3720      	adds	r7, #32
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	080180f4 	.word	0x080180f4
 800df78:	0801843c 	.word	0x0801843c
 800df7c:	08018154 	.word	0x08018154
 800df80:	0801845c 	.word	0x0801845c

0800df84 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	603a      	str	r2, [r7, #0]
 800df8e:	71fb      	strb	r3, [r7, #7]
 800df90:	460b      	mov	r3, r1
 800df92:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	8919      	ldrh	r1, [r3, #8]
 800df98:	88ba      	ldrh	r2, [r7, #4]
 800df9a:	79fb      	ldrb	r3, [r7, #7]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7ff fa91 	bl	800d4c4 <pbuf_alloc>
 800dfa2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d101      	bne.n	800dfae <pbuf_clone+0x2a>
    return NULL;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	e011      	b.n	800dfd2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dfae:	6839      	ldr	r1, [r7, #0]
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f7ff fea3 	bl	800dcfc <pbuf_copy>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dfba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d006      	beq.n	800dfd0 <pbuf_clone+0x4c>
 800dfc2:	4b06      	ldr	r3, [pc, #24]	; (800dfdc <pbuf_clone+0x58>)
 800dfc4:	f240 5224 	movw	r2, #1316	; 0x524
 800dfc8:	4905      	ldr	r1, [pc, #20]	; (800dfe0 <pbuf_clone+0x5c>)
 800dfca:	4806      	ldr	r0, [pc, #24]	; (800dfe4 <pbuf_clone+0x60>)
 800dfcc:	f008 fd66 	bl	8016a9c <iprintf>
  return q;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3710      	adds	r7, #16
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	080180f4 	.word	0x080180f4
 800dfe0:	08018568 	.word	0x08018568
 800dfe4:	08018154 	.word	0x08018154

0800dfe8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dfec:	f008 fd6e 	bl	8016acc <rand>
 800dff0:	4603      	mov	r3, r0
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dffe:	b29a      	uxth	r2, r3
 800e000:	4b01      	ldr	r3, [pc, #4]	; (800e008 <tcp_init+0x20>)
 800e002:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e004:	bf00      	nop
 800e006:	bd80      	pop	{r7, pc}
 800e008:	24000028 	.word	0x24000028

0800e00c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	7d1b      	ldrb	r3, [r3, #20]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d105      	bne.n	800e028 <tcp_free+0x1c>
 800e01c:	4b06      	ldr	r3, [pc, #24]	; (800e038 <tcp_free+0x2c>)
 800e01e:	22d4      	movs	r2, #212	; 0xd4
 800e020:	4906      	ldr	r1, [pc, #24]	; (800e03c <tcp_free+0x30>)
 800e022:	4807      	ldr	r0, [pc, #28]	; (800e040 <tcp_free+0x34>)
 800e024:	f008 fd3a 	bl	8016a9c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e028:	6879      	ldr	r1, [r7, #4]
 800e02a:	2001      	movs	r0, #1
 800e02c:	f7fe fdb6 	bl	800cb9c <memp_free>
}
 800e030:	bf00      	nop
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	080185f4 	.word	0x080185f4
 800e03c:	08018624 	.word	0x08018624
 800e040:	08018638 	.word	0x08018638

0800e044 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	7d1b      	ldrb	r3, [r3, #20]
 800e050:	2b01      	cmp	r3, #1
 800e052:	d105      	bne.n	800e060 <tcp_free_listen+0x1c>
 800e054:	4b06      	ldr	r3, [pc, #24]	; (800e070 <tcp_free_listen+0x2c>)
 800e056:	22df      	movs	r2, #223	; 0xdf
 800e058:	4906      	ldr	r1, [pc, #24]	; (800e074 <tcp_free_listen+0x30>)
 800e05a:	4807      	ldr	r0, [pc, #28]	; (800e078 <tcp_free_listen+0x34>)
 800e05c:	f008 fd1e 	bl	8016a9c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e060:	6879      	ldr	r1, [r7, #4]
 800e062:	2002      	movs	r0, #2
 800e064:	f7fe fd9a 	bl	800cb9c <memp_free>
}
 800e068:	bf00      	nop
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	080185f4 	.word	0x080185f4
 800e074:	08018660 	.word	0x08018660
 800e078:	08018638 	.word	0x08018638

0800e07c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e080:	f000 fea4 	bl	800edcc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e084:	4b07      	ldr	r3, [pc, #28]	; (800e0a4 <tcp_tmr+0x28>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	3301      	adds	r3, #1
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	4b05      	ldr	r3, [pc, #20]	; (800e0a4 <tcp_tmr+0x28>)
 800e08e:	701a      	strb	r2, [r3, #0]
 800e090:	4b04      	ldr	r3, [pc, #16]	; (800e0a4 <tcp_tmr+0x28>)
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	f003 0301 	and.w	r3, r3, #1
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d001      	beq.n	800e0a0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e09c:	f000 fb56 	bl	800e74c <tcp_slowtmr>
  }
}
 800e0a0:	bf00      	nop
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	2406451d 	.word	0x2406451d

0800e0a8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d105      	bne.n	800e0c4 <tcp_remove_listener+0x1c>
 800e0b8:	4b0d      	ldr	r3, [pc, #52]	; (800e0f0 <tcp_remove_listener+0x48>)
 800e0ba:	22ff      	movs	r2, #255	; 0xff
 800e0bc:	490d      	ldr	r1, [pc, #52]	; (800e0f4 <tcp_remove_listener+0x4c>)
 800e0be:	480e      	ldr	r0, [pc, #56]	; (800e0f8 <tcp_remove_listener+0x50>)
 800e0c0:	f008 fcec 	bl	8016a9c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	60fb      	str	r3, [r7, #12]
 800e0c8:	e00a      	b.n	800e0e0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0ce:	683a      	ldr	r2, [r7, #0]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d102      	bne.n	800e0da <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	60fb      	str	r3, [r7, #12]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d1f1      	bne.n	800e0ca <tcp_remove_listener+0x22>
    }
  }
}
 800e0e6:	bf00      	nop
 800e0e8:	bf00      	nop
 800e0ea:	3710      	adds	r7, #16
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	080185f4 	.word	0x080185f4
 800e0f4:	0801867c 	.word	0x0801867c
 800e0f8:	08018638 	.word	0x08018638

0800e0fc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d106      	bne.n	800e118 <tcp_listen_closed+0x1c>
 800e10a:	4b14      	ldr	r3, [pc, #80]	; (800e15c <tcp_listen_closed+0x60>)
 800e10c:	f240 1211 	movw	r2, #273	; 0x111
 800e110:	4913      	ldr	r1, [pc, #76]	; (800e160 <tcp_listen_closed+0x64>)
 800e112:	4814      	ldr	r0, [pc, #80]	; (800e164 <tcp_listen_closed+0x68>)
 800e114:	f008 fcc2 	bl	8016a9c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	7d1b      	ldrb	r3, [r3, #20]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d006      	beq.n	800e12e <tcp_listen_closed+0x32>
 800e120:	4b0e      	ldr	r3, [pc, #56]	; (800e15c <tcp_listen_closed+0x60>)
 800e122:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e126:	4910      	ldr	r1, [pc, #64]	; (800e168 <tcp_listen_closed+0x6c>)
 800e128:	480e      	ldr	r0, [pc, #56]	; (800e164 <tcp_listen_closed+0x68>)
 800e12a:	f008 fcb7 	bl	8016a9c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e12e:	2301      	movs	r3, #1
 800e130:	60fb      	str	r3, [r7, #12]
 800e132:	e00b      	b.n	800e14c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e134:	4a0d      	ldr	r2, [pc, #52]	; (800e16c <tcp_listen_closed+0x70>)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	6879      	ldr	r1, [r7, #4]
 800e140:	4618      	mov	r0, r3
 800e142:	f7ff ffb1 	bl	800e0a8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	3301      	adds	r3, #1
 800e14a:	60fb      	str	r3, [r7, #12]
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2b03      	cmp	r3, #3
 800e150:	d9f0      	bls.n	800e134 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e152:	bf00      	nop
 800e154:	bf00      	nop
 800e156:	3710      	adds	r7, #16
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	080185f4 	.word	0x080185f4
 800e160:	080186a4 	.word	0x080186a4
 800e164:	08018638 	.word	0x08018638
 800e168:	080186b0 	.word	0x080186b0
 800e16c:	0801a634 	.word	0x0801a634

0800e170 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e170:	b5b0      	push	{r4, r5, r7, lr}
 800e172:	b088      	sub	sp, #32
 800e174:	af04      	add	r7, sp, #16
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	460b      	mov	r3, r1
 800e17a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d106      	bne.n	800e190 <tcp_close_shutdown+0x20>
 800e182:	4b63      	ldr	r3, [pc, #396]	; (800e310 <tcp_close_shutdown+0x1a0>)
 800e184:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e188:	4962      	ldr	r1, [pc, #392]	; (800e314 <tcp_close_shutdown+0x1a4>)
 800e18a:	4863      	ldr	r0, [pc, #396]	; (800e318 <tcp_close_shutdown+0x1a8>)
 800e18c:	f008 fc86 	bl	8016a9c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e190:	78fb      	ldrb	r3, [r7, #3]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d067      	beq.n	800e266 <tcp_close_shutdown+0xf6>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	7d1b      	ldrb	r3, [r3, #20]
 800e19a:	2b04      	cmp	r3, #4
 800e19c:	d003      	beq.n	800e1a6 <tcp_close_shutdown+0x36>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	7d1b      	ldrb	r3, [r3, #20]
 800e1a2:	2b07      	cmp	r3, #7
 800e1a4:	d15f      	bne.n	800e266 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d105      	bne.n	800e1ba <tcp_close_shutdown+0x4a>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1b2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d055      	beq.n	800e266 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	8b5b      	ldrh	r3, [r3, #26]
 800e1be:	f003 0310 	and.w	r3, r3, #16
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d106      	bne.n	800e1d4 <tcp_close_shutdown+0x64>
 800e1c6:	4b52      	ldr	r3, [pc, #328]	; (800e310 <tcp_close_shutdown+0x1a0>)
 800e1c8:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e1cc:	4953      	ldr	r1, [pc, #332]	; (800e31c <tcp_close_shutdown+0x1ac>)
 800e1ce:	4852      	ldr	r0, [pc, #328]	; (800e318 <tcp_close_shutdown+0x1a8>)
 800e1d0:	f008 fc64 	bl	8016a9c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e1dc:	687d      	ldr	r5, [r7, #4]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	3304      	adds	r3, #4
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	8ad2      	ldrh	r2, [r2, #22]
 800e1e6:	6879      	ldr	r1, [r7, #4]
 800e1e8:	8b09      	ldrh	r1, [r1, #24]
 800e1ea:	9102      	str	r1, [sp, #8]
 800e1ec:	9201      	str	r2, [sp, #4]
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	462b      	mov	r3, r5
 800e1f2:	4622      	mov	r2, r4
 800e1f4:	4601      	mov	r1, r0
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f004 fe92 	bl	8012f20 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f001 f8c9 	bl	800f394 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e202:	4b47      	ldr	r3, [pc, #284]	; (800e320 <tcp_close_shutdown+0x1b0>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d105      	bne.n	800e218 <tcp_close_shutdown+0xa8>
 800e20c:	4b44      	ldr	r3, [pc, #272]	; (800e320 <tcp_close_shutdown+0x1b0>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	68db      	ldr	r3, [r3, #12]
 800e212:	4a43      	ldr	r2, [pc, #268]	; (800e320 <tcp_close_shutdown+0x1b0>)
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	e013      	b.n	800e240 <tcp_close_shutdown+0xd0>
 800e218:	4b41      	ldr	r3, [pc, #260]	; (800e320 <tcp_close_shutdown+0x1b0>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	60fb      	str	r3, [r7, #12]
 800e21e:	e00c      	b.n	800e23a <tcp_close_shutdown+0xca>
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	687a      	ldr	r2, [r7, #4]
 800e226:	429a      	cmp	r2, r3
 800e228:	d104      	bne.n	800e234 <tcp_close_shutdown+0xc4>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	68da      	ldr	r2, [r3, #12]
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	60da      	str	r2, [r3, #12]
 800e232:	e005      	b.n	800e240 <tcp_close_shutdown+0xd0>
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	60fb      	str	r3, [r7, #12]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1ef      	bne.n	800e220 <tcp_close_shutdown+0xb0>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	60da      	str	r2, [r3, #12]
 800e246:	4b37      	ldr	r3, [pc, #220]	; (800e324 <tcp_close_shutdown+0x1b4>)
 800e248:	2201      	movs	r2, #1
 800e24a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e24c:	4b36      	ldr	r3, [pc, #216]	; (800e328 <tcp_close_shutdown+0x1b8>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	429a      	cmp	r2, r3
 800e254:	d102      	bne.n	800e25c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e256:	f003 fd5f 	bl	8011d18 <tcp_trigger_input_pcb_close>
 800e25a:	e002      	b.n	800e262 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f7ff fed5 	bl	800e00c <tcp_free>
      }
      return ERR_OK;
 800e262:	2300      	movs	r3, #0
 800e264:	e050      	b.n	800e308 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	7d1b      	ldrb	r3, [r3, #20]
 800e26a:	2b02      	cmp	r3, #2
 800e26c:	d03b      	beq.n	800e2e6 <tcp_close_shutdown+0x176>
 800e26e:	2b02      	cmp	r3, #2
 800e270:	dc44      	bgt.n	800e2fc <tcp_close_shutdown+0x18c>
 800e272:	2b00      	cmp	r3, #0
 800e274:	d002      	beq.n	800e27c <tcp_close_shutdown+0x10c>
 800e276:	2b01      	cmp	r3, #1
 800e278:	d02a      	beq.n	800e2d0 <tcp_close_shutdown+0x160>
 800e27a:	e03f      	b.n	800e2fc <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	8adb      	ldrh	r3, [r3, #22]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d021      	beq.n	800e2c8 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e284:	4b29      	ldr	r3, [pc, #164]	; (800e32c <tcp_close_shutdown+0x1bc>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d105      	bne.n	800e29a <tcp_close_shutdown+0x12a>
 800e28e:	4b27      	ldr	r3, [pc, #156]	; (800e32c <tcp_close_shutdown+0x1bc>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	4a25      	ldr	r2, [pc, #148]	; (800e32c <tcp_close_shutdown+0x1bc>)
 800e296:	6013      	str	r3, [r2, #0]
 800e298:	e013      	b.n	800e2c2 <tcp_close_shutdown+0x152>
 800e29a:	4b24      	ldr	r3, [pc, #144]	; (800e32c <tcp_close_shutdown+0x1bc>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	60bb      	str	r3, [r7, #8]
 800e2a0:	e00c      	b.n	800e2bc <tcp_close_shutdown+0x14c>
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d104      	bne.n	800e2b6 <tcp_close_shutdown+0x146>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	68da      	ldr	r2, [r3, #12]
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	60da      	str	r2, [r3, #12]
 800e2b4:	e005      	b.n	800e2c2 <tcp_close_shutdown+0x152>
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	60bb      	str	r3, [r7, #8]
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1ef      	bne.n	800e2a2 <tcp_close_shutdown+0x132>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f7ff fe9f 	bl	800e00c <tcp_free>
      break;
 800e2ce:	e01a      	b.n	800e306 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7ff ff13 	bl	800e0fc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e2d6:	6879      	ldr	r1, [r7, #4]
 800e2d8:	4815      	ldr	r0, [pc, #84]	; (800e330 <tcp_close_shutdown+0x1c0>)
 800e2da:	f001 f8ab 	bl	800f434 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7ff feb0 	bl	800e044 <tcp_free_listen>
      break;
 800e2e4:	e00f      	b.n	800e306 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e2e6:	6879      	ldr	r1, [r7, #4]
 800e2e8:	480d      	ldr	r0, [pc, #52]	; (800e320 <tcp_close_shutdown+0x1b0>)
 800e2ea:	f001 f8a3 	bl	800f434 <tcp_pcb_remove>
 800e2ee:	4b0d      	ldr	r3, [pc, #52]	; (800e324 <tcp_close_shutdown+0x1b4>)
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f7ff fe89 	bl	800e00c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e2fa:	e004      	b.n	800e306 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 f819 	bl	800e334 <tcp_close_shutdown_fin>
 800e302:	4603      	mov	r3, r0
 800e304:	e000      	b.n	800e308 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800e306:	2300      	movs	r3, #0
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3710      	adds	r7, #16
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bdb0      	pop	{r4, r5, r7, pc}
 800e310:	080185f4 	.word	0x080185f4
 800e314:	080186c8 	.word	0x080186c8
 800e318:	08018638 	.word	0x08018638
 800e31c:	080186e8 	.word	0x080186e8
 800e320:	2406b460 	.word	0x2406b460
 800e324:	2406b45c 	.word	0x2406b45c
 800e328:	2406b474 	.word	0x2406b474
 800e32c:	2406b46c 	.word	0x2406b46c
 800e330:	2406b468 	.word	0x2406b468

0800e334 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d106      	bne.n	800e350 <tcp_close_shutdown_fin+0x1c>
 800e342:	4b2e      	ldr	r3, [pc, #184]	; (800e3fc <tcp_close_shutdown_fin+0xc8>)
 800e344:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e348:	492d      	ldr	r1, [pc, #180]	; (800e400 <tcp_close_shutdown_fin+0xcc>)
 800e34a:	482e      	ldr	r0, [pc, #184]	; (800e404 <tcp_close_shutdown_fin+0xd0>)
 800e34c:	f008 fba6 	bl	8016a9c <iprintf>

  switch (pcb->state) {
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	7d1b      	ldrb	r3, [r3, #20]
 800e354:	2b07      	cmp	r3, #7
 800e356:	d020      	beq.n	800e39a <tcp_close_shutdown_fin+0x66>
 800e358:	2b07      	cmp	r3, #7
 800e35a:	dc2b      	bgt.n	800e3b4 <tcp_close_shutdown_fin+0x80>
 800e35c:	2b03      	cmp	r3, #3
 800e35e:	d002      	beq.n	800e366 <tcp_close_shutdown_fin+0x32>
 800e360:	2b04      	cmp	r3, #4
 800e362:	d00d      	beq.n	800e380 <tcp_close_shutdown_fin+0x4c>
 800e364:	e026      	b.n	800e3b4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f003 fee8 	bl	801213c <tcp_send_fin>
 800e36c:	4603      	mov	r3, r0
 800e36e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d11f      	bne.n	800e3b8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2205      	movs	r2, #5
 800e37c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e37e:	e01b      	b.n	800e3b8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f003 fedb 	bl	801213c <tcp_send_fin>
 800e386:	4603      	mov	r3, r0
 800e388:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e38a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d114      	bne.n	800e3bc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2205      	movs	r2, #5
 800e396:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e398:	e010      	b.n	800e3bc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f003 fece 	bl	801213c <tcp_send_fin>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e3a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d109      	bne.n	800e3c0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2209      	movs	r2, #9
 800e3b0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e3b2:	e005      	b.n	800e3c0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	e01c      	b.n	800e3f2 <tcp_close_shutdown_fin+0xbe>
      break;
 800e3b8:	bf00      	nop
 800e3ba:	e002      	b.n	800e3c2 <tcp_close_shutdown_fin+0x8e>
      break;
 800e3bc:	bf00      	nop
 800e3be:	e000      	b.n	800e3c2 <tcp_close_shutdown_fin+0x8e>
      break;
 800e3c0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d103      	bne.n	800e3d2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f003 fff4 	bl	80123b8 <tcp_output>
 800e3d0:	e00d      	b.n	800e3ee <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e3d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3da:	d108      	bne.n	800e3ee <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	8b5b      	ldrh	r3, [r3, #26]
 800e3e0:	f043 0308 	orr.w	r3, r3, #8
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	e001      	b.n	800e3f2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	080185f4 	.word	0x080185f4
 800e400:	080186a4 	.word	0x080186a4
 800e404:	08018638 	.word	0x08018638

0800e408 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d109      	bne.n	800e42a <tcp_close+0x22>
 800e416:	4b0f      	ldr	r3, [pc, #60]	; (800e454 <tcp_close+0x4c>)
 800e418:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e41c:	490e      	ldr	r1, [pc, #56]	; (800e458 <tcp_close+0x50>)
 800e41e:	480f      	ldr	r0, [pc, #60]	; (800e45c <tcp_close+0x54>)
 800e420:	f008 fb3c 	bl	8016a9c <iprintf>
 800e424:	f06f 030f 	mvn.w	r3, #15
 800e428:	e00f      	b.n	800e44a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	7d1b      	ldrb	r3, [r3, #20]
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d006      	beq.n	800e440 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	8b5b      	ldrh	r3, [r3, #26]
 800e436:	f043 0310 	orr.w	r3, r3, #16
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e440:	2101      	movs	r1, #1
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f7ff fe94 	bl	800e170 <tcp_close_shutdown>
 800e448:	4603      	mov	r3, r0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3708      	adds	r7, #8
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	080185f4 	.word	0x080185f4
 800e458:	08018704 	.word	0x08018704
 800e45c:	08018638 	.word	0x08018638

0800e460 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b08e      	sub	sp, #56	; 0x38
 800e464:	af04      	add	r7, sp, #16
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d107      	bne.n	800e480 <tcp_abandon+0x20>
 800e470:	4b52      	ldr	r3, [pc, #328]	; (800e5bc <tcp_abandon+0x15c>)
 800e472:	f240 223d 	movw	r2, #573	; 0x23d
 800e476:	4952      	ldr	r1, [pc, #328]	; (800e5c0 <tcp_abandon+0x160>)
 800e478:	4852      	ldr	r0, [pc, #328]	; (800e5c4 <tcp_abandon+0x164>)
 800e47a:	f008 fb0f 	bl	8016a9c <iprintf>
 800e47e:	e099      	b.n	800e5b4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	7d1b      	ldrb	r3, [r3, #20]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d106      	bne.n	800e496 <tcp_abandon+0x36>
 800e488:	4b4c      	ldr	r3, [pc, #304]	; (800e5bc <tcp_abandon+0x15c>)
 800e48a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e48e:	494e      	ldr	r1, [pc, #312]	; (800e5c8 <tcp_abandon+0x168>)
 800e490:	484c      	ldr	r0, [pc, #304]	; (800e5c4 <tcp_abandon+0x164>)
 800e492:	f008 fb03 	bl	8016a9c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	7d1b      	ldrb	r3, [r3, #20]
 800e49a:	2b0a      	cmp	r3, #10
 800e49c:	d107      	bne.n	800e4ae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e49e:	6879      	ldr	r1, [r7, #4]
 800e4a0:	484a      	ldr	r0, [pc, #296]	; (800e5cc <tcp_abandon+0x16c>)
 800e4a2:	f000 ffc7 	bl	800f434 <tcp_pcb_remove>
    tcp_free(pcb);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f7ff fdb0 	bl	800e00c <tcp_free>
 800e4ac:	e082      	b.n	800e5b4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4ba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4c8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	691b      	ldr	r3, [r3, #16]
 800e4ce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	7d1b      	ldrb	r3, [r3, #20]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d126      	bne.n	800e526 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	8adb      	ldrh	r3, [r3, #22]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d02e      	beq.n	800e53e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e4e0:	4b3b      	ldr	r3, [pc, #236]	; (800e5d0 <tcp_abandon+0x170>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d105      	bne.n	800e4f6 <tcp_abandon+0x96>
 800e4ea:	4b39      	ldr	r3, [pc, #228]	; (800e5d0 <tcp_abandon+0x170>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	4a37      	ldr	r2, [pc, #220]	; (800e5d0 <tcp_abandon+0x170>)
 800e4f2:	6013      	str	r3, [r2, #0]
 800e4f4:	e013      	b.n	800e51e <tcp_abandon+0xbe>
 800e4f6:	4b36      	ldr	r3, [pc, #216]	; (800e5d0 <tcp_abandon+0x170>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	61fb      	str	r3, [r7, #28]
 800e4fc:	e00c      	b.n	800e518 <tcp_abandon+0xb8>
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	429a      	cmp	r2, r3
 800e506:	d104      	bne.n	800e512 <tcp_abandon+0xb2>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	68da      	ldr	r2, [r3, #12]
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	60da      	str	r2, [r3, #12]
 800e510:	e005      	b.n	800e51e <tcp_abandon+0xbe>
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	61fb      	str	r3, [r7, #28]
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1ef      	bne.n	800e4fe <tcp_abandon+0x9e>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2200      	movs	r2, #0
 800e522:	60da      	str	r2, [r3, #12]
 800e524:	e00b      	b.n	800e53e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	8adb      	ldrh	r3, [r3, #22]
 800e52e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e530:	6879      	ldr	r1, [r7, #4]
 800e532:	4828      	ldr	r0, [pc, #160]	; (800e5d4 <tcp_abandon+0x174>)
 800e534:	f000 ff7e 	bl	800f434 <tcp_pcb_remove>
 800e538:	4b27      	ldr	r3, [pc, #156]	; (800e5d8 <tcp_abandon+0x178>)
 800e53a:	2201      	movs	r2, #1
 800e53c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e542:	2b00      	cmp	r3, #0
 800e544:	d004      	beq.n	800e550 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e54a:	4618      	mov	r0, r3
 800e54c:	f000 fd20 	bl	800ef90 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e554:	2b00      	cmp	r3, #0
 800e556:	d004      	beq.n	800e562 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e55c:	4618      	mov	r0, r3
 800e55e:	f000 fd17 	bl	800ef90 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e566:	2b00      	cmp	r3, #0
 800e568:	d004      	beq.n	800e574 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e56e:	4618      	mov	r0, r3
 800e570:	f000 fd0e 	bl	800ef90 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00e      	beq.n	800e598 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e57a:	6879      	ldr	r1, [r7, #4]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	3304      	adds	r3, #4
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	8b12      	ldrh	r2, [r2, #24]
 800e584:	9202      	str	r2, [sp, #8]
 800e586:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e588:	9201      	str	r2, [sp, #4]
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	460b      	mov	r3, r1
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	69b9      	ldr	r1, [r7, #24]
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f004 fcc4 	bl	8012f20 <tcp_rst>
    }
    last_state = pcb->state;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	7d1b      	ldrb	r3, [r3, #20]
 800e59c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff fd34 	bl	800e00c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d004      	beq.n	800e5b4 <tcp_abandon+0x154>
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	f06f 010c 	mvn.w	r1, #12
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	4798      	blx	r3
  }
}
 800e5b4:	3728      	adds	r7, #40	; 0x28
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	080185f4 	.word	0x080185f4
 800e5c0:	08018738 	.word	0x08018738
 800e5c4:	08018638 	.word	0x08018638
 800e5c8:	08018754 	.word	0x08018754
 800e5cc:	2406b470 	.word	0x2406b470
 800e5d0:	2406b46c 	.word	0x2406b46c
 800e5d4:	2406b460 	.word	0x2406b460
 800e5d8:	2406b45c 	.word	0x2406b45c

0800e5dc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e5e4:	2101      	movs	r1, #1
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f7ff ff3a 	bl	800e460 <tcp_abandon>
}
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d106      	bne.n	800e610 <tcp_update_rcv_ann_wnd+0x1c>
 800e602:	4b25      	ldr	r3, [pc, #148]	; (800e698 <tcp_update_rcv_ann_wnd+0xa4>)
 800e604:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e608:	4924      	ldr	r1, [pc, #144]	; (800e69c <tcp_update_rcv_ann_wnd+0xa8>)
 800e60a:	4825      	ldr	r0, [pc, #148]	; (800e6a0 <tcp_update_rcv_ann_wnd+0xac>)
 800e60c:	f008 fa46 	bl	8016a9c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e618:	4413      	add	r3, r2
 800e61a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e624:	f640 3168 	movw	r1, #2920	; 0xb68
 800e628:	428a      	cmp	r2, r1
 800e62a:	bf28      	it	cs
 800e62c:	460a      	movcs	r2, r1
 800e62e:	b292      	uxth	r2, r2
 800e630:	4413      	add	r3, r2
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	1ad3      	subs	r3, r2, r3
 800e636:	2b00      	cmp	r3, #0
 800e638:	db08      	blt.n	800e64c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e646:	68fa      	ldr	r2, [r7, #12]
 800e648:	1ad3      	subs	r3, r2, r3
 800e64a:	e020      	b.n	800e68e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e654:	1ad3      	subs	r3, r2, r3
 800e656:	2b00      	cmp	r3, #0
 800e658:	dd03      	ble.n	800e662 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2200      	movs	r2, #0
 800e65e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e660:	e014      	b.n	800e68c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e674:	d306      	bcc.n	800e684 <tcp_update_rcv_ann_wnd+0x90>
 800e676:	4b08      	ldr	r3, [pc, #32]	; (800e698 <tcp_update_rcv_ann_wnd+0xa4>)
 800e678:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e67c:	4909      	ldr	r1, [pc, #36]	; (800e6a4 <tcp_update_rcv_ann_wnd+0xb0>)
 800e67e:	4808      	ldr	r0, [pc, #32]	; (800e6a0 <tcp_update_rcv_ann_wnd+0xac>)
 800e680:	f008 fa0c 	bl	8016a9c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	b29a      	uxth	r2, r3
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e68c:	2300      	movs	r3, #0
  }
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	080185f4 	.word	0x080185f4
 800e69c:	08018850 	.word	0x08018850
 800e6a0:	08018638 	.word	0x08018638
 800e6a4:	08018874 	.word	0x08018874

0800e6a8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d107      	bne.n	800e6ca <tcp_recved+0x22>
 800e6ba:	4b20      	ldr	r3, [pc, #128]	; (800e73c <tcp_recved+0x94>)
 800e6bc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e6c0:	491f      	ldr	r1, [pc, #124]	; (800e740 <tcp_recved+0x98>)
 800e6c2:	4820      	ldr	r0, [pc, #128]	; (800e744 <tcp_recved+0x9c>)
 800e6c4:	f008 f9ea 	bl	8016a9c <iprintf>
 800e6c8:	e034      	b.n	800e734 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	7d1b      	ldrb	r3, [r3, #20]
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d106      	bne.n	800e6e0 <tcp_recved+0x38>
 800e6d2:	4b1a      	ldr	r3, [pc, #104]	; (800e73c <tcp_recved+0x94>)
 800e6d4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e6d8:	491b      	ldr	r1, [pc, #108]	; (800e748 <tcp_recved+0xa0>)
 800e6da:	481a      	ldr	r0, [pc, #104]	; (800e744 <tcp_recved+0x9c>)
 800e6dc:	f008 f9de 	bl	8016a9c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e6e4:	887b      	ldrh	r3, [r7, #2]
 800e6e6:	4413      	add	r3, r2
 800e6e8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e6ea:	89fb      	ldrh	r3, [r7, #14]
 800e6ec:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d804      	bhi.n	800e6fe <tcp_recved+0x56>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6f8:	89fa      	ldrh	r2, [r7, #14]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d204      	bcs.n	800e708 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800e704:	851a      	strh	r2, [r3, #40]	; 0x28
 800e706:	e002      	b.n	800e70e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	89fa      	ldrh	r2, [r7, #14]
 800e70c:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f7ff ff70 	bl	800e5f4 <tcp_update_rcv_ann_wnd>
 800e714:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d909      	bls.n	800e734 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	8b5b      	ldrh	r3, [r3, #26]
 800e724:	f043 0302 	orr.w	r3, r3, #2
 800e728:	b29a      	uxth	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f003 fe42 	bl	80123b8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e734:	3710      	adds	r7, #16
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	080185f4 	.word	0x080185f4
 800e740:	08018890 	.word	0x08018890
 800e744:	08018638 	.word	0x08018638
 800e748:	080188a8 	.word	0x080188a8

0800e74c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e74c:	b5b0      	push	{r4, r5, r7, lr}
 800e74e:	b090      	sub	sp, #64	; 0x40
 800e750:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e752:	2300      	movs	r3, #0
 800e754:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e758:	4b94      	ldr	r3, [pc, #592]	; (800e9ac <tcp_slowtmr+0x260>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	3301      	adds	r3, #1
 800e75e:	4a93      	ldr	r2, [pc, #588]	; (800e9ac <tcp_slowtmr+0x260>)
 800e760:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e762:	4b93      	ldr	r3, [pc, #588]	; (800e9b0 <tcp_slowtmr+0x264>)
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	3301      	adds	r3, #1
 800e768:	b2da      	uxtb	r2, r3
 800e76a:	4b91      	ldr	r3, [pc, #580]	; (800e9b0 <tcp_slowtmr+0x264>)
 800e76c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e76e:	2300      	movs	r3, #0
 800e770:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e772:	4b90      	ldr	r3, [pc, #576]	; (800e9b4 <tcp_slowtmr+0x268>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e778:	e29d      	b.n	800ecb6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77c:	7d1b      	ldrb	r3, [r3, #20]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d106      	bne.n	800e790 <tcp_slowtmr+0x44>
 800e782:	4b8d      	ldr	r3, [pc, #564]	; (800e9b8 <tcp_slowtmr+0x26c>)
 800e784:	f240 42be 	movw	r2, #1214	; 0x4be
 800e788:	498c      	ldr	r1, [pc, #560]	; (800e9bc <tcp_slowtmr+0x270>)
 800e78a:	488d      	ldr	r0, [pc, #564]	; (800e9c0 <tcp_slowtmr+0x274>)
 800e78c:	f008 f986 	bl	8016a9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	7d1b      	ldrb	r3, [r3, #20]
 800e794:	2b01      	cmp	r3, #1
 800e796:	d106      	bne.n	800e7a6 <tcp_slowtmr+0x5a>
 800e798:	4b87      	ldr	r3, [pc, #540]	; (800e9b8 <tcp_slowtmr+0x26c>)
 800e79a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e79e:	4989      	ldr	r1, [pc, #548]	; (800e9c4 <tcp_slowtmr+0x278>)
 800e7a0:	4887      	ldr	r0, [pc, #540]	; (800e9c0 <tcp_slowtmr+0x274>)
 800e7a2:	f008 f97b 	bl	8016a9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a8:	7d1b      	ldrb	r3, [r3, #20]
 800e7aa:	2b0a      	cmp	r3, #10
 800e7ac:	d106      	bne.n	800e7bc <tcp_slowtmr+0x70>
 800e7ae:	4b82      	ldr	r3, [pc, #520]	; (800e9b8 <tcp_slowtmr+0x26c>)
 800e7b0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e7b4:	4984      	ldr	r1, [pc, #528]	; (800e9c8 <tcp_slowtmr+0x27c>)
 800e7b6:	4882      	ldr	r0, [pc, #520]	; (800e9c0 <tcp_slowtmr+0x274>)
 800e7b8:	f008 f970 	bl	8016a9c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7be:	7f9a      	ldrb	r2, [r3, #30]
 800e7c0:	4b7b      	ldr	r3, [pc, #492]	; (800e9b0 <tcp_slowtmr+0x264>)
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d105      	bne.n	800e7d4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ce:	68db      	ldr	r3, [r3, #12]
 800e7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e7d2:	e270      	b.n	800ecb6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e7d4:	4b76      	ldr	r3, [pc, #472]	; (800e9b0 <tcp_slowtmr+0x264>)
 800e7d6:	781a      	ldrb	r2, [r3, #0]
 800e7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7da:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ea:	7d1b      	ldrb	r3, [r3, #20]
 800e7ec:	2b02      	cmp	r3, #2
 800e7ee:	d10a      	bne.n	800e806 <tcp_slowtmr+0xba>
 800e7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7f6:	2b05      	cmp	r3, #5
 800e7f8:	d905      	bls.n	800e806 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e7fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7fe:	3301      	adds	r3, #1
 800e800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e804:	e11e      	b.n	800ea44 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e808:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e80c:	2b0b      	cmp	r3, #11
 800e80e:	d905      	bls.n	800e81c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e814:	3301      	adds	r3, #1
 800e816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e81a:	e113      	b.n	800ea44 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e822:	2b00      	cmp	r3, #0
 800e824:	d075      	beq.n	800e912 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d006      	beq.n	800e83c <tcp_slowtmr+0xf0>
 800e82e:	4b62      	ldr	r3, [pc, #392]	; (800e9b8 <tcp_slowtmr+0x26c>)
 800e830:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e834:	4965      	ldr	r1, [pc, #404]	; (800e9cc <tcp_slowtmr+0x280>)
 800e836:	4862      	ldr	r0, [pc, #392]	; (800e9c0 <tcp_slowtmr+0x274>)
 800e838:	f008 f930 	bl	8016a9c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e840:	2b00      	cmp	r3, #0
 800e842:	d106      	bne.n	800e852 <tcp_slowtmr+0x106>
 800e844:	4b5c      	ldr	r3, [pc, #368]	; (800e9b8 <tcp_slowtmr+0x26c>)
 800e846:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e84a:	4961      	ldr	r1, [pc, #388]	; (800e9d0 <tcp_slowtmr+0x284>)
 800e84c:	485c      	ldr	r0, [pc, #368]	; (800e9c0 <tcp_slowtmr+0x274>)
 800e84e:	f008 f925 	bl	8016a9c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e854:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e858:	2b0b      	cmp	r3, #11
 800e85a:	d905      	bls.n	800e868 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e85c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e860:	3301      	adds	r3, #1
 800e862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e866:	e0ed      	b.n	800ea44 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e86e:	3b01      	subs	r3, #1
 800e870:	4a58      	ldr	r2, [pc, #352]	; (800e9d4 <tcp_slowtmr+0x288>)
 800e872:	5cd3      	ldrb	r3, [r2, r3]
 800e874:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e878:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e87c:	7c7a      	ldrb	r2, [r7, #17]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d907      	bls.n	800e892 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e884:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e888:	3301      	adds	r3, #1
 800e88a:	b2da      	uxtb	r2, r3
 800e88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e894:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e898:	7c7a      	ldrb	r2, [r7, #17]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	f200 80d2 	bhi.w	800ea44 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d108      	bne.n	800e8c0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e8ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8b0:	f004 fc2a 	bl	8013108 <tcp_zero_window_probe>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d014      	beq.n	800e8e4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	623b      	str	r3, [r7, #32]
 800e8be:	e011      	b.n	800e8e4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8ca:	f003 faef 	bl	8011eac <tcp_split_unsent_seg>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d107      	bne.n	800e8e4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e8d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8d6:	f003 fd6f 	bl	80123b8 <tcp_output>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d101      	bne.n	800e8e4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e8e4:	6a3b      	ldr	r3, [r7, #32]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f000 80ac 	beq.w	800ea44 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8fa:	2b06      	cmp	r3, #6
 800e8fc:	f200 80a2 	bhi.w	800ea44 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e902:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e906:	3301      	adds	r3, #1
 800e908:	b2da      	uxtb	r2, r3
 800e90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e910:	e098      	b.n	800ea44 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e914:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e918:	2b00      	cmp	r3, #0
 800e91a:	db0f      	blt.n	800e93c <tcp_slowtmr+0x1f0>
 800e91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e922:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e926:	4293      	cmp	r3, r2
 800e928:	d008      	beq.n	800e93c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e930:	b29b      	uxth	r3, r3
 800e932:	3301      	adds	r3, #1
 800e934:	b29b      	uxth	r3, r3
 800e936:	b21a      	sxth	r2, r3
 800e938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e944:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e948:	429a      	cmp	r2, r3
 800e94a:	db7b      	blt.n	800ea44 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e94c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e94e:	f004 f825 	bl	801299c <tcp_rexmit_rto_prepare>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d007      	beq.n	800e968 <tcp_slowtmr+0x21c>
 800e958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d171      	bne.n	800ea44 <tcp_slowtmr+0x2f8>
 800e960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e964:	2b00      	cmp	r3, #0
 800e966:	d06d      	beq.n	800ea44 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96a:	7d1b      	ldrb	r3, [r3, #20]
 800e96c:	2b02      	cmp	r3, #2
 800e96e:	d03a      	beq.n	800e9e6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e972:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e976:	2b0c      	cmp	r3, #12
 800e978:	bf28      	it	cs
 800e97a:	230c      	movcs	r3, #12
 800e97c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e980:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e984:	10db      	asrs	r3, r3, #3
 800e986:	b21b      	sxth	r3, r3
 800e988:	461a      	mov	r2, r3
 800e98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e990:	4413      	add	r3, r2
 800e992:	7efa      	ldrb	r2, [r7, #27]
 800e994:	4910      	ldr	r1, [pc, #64]	; (800e9d8 <tcp_slowtmr+0x28c>)
 800e996:	5c8a      	ldrb	r2, [r1, r2]
 800e998:	4093      	lsls	r3, r2
 800e99a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	dc1a      	bgt.n	800e9dc <tcp_slowtmr+0x290>
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	b21a      	sxth	r2, r3
 800e9aa:	e019      	b.n	800e9e0 <tcp_slowtmr+0x294>
 800e9ac:	2406b464 	.word	0x2406b464
 800e9b0:	2406451e 	.word	0x2406451e
 800e9b4:	2406b460 	.word	0x2406b460
 800e9b8:	080185f4 	.word	0x080185f4
 800e9bc:	08018938 	.word	0x08018938
 800e9c0:	08018638 	.word	0x08018638
 800e9c4:	08018964 	.word	0x08018964
 800e9c8:	08018990 	.word	0x08018990
 800e9cc:	080189c0 	.word	0x080189c0
 800e9d0:	080189f4 	.word	0x080189f4
 800e9d4:	0801a62c 	.word	0x0801a62c
 800e9d8:	0801a61c 	.word	0x0801a61c
 800e9dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	bf28      	it	cs
 800e9fc:	4613      	movcs	r3, r2
 800e9fe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ea00:	8a7b      	ldrh	r3, [r7, #18]
 800ea02:	085b      	lsrs	r3, r3, #1
 800ea04:	b29a      	uxth	r2, r3
 800ea06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ea0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ea12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea16:	005b      	lsls	r3, r3, #1
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d206      	bcs.n	800ea2c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ea1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea22:	005b      	lsls	r3, r3, #1
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ea2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ea30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ea36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ea3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea40:	f004 f81c 	bl	8012a7c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea46:	7d1b      	ldrb	r3, [r3, #20]
 800ea48:	2b06      	cmp	r3, #6
 800ea4a:	d111      	bne.n	800ea70 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ea4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4e:	8b5b      	ldrh	r3, [r3, #26]
 800ea50:	f003 0310 	and.w	r3, r3, #16
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00b      	beq.n	800ea70 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea58:	4b9c      	ldr	r3, [pc, #624]	; (800eccc <tcp_slowtmr+0x580>)
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	6a1b      	ldr	r3, [r3, #32]
 800ea60:	1ad3      	subs	r3, r2, r3
 800ea62:	2b28      	cmp	r3, #40	; 0x28
 800ea64:	d904      	bls.n	800ea70 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ea66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ea70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea72:	7a5b      	ldrb	r3, [r3, #9]
 800ea74:	f003 0308 	and.w	r3, r3, #8
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d04a      	beq.n	800eb12 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ea7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ea80:	2b04      	cmp	r3, #4
 800ea82:	d003      	beq.n	800ea8c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ea84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea86:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ea88:	2b07      	cmp	r3, #7
 800ea8a:	d142      	bne.n	800eb12 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea8c:	4b8f      	ldr	r3, [pc, #572]	; (800eccc <tcp_slowtmr+0x580>)
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea92:	6a1b      	ldr	r3, [r3, #32]
 800ea94:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ea96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea98:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ea9c:	4b8c      	ldr	r3, [pc, #560]	; (800ecd0 <tcp_slowtmr+0x584>)
 800ea9e:	440b      	add	r3, r1
 800eaa0:	498c      	ldr	r1, [pc, #560]	; (800ecd4 <tcp_slowtmr+0x588>)
 800eaa2:	fba1 1303 	umull	r1, r3, r1, r3
 800eaa6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d90a      	bls.n	800eac2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800eaac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eab0:	3301      	adds	r3, #1
 800eab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800eab6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eaba:	3301      	adds	r3, #1
 800eabc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eac0:	e027      	b.n	800eb12 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eac2:	4b82      	ldr	r3, [pc, #520]	; (800eccc <tcp_slowtmr+0x580>)
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac8:	6a1b      	ldr	r3, [r3, #32]
 800eaca:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800eacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eace:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ead2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ead8:	4618      	mov	r0, r3
 800eada:	4b7f      	ldr	r3, [pc, #508]	; (800ecd8 <tcp_slowtmr+0x58c>)
 800eadc:	fb03 f300 	mul.w	r3, r3, r0
 800eae0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800eae2:	497c      	ldr	r1, [pc, #496]	; (800ecd4 <tcp_slowtmr+0x588>)
 800eae4:	fba1 1303 	umull	r1, r3, r1, r3
 800eae8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d911      	bls.n	800eb12 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800eaee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eaf0:	f004 faca 	bl	8013088 <tcp_keepalive>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800eafa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d107      	bne.n	800eb12 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800eb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb04:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800eb08:	3301      	adds	r3, #1
 800eb0a:	b2da      	uxtb	r2, r3
 800eb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800eb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d011      	beq.n	800eb3e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800eb1a:	4b6c      	ldr	r3, [pc, #432]	; (800eccc <tcp_slowtmr+0x580>)
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb20:	6a1b      	ldr	r3, [r3, #32]
 800eb22:	1ad2      	subs	r2, r2, r3
 800eb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb26:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	005b      	lsls	r3, r3, #1
 800eb30:	440b      	add	r3, r1
 800eb32:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d302      	bcc.n	800eb3e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800eb38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb3a:	f000 fddf 	bl	800f6fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800eb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb40:	7d1b      	ldrb	r3, [r3, #20]
 800eb42:	2b03      	cmp	r3, #3
 800eb44:	d10b      	bne.n	800eb5e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb46:	4b61      	ldr	r3, [pc, #388]	; (800eccc <tcp_slowtmr+0x580>)
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4c:	6a1b      	ldr	r3, [r3, #32]
 800eb4e:	1ad3      	subs	r3, r2, r3
 800eb50:	2b28      	cmp	r3, #40	; 0x28
 800eb52:	d904      	bls.n	800eb5e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800eb54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb58:	3301      	adds	r3, #1
 800eb5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800eb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb60:	7d1b      	ldrb	r3, [r3, #20]
 800eb62:	2b09      	cmp	r3, #9
 800eb64:	d10b      	bne.n	800eb7e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eb66:	4b59      	ldr	r3, [pc, #356]	; (800eccc <tcp_slowtmr+0x580>)
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6c:	6a1b      	ldr	r3, [r3, #32]
 800eb6e:	1ad3      	subs	r3, r2, r3
 800eb70:	2bf0      	cmp	r3, #240	; 0xf0
 800eb72:	d904      	bls.n	800eb7e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800eb74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb78:	3301      	adds	r3, #1
 800eb7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eb7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d060      	beq.n	800ec48 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800eb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb8c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800eb8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb90:	f000 fc00 	bl	800f394 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800eb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d010      	beq.n	800ebbc <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800eb9a:	4b50      	ldr	r3, [pc, #320]	; (800ecdc <tcp_slowtmr+0x590>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d106      	bne.n	800ebb2 <tcp_slowtmr+0x466>
 800eba4:	4b4e      	ldr	r3, [pc, #312]	; (800ece0 <tcp_slowtmr+0x594>)
 800eba6:	f240 526d 	movw	r2, #1389	; 0x56d
 800ebaa:	494e      	ldr	r1, [pc, #312]	; (800ece4 <tcp_slowtmr+0x598>)
 800ebac:	484e      	ldr	r0, [pc, #312]	; (800ece8 <tcp_slowtmr+0x59c>)
 800ebae:	f007 ff75 	bl	8016a9c <iprintf>
        prev->next = pcb->next;
 800ebb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb4:	68da      	ldr	r2, [r3, #12]
 800ebb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb8:	60da      	str	r2, [r3, #12]
 800ebba:	e00f      	b.n	800ebdc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ebbc:	4b47      	ldr	r3, [pc, #284]	; (800ecdc <tcp_slowtmr+0x590>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d006      	beq.n	800ebd4 <tcp_slowtmr+0x488>
 800ebc6:	4b46      	ldr	r3, [pc, #280]	; (800ece0 <tcp_slowtmr+0x594>)
 800ebc8:	f240 5271 	movw	r2, #1393	; 0x571
 800ebcc:	4947      	ldr	r1, [pc, #284]	; (800ecec <tcp_slowtmr+0x5a0>)
 800ebce:	4846      	ldr	r0, [pc, #280]	; (800ece8 <tcp_slowtmr+0x59c>)
 800ebd0:	f007 ff64 	bl	8016a9c <iprintf>
        tcp_active_pcbs = pcb->next;
 800ebd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	4a40      	ldr	r2, [pc, #256]	; (800ecdc <tcp_slowtmr+0x590>)
 800ebda:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ebdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d013      	beq.n	800ec0c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ebe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ebe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ebec:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ebee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf0:	3304      	adds	r3, #4
 800ebf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebf4:	8ad2      	ldrh	r2, [r2, #22]
 800ebf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebf8:	8b09      	ldrh	r1, [r1, #24]
 800ebfa:	9102      	str	r1, [sp, #8]
 800ebfc:	9201      	str	r2, [sp, #4]
 800ebfe:	9300      	str	r3, [sp, #0]
 800ec00:	462b      	mov	r3, r5
 800ec02:	4622      	mov	r2, r4
 800ec04:	4601      	mov	r1, r0
 800ec06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec08:	f004 f98a 	bl	8012f20 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ec0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0e:	691b      	ldr	r3, [r3, #16]
 800ec10:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ec12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec14:	7d1b      	ldrb	r3, [r3, #20]
 800ec16:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ec18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ec1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1e:	68db      	ldr	r3, [r3, #12]
 800ec20:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ec22:	6838      	ldr	r0, [r7, #0]
 800ec24:	f7ff f9f2 	bl	800e00c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ec28:	4b31      	ldr	r3, [pc, #196]	; (800ecf0 <tcp_slowtmr+0x5a4>)
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d004      	beq.n	800ec3e <tcp_slowtmr+0x4f2>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f06f 010c 	mvn.w	r1, #12
 800ec3a:	68b8      	ldr	r0, [r7, #8]
 800ec3c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ec3e:	4b2c      	ldr	r3, [pc, #176]	; (800ecf0 <tcp_slowtmr+0x5a4>)
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d037      	beq.n	800ecb6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ec46:	e592      	b.n	800e76e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ec48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ec4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ec52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec54:	7f1b      	ldrb	r3, [r3, #28]
 800ec56:	3301      	adds	r3, #1
 800ec58:	b2da      	uxtb	r2, r3
 800ec5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ec5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec60:	7f1a      	ldrb	r2, [r3, #28]
 800ec62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec64:	7f5b      	ldrb	r3, [r3, #29]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d325      	bcc.n	800ecb6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ec6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ec70:	4b1f      	ldr	r3, [pc, #124]	; (800ecf0 <tcp_slowtmr+0x5a4>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ec76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d00b      	beq.n	800ec98 <tcp_slowtmr+0x54c>
 800ec80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec88:	6912      	ldr	r2, [r2, #16]
 800ec8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec8c:	4610      	mov	r0, r2
 800ec8e:	4798      	blx	r3
 800ec90:	4603      	mov	r3, r0
 800ec92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ec96:	e002      	b.n	800ec9e <tcp_slowtmr+0x552>
 800ec98:	2300      	movs	r3, #0
 800ec9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ec9e:	4b14      	ldr	r3, [pc, #80]	; (800ecf0 <tcp_slowtmr+0x5a4>)
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d000      	beq.n	800eca8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800eca6:	e562      	b.n	800e76e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800eca8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d102      	bne.n	800ecb6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ecb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecb2:	f003 fb81 	bl	80123b8 <tcp_output>
  while (pcb != NULL) {
 800ecb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f47f ad5e 	bne.w	800e77a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ecc2:	4b0c      	ldr	r3, [pc, #48]	; (800ecf4 <tcp_slowtmr+0x5a8>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ecc8:	e069      	b.n	800ed9e <tcp_slowtmr+0x652>
 800ecca:	bf00      	nop
 800eccc:	2406b464 	.word	0x2406b464
 800ecd0:	000a4cb8 	.word	0x000a4cb8
 800ecd4:	10624dd3 	.word	0x10624dd3
 800ecd8:	000124f8 	.word	0x000124f8
 800ecdc:	2406b460 	.word	0x2406b460
 800ece0:	080185f4 	.word	0x080185f4
 800ece4:	08018a2c 	.word	0x08018a2c
 800ece8:	08018638 	.word	0x08018638
 800ecec:	08018a58 	.word	0x08018a58
 800ecf0:	2406b45c 	.word	0x2406b45c
 800ecf4:	2406b470 	.word	0x2406b470
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ecf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfa:	7d1b      	ldrb	r3, [r3, #20]
 800ecfc:	2b0a      	cmp	r3, #10
 800ecfe:	d006      	beq.n	800ed0e <tcp_slowtmr+0x5c2>
 800ed00:	4b2b      	ldr	r3, [pc, #172]	; (800edb0 <tcp_slowtmr+0x664>)
 800ed02:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ed06:	492b      	ldr	r1, [pc, #172]	; (800edb4 <tcp_slowtmr+0x668>)
 800ed08:	482b      	ldr	r0, [pc, #172]	; (800edb8 <tcp_slowtmr+0x66c>)
 800ed0a:	f007 fec7 	bl	8016a9c <iprintf>
    pcb_remove = 0;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ed14:	4b29      	ldr	r3, [pc, #164]	; (800edbc <tcp_slowtmr+0x670>)
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1a:	6a1b      	ldr	r3, [r3, #32]
 800ed1c:	1ad3      	subs	r3, r2, r3
 800ed1e:	2bf0      	cmp	r3, #240	; 0xf0
 800ed20:	d904      	bls.n	800ed2c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ed22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed26:	3301      	adds	r3, #1
 800ed28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ed2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d02f      	beq.n	800ed94 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ed34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed36:	f000 fb2d 	bl	800f394 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d010      	beq.n	800ed62 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ed40:	4b1f      	ldr	r3, [pc, #124]	; (800edc0 <tcp_slowtmr+0x674>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d106      	bne.n	800ed58 <tcp_slowtmr+0x60c>
 800ed4a:	4b19      	ldr	r3, [pc, #100]	; (800edb0 <tcp_slowtmr+0x664>)
 800ed4c:	f240 52af 	movw	r2, #1455	; 0x5af
 800ed50:	491c      	ldr	r1, [pc, #112]	; (800edc4 <tcp_slowtmr+0x678>)
 800ed52:	4819      	ldr	r0, [pc, #100]	; (800edb8 <tcp_slowtmr+0x66c>)
 800ed54:	f007 fea2 	bl	8016a9c <iprintf>
        prev->next = pcb->next;
 800ed58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5a:	68da      	ldr	r2, [r3, #12]
 800ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5e:	60da      	str	r2, [r3, #12]
 800ed60:	e00f      	b.n	800ed82 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ed62:	4b17      	ldr	r3, [pc, #92]	; (800edc0 <tcp_slowtmr+0x674>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d006      	beq.n	800ed7a <tcp_slowtmr+0x62e>
 800ed6c:	4b10      	ldr	r3, [pc, #64]	; (800edb0 <tcp_slowtmr+0x664>)
 800ed6e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ed72:	4915      	ldr	r1, [pc, #84]	; (800edc8 <tcp_slowtmr+0x67c>)
 800ed74:	4810      	ldr	r0, [pc, #64]	; (800edb8 <tcp_slowtmr+0x66c>)
 800ed76:	f007 fe91 	bl	8016a9c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ed7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	4a10      	ldr	r2, [pc, #64]	; (800edc0 <tcp_slowtmr+0x674>)
 800ed80:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ed82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed84:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ed86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ed8c:	69f8      	ldr	r0, [r7, #28]
 800ed8e:	f7ff f93d 	bl	800e00c <tcp_free>
 800ed92:	e004      	b.n	800ed9e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ed94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ed98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ed9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d1a9      	bne.n	800ecf8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800eda4:	bf00      	nop
 800eda6:	bf00      	nop
 800eda8:	3730      	adds	r7, #48	; 0x30
 800edaa:	46bd      	mov	sp, r7
 800edac:	bdb0      	pop	{r4, r5, r7, pc}
 800edae:	bf00      	nop
 800edb0:	080185f4 	.word	0x080185f4
 800edb4:	08018a84 	.word	0x08018a84
 800edb8:	08018638 	.word	0x08018638
 800edbc:	2406b464 	.word	0x2406b464
 800edc0:	2406b470 	.word	0x2406b470
 800edc4:	08018ab4 	.word	0x08018ab4
 800edc8:	08018adc 	.word	0x08018adc

0800edcc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800edd2:	4b2d      	ldr	r3, [pc, #180]	; (800ee88 <tcp_fasttmr+0xbc>)
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	3301      	adds	r3, #1
 800edd8:	b2da      	uxtb	r2, r3
 800edda:	4b2b      	ldr	r3, [pc, #172]	; (800ee88 <tcp_fasttmr+0xbc>)
 800eddc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800edde:	4b2b      	ldr	r3, [pc, #172]	; (800ee8c <tcp_fasttmr+0xc0>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ede4:	e048      	b.n	800ee78 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	7f9a      	ldrb	r2, [r3, #30]
 800edea:	4b27      	ldr	r3, [pc, #156]	; (800ee88 <tcp_fasttmr+0xbc>)
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d03f      	beq.n	800ee72 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800edf2:	4b25      	ldr	r3, [pc, #148]	; (800ee88 <tcp_fasttmr+0xbc>)
 800edf4:	781a      	ldrb	r2, [r3, #0]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	8b5b      	ldrh	r3, [r3, #26]
 800edfe:	f003 0301 	and.w	r3, r3, #1
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d010      	beq.n	800ee28 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	8b5b      	ldrh	r3, [r3, #26]
 800ee0a:	f043 0302 	orr.w	r3, r3, #2
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f003 facf 	bl	80123b8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	8b5b      	ldrh	r3, [r3, #26]
 800ee1e:	f023 0303 	bic.w	r3, r3, #3
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	8b5b      	ldrh	r3, [r3, #26]
 800ee2c:	f003 0308 	and.w	r3, r3, #8
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d009      	beq.n	800ee48 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	8b5b      	ldrh	r3, [r3, #26]
 800ee38:	f023 0308 	bic.w	r3, r3, #8
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f7ff fa76 	bl	800e334 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d00a      	beq.n	800ee6c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ee56:	4b0e      	ldr	r3, [pc, #56]	; (800ee90 <tcp_fasttmr+0xc4>)
 800ee58:	2200      	movs	r2, #0
 800ee5a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f000 f819 	bl	800ee94 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ee62:	4b0b      	ldr	r3, [pc, #44]	; (800ee90 <tcp_fasttmr+0xc4>)
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d000      	beq.n	800ee6c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ee6a:	e7b8      	b.n	800edde <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	607b      	str	r3, [r7, #4]
 800ee70:	e002      	b.n	800ee78 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d1b3      	bne.n	800ede6 <tcp_fasttmr+0x1a>
    }
  }
}
 800ee7e:	bf00      	nop
 800ee80:	bf00      	nop
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	2406451e 	.word	0x2406451e
 800ee8c:	2406b460 	.word	0x2406b460
 800ee90:	2406b45c 	.word	0x2406b45c

0800ee94 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ee94:	b590      	push	{r4, r7, lr}
 800ee96:	b085      	sub	sp, #20
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d109      	bne.n	800eeb6 <tcp_process_refused_data+0x22>
 800eea2:	4b38      	ldr	r3, [pc, #224]	; (800ef84 <tcp_process_refused_data+0xf0>)
 800eea4:	f240 6209 	movw	r2, #1545	; 0x609
 800eea8:	4937      	ldr	r1, [pc, #220]	; (800ef88 <tcp_process_refused_data+0xf4>)
 800eeaa:	4838      	ldr	r0, [pc, #224]	; (800ef8c <tcp_process_refused_data+0xf8>)
 800eeac:	f007 fdf6 	bl	8016a9c <iprintf>
 800eeb0:	f06f 030f 	mvn.w	r3, #15
 800eeb4:	e061      	b.n	800ef7a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eeba:	7b5b      	ldrb	r3, [r3, #13]
 800eebc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eec2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2200      	movs	r2, #0
 800eec8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00b      	beq.n	800eeec <tcp_process_refused_data+0x58>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6918      	ldr	r0, [r3, #16]
 800eede:	2300      	movs	r3, #0
 800eee0:	68ba      	ldr	r2, [r7, #8]
 800eee2:	6879      	ldr	r1, [r7, #4]
 800eee4:	47a0      	blx	r4
 800eee6:	4603      	mov	r3, r0
 800eee8:	73fb      	strb	r3, [r7, #15]
 800eeea:	e007      	b.n	800eefc <tcp_process_refused_data+0x68>
 800eeec:	2300      	movs	r3, #0
 800eeee:	68ba      	ldr	r2, [r7, #8]
 800eef0:	6879      	ldr	r1, [r7, #4]
 800eef2:	2000      	movs	r0, #0
 800eef4:	f000 f8a6 	bl	800f044 <tcp_recv_null>
 800eef8:	4603      	mov	r3, r0
 800eefa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eefc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d12b      	bne.n	800ef5c <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ef04:	7bbb      	ldrb	r3, [r7, #14]
 800ef06:	f003 0320 	and.w	r3, r3, #32
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d034      	beq.n	800ef78 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef12:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d005      	beq.n	800ef26 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef1e:	3301      	adds	r3, #1
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d00b      	beq.n	800ef48 <tcp_process_refused_data+0xb4>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6918      	ldr	r0, [r3, #16]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	6879      	ldr	r1, [r7, #4]
 800ef40:	47a0      	blx	r4
 800ef42:	4603      	mov	r3, r0
 800ef44:	73fb      	strb	r3, [r7, #15]
 800ef46:	e001      	b.n	800ef4c <tcp_process_refused_data+0xb8>
 800ef48:	2300      	movs	r3, #0
 800ef4a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ef4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef50:	f113 0f0d 	cmn.w	r3, #13
 800ef54:	d110      	bne.n	800ef78 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800ef56:	f06f 030c 	mvn.w	r3, #12
 800ef5a:	e00e      	b.n	800ef7a <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800ef5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef60:	f113 0f0d 	cmn.w	r3, #13
 800ef64:	d102      	bne.n	800ef6c <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ef66:	f06f 030c 	mvn.w	r3, #12
 800ef6a:	e006      	b.n	800ef7a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	68ba      	ldr	r2, [r7, #8]
 800ef70:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ef72:	f06f 0304 	mvn.w	r3, #4
 800ef76:	e000      	b.n	800ef7a <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800ef78:	2300      	movs	r3, #0
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3714      	adds	r7, #20
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd90      	pop	{r4, r7, pc}
 800ef82:	bf00      	nop
 800ef84:	080185f4 	.word	0x080185f4
 800ef88:	08018b04 	.word	0x08018b04
 800ef8c:	08018638 	.word	0x08018638

0800ef90 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ef98:	e007      	b.n	800efaa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f000 f80a 	bl	800efba <tcp_seg_free>
    seg = next;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d1f4      	bne.n	800ef9a <tcp_segs_free+0xa>
  }
}
 800efb0:	bf00      	nop
 800efb2:	bf00      	nop
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}

0800efba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800efba:	b580      	push	{r7, lr}
 800efbc:	b082      	sub	sp, #8
 800efbe:	af00      	add	r7, sp, #0
 800efc0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00c      	beq.n	800efe2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d004      	beq.n	800efda <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7fe fd5d 	bl	800da94 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800efda:	6879      	ldr	r1, [r7, #4]
 800efdc:	2003      	movs	r0, #3
 800efde:	f7fd fddd 	bl	800cb9c <memp_free>
  }
}
 800efe2:	bf00      	nop
 800efe4:	3708      	adds	r7, #8
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
	...

0800efec <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d106      	bne.n	800f008 <tcp_seg_copy+0x1c>
 800effa:	4b0f      	ldr	r3, [pc, #60]	; (800f038 <tcp_seg_copy+0x4c>)
 800effc:	f240 6282 	movw	r2, #1666	; 0x682
 800f000:	490e      	ldr	r1, [pc, #56]	; (800f03c <tcp_seg_copy+0x50>)
 800f002:	480f      	ldr	r0, [pc, #60]	; (800f040 <tcp_seg_copy+0x54>)
 800f004:	f007 fd4a 	bl	8016a9c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f008:	2003      	movs	r0, #3
 800f00a:	f7fd fd51 	bl	800cab0 <memp_malloc>
 800f00e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d101      	bne.n	800f01a <tcp_seg_copy+0x2e>
    return NULL;
 800f016:	2300      	movs	r3, #0
 800f018:	e00a      	b.n	800f030 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f01a:	2210      	movs	r2, #16
 800f01c:	6879      	ldr	r1, [r7, #4]
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f007 fccb 	bl	80169ba <memcpy>
  pbuf_ref(cseg->p);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fe fdd9 	bl	800dbe0 <pbuf_ref>
  return cseg;
 800f02e:	68fb      	ldr	r3, [r7, #12]
}
 800f030:	4618      	mov	r0, r3
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}
 800f038:	080185f4 	.word	0x080185f4
 800f03c:	08018b48 	.word	0x08018b48
 800f040:	08018638 	.word	0x08018638

0800f044 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
 800f050:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d109      	bne.n	800f06c <tcp_recv_null+0x28>
 800f058:	4b12      	ldr	r3, [pc, #72]	; (800f0a4 <tcp_recv_null+0x60>)
 800f05a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f05e:	4912      	ldr	r1, [pc, #72]	; (800f0a8 <tcp_recv_null+0x64>)
 800f060:	4812      	ldr	r0, [pc, #72]	; (800f0ac <tcp_recv_null+0x68>)
 800f062:	f007 fd1b 	bl	8016a9c <iprintf>
 800f066:	f06f 030f 	mvn.w	r3, #15
 800f06a:	e016      	b.n	800f09a <tcp_recv_null+0x56>

  if (p != NULL) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d009      	beq.n	800f086 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	891b      	ldrh	r3, [r3, #8]
 800f076:	4619      	mov	r1, r3
 800f078:	68b8      	ldr	r0, [r7, #8]
 800f07a:	f7ff fb15 	bl	800e6a8 <tcp_recved>
    pbuf_free(p);
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f7fe fd08 	bl	800da94 <pbuf_free>
 800f084:	e008      	b.n	800f098 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d104      	bne.n	800f098 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f08e:	68b8      	ldr	r0, [r7, #8]
 800f090:	f7ff f9ba 	bl	800e408 <tcp_close>
 800f094:	4603      	mov	r3, r0
 800f096:	e000      	b.n	800f09a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	080185f4 	.word	0x080185f4
 800f0a8:	08018b64 	.word	0x08018b64
 800f0ac:	08018638 	.word	0x08018638

0800f0b0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f0ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	db01      	blt.n	800f0c6 <tcp_kill_prio+0x16>
 800f0c2:	79fb      	ldrb	r3, [r7, #7]
 800f0c4:	e000      	b.n	800f0c8 <tcp_kill_prio+0x18>
 800f0c6:	237f      	movs	r3, #127	; 0x7f
 800f0c8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f0ca:	7afb      	ldrb	r3, [r7, #11]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d034      	beq.n	800f13a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f0d0:	7afb      	ldrb	r3, [r7, #11]
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0de:	4b19      	ldr	r3, [pc, #100]	; (800f144 <tcp_kill_prio+0x94>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	617b      	str	r3, [r7, #20]
 800f0e4:	e01f      	b.n	800f126 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	7d5b      	ldrb	r3, [r3, #21]
 800f0ea:	7afa      	ldrb	r2, [r7, #11]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d80c      	bhi.n	800f10a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f0f4:	7afa      	ldrb	r2, [r7, #11]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d112      	bne.n	800f120 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f0fa:	4b13      	ldr	r3, [pc, #76]	; (800f148 <tcp_kill_prio+0x98>)
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	6a1b      	ldr	r3, [r3, #32]
 800f102:	1ad3      	subs	r3, r2, r3
 800f104:	68fa      	ldr	r2, [r7, #12]
 800f106:	429a      	cmp	r2, r3
 800f108:	d80a      	bhi.n	800f120 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f10a:	4b0f      	ldr	r3, [pc, #60]	; (800f148 <tcp_kill_prio+0x98>)
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	6a1b      	ldr	r3, [r3, #32]
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	7d5b      	ldrb	r3, [r3, #21]
 800f11e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	617b      	str	r3, [r7, #20]
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1dc      	bne.n	800f0e6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d004      	beq.n	800f13c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f132:	6938      	ldr	r0, [r7, #16]
 800f134:	f7ff fa52 	bl	800e5dc <tcp_abort>
 800f138:	e000      	b.n	800f13c <tcp_kill_prio+0x8c>
    return;
 800f13a:	bf00      	nop
  }
}
 800f13c:	3718      	adds	r7, #24
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	2406b460 	.word	0x2406b460
 800f148:	2406b464 	.word	0x2406b464

0800f14c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b086      	sub	sp, #24
 800f150:	af00      	add	r7, sp, #0
 800f152:	4603      	mov	r3, r0
 800f154:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f156:	79fb      	ldrb	r3, [r7, #7]
 800f158:	2b08      	cmp	r3, #8
 800f15a:	d009      	beq.n	800f170 <tcp_kill_state+0x24>
 800f15c:	79fb      	ldrb	r3, [r7, #7]
 800f15e:	2b09      	cmp	r3, #9
 800f160:	d006      	beq.n	800f170 <tcp_kill_state+0x24>
 800f162:	4b1a      	ldr	r3, [pc, #104]	; (800f1cc <tcp_kill_state+0x80>)
 800f164:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f168:	4919      	ldr	r1, [pc, #100]	; (800f1d0 <tcp_kill_state+0x84>)
 800f16a:	481a      	ldr	r0, [pc, #104]	; (800f1d4 <tcp_kill_state+0x88>)
 800f16c:	f007 fc96 	bl	8016a9c <iprintf>

  inactivity = 0;
 800f170:	2300      	movs	r3, #0
 800f172:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f174:	2300      	movs	r3, #0
 800f176:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f178:	4b17      	ldr	r3, [pc, #92]	; (800f1d8 <tcp_kill_state+0x8c>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	617b      	str	r3, [r7, #20]
 800f17e:	e017      	b.n	800f1b0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	7d1b      	ldrb	r3, [r3, #20]
 800f184:	79fa      	ldrb	r2, [r7, #7]
 800f186:	429a      	cmp	r2, r3
 800f188:	d10f      	bne.n	800f1aa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f18a:	4b14      	ldr	r3, [pc, #80]	; (800f1dc <tcp_kill_state+0x90>)
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	6a1b      	ldr	r3, [r3, #32]
 800f192:	1ad3      	subs	r3, r2, r3
 800f194:	68fa      	ldr	r2, [r7, #12]
 800f196:	429a      	cmp	r2, r3
 800f198:	d807      	bhi.n	800f1aa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f19a:	4b10      	ldr	r3, [pc, #64]	; (800f1dc <tcp_kill_state+0x90>)
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	6a1b      	ldr	r3, [r3, #32]
 800f1a2:	1ad3      	subs	r3, r2, r3
 800f1a4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	617b      	str	r3, [r7, #20]
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1e4      	bne.n	800f180 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f1b6:	693b      	ldr	r3, [r7, #16]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d003      	beq.n	800f1c4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f1bc:	2100      	movs	r1, #0
 800f1be:	6938      	ldr	r0, [r7, #16]
 800f1c0:	f7ff f94e 	bl	800e460 <tcp_abandon>
  }
}
 800f1c4:	bf00      	nop
 800f1c6:	3718      	adds	r7, #24
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	080185f4 	.word	0x080185f4
 800f1d0:	08018b80 	.word	0x08018b80
 800f1d4:	08018638 	.word	0x08018638
 800f1d8:	2406b460 	.word	0x2406b460
 800f1dc:	2406b464 	.word	0x2406b464

0800f1e0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1ee:	4b12      	ldr	r3, [pc, #72]	; (800f238 <tcp_kill_timewait+0x58>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	60fb      	str	r3, [r7, #12]
 800f1f4:	e012      	b.n	800f21c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f1f6:	4b11      	ldr	r3, [pc, #68]	; (800f23c <tcp_kill_timewait+0x5c>)
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6a1b      	ldr	r3, [r3, #32]
 800f1fe:	1ad3      	subs	r3, r2, r3
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	429a      	cmp	r2, r3
 800f204:	d807      	bhi.n	800f216 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f206:	4b0d      	ldr	r3, [pc, #52]	; (800f23c <tcp_kill_timewait+0x5c>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	1ad3      	subs	r3, r2, r3
 800f210:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	68db      	ldr	r3, [r3, #12]
 800f21a:	60fb      	str	r3, [r7, #12]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1e9      	bne.n	800f1f6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d002      	beq.n	800f22e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f228:	68b8      	ldr	r0, [r7, #8]
 800f22a:	f7ff f9d7 	bl	800e5dc <tcp_abort>
  }
}
 800f22e:	bf00      	nop
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	2406b470 	.word	0x2406b470
 800f23c:	2406b464 	.word	0x2406b464

0800f240 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f246:	4b10      	ldr	r3, [pc, #64]	; (800f288 <tcp_handle_closepend+0x48>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f24c:	e014      	b.n	800f278 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	8b5b      	ldrh	r3, [r3, #26]
 800f258:	f003 0308 	and.w	r3, r3, #8
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d009      	beq.n	800f274 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	8b5b      	ldrh	r3, [r3, #26]
 800f264:	f023 0308 	bic.w	r3, r3, #8
 800f268:	b29a      	uxth	r2, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f7ff f860 	bl	800e334 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1e7      	bne.n	800f24e <tcp_handle_closepend+0xe>
  }
}
 800f27e:	bf00      	nop
 800f280:	bf00      	nop
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	2406b460 	.word	0x2406b460

0800f28c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	4603      	mov	r3, r0
 800f294:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f296:	2001      	movs	r0, #1
 800f298:	f7fd fc0a 	bl	800cab0 <memp_malloc>
 800f29c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d126      	bne.n	800f2f2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f2a4:	f7ff ffcc 	bl	800f240 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f2a8:	f7ff ff9a 	bl	800f1e0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2ac:	2001      	movs	r0, #1
 800f2ae:	f7fd fbff 	bl	800cab0 <memp_malloc>
 800f2b2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d11b      	bne.n	800f2f2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f2ba:	2009      	movs	r0, #9
 800f2bc:	f7ff ff46 	bl	800f14c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2c0:	2001      	movs	r0, #1
 800f2c2:	f7fd fbf5 	bl	800cab0 <memp_malloc>
 800f2c6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d111      	bne.n	800f2f2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f2ce:	2008      	movs	r0, #8
 800f2d0:	f7ff ff3c 	bl	800f14c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2d4:	2001      	movs	r0, #1
 800f2d6:	f7fd fbeb 	bl	800cab0 <memp_malloc>
 800f2da:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d107      	bne.n	800f2f2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f2e2:	79fb      	ldrb	r3, [r7, #7]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7ff fee3 	bl	800f0b0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2ea:	2001      	movs	r0, #1
 800f2ec:	f7fd fbe0 	bl	800cab0 <memp_malloc>
 800f2f0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d03f      	beq.n	800f378 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f2f8:	229c      	movs	r2, #156	; 0x9c
 800f2fa:	2100      	movs	r1, #0
 800f2fc:	68f8      	ldr	r0, [r7, #12]
 800f2fe:	f007 fb6a 	bl	80169d6 <memset>
    pcb->prio = prio;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	79fa      	ldrb	r2, [r7, #7]
 800f306:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f640 3268 	movw	r2, #2920	; 0xb68
 800f30e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800f318:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	22ff      	movs	r2, #255	; 0xff
 800f326:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f32e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2206      	movs	r2, #6
 800f334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2206      	movs	r2, #6
 800f33c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f344:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2201      	movs	r2, #1
 800f34a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f34e:	4b0d      	ldr	r3, [pc, #52]	; (800f384 <tcp_alloc+0xf8>)
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f356:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <tcp_alloc+0xfc>)
 800f358:	781a      	ldrb	r2, [r3, #0]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f640 3268 	movw	r2, #2920	; 0xb68
 800f364:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	4a08      	ldr	r2, [pc, #32]	; (800f38c <tcp_alloc+0x100>)
 800f36c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	4a07      	ldr	r2, [pc, #28]	; (800f390 <tcp_alloc+0x104>)
 800f374:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f378:	68fb      	ldr	r3, [r7, #12]
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3710      	adds	r7, #16
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	2406b464 	.word	0x2406b464
 800f388:	2406451e 	.word	0x2406451e
 800f38c:	0800f045 	.word	0x0800f045
 800f390:	006ddd00 	.word	0x006ddd00

0800f394 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d107      	bne.n	800f3b2 <tcp_pcb_purge+0x1e>
 800f3a2:	4b21      	ldr	r3, [pc, #132]	; (800f428 <tcp_pcb_purge+0x94>)
 800f3a4:	f640 0251 	movw	r2, #2129	; 0x851
 800f3a8:	4920      	ldr	r1, [pc, #128]	; (800f42c <tcp_pcb_purge+0x98>)
 800f3aa:	4821      	ldr	r0, [pc, #132]	; (800f430 <tcp_pcb_purge+0x9c>)
 800f3ac:	f007 fb76 	bl	8016a9c <iprintf>
 800f3b0:	e037      	b.n	800f422 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	7d1b      	ldrb	r3, [r3, #20]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d033      	beq.n	800f422 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f3be:	2b0a      	cmp	r3, #10
 800f3c0:	d02f      	beq.n	800f422 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d02b      	beq.n	800f422 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d007      	beq.n	800f3e2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fe fb5c 	bl	800da94 <pbuf_free>
      pcb->refused_data = NULL;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d002      	beq.n	800f3f0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 f986 	bl	800f6fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3f6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7ff fdc7 	bl	800ef90 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f406:	4618      	mov	r0, r3
 800f408:	f7ff fdc2 	bl	800ef90 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	66da      	str	r2, [r3, #108]	; 0x6c
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2200      	movs	r2, #0
 800f41e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f422:	3708      	adds	r7, #8
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	080185f4 	.word	0x080185f4
 800f42c:	08018c40 	.word	0x08018c40
 800f430:	08018638 	.word	0x08018638

0800f434 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d106      	bne.n	800f452 <tcp_pcb_remove+0x1e>
 800f444:	4b3e      	ldr	r3, [pc, #248]	; (800f540 <tcp_pcb_remove+0x10c>)
 800f446:	f640 0283 	movw	r2, #2179	; 0x883
 800f44a:	493e      	ldr	r1, [pc, #248]	; (800f544 <tcp_pcb_remove+0x110>)
 800f44c:	483e      	ldr	r0, [pc, #248]	; (800f548 <tcp_pcb_remove+0x114>)
 800f44e:	f007 fb25 	bl	8016a9c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d106      	bne.n	800f466 <tcp_pcb_remove+0x32>
 800f458:	4b39      	ldr	r3, [pc, #228]	; (800f540 <tcp_pcb_remove+0x10c>)
 800f45a:	f640 0284 	movw	r2, #2180	; 0x884
 800f45e:	493b      	ldr	r1, [pc, #236]	; (800f54c <tcp_pcb_remove+0x118>)
 800f460:	4839      	ldr	r0, [pc, #228]	; (800f548 <tcp_pcb_remove+0x114>)
 800f462:	f007 fb1b 	bl	8016a9c <iprintf>

  TCP_RMV(pcblist, pcb);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	683a      	ldr	r2, [r7, #0]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d105      	bne.n	800f47c <tcp_pcb_remove+0x48>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	68da      	ldr	r2, [r3, #12]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	601a      	str	r2, [r3, #0]
 800f47a:	e013      	b.n	800f4a4 <tcp_pcb_remove+0x70>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	60fb      	str	r3, [r7, #12]
 800f482:	e00c      	b.n	800f49e <tcp_pcb_remove+0x6a>
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	683a      	ldr	r2, [r7, #0]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d104      	bne.n	800f498 <tcp_pcb_remove+0x64>
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	68da      	ldr	r2, [r3, #12]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	60da      	str	r2, [r3, #12]
 800f496:	e005      	b.n	800f4a4 <tcp_pcb_remove+0x70>
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	60fb      	str	r3, [r7, #12]
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d1ef      	bne.n	800f484 <tcp_pcb_remove+0x50>
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f4aa:	6838      	ldr	r0, [r7, #0]
 800f4ac:	f7ff ff72 	bl	800f394 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	7d1b      	ldrb	r3, [r3, #20]
 800f4b4:	2b0a      	cmp	r3, #10
 800f4b6:	d013      	beq.n	800f4e0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d00f      	beq.n	800f4e0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	8b5b      	ldrh	r3, [r3, #26]
 800f4c4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d009      	beq.n	800f4e0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	8b5b      	ldrh	r3, [r3, #26]
 800f4d0:	f043 0302 	orr.w	r3, r3, #2
 800f4d4:	b29a      	uxth	r2, r3
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f4da:	6838      	ldr	r0, [r7, #0]
 800f4dc:	f002 ff6c 	bl	80123b8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	7d1b      	ldrb	r3, [r3, #20]
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	d020      	beq.n	800f52a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d006      	beq.n	800f4fe <tcp_pcb_remove+0xca>
 800f4f0:	4b13      	ldr	r3, [pc, #76]	; (800f540 <tcp_pcb_remove+0x10c>)
 800f4f2:	f640 0293 	movw	r2, #2195	; 0x893
 800f4f6:	4916      	ldr	r1, [pc, #88]	; (800f550 <tcp_pcb_remove+0x11c>)
 800f4f8:	4813      	ldr	r0, [pc, #76]	; (800f548 <tcp_pcb_remove+0x114>)
 800f4fa:	f007 facf 	bl	8016a9c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f502:	2b00      	cmp	r3, #0
 800f504:	d006      	beq.n	800f514 <tcp_pcb_remove+0xe0>
 800f506:	4b0e      	ldr	r3, [pc, #56]	; (800f540 <tcp_pcb_remove+0x10c>)
 800f508:	f640 0294 	movw	r2, #2196	; 0x894
 800f50c:	4911      	ldr	r1, [pc, #68]	; (800f554 <tcp_pcb_remove+0x120>)
 800f50e:	480e      	ldr	r0, [pc, #56]	; (800f548 <tcp_pcb_remove+0x114>)
 800f510:	f007 fac4 	bl	8016a9c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d006      	beq.n	800f52a <tcp_pcb_remove+0xf6>
 800f51c:	4b08      	ldr	r3, [pc, #32]	; (800f540 <tcp_pcb_remove+0x10c>)
 800f51e:	f640 0296 	movw	r2, #2198	; 0x896
 800f522:	490d      	ldr	r1, [pc, #52]	; (800f558 <tcp_pcb_remove+0x124>)
 800f524:	4808      	ldr	r0, [pc, #32]	; (800f548 <tcp_pcb_remove+0x114>)
 800f526:	f007 fab9 	bl	8016a9c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	2200      	movs	r2, #0
 800f52e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	2200      	movs	r2, #0
 800f534:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f536:	bf00      	nop
 800f538:	3710      	adds	r7, #16
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	080185f4 	.word	0x080185f4
 800f544:	08018c5c 	.word	0x08018c5c
 800f548:	08018638 	.word	0x08018638
 800f54c:	08018c78 	.word	0x08018c78
 800f550:	08018c98 	.word	0x08018c98
 800f554:	08018cb0 	.word	0x08018cb0
 800f558:	08018ccc 	.word	0x08018ccc

0800f55c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d106      	bne.n	800f578 <tcp_next_iss+0x1c>
 800f56a:	4b0a      	ldr	r3, [pc, #40]	; (800f594 <tcp_next_iss+0x38>)
 800f56c:	f640 02af 	movw	r2, #2223	; 0x8af
 800f570:	4909      	ldr	r1, [pc, #36]	; (800f598 <tcp_next_iss+0x3c>)
 800f572:	480a      	ldr	r0, [pc, #40]	; (800f59c <tcp_next_iss+0x40>)
 800f574:	f007 fa92 	bl	8016a9c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f578:	4b09      	ldr	r3, [pc, #36]	; (800f5a0 <tcp_next_iss+0x44>)
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	4b09      	ldr	r3, [pc, #36]	; (800f5a4 <tcp_next_iss+0x48>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4413      	add	r3, r2
 800f582:	4a07      	ldr	r2, [pc, #28]	; (800f5a0 <tcp_next_iss+0x44>)
 800f584:	6013      	str	r3, [r2, #0]
  return iss;
 800f586:	4b06      	ldr	r3, [pc, #24]	; (800f5a0 <tcp_next_iss+0x44>)
 800f588:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3708      	adds	r7, #8
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	080185f4 	.word	0x080185f4
 800f598:	08018ce4 	.word	0x08018ce4
 800f59c:	08018638 	.word	0x08018638
 800f5a0:	2400002c 	.word	0x2400002c
 800f5a4:	2406b464 	.word	0x2406b464

0800f5a8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b086      	sub	sp, #24
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	60b9      	str	r1, [r7, #8]
 800f5b2:	607a      	str	r2, [r7, #4]
 800f5b4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d106      	bne.n	800f5ca <tcp_eff_send_mss_netif+0x22>
 800f5bc:	4b14      	ldr	r3, [pc, #80]	; (800f610 <tcp_eff_send_mss_netif+0x68>)
 800f5be:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f5c2:	4914      	ldr	r1, [pc, #80]	; (800f614 <tcp_eff_send_mss_netif+0x6c>)
 800f5c4:	4814      	ldr	r0, [pc, #80]	; (800f618 <tcp_eff_send_mss_netif+0x70>)
 800f5c6:	f007 fa69 	bl	8016a9c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d101      	bne.n	800f5d4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f5d0:	89fb      	ldrh	r3, [r7, #14]
 800f5d2:	e019      	b.n	800f608 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5d8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f5da:	8afb      	ldrh	r3, [r7, #22]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d012      	beq.n	800f606 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f5e0:	2328      	movs	r3, #40	; 0x28
 800f5e2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f5e4:	8afa      	ldrh	r2, [r7, #22]
 800f5e6:	8abb      	ldrh	r3, [r7, #20]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d904      	bls.n	800f5f6 <tcp_eff_send_mss_netif+0x4e>
 800f5ec:	8afa      	ldrh	r2, [r7, #22]
 800f5ee:	8abb      	ldrh	r3, [r7, #20]
 800f5f0:	1ad3      	subs	r3, r2, r3
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	e000      	b.n	800f5f8 <tcp_eff_send_mss_netif+0x50>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f5fa:	8a7a      	ldrh	r2, [r7, #18]
 800f5fc:	89fb      	ldrh	r3, [r7, #14]
 800f5fe:	4293      	cmp	r3, r2
 800f600:	bf28      	it	cs
 800f602:	4613      	movcs	r3, r2
 800f604:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f606:	89fb      	ldrh	r3, [r7, #14]
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3718      	adds	r7, #24
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	080185f4 	.word	0x080185f4
 800f614:	08018d00 	.word	0x08018d00
 800f618:	08018638 	.word	0x08018638

0800f61c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d119      	bne.n	800f664 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f630:	4b10      	ldr	r3, [pc, #64]	; (800f674 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f632:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f636:	4910      	ldr	r1, [pc, #64]	; (800f678 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f638:	4810      	ldr	r0, [pc, #64]	; (800f67c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f63a:	f007 fa2f 	bl	8016a9c <iprintf>

  while (pcb != NULL) {
 800f63e:	e011      	b.n	800f664 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d108      	bne.n	800f65e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f652:	68f8      	ldr	r0, [r7, #12]
 800f654:	f7fe ffc2 	bl	800e5dc <tcp_abort>
      pcb = next;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	60fb      	str	r3, [r7, #12]
 800f65c:	e002      	b.n	800f664 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	68db      	ldr	r3, [r3, #12]
 800f662:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d1ea      	bne.n	800f640 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f66a:	bf00      	nop
 800f66c:	bf00      	nop
 800f66e:	3710      	adds	r7, #16
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}
 800f674:	080185f4 	.word	0x080185f4
 800f678:	08018d28 	.word	0x08018d28
 800f67c:	08018638 	.word	0x08018638

0800f680 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d02a      	beq.n	800f6e6 <tcp_netif_ip_addr_changed+0x66>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d026      	beq.n	800f6e6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f698:	4b15      	ldr	r3, [pc, #84]	; (800f6f0 <tcp_netif_ip_addr_changed+0x70>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4619      	mov	r1, r3
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f7ff ffbc 	bl	800f61c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f6a4:	4b13      	ldr	r3, [pc, #76]	; (800f6f4 <tcp_netif_ip_addr_changed+0x74>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f7ff ffb6 	bl	800f61c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d017      	beq.n	800f6e6 <tcp_netif_ip_addr_changed+0x66>
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d013      	beq.n	800f6e6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6be:	4b0e      	ldr	r3, [pc, #56]	; (800f6f8 <tcp_netif_ip_addr_changed+0x78>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	60fb      	str	r3, [r7, #12]
 800f6c4:	e00c      	b.n	800f6e0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d103      	bne.n	800f6da <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	60fb      	str	r3, [r7, #12]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d1ef      	bne.n	800f6c6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f6e6:	bf00      	nop
 800f6e8:	3710      	adds	r7, #16
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	2406b460 	.word	0x2406b460
 800f6f4:	2406b46c 	.word	0x2406b46c
 800f6f8:	2406b468 	.word	0x2406b468

0800f6fc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d007      	beq.n	800f71c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f710:	4618      	mov	r0, r3
 800f712:	f7ff fc3d 	bl	800ef90 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2200      	movs	r2, #0
 800f71a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f71c:	bf00      	nop
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f724:	b590      	push	{r4, r7, lr}
 800f726:	b08d      	sub	sp, #52	; 0x34
 800f728:	af04      	add	r7, sp, #16
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d105      	bne.n	800f740 <tcp_input+0x1c>
 800f734:	4b9b      	ldr	r3, [pc, #620]	; (800f9a4 <tcp_input+0x280>)
 800f736:	2283      	movs	r2, #131	; 0x83
 800f738:	499b      	ldr	r1, [pc, #620]	; (800f9a8 <tcp_input+0x284>)
 800f73a:	489c      	ldr	r0, [pc, #624]	; (800f9ac <tcp_input+0x288>)
 800f73c:	f007 f9ae 	bl	8016a9c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	4a9a      	ldr	r2, [pc, #616]	; (800f9b0 <tcp_input+0x28c>)
 800f746:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	895b      	ldrh	r3, [r3, #10]
 800f74c:	2b13      	cmp	r3, #19
 800f74e:	f240 83c5 	bls.w	800fedc <tcp_input+0x7b8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f752:	4b98      	ldr	r3, [pc, #608]	; (800f9b4 <tcp_input+0x290>)
 800f754:	695b      	ldr	r3, [r3, #20]
 800f756:	4a97      	ldr	r2, [pc, #604]	; (800f9b4 <tcp_input+0x290>)
 800f758:	6812      	ldr	r2, [r2, #0]
 800f75a:	4611      	mov	r1, r2
 800f75c:	4618      	mov	r0, r3
 800f75e:	f005 ff9b 	bl	8015698 <ip4_addr_isbroadcast_u32>
 800f762:	4603      	mov	r3, r0
 800f764:	2b00      	cmp	r3, #0
 800f766:	f040 83bb 	bne.w	800fee0 <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f76a:	4b92      	ldr	r3, [pc, #584]	; (800f9b4 <tcp_input+0x290>)
 800f76c:	695b      	ldr	r3, [r3, #20]
 800f76e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f772:	2be0      	cmp	r3, #224	; 0xe0
 800f774:	f000 83b4 	beq.w	800fee0 <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f778:	4b8d      	ldr	r3, [pc, #564]	; (800f9b0 <tcp_input+0x28c>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	899b      	ldrh	r3, [r3, #12]
 800f77e:	b29b      	uxth	r3, r3
 800f780:	4618      	mov	r0, r3
 800f782:	f7fc fbf5 	bl	800bf70 <lwip_htons>
 800f786:	4603      	mov	r3, r0
 800f788:	0b1b      	lsrs	r3, r3, #12
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	009b      	lsls	r3, r3, #2
 800f790:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f792:	7cbb      	ldrb	r3, [r7, #18]
 800f794:	2b13      	cmp	r3, #19
 800f796:	f240 83a5 	bls.w	800fee4 <tcp_input+0x7c0>
 800f79a:	7cbb      	ldrb	r3, [r7, #18]
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	891b      	ldrh	r3, [r3, #8]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	f200 839e 	bhi.w	800fee4 <tcp_input+0x7c0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f7a8:	7cbb      	ldrb	r3, [r7, #18]
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	3b14      	subs	r3, #20
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	4b81      	ldr	r3, [pc, #516]	; (800f9b8 <tcp_input+0x294>)
 800f7b2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f7b4:	4b81      	ldr	r3, [pc, #516]	; (800f9bc <tcp_input+0x298>)
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	895a      	ldrh	r2, [r3, #10]
 800f7be:	7cbb      	ldrb	r3, [r7, #18]
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d309      	bcc.n	800f7da <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f7c6:	4b7c      	ldr	r3, [pc, #496]	; (800f9b8 <tcp_input+0x294>)
 800f7c8:	881a      	ldrh	r2, [r3, #0]
 800f7ca:	4b7d      	ldr	r3, [pc, #500]	; (800f9c0 <tcp_input+0x29c>)
 800f7cc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f7ce:	7cbb      	ldrb	r3, [r7, #18]
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f7fe f8d8 	bl	800d988 <pbuf_remove_header>
 800f7d8:	e04e      	b.n	800f878 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d105      	bne.n	800f7ee <tcp_input+0xca>
 800f7e2:	4b70      	ldr	r3, [pc, #448]	; (800f9a4 <tcp_input+0x280>)
 800f7e4:	22c2      	movs	r2, #194	; 0xc2
 800f7e6:	4977      	ldr	r1, [pc, #476]	; (800f9c4 <tcp_input+0x2a0>)
 800f7e8:	4870      	ldr	r0, [pc, #448]	; (800f9ac <tcp_input+0x288>)
 800f7ea:	f007 f957 	bl	8016a9c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f7ee:	2114      	movs	r1, #20
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f7fe f8c9 	bl	800d988 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	895a      	ldrh	r2, [r3, #10]
 800f7fa:	4b71      	ldr	r3, [pc, #452]	; (800f9c0 <tcp_input+0x29c>)
 800f7fc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f7fe:	4b6e      	ldr	r3, [pc, #440]	; (800f9b8 <tcp_input+0x294>)
 800f800:	881a      	ldrh	r2, [r3, #0]
 800f802:	4b6f      	ldr	r3, [pc, #444]	; (800f9c0 <tcp_input+0x29c>)
 800f804:	881b      	ldrh	r3, [r3, #0]
 800f806:	1ad3      	subs	r3, r2, r3
 800f808:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f80a:	4b6d      	ldr	r3, [pc, #436]	; (800f9c0 <tcp_input+0x29c>)
 800f80c:	881b      	ldrh	r3, [r3, #0]
 800f80e:	4619      	mov	r1, r3
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7fe f8b9 	bl	800d988 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	895b      	ldrh	r3, [r3, #10]
 800f81c:	8a3a      	ldrh	r2, [r7, #16]
 800f81e:	429a      	cmp	r2, r3
 800f820:	f200 8362 	bhi.w	800fee8 <tcp_input+0x7c4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	4a64      	ldr	r2, [pc, #400]	; (800f9bc <tcp_input+0x298>)
 800f82c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	8a3a      	ldrh	r2, [r7, #16]
 800f834:	4611      	mov	r1, r2
 800f836:	4618      	mov	r0, r3
 800f838:	f7fe f8a6 	bl	800d988 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	891a      	ldrh	r2, [r3, #8]
 800f840:	8a3b      	ldrh	r3, [r7, #16]
 800f842:	1ad3      	subs	r3, r2, r3
 800f844:	b29a      	uxth	r2, r3
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	895b      	ldrh	r3, [r3, #10]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d005      	beq.n	800f85e <tcp_input+0x13a>
 800f852:	4b54      	ldr	r3, [pc, #336]	; (800f9a4 <tcp_input+0x280>)
 800f854:	22df      	movs	r2, #223	; 0xdf
 800f856:	495c      	ldr	r1, [pc, #368]	; (800f9c8 <tcp_input+0x2a4>)
 800f858:	4854      	ldr	r0, [pc, #336]	; (800f9ac <tcp_input+0x288>)
 800f85a:	f007 f91f 	bl	8016a9c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	891a      	ldrh	r2, [r3, #8]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	891b      	ldrh	r3, [r3, #8]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d005      	beq.n	800f878 <tcp_input+0x154>
 800f86c:	4b4d      	ldr	r3, [pc, #308]	; (800f9a4 <tcp_input+0x280>)
 800f86e:	22e0      	movs	r2, #224	; 0xe0
 800f870:	4956      	ldr	r1, [pc, #344]	; (800f9cc <tcp_input+0x2a8>)
 800f872:	484e      	ldr	r0, [pc, #312]	; (800f9ac <tcp_input+0x288>)
 800f874:	f007 f912 	bl	8016a9c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f878:	4b4d      	ldr	r3, [pc, #308]	; (800f9b0 <tcp_input+0x28c>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	881b      	ldrh	r3, [r3, #0]
 800f87e:	b29b      	uxth	r3, r3
 800f880:	4a4b      	ldr	r2, [pc, #300]	; (800f9b0 <tcp_input+0x28c>)
 800f882:	6814      	ldr	r4, [r2, #0]
 800f884:	4618      	mov	r0, r3
 800f886:	f7fc fb73 	bl	800bf70 <lwip_htons>
 800f88a:	4603      	mov	r3, r0
 800f88c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f88e:	4b48      	ldr	r3, [pc, #288]	; (800f9b0 <tcp_input+0x28c>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	885b      	ldrh	r3, [r3, #2]
 800f894:	b29b      	uxth	r3, r3
 800f896:	4a46      	ldr	r2, [pc, #280]	; (800f9b0 <tcp_input+0x28c>)
 800f898:	6814      	ldr	r4, [r2, #0]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fc fb68 	bl	800bf70 <lwip_htons>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f8a4:	4b42      	ldr	r3, [pc, #264]	; (800f9b0 <tcp_input+0x28c>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	685b      	ldr	r3, [r3, #4]
 800f8aa:	4a41      	ldr	r2, [pc, #260]	; (800f9b0 <tcp_input+0x28c>)
 800f8ac:	6814      	ldr	r4, [r2, #0]
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fc fb73 	bl	800bf9a <lwip_htonl>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	6063      	str	r3, [r4, #4]
 800f8b8:	6863      	ldr	r3, [r4, #4]
 800f8ba:	4a45      	ldr	r2, [pc, #276]	; (800f9d0 <tcp_input+0x2ac>)
 800f8bc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f8be:	4b3c      	ldr	r3, [pc, #240]	; (800f9b0 <tcp_input+0x28c>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	689b      	ldr	r3, [r3, #8]
 800f8c4:	4a3a      	ldr	r2, [pc, #232]	; (800f9b0 <tcp_input+0x28c>)
 800f8c6:	6814      	ldr	r4, [r2, #0]
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fc fb66 	bl	800bf9a <lwip_htonl>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	60a3      	str	r3, [r4, #8]
 800f8d2:	68a3      	ldr	r3, [r4, #8]
 800f8d4:	4a3f      	ldr	r2, [pc, #252]	; (800f9d4 <tcp_input+0x2b0>)
 800f8d6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f8d8:	4b35      	ldr	r3, [pc, #212]	; (800f9b0 <tcp_input+0x28c>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	89db      	ldrh	r3, [r3, #14]
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	4a33      	ldr	r2, [pc, #204]	; (800f9b0 <tcp_input+0x28c>)
 800f8e2:	6814      	ldr	r4, [r2, #0]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7fc fb43 	bl	800bf70 <lwip_htons>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f8ee:	4b30      	ldr	r3, [pc, #192]	; (800f9b0 <tcp_input+0x28c>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	899b      	ldrh	r3, [r3, #12]
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fc fb3a 	bl	800bf70 <lwip_htons>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f904:	b2da      	uxtb	r2, r3
 800f906:	4b34      	ldr	r3, [pc, #208]	; (800f9d8 <tcp_input+0x2b4>)
 800f908:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	891a      	ldrh	r2, [r3, #8]
 800f90e:	4b33      	ldr	r3, [pc, #204]	; (800f9dc <tcp_input+0x2b8>)
 800f910:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f912:	4b31      	ldr	r3, [pc, #196]	; (800f9d8 <tcp_input+0x2b4>)
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	f003 0303 	and.w	r3, r3, #3
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00c      	beq.n	800f938 <tcp_input+0x214>
    tcplen++;
 800f91e:	4b2f      	ldr	r3, [pc, #188]	; (800f9dc <tcp_input+0x2b8>)
 800f920:	881b      	ldrh	r3, [r3, #0]
 800f922:	3301      	adds	r3, #1
 800f924:	b29a      	uxth	r2, r3
 800f926:	4b2d      	ldr	r3, [pc, #180]	; (800f9dc <tcp_input+0x2b8>)
 800f928:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	891a      	ldrh	r2, [r3, #8]
 800f92e:	4b2b      	ldr	r3, [pc, #172]	; (800f9dc <tcp_input+0x2b8>)
 800f930:	881b      	ldrh	r3, [r3, #0]
 800f932:	429a      	cmp	r2, r3
 800f934:	f200 82da 	bhi.w	800feec <tcp_input+0x7c8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f938:	2300      	movs	r3, #0
 800f93a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f93c:	4b28      	ldr	r3, [pc, #160]	; (800f9e0 <tcp_input+0x2bc>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	61fb      	str	r3, [r7, #28]
 800f942:	e09d      	b.n	800fa80 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	7d1b      	ldrb	r3, [r3, #20]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d105      	bne.n	800f958 <tcp_input+0x234>
 800f94c:	4b15      	ldr	r3, [pc, #84]	; (800f9a4 <tcp_input+0x280>)
 800f94e:	22fb      	movs	r2, #251	; 0xfb
 800f950:	4924      	ldr	r1, [pc, #144]	; (800f9e4 <tcp_input+0x2c0>)
 800f952:	4816      	ldr	r0, [pc, #88]	; (800f9ac <tcp_input+0x288>)
 800f954:	f007 f8a2 	bl	8016a9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	7d1b      	ldrb	r3, [r3, #20]
 800f95c:	2b0a      	cmp	r3, #10
 800f95e:	d105      	bne.n	800f96c <tcp_input+0x248>
 800f960:	4b10      	ldr	r3, [pc, #64]	; (800f9a4 <tcp_input+0x280>)
 800f962:	22fc      	movs	r2, #252	; 0xfc
 800f964:	4920      	ldr	r1, [pc, #128]	; (800f9e8 <tcp_input+0x2c4>)
 800f966:	4811      	ldr	r0, [pc, #68]	; (800f9ac <tcp_input+0x288>)
 800f968:	f007 f898 	bl	8016a9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f96c:	69fb      	ldr	r3, [r7, #28]
 800f96e:	7d1b      	ldrb	r3, [r3, #20]
 800f970:	2b01      	cmp	r3, #1
 800f972:	d105      	bne.n	800f980 <tcp_input+0x25c>
 800f974:	4b0b      	ldr	r3, [pc, #44]	; (800f9a4 <tcp_input+0x280>)
 800f976:	22fd      	movs	r2, #253	; 0xfd
 800f978:	491c      	ldr	r1, [pc, #112]	; (800f9ec <tcp_input+0x2c8>)
 800f97a:	480c      	ldr	r0, [pc, #48]	; (800f9ac <tcp_input+0x288>)
 800f97c:	f007 f88e 	bl	8016a9c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	7a1b      	ldrb	r3, [r3, #8]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d033      	beq.n	800f9f0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	7a1a      	ldrb	r2, [r3, #8]
 800f98c:	4b09      	ldr	r3, [pc, #36]	; (800f9b4 <tcp_input+0x290>)
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f994:	3301      	adds	r3, #1
 800f996:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f998:	429a      	cmp	r2, r3
 800f99a:	d029      	beq.n	800f9f0 <tcp_input+0x2cc>
      prev = pcb;
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	61bb      	str	r3, [r7, #24]
      continue;
 800f9a0:	e06b      	b.n	800fa7a <tcp_input+0x356>
 800f9a2:	bf00      	nop
 800f9a4:	08018d5c 	.word	0x08018d5c
 800f9a8:	08018d90 	.word	0x08018d90
 800f9ac:	08018da8 	.word	0x08018da8
 800f9b0:	24064530 	.word	0x24064530
 800f9b4:	24064d60 	.word	0x24064d60
 800f9b8:	24064534 	.word	0x24064534
 800f9bc:	24064538 	.word	0x24064538
 800f9c0:	24064536 	.word	0x24064536
 800f9c4:	08018dd0 	.word	0x08018dd0
 800f9c8:	08018de0 	.word	0x08018de0
 800f9cc:	08018dec 	.word	0x08018dec
 800f9d0:	24064540 	.word	0x24064540
 800f9d4:	24064544 	.word	0x24064544
 800f9d8:	2406454c 	.word	0x2406454c
 800f9dc:	2406454a 	.word	0x2406454a
 800f9e0:	2406b460 	.word	0x2406b460
 800f9e4:	08018e0c 	.word	0x08018e0c
 800f9e8:	08018e34 	.word	0x08018e34
 800f9ec:	08018e60 	.word	0x08018e60
    }

    if (pcb->remote_port == tcphdr->src &&
 800f9f0:	69fb      	ldr	r3, [r7, #28]
 800f9f2:	8b1a      	ldrh	r2, [r3, #24]
 800f9f4:	4b94      	ldr	r3, [pc, #592]	; (800fc48 <tcp_input+0x524>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	881b      	ldrh	r3, [r3, #0]
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d13a      	bne.n	800fa76 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	8ada      	ldrh	r2, [r3, #22]
 800fa04:	4b90      	ldr	r3, [pc, #576]	; (800fc48 <tcp_input+0x524>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	885b      	ldrh	r3, [r3, #2]
 800fa0a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d132      	bne.n	800fa76 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	685a      	ldr	r2, [r3, #4]
 800fa14:	4b8d      	ldr	r3, [pc, #564]	; (800fc4c <tcp_input+0x528>)
 800fa16:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d12c      	bne.n	800fa76 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	4b8a      	ldr	r3, [pc, #552]	; (800fc4c <tcp_input+0x528>)
 800fa22:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d126      	bne.n	800fa76 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	69fa      	ldr	r2, [r7, #28]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d106      	bne.n	800fa40 <tcp_input+0x31c>
 800fa32:	4b87      	ldr	r3, [pc, #540]	; (800fc50 <tcp_input+0x52c>)
 800fa34:	f240 120d 	movw	r2, #269	; 0x10d
 800fa38:	4986      	ldr	r1, [pc, #536]	; (800fc54 <tcp_input+0x530>)
 800fa3a:	4887      	ldr	r0, [pc, #540]	; (800fc58 <tcp_input+0x534>)
 800fa3c:	f007 f82e 	bl	8016a9c <iprintf>
      if (prev != NULL) {
 800fa40:	69bb      	ldr	r3, [r7, #24]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d00a      	beq.n	800fa5c <tcp_input+0x338>
        prev->next = pcb->next;
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	68da      	ldr	r2, [r3, #12]
 800fa4a:	69bb      	ldr	r3, [r7, #24]
 800fa4c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fa4e:	4b83      	ldr	r3, [pc, #524]	; (800fc5c <tcp_input+0x538>)
 800fa50:	681a      	ldr	r2, [r3, #0]
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fa56:	4a81      	ldr	r2, [pc, #516]	; (800fc5c <tcp_input+0x538>)
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	69fa      	ldr	r2, [r7, #28]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d111      	bne.n	800fa8a <tcp_input+0x366>
 800fa66:	4b7a      	ldr	r3, [pc, #488]	; (800fc50 <tcp_input+0x52c>)
 800fa68:	f240 1215 	movw	r2, #277	; 0x115
 800fa6c:	497c      	ldr	r1, [pc, #496]	; (800fc60 <tcp_input+0x53c>)
 800fa6e:	487a      	ldr	r0, [pc, #488]	; (800fc58 <tcp_input+0x534>)
 800fa70:	f007 f814 	bl	8016a9c <iprintf>
      break;
 800fa74:	e009      	b.n	800fa8a <tcp_input+0x366>
    }
    prev = pcb;
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa7a:	69fb      	ldr	r3, [r7, #28]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	61fb      	str	r3, [r7, #28]
 800fa80:	69fb      	ldr	r3, [r7, #28]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	f47f af5e 	bne.w	800f944 <tcp_input+0x220>
 800fa88:	e000      	b.n	800fa8c <tcp_input+0x368>
      break;
 800fa8a:	bf00      	nop
  }

  if (pcb == NULL) {
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f040 8095 	bne.w	800fbbe <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa94:	4b73      	ldr	r3, [pc, #460]	; (800fc64 <tcp_input+0x540>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	61fb      	str	r3, [r7, #28]
 800fa9a:	e03f      	b.n	800fb1c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	7d1b      	ldrb	r3, [r3, #20]
 800faa0:	2b0a      	cmp	r3, #10
 800faa2:	d006      	beq.n	800fab2 <tcp_input+0x38e>
 800faa4:	4b6a      	ldr	r3, [pc, #424]	; (800fc50 <tcp_input+0x52c>)
 800faa6:	f240 121f 	movw	r2, #287	; 0x11f
 800faaa:	496f      	ldr	r1, [pc, #444]	; (800fc68 <tcp_input+0x544>)
 800faac:	486a      	ldr	r0, [pc, #424]	; (800fc58 <tcp_input+0x534>)
 800faae:	f006 fff5 	bl	8016a9c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	7a1b      	ldrb	r3, [r3, #8]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d009      	beq.n	800face <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	7a1a      	ldrb	r2, [r3, #8]
 800fabe:	4b63      	ldr	r3, [pc, #396]	; (800fc4c <tcp_input+0x528>)
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fac6:	3301      	adds	r3, #1
 800fac8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800faca:	429a      	cmp	r2, r3
 800facc:	d122      	bne.n	800fb14 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	8b1a      	ldrh	r2, [r3, #24]
 800fad2:	4b5d      	ldr	r3, [pc, #372]	; (800fc48 <tcp_input+0x524>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	881b      	ldrh	r3, [r3, #0]
 800fad8:	b29b      	uxth	r3, r3
 800fada:	429a      	cmp	r2, r3
 800fadc:	d11b      	bne.n	800fb16 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	8ada      	ldrh	r2, [r3, #22]
 800fae2:	4b59      	ldr	r3, [pc, #356]	; (800fc48 <tcp_input+0x524>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	885b      	ldrh	r3, [r3, #2]
 800fae8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800faea:	429a      	cmp	r2, r3
 800faec:	d113      	bne.n	800fb16 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	685a      	ldr	r2, [r3, #4]
 800faf2:	4b56      	ldr	r3, [pc, #344]	; (800fc4c <tcp_input+0x528>)
 800faf4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d10d      	bne.n	800fb16 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fafa:	69fb      	ldr	r3, [r7, #28]
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	4b53      	ldr	r3, [pc, #332]	; (800fc4c <tcp_input+0x528>)
 800fb00:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d107      	bne.n	800fb16 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fb06:	69f8      	ldr	r0, [r7, #28]
 800fb08:	f000 fb56 	bl	80101b8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f7fd ffc1 	bl	800da94 <pbuf_free>
        return;
 800fb12:	e1f1      	b.n	800fef8 <tcp_input+0x7d4>
        continue;
 800fb14:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb16:	69fb      	ldr	r3, [r7, #28]
 800fb18:	68db      	ldr	r3, [r3, #12]
 800fb1a:	61fb      	str	r3, [r7, #28]
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d1bc      	bne.n	800fa9c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fb22:	2300      	movs	r3, #0
 800fb24:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fb26:	4b51      	ldr	r3, [pc, #324]	; (800fc6c <tcp_input+0x548>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	617b      	str	r3, [r7, #20]
 800fb2c:	e02a      	b.n	800fb84 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	7a1b      	ldrb	r3, [r3, #8]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d00c      	beq.n	800fb50 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	7a1a      	ldrb	r2, [r3, #8]
 800fb3a:	4b44      	ldr	r3, [pc, #272]	; (800fc4c <tcp_input+0x528>)
 800fb3c:	685b      	ldr	r3, [r3, #4]
 800fb3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fb42:	3301      	adds	r3, #1
 800fb44:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d002      	beq.n	800fb50 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	61bb      	str	r3, [r7, #24]
        continue;
 800fb4e:	e016      	b.n	800fb7e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	8ada      	ldrh	r2, [r3, #22]
 800fb54:	4b3c      	ldr	r3, [pc, #240]	; (800fc48 <tcp_input+0x524>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	885b      	ldrh	r3, [r3, #2]
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d10c      	bne.n	800fb7a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	4b39      	ldr	r3, [pc, #228]	; (800fc4c <tcp_input+0x528>)
 800fb66:	695b      	ldr	r3, [r3, #20]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d00f      	beq.n	800fb8c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d00d      	beq.n	800fb8e <tcp_input+0x46a>
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d009      	beq.n	800fb8e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	617b      	str	r3, [r7, #20]
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d1d1      	bne.n	800fb2e <tcp_input+0x40a>
 800fb8a:	e000      	b.n	800fb8e <tcp_input+0x46a>
            break;
 800fb8c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d014      	beq.n	800fbbe <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fb94:	69bb      	ldr	r3, [r7, #24]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d00a      	beq.n	800fbb0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	68da      	ldr	r2, [r3, #12]
 800fb9e:	69bb      	ldr	r3, [r7, #24]
 800fba0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fba2:	4b32      	ldr	r3, [pc, #200]	; (800fc6c <tcp_input+0x548>)
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fbaa:	4a30      	ldr	r2, [pc, #192]	; (800fc6c <tcp_input+0x548>)
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fbb0:	6978      	ldr	r0, [r7, #20]
 800fbb2:	f000 fa03 	bl	800ffbc <tcp_listen_input>
      }
      pbuf_free(p);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f7fd ff6c 	bl	800da94 <pbuf_free>
      return;
 800fbbc:	e19c      	b.n	800fef8 <tcp_input+0x7d4>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 8161 	beq.w	800fe88 <tcp_input+0x764>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fbc6:	4b2a      	ldr	r3, [pc, #168]	; (800fc70 <tcp_input+0x54c>)
 800fbc8:	2200      	movs	r2, #0
 800fbca:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	891a      	ldrh	r2, [r3, #8]
 800fbd0:	4b27      	ldr	r3, [pc, #156]	; (800fc70 <tcp_input+0x54c>)
 800fbd2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fbd4:	4a26      	ldr	r2, [pc, #152]	; (800fc70 <tcp_input+0x54c>)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fbda:	4b1b      	ldr	r3, [pc, #108]	; (800fc48 <tcp_input+0x524>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	4a24      	ldr	r2, [pc, #144]	; (800fc70 <tcp_input+0x54c>)
 800fbe0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fbe2:	4b24      	ldr	r3, [pc, #144]	; (800fc74 <tcp_input+0x550>)
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fbe8:	4b23      	ldr	r3, [pc, #140]	; (800fc78 <tcp_input+0x554>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fbee:	4b23      	ldr	r3, [pc, #140]	; (800fc7c <tcp_input+0x558>)
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fbf4:	4b22      	ldr	r3, [pc, #136]	; (800fc80 <tcp_input+0x55c>)
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	f003 0308 	and.w	r3, r3, #8
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d006      	beq.n	800fc0e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	7b5b      	ldrb	r3, [r3, #13]
 800fc04:	f043 0301 	orr.w	r3, r3, #1
 800fc08:	b2da      	uxtb	r2, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fc0e:	69fb      	ldr	r3, [r7, #28]
 800fc10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d038      	beq.n	800fc88 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fc16:	69f8      	ldr	r0, [r7, #28]
 800fc18:	f7ff f93c 	bl	800ee94 <tcp_process_refused_data>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	f113 0f0d 	cmn.w	r3, #13
 800fc22:	d007      	beq.n	800fc34 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d02d      	beq.n	800fc88 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fc2c:	4b15      	ldr	r3, [pc, #84]	; (800fc84 <tcp_input+0x560>)
 800fc2e:	881b      	ldrh	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d029      	beq.n	800fc88 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	f040 8105 	bne.w	800fe48 <tcp_input+0x724>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fc3e:	69f8      	ldr	r0, [r7, #28]
 800fc40:	f003 f9c0 	bl	8012fc4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fc44:	e100      	b.n	800fe48 <tcp_input+0x724>
 800fc46:	bf00      	nop
 800fc48:	24064530 	.word	0x24064530
 800fc4c:	24064d60 	.word	0x24064d60
 800fc50:	08018d5c 	.word	0x08018d5c
 800fc54:	08018e88 	.word	0x08018e88
 800fc58:	08018da8 	.word	0x08018da8
 800fc5c:	2406b460 	.word	0x2406b460
 800fc60:	08018eb4 	.word	0x08018eb4
 800fc64:	2406b470 	.word	0x2406b470
 800fc68:	08018ee0 	.word	0x08018ee0
 800fc6c:	2406b468 	.word	0x2406b468
 800fc70:	24064520 	.word	0x24064520
 800fc74:	24064550 	.word	0x24064550
 800fc78:	2406454d 	.word	0x2406454d
 800fc7c:	24064548 	.word	0x24064548
 800fc80:	2406454c 	.word	0x2406454c
 800fc84:	2406454a 	.word	0x2406454a
      }
    }
    tcp_input_pcb = pcb;
 800fc88:	4a9d      	ldr	r2, [pc, #628]	; (800ff00 <tcp_input+0x7dc>)
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fc8e:	69f8      	ldr	r0, [r7, #28]
 800fc90:	f000 fb0c 	bl	80102ac <tcp_process>
 800fc94:	4603      	mov	r3, r0
 800fc96:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fc98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc9c:	f113 0f0d 	cmn.w	r3, #13
 800fca0:	f000 80d4 	beq.w	800fe4c <tcp_input+0x728>
      if (recv_flags & TF_RESET) {
 800fca4:	4b97      	ldr	r3, [pc, #604]	; (800ff04 <tcp_input+0x7e0>)
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	f003 0308 	and.w	r3, r3, #8
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d015      	beq.n	800fcdc <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fcb0:	69fb      	ldr	r3, [r7, #28]
 800fcb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d008      	beq.n	800fccc <tcp_input+0x5a8>
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcc0:	69fa      	ldr	r2, [r7, #28]
 800fcc2:	6912      	ldr	r2, [r2, #16]
 800fcc4:	f06f 010d 	mvn.w	r1, #13
 800fcc8:	4610      	mov	r0, r2
 800fcca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fccc:	69f9      	ldr	r1, [r7, #28]
 800fcce:	488e      	ldr	r0, [pc, #568]	; (800ff08 <tcp_input+0x7e4>)
 800fcd0:	f7ff fbb0 	bl	800f434 <tcp_pcb_remove>
        tcp_free(pcb);
 800fcd4:	69f8      	ldr	r0, [r7, #28]
 800fcd6:	f7fe f999 	bl	800e00c <tcp_free>
 800fcda:	e0c2      	b.n	800fe62 <tcp_input+0x73e>
      } else {
        err = ERR_OK;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fce0:	4b8a      	ldr	r3, [pc, #552]	; (800ff0c <tcp_input+0x7e8>)
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d01d      	beq.n	800fd24 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fce8:	4b88      	ldr	r3, [pc, #544]	; (800ff0c <tcp_input+0x7e8>)
 800fcea:	881b      	ldrh	r3, [r3, #0]
 800fcec:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00a      	beq.n	800fd0e <tcp_input+0x5ea>
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fcfe:	69fa      	ldr	r2, [r7, #28]
 800fd00:	6910      	ldr	r0, [r2, #16]
 800fd02:	89fa      	ldrh	r2, [r7, #14]
 800fd04:	69f9      	ldr	r1, [r7, #28]
 800fd06:	4798      	blx	r3
 800fd08:	4603      	mov	r3, r0
 800fd0a:	74fb      	strb	r3, [r7, #19]
 800fd0c:	e001      	b.n	800fd12 <tcp_input+0x5ee>
 800fd0e:	2300      	movs	r3, #0
 800fd10:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fd12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd16:	f113 0f0d 	cmn.w	r3, #13
 800fd1a:	f000 8099 	beq.w	800fe50 <tcp_input+0x72c>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fd1e:	4b7b      	ldr	r3, [pc, #492]	; (800ff0c <tcp_input+0x7e8>)
 800fd20:	2200      	movs	r2, #0
 800fd22:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fd24:	69f8      	ldr	r0, [r7, #28]
 800fd26:	f000 f909 	bl	800ff3c <tcp_input_delayed_close>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f040 8091 	bne.w	800fe54 <tcp_input+0x730>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fd32:	4b77      	ldr	r3, [pc, #476]	; (800ff10 <tcp_input+0x7ec>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d041      	beq.n	800fdbe <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d006      	beq.n	800fd50 <tcp_input+0x62c>
 800fd42:	4b74      	ldr	r3, [pc, #464]	; (800ff14 <tcp_input+0x7f0>)
 800fd44:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fd48:	4973      	ldr	r1, [pc, #460]	; (800ff18 <tcp_input+0x7f4>)
 800fd4a:	4874      	ldr	r0, [pc, #464]	; (800ff1c <tcp_input+0x7f8>)
 800fd4c:	f006 fea6 	bl	8016a9c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	8b5b      	ldrh	r3, [r3, #26]
 800fd54:	f003 0310 	and.w	r3, r3, #16
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d008      	beq.n	800fd6e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fd5c:	4b6c      	ldr	r3, [pc, #432]	; (800ff10 <tcp_input+0x7ec>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fd fe97 	bl	800da94 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fd66:	69f8      	ldr	r0, [r7, #28]
 800fd68:	f7fe fc38 	bl	800e5dc <tcp_abort>
            goto aborted;
 800fd6c:	e079      	b.n	800fe62 <tcp_input+0x73e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d00c      	beq.n	800fd92 <tcp_input+0x66e>
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	6918      	ldr	r0, [r3, #16]
 800fd82:	4b63      	ldr	r3, [pc, #396]	; (800ff10 <tcp_input+0x7ec>)
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	2300      	movs	r3, #0
 800fd88:	69f9      	ldr	r1, [r7, #28]
 800fd8a:	47a0      	blx	r4
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	74fb      	strb	r3, [r7, #19]
 800fd90:	e008      	b.n	800fda4 <tcp_input+0x680>
 800fd92:	4b5f      	ldr	r3, [pc, #380]	; (800ff10 <tcp_input+0x7ec>)
 800fd94:	681a      	ldr	r2, [r3, #0]
 800fd96:	2300      	movs	r3, #0
 800fd98:	69f9      	ldr	r1, [r7, #28]
 800fd9a:	2000      	movs	r0, #0
 800fd9c:	f7ff f952 	bl	800f044 <tcp_recv_null>
 800fda0:	4603      	mov	r3, r0
 800fda2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fda4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fda8:	f113 0f0d 	cmn.w	r3, #13
 800fdac:	d054      	beq.n	800fe58 <tcp_input+0x734>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fdae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d003      	beq.n	800fdbe <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fdb6:	4b56      	ldr	r3, [pc, #344]	; (800ff10 <tcp_input+0x7ec>)
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fdbe:	4b51      	ldr	r3, [pc, #324]	; (800ff04 <tcp_input+0x7e0>)
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	f003 0320 	and.w	r3, r3, #32
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d031      	beq.n	800fe2e <tcp_input+0x70a>
          if (pcb->refused_data != NULL) {
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d009      	beq.n	800fde6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fdd2:	69fb      	ldr	r3, [r7, #28]
 800fdd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdd6:	7b5a      	ldrb	r2, [r3, #13]
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fddc:	f042 0220 	orr.w	r2, r2, #32
 800fde0:	b2d2      	uxtb	r2, r2
 800fde2:	735a      	strb	r2, [r3, #13]
 800fde4:	e023      	b.n	800fe2e <tcp_input+0x70a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdea:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d005      	beq.n	800fdfe <tcp_input+0x6da>
              pcb->rcv_wnd++;
 800fdf2:	69fb      	ldr	r3, [r7, #28]
 800fdf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	69fb      	ldr	r3, [r7, #28]
 800fdfc:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00b      	beq.n	800fe20 <tcp_input+0x6fc>
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	6918      	ldr	r0, [r3, #16]
 800fe12:	2300      	movs	r3, #0
 800fe14:	2200      	movs	r2, #0
 800fe16:	69f9      	ldr	r1, [r7, #28]
 800fe18:	47a0      	blx	r4
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	74fb      	strb	r3, [r7, #19]
 800fe1e:	e001      	b.n	800fe24 <tcp_input+0x700>
 800fe20:	2300      	movs	r3, #0
 800fe22:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fe24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fe28:	f113 0f0d 	cmn.w	r3, #13
 800fe2c:	d016      	beq.n	800fe5c <tcp_input+0x738>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fe2e:	4b34      	ldr	r3, [pc, #208]	; (800ff00 <tcp_input+0x7dc>)
 800fe30:	2200      	movs	r2, #0
 800fe32:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fe34:	69f8      	ldr	r0, [r7, #28]
 800fe36:	f000 f881 	bl	800ff3c <tcp_input_delayed_close>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d10f      	bne.n	800fe60 <tcp_input+0x73c>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fe40:	69f8      	ldr	r0, [r7, #28]
 800fe42:	f002 fab9 	bl	80123b8 <tcp_output>
 800fe46:	e00c      	b.n	800fe62 <tcp_input+0x73e>
        goto aborted;
 800fe48:	bf00      	nop
 800fe4a:	e00a      	b.n	800fe62 <tcp_input+0x73e>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fe4c:	bf00      	nop
 800fe4e:	e008      	b.n	800fe62 <tcp_input+0x73e>
              goto aborted;
 800fe50:	bf00      	nop
 800fe52:	e006      	b.n	800fe62 <tcp_input+0x73e>
          goto aborted;
 800fe54:	bf00      	nop
 800fe56:	e004      	b.n	800fe62 <tcp_input+0x73e>
            goto aborted;
 800fe58:	bf00      	nop
 800fe5a:	e002      	b.n	800fe62 <tcp_input+0x73e>
              goto aborted;
 800fe5c:	bf00      	nop
 800fe5e:	e000      	b.n	800fe62 <tcp_input+0x73e>
          goto aborted;
 800fe60:	bf00      	nop
    tcp_input_pcb = NULL;
 800fe62:	4b27      	ldr	r3, [pc, #156]	; (800ff00 <tcp_input+0x7dc>)
 800fe64:	2200      	movs	r2, #0
 800fe66:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fe68:	4b29      	ldr	r3, [pc, #164]	; (800ff10 <tcp_input+0x7ec>)
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fe6e:	4b2c      	ldr	r3, [pc, #176]	; (800ff20 <tcp_input+0x7fc>)
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d03f      	beq.n	800fef6 <tcp_input+0x7d2>
      pbuf_free(inseg.p);
 800fe76:	4b2a      	ldr	r3, [pc, #168]	; (800ff20 <tcp_input+0x7fc>)
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7fd fe0a 	bl	800da94 <pbuf_free>
      inseg.p = NULL;
 800fe80:	4b27      	ldr	r3, [pc, #156]	; (800ff20 <tcp_input+0x7fc>)
 800fe82:	2200      	movs	r2, #0
 800fe84:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fe86:	e036      	b.n	800fef6 <tcp_input+0x7d2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fe88:	4b26      	ldr	r3, [pc, #152]	; (800ff24 <tcp_input+0x800>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	899b      	ldrh	r3, [r3, #12]
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7fc f86d 	bl	800bf70 <lwip_htons>
 800fe96:	4603      	mov	r3, r0
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	f003 0304 	and.w	r3, r3, #4
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d118      	bne.n	800fed4 <tcp_input+0x7b0>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fea2:	4b21      	ldr	r3, [pc, #132]	; (800ff28 <tcp_input+0x804>)
 800fea4:	6819      	ldr	r1, [r3, #0]
 800fea6:	4b21      	ldr	r3, [pc, #132]	; (800ff2c <tcp_input+0x808>)
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	461a      	mov	r2, r3
 800feac:	4b20      	ldr	r3, [pc, #128]	; (800ff30 <tcp_input+0x80c>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800feb2:	4b1c      	ldr	r3, [pc, #112]	; (800ff24 <tcp_input+0x800>)
 800feb4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feb6:	885b      	ldrh	r3, [r3, #2]
 800feb8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800feba:	4a1a      	ldr	r2, [pc, #104]	; (800ff24 <tcp_input+0x800>)
 800febc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800febe:	8812      	ldrh	r2, [r2, #0]
 800fec0:	b292      	uxth	r2, r2
 800fec2:	9202      	str	r2, [sp, #8]
 800fec4:	9301      	str	r3, [sp, #4]
 800fec6:	4b1b      	ldr	r3, [pc, #108]	; (800ff34 <tcp_input+0x810>)
 800fec8:	9300      	str	r3, [sp, #0]
 800feca:	4b1b      	ldr	r3, [pc, #108]	; (800ff38 <tcp_input+0x814>)
 800fecc:	4602      	mov	r2, r0
 800fece:	2000      	movs	r0, #0
 800fed0:	f003 f826 	bl	8012f20 <tcp_rst>
    pbuf_free(p);
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f7fd fddd 	bl	800da94 <pbuf_free>
  return;
 800feda:	e00c      	b.n	800fef6 <tcp_input+0x7d2>
    goto dropped;
 800fedc:	bf00      	nop
 800fede:	e006      	b.n	800feee <tcp_input+0x7ca>
    goto dropped;
 800fee0:	bf00      	nop
 800fee2:	e004      	b.n	800feee <tcp_input+0x7ca>
    goto dropped;
 800fee4:	bf00      	nop
 800fee6:	e002      	b.n	800feee <tcp_input+0x7ca>
      goto dropped;
 800fee8:	bf00      	nop
 800feea:	e000      	b.n	800feee <tcp_input+0x7ca>
      goto dropped;
 800feec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f7fd fdd0 	bl	800da94 <pbuf_free>
 800fef4:	e000      	b.n	800fef8 <tcp_input+0x7d4>
  return;
 800fef6:	bf00      	nop
}
 800fef8:	3724      	adds	r7, #36	; 0x24
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd90      	pop	{r4, r7, pc}
 800fefe:	bf00      	nop
 800ff00:	2406b474 	.word	0x2406b474
 800ff04:	2406454d 	.word	0x2406454d
 800ff08:	2406b460 	.word	0x2406b460
 800ff0c:	24064548 	.word	0x24064548
 800ff10:	24064550 	.word	0x24064550
 800ff14:	08018d5c 	.word	0x08018d5c
 800ff18:	08018f10 	.word	0x08018f10
 800ff1c:	08018da8 	.word	0x08018da8
 800ff20:	24064520 	.word	0x24064520
 800ff24:	24064530 	.word	0x24064530
 800ff28:	24064544 	.word	0x24064544
 800ff2c:	2406454a 	.word	0x2406454a
 800ff30:	24064540 	.word	0x24064540
 800ff34:	24064d70 	.word	0x24064d70
 800ff38:	24064d74 	.word	0x24064d74

0800ff3c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d106      	bne.n	800ff58 <tcp_input_delayed_close+0x1c>
 800ff4a:	4b17      	ldr	r3, [pc, #92]	; (800ffa8 <tcp_input_delayed_close+0x6c>)
 800ff4c:	f240 225a 	movw	r2, #602	; 0x25a
 800ff50:	4916      	ldr	r1, [pc, #88]	; (800ffac <tcp_input_delayed_close+0x70>)
 800ff52:	4817      	ldr	r0, [pc, #92]	; (800ffb0 <tcp_input_delayed_close+0x74>)
 800ff54:	f006 fda2 	bl	8016a9c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ff58:	4b16      	ldr	r3, [pc, #88]	; (800ffb4 <tcp_input_delayed_close+0x78>)
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	f003 0310 	and.w	r3, r3, #16
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d01c      	beq.n	800ff9e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	8b5b      	ldrh	r3, [r3, #26]
 800ff68:	f003 0310 	and.w	r3, r3, #16
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d10d      	bne.n	800ff8c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d008      	beq.n	800ff8c <tcp_input_delayed_close+0x50>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	6912      	ldr	r2, [r2, #16]
 800ff84:	f06f 010e 	mvn.w	r1, #14
 800ff88:	4610      	mov	r0, r2
 800ff8a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ff8c:	6879      	ldr	r1, [r7, #4]
 800ff8e:	480a      	ldr	r0, [pc, #40]	; (800ffb8 <tcp_input_delayed_close+0x7c>)
 800ff90:	f7ff fa50 	bl	800f434 <tcp_pcb_remove>
    tcp_free(pcb);
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f7fe f839 	bl	800e00c <tcp_free>
    return 1;
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	e000      	b.n	800ffa0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3708      	adds	r7, #8
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	08018d5c 	.word	0x08018d5c
 800ffac:	08018f2c 	.word	0x08018f2c
 800ffb0:	08018da8 	.word	0x08018da8
 800ffb4:	2406454d 	.word	0x2406454d
 800ffb8:	2406b460 	.word	0x2406b460

0800ffbc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ffbc:	b590      	push	{r4, r7, lr}
 800ffbe:	b08b      	sub	sp, #44	; 0x2c
 800ffc0:	af04      	add	r7, sp, #16
 800ffc2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ffc4:	4b6f      	ldr	r3, [pc, #444]	; (8010184 <tcp_listen_input+0x1c8>)
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	f003 0304 	and.w	r3, r3, #4
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	f040 80d2 	bne.w	8010176 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d106      	bne.n	800ffe6 <tcp_listen_input+0x2a>
 800ffd8:	4b6b      	ldr	r3, [pc, #428]	; (8010188 <tcp_listen_input+0x1cc>)
 800ffda:	f240 2281 	movw	r2, #641	; 0x281
 800ffde:	496b      	ldr	r1, [pc, #428]	; (801018c <tcp_listen_input+0x1d0>)
 800ffe0:	486b      	ldr	r0, [pc, #428]	; (8010190 <tcp_listen_input+0x1d4>)
 800ffe2:	f006 fd5b 	bl	8016a9c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ffe6:	4b67      	ldr	r3, [pc, #412]	; (8010184 <tcp_listen_input+0x1c8>)
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	f003 0310 	and.w	r3, r3, #16
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d019      	beq.n	8010026 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fff2:	4b68      	ldr	r3, [pc, #416]	; (8010194 <tcp_listen_input+0x1d8>)
 800fff4:	6819      	ldr	r1, [r3, #0]
 800fff6:	4b68      	ldr	r3, [pc, #416]	; (8010198 <tcp_listen_input+0x1dc>)
 800fff8:	881b      	ldrh	r3, [r3, #0]
 800fffa:	461a      	mov	r2, r3
 800fffc:	4b67      	ldr	r3, [pc, #412]	; (801019c <tcp_listen_input+0x1e0>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010002:	4b67      	ldr	r3, [pc, #412]	; (80101a0 <tcp_listen_input+0x1e4>)
 8010004:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010006:	885b      	ldrh	r3, [r3, #2]
 8010008:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801000a:	4a65      	ldr	r2, [pc, #404]	; (80101a0 <tcp_listen_input+0x1e4>)
 801000c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801000e:	8812      	ldrh	r2, [r2, #0]
 8010010:	b292      	uxth	r2, r2
 8010012:	9202      	str	r2, [sp, #8]
 8010014:	9301      	str	r3, [sp, #4]
 8010016:	4b63      	ldr	r3, [pc, #396]	; (80101a4 <tcp_listen_input+0x1e8>)
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	4b63      	ldr	r3, [pc, #396]	; (80101a8 <tcp_listen_input+0x1ec>)
 801001c:	4602      	mov	r2, r0
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f002 ff7e 	bl	8012f20 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010024:	e0a9      	b.n	801017a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010026:	4b57      	ldr	r3, [pc, #348]	; (8010184 <tcp_listen_input+0x1c8>)
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	f003 0302 	and.w	r3, r3, #2
 801002e:	2b00      	cmp	r3, #0
 8010030:	f000 80a3 	beq.w	801017a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	7d5b      	ldrb	r3, [r3, #21]
 8010038:	4618      	mov	r0, r3
 801003a:	f7ff f927 	bl	800f28c <tcp_alloc>
 801003e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d111      	bne.n	801006a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	699b      	ldr	r3, [r3, #24]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d00a      	beq.n	8010064 <tcp_listen_input+0xa8>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	699b      	ldr	r3, [r3, #24]
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	6910      	ldr	r0, [r2, #16]
 8010056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801005a:	2100      	movs	r1, #0
 801005c:	4798      	blx	r3
 801005e:	4603      	mov	r3, r0
 8010060:	73bb      	strb	r3, [r7, #14]
      return;
 8010062:	e08b      	b.n	801017c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010064:	23f0      	movs	r3, #240	; 0xf0
 8010066:	73bb      	strb	r3, [r7, #14]
      return;
 8010068:	e088      	b.n	801017c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801006a:	4b50      	ldr	r3, [pc, #320]	; (80101ac <tcp_listen_input+0x1f0>)
 801006c:	695a      	ldr	r2, [r3, #20]
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010072:	4b4e      	ldr	r3, [pc, #312]	; (80101ac <tcp_listen_input+0x1f0>)
 8010074:	691a      	ldr	r2, [r3, #16]
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	8ada      	ldrh	r2, [r3, #22]
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010082:	4b47      	ldr	r3, [pc, #284]	; (80101a0 <tcp_listen_input+0x1e4>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	881b      	ldrh	r3, [r3, #0]
 8010088:	b29a      	uxth	r2, r3
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	2203      	movs	r2, #3
 8010092:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010094:	4b41      	ldr	r3, [pc, #260]	; (801019c <tcp_listen_input+0x1e0>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	1c5a      	adds	r2, r3, #1
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80100a6:	6978      	ldr	r0, [r7, #20]
 80100a8:	f7ff fa58 	bl	800f55c <tcp_next_iss>
 80100ac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	693a      	ldr	r2, [r7, #16]
 80100b2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	693a      	ldr	r2, [r7, #16]
 80100b8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	693a      	ldr	r2, [r7, #16]
 80100be:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	693a      	ldr	r2, [r7, #16]
 80100c4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80100c6:	4b35      	ldr	r3, [pc, #212]	; (801019c <tcp_listen_input+0x1e0>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	1e5a      	subs	r2, r3, #1
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	691a      	ldr	r2, [r3, #16]
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	687a      	ldr	r2, [r7, #4]
 80100dc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	7a5b      	ldrb	r3, [r3, #9]
 80100e2:	f003 030c 	and.w	r3, r3, #12
 80100e6:	b2da      	uxtb	r2, r3
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	7a1a      	ldrb	r2, [r3, #8]
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80100f4:	4b2e      	ldr	r3, [pc, #184]	; (80101b0 <tcp_listen_input+0x1f4>)
 80100f6:	681a      	ldr	r2, [r3, #0]
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	60da      	str	r2, [r3, #12]
 80100fc:	4a2c      	ldr	r2, [pc, #176]	; (80101b0 <tcp_listen_input+0x1f4>)
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	6013      	str	r3, [r2, #0]
 8010102:	f003 f8cf 	bl	80132a4 <tcp_timer_needed>
 8010106:	4b2b      	ldr	r3, [pc, #172]	; (80101b4 <tcp_listen_input+0x1f8>)
 8010108:	2201      	movs	r2, #1
 801010a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801010c:	6978      	ldr	r0, [r7, #20]
 801010e:	f001 fd8d 	bl	8011c2c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010112:	4b23      	ldr	r3, [pc, #140]	; (80101a0 <tcp_listen_input+0x1e4>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	89db      	ldrh	r3, [r3, #14]
 8010118:	b29a      	uxth	r2, r3
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	3304      	adds	r3, #4
 8010134:	4618      	mov	r0, r3
 8010136:	f005 f819 	bl	801516c <ip4_route>
 801013a:	4601      	mov	r1, r0
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	3304      	adds	r3, #4
 8010140:	461a      	mov	r2, r3
 8010142:	4620      	mov	r0, r4
 8010144:	f7ff fa30 	bl	800f5a8 <tcp_eff_send_mss_netif>
 8010148:	4603      	mov	r3, r0
 801014a:	461a      	mov	r2, r3
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010150:	2112      	movs	r1, #18
 8010152:	6978      	ldr	r0, [r7, #20]
 8010154:	f002 f842 	bl	80121dc <tcp_enqueue_flags>
 8010158:	4603      	mov	r3, r0
 801015a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801015c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d004      	beq.n	801016e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010164:	2100      	movs	r1, #0
 8010166:	6978      	ldr	r0, [r7, #20]
 8010168:	f7fe f97a 	bl	800e460 <tcp_abandon>
      return;
 801016c:	e006      	b.n	801017c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801016e:	6978      	ldr	r0, [r7, #20]
 8010170:	f002 f922 	bl	80123b8 <tcp_output>
  return;
 8010174:	e001      	b.n	801017a <tcp_listen_input+0x1be>
    return;
 8010176:	bf00      	nop
 8010178:	e000      	b.n	801017c <tcp_listen_input+0x1c0>
  return;
 801017a:	bf00      	nop
}
 801017c:	371c      	adds	r7, #28
 801017e:	46bd      	mov	sp, r7
 8010180:	bd90      	pop	{r4, r7, pc}
 8010182:	bf00      	nop
 8010184:	2406454c 	.word	0x2406454c
 8010188:	08018d5c 	.word	0x08018d5c
 801018c:	08018f54 	.word	0x08018f54
 8010190:	08018da8 	.word	0x08018da8
 8010194:	24064544 	.word	0x24064544
 8010198:	2406454a 	.word	0x2406454a
 801019c:	24064540 	.word	0x24064540
 80101a0:	24064530 	.word	0x24064530
 80101a4:	24064d70 	.word	0x24064d70
 80101a8:	24064d74 	.word	0x24064d74
 80101ac:	24064d60 	.word	0x24064d60
 80101b0:	2406b460 	.word	0x2406b460
 80101b4:	2406b45c 	.word	0x2406b45c

080101b8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b086      	sub	sp, #24
 80101bc:	af04      	add	r7, sp, #16
 80101be:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80101c0:	4b2f      	ldr	r3, [pc, #188]	; (8010280 <tcp_timewait_input+0xc8>)
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	f003 0304 	and.w	r3, r3, #4
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d153      	bne.n	8010274 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d106      	bne.n	80101e0 <tcp_timewait_input+0x28>
 80101d2:	4b2c      	ldr	r3, [pc, #176]	; (8010284 <tcp_timewait_input+0xcc>)
 80101d4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80101d8:	492b      	ldr	r1, [pc, #172]	; (8010288 <tcp_timewait_input+0xd0>)
 80101da:	482c      	ldr	r0, [pc, #176]	; (801028c <tcp_timewait_input+0xd4>)
 80101dc:	f006 fc5e 	bl	8016a9c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80101e0:	4b27      	ldr	r3, [pc, #156]	; (8010280 <tcp_timewait_input+0xc8>)
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	f003 0302 	and.w	r3, r3, #2
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d02a      	beq.n	8010242 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80101ec:	4b28      	ldr	r3, [pc, #160]	; (8010290 <tcp_timewait_input+0xd8>)
 80101ee:	681a      	ldr	r2, [r3, #0]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f4:	1ad3      	subs	r3, r2, r3
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	db2d      	blt.n	8010256 <tcp_timewait_input+0x9e>
 80101fa:	4b25      	ldr	r3, [pc, #148]	; (8010290 <tcp_timewait_input+0xd8>)
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010202:	6879      	ldr	r1, [r7, #4]
 8010204:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010206:	440b      	add	r3, r1
 8010208:	1ad3      	subs	r3, r2, r3
 801020a:	2b00      	cmp	r3, #0
 801020c:	dc23      	bgt.n	8010256 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801020e:	4b21      	ldr	r3, [pc, #132]	; (8010294 <tcp_timewait_input+0xdc>)
 8010210:	6819      	ldr	r1, [r3, #0]
 8010212:	4b21      	ldr	r3, [pc, #132]	; (8010298 <tcp_timewait_input+0xe0>)
 8010214:	881b      	ldrh	r3, [r3, #0]
 8010216:	461a      	mov	r2, r3
 8010218:	4b1d      	ldr	r3, [pc, #116]	; (8010290 <tcp_timewait_input+0xd8>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801021e:	4b1f      	ldr	r3, [pc, #124]	; (801029c <tcp_timewait_input+0xe4>)
 8010220:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010222:	885b      	ldrh	r3, [r3, #2]
 8010224:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010226:	4a1d      	ldr	r2, [pc, #116]	; (801029c <tcp_timewait_input+0xe4>)
 8010228:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801022a:	8812      	ldrh	r2, [r2, #0]
 801022c:	b292      	uxth	r2, r2
 801022e:	9202      	str	r2, [sp, #8]
 8010230:	9301      	str	r3, [sp, #4]
 8010232:	4b1b      	ldr	r3, [pc, #108]	; (80102a0 <tcp_timewait_input+0xe8>)
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	4b1b      	ldr	r3, [pc, #108]	; (80102a4 <tcp_timewait_input+0xec>)
 8010238:	4602      	mov	r2, r0
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f002 fe70 	bl	8012f20 <tcp_rst>
      return;
 8010240:	e01b      	b.n	801027a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010242:	4b0f      	ldr	r3, [pc, #60]	; (8010280 <tcp_timewait_input+0xc8>)
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	f003 0301 	and.w	r3, r3, #1
 801024a:	2b00      	cmp	r3, #0
 801024c:	d003      	beq.n	8010256 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801024e:	4b16      	ldr	r3, [pc, #88]	; (80102a8 <tcp_timewait_input+0xf0>)
 8010250:	681a      	ldr	r2, [r3, #0]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010256:	4b10      	ldr	r3, [pc, #64]	; (8010298 <tcp_timewait_input+0xe0>)
 8010258:	881b      	ldrh	r3, [r3, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00c      	beq.n	8010278 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	8b5b      	ldrh	r3, [r3, #26]
 8010262:	f043 0302 	orr.w	r3, r3, #2
 8010266:	b29a      	uxth	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f002 f8a3 	bl	80123b8 <tcp_output>
  }
  return;
 8010272:	e001      	b.n	8010278 <tcp_timewait_input+0xc0>
    return;
 8010274:	bf00      	nop
 8010276:	e000      	b.n	801027a <tcp_timewait_input+0xc2>
  return;
 8010278:	bf00      	nop
}
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	2406454c 	.word	0x2406454c
 8010284:	08018d5c 	.word	0x08018d5c
 8010288:	08018f74 	.word	0x08018f74
 801028c:	08018da8 	.word	0x08018da8
 8010290:	24064540 	.word	0x24064540
 8010294:	24064544 	.word	0x24064544
 8010298:	2406454a 	.word	0x2406454a
 801029c:	24064530 	.word	0x24064530
 80102a0:	24064d70 	.word	0x24064d70
 80102a4:	24064d74 	.word	0x24064d74
 80102a8:	2406b464 	.word	0x2406b464

080102ac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80102ac:	b590      	push	{r4, r7, lr}
 80102ae:	b08d      	sub	sp, #52	; 0x34
 80102b0:	af04      	add	r7, sp, #16
 80102b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80102b4:	2300      	movs	r3, #0
 80102b6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80102b8:	2300      	movs	r3, #0
 80102ba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d106      	bne.n	80102d0 <tcp_process+0x24>
 80102c2:	4ba5      	ldr	r3, [pc, #660]	; (8010558 <tcp_process+0x2ac>)
 80102c4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80102c8:	49a4      	ldr	r1, [pc, #656]	; (801055c <tcp_process+0x2b0>)
 80102ca:	48a5      	ldr	r0, [pc, #660]	; (8010560 <tcp_process+0x2b4>)
 80102cc:	f006 fbe6 	bl	8016a9c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80102d0:	4ba4      	ldr	r3, [pc, #656]	; (8010564 <tcp_process+0x2b8>)
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	f003 0304 	and.w	r3, r3, #4
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d04e      	beq.n	801037a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	7d1b      	ldrb	r3, [r3, #20]
 80102e0:	2b02      	cmp	r3, #2
 80102e2:	d108      	bne.n	80102f6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102e8:	4b9f      	ldr	r3, [pc, #636]	; (8010568 <tcp_process+0x2bc>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d123      	bne.n	8010338 <tcp_process+0x8c>
        acceptable = 1;
 80102f0:	2301      	movs	r3, #1
 80102f2:	76fb      	strb	r3, [r7, #27]
 80102f4:	e020      	b.n	8010338 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102fa:	4b9c      	ldr	r3, [pc, #624]	; (801056c <tcp_process+0x2c0>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d102      	bne.n	8010308 <tcp_process+0x5c>
        acceptable = 1;
 8010302:	2301      	movs	r3, #1
 8010304:	76fb      	strb	r3, [r7, #27]
 8010306:	e017      	b.n	8010338 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010308:	4b98      	ldr	r3, [pc, #608]	; (801056c <tcp_process+0x2c0>)
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010310:	1ad3      	subs	r3, r2, r3
 8010312:	2b00      	cmp	r3, #0
 8010314:	db10      	blt.n	8010338 <tcp_process+0x8c>
 8010316:	4b95      	ldr	r3, [pc, #596]	; (801056c <tcp_process+0x2c0>)
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801031e:	6879      	ldr	r1, [r7, #4]
 8010320:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010322:	440b      	add	r3, r1
 8010324:	1ad3      	subs	r3, r2, r3
 8010326:	2b00      	cmp	r3, #0
 8010328:	dc06      	bgt.n	8010338 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	8b5b      	ldrh	r3, [r3, #26]
 801032e:	f043 0302 	orr.w	r3, r3, #2
 8010332:	b29a      	uxth	r2, r3
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010338:	7efb      	ldrb	r3, [r7, #27]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d01b      	beq.n	8010376 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	7d1b      	ldrb	r3, [r3, #20]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d106      	bne.n	8010354 <tcp_process+0xa8>
 8010346:	4b84      	ldr	r3, [pc, #528]	; (8010558 <tcp_process+0x2ac>)
 8010348:	f44f 724e 	mov.w	r2, #824	; 0x338
 801034c:	4988      	ldr	r1, [pc, #544]	; (8010570 <tcp_process+0x2c4>)
 801034e:	4884      	ldr	r0, [pc, #528]	; (8010560 <tcp_process+0x2b4>)
 8010350:	f006 fba4 	bl	8016a9c <iprintf>
      recv_flags |= TF_RESET;
 8010354:	4b87      	ldr	r3, [pc, #540]	; (8010574 <tcp_process+0x2c8>)
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	f043 0308 	orr.w	r3, r3, #8
 801035c:	b2da      	uxtb	r2, r3
 801035e:	4b85      	ldr	r3, [pc, #532]	; (8010574 <tcp_process+0x2c8>)
 8010360:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	8b5b      	ldrh	r3, [r3, #26]
 8010366:	f023 0301 	bic.w	r3, r3, #1
 801036a:	b29a      	uxth	r2, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010370:	f06f 030d 	mvn.w	r3, #13
 8010374:	e37a      	b.n	8010a6c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010376:	2300      	movs	r3, #0
 8010378:	e378      	b.n	8010a6c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801037a:	4b7a      	ldr	r3, [pc, #488]	; (8010564 <tcp_process+0x2b8>)
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	f003 0302 	and.w	r3, r3, #2
 8010382:	2b00      	cmp	r3, #0
 8010384:	d010      	beq.n	80103a8 <tcp_process+0xfc>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	7d1b      	ldrb	r3, [r3, #20]
 801038a:	2b02      	cmp	r3, #2
 801038c:	d00c      	beq.n	80103a8 <tcp_process+0xfc>
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	7d1b      	ldrb	r3, [r3, #20]
 8010392:	2b03      	cmp	r3, #3
 8010394:	d008      	beq.n	80103a8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	8b5b      	ldrh	r3, [r3, #26]
 801039a:	f043 0302 	orr.w	r3, r3, #2
 801039e:	b29a      	uxth	r2, r3
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80103a4:	2300      	movs	r3, #0
 80103a6:	e361      	b.n	8010a6c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	8b5b      	ldrh	r3, [r3, #26]
 80103ac:	f003 0310 	and.w	r3, r3, #16
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d103      	bne.n	80103bc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80103b4:	4b70      	ldr	r3, [pc, #448]	; (8010578 <tcp_process+0x2cc>)
 80103b6:	681a      	ldr	r2, [r3, #0]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2200      	movs	r2, #0
 80103c0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f001 fc2d 	bl	8011c2c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	7d1b      	ldrb	r3, [r3, #20]
 80103d6:	3b02      	subs	r3, #2
 80103d8:	2b07      	cmp	r3, #7
 80103da:	f200 8337 	bhi.w	8010a4c <tcp_process+0x7a0>
 80103de:	a201      	add	r2, pc, #4	; (adr r2, 80103e4 <tcp_process+0x138>)
 80103e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e4:	08010405 	.word	0x08010405
 80103e8:	08010635 	.word	0x08010635
 80103ec:	080107ad 	.word	0x080107ad
 80103f0:	080107d7 	.word	0x080107d7
 80103f4:	080108fb 	.word	0x080108fb
 80103f8:	080107ad 	.word	0x080107ad
 80103fc:	08010987 	.word	0x08010987
 8010400:	08010a17 	.word	0x08010a17
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010404:	4b57      	ldr	r3, [pc, #348]	; (8010564 <tcp_process+0x2b8>)
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	f003 0310 	and.w	r3, r3, #16
 801040c:	2b00      	cmp	r3, #0
 801040e:	f000 80e4 	beq.w	80105da <tcp_process+0x32e>
 8010412:	4b54      	ldr	r3, [pc, #336]	; (8010564 <tcp_process+0x2b8>)
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	f003 0302 	and.w	r3, r3, #2
 801041a:	2b00      	cmp	r3, #0
 801041c:	f000 80dd 	beq.w	80105da <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010424:	1c5a      	adds	r2, r3, #1
 8010426:	4b50      	ldr	r3, [pc, #320]	; (8010568 <tcp_process+0x2bc>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	429a      	cmp	r2, r3
 801042c:	f040 80d5 	bne.w	80105da <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010430:	4b4e      	ldr	r3, [pc, #312]	; (801056c <tcp_process+0x2c0>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	1c5a      	adds	r2, r3, #1
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010442:	4b49      	ldr	r3, [pc, #292]	; (8010568 <tcp_process+0x2bc>)
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801044a:	4b4c      	ldr	r3, [pc, #304]	; (801057c <tcp_process+0x2d0>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	89db      	ldrh	r3, [r3, #14]
 8010450:	b29a      	uxth	r2, r3
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010464:	4b41      	ldr	r3, [pc, #260]	; (801056c <tcp_process+0x2c0>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	1e5a      	subs	r2, r3, #1
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2204      	movs	r2, #4
 8010472:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	3304      	adds	r3, #4
 801047c:	4618      	mov	r0, r3
 801047e:	f004 fe75 	bl	801516c <ip4_route>
 8010482:	4601      	mov	r1, r0
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	3304      	adds	r3, #4
 8010488:	461a      	mov	r2, r3
 801048a:	4620      	mov	r0, r4
 801048c:	f7ff f88c 	bl	800f5a8 <tcp_eff_send_mss_netif>
 8010490:	4603      	mov	r3, r0
 8010492:	461a      	mov	r2, r3
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801049c:	009a      	lsls	r2, r3, #2
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104a2:	005b      	lsls	r3, r3, #1
 80104a4:	f241 111c 	movw	r1, #4380	; 0x111c
 80104a8:	428b      	cmp	r3, r1
 80104aa:	bf38      	it	cc
 80104ac:	460b      	movcc	r3, r1
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d204      	bcs.n	80104bc <tcp_process+0x210>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	e00d      	b.n	80104d8 <tcp_process+0x22c>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104c0:	005b      	lsls	r3, r3, #1
 80104c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d904      	bls.n	80104d4 <tcp_process+0x228>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104ce:	005b      	lsls	r3, r3, #1
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	e001      	b.n	80104d8 <tcp_process+0x22c>
 80104d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80104d8:	687a      	ldr	r2, [r7, #4]
 80104da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d106      	bne.n	80104f6 <tcp_process+0x24a>
 80104e8:	4b1b      	ldr	r3, [pc, #108]	; (8010558 <tcp_process+0x2ac>)
 80104ea:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80104ee:	4924      	ldr	r1, [pc, #144]	; (8010580 <tcp_process+0x2d4>)
 80104f0:	481b      	ldr	r0, [pc, #108]	; (8010560 <tcp_process+0x2b4>)
 80104f2:	f006 fad3 	bl	8016a9c <iprintf>
        --pcb->snd_queuelen;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104fc:	3b01      	subs	r3, #1
 80104fe:	b29a      	uxth	r2, r3
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801050a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d111      	bne.n	8010536 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010516:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d106      	bne.n	801052c <tcp_process+0x280>
 801051e:	4b0e      	ldr	r3, [pc, #56]	; (8010558 <tcp_process+0x2ac>)
 8010520:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010524:	4917      	ldr	r1, [pc, #92]	; (8010584 <tcp_process+0x2d8>)
 8010526:	480e      	ldr	r0, [pc, #56]	; (8010560 <tcp_process+0x2b4>)
 8010528:	f006 fab8 	bl	8016a9c <iprintf>
          pcb->unsent = rseg->next;
 801052c:	69fb      	ldr	r3, [r7, #28]
 801052e:	681a      	ldr	r2, [r3, #0]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	66da      	str	r2, [r3, #108]	; 0x6c
 8010534:	e003      	b.n	801053e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010536:	69fb      	ldr	r3, [r7, #28]
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801053e:	69f8      	ldr	r0, [r7, #28]
 8010540:	f7fe fd3b 	bl	800efba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010548:	2b00      	cmp	r3, #0
 801054a:	d11d      	bne.n	8010588 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010552:	861a      	strh	r2, [r3, #48]	; 0x30
 8010554:	e01f      	b.n	8010596 <tcp_process+0x2ea>
 8010556:	bf00      	nop
 8010558:	08018d5c 	.word	0x08018d5c
 801055c:	08018f94 	.word	0x08018f94
 8010560:	08018da8 	.word	0x08018da8
 8010564:	2406454c 	.word	0x2406454c
 8010568:	24064544 	.word	0x24064544
 801056c:	24064540 	.word	0x24064540
 8010570:	08018fb0 	.word	0x08018fb0
 8010574:	2406454d 	.word	0x2406454d
 8010578:	2406b464 	.word	0x2406b464
 801057c:	24064530 	.word	0x24064530
 8010580:	08018fd0 	.word	0x08018fd0
 8010584:	08018fe8 	.word	0x08018fe8
        } else {
          pcb->rtime = 0;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2200      	movs	r2, #0
 8010592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00a      	beq.n	80105b6 <tcp_process+0x30a>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	6910      	ldr	r0, [r2, #16]
 80105aa:	2200      	movs	r2, #0
 80105ac:	6879      	ldr	r1, [r7, #4]
 80105ae:	4798      	blx	r3
 80105b0:	4603      	mov	r3, r0
 80105b2:	76bb      	strb	r3, [r7, #26]
 80105b4:	e001      	b.n	80105ba <tcp_process+0x30e>
 80105b6:	2300      	movs	r3, #0
 80105b8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80105ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80105be:	f113 0f0d 	cmn.w	r3, #13
 80105c2:	d102      	bne.n	80105ca <tcp_process+0x31e>
          return ERR_ABRT;
 80105c4:	f06f 030c 	mvn.w	r3, #12
 80105c8:	e250      	b.n	8010a6c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	8b5b      	ldrh	r3, [r3, #26]
 80105ce:	f043 0302 	orr.w	r3, r3, #2
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80105d8:	e23a      	b.n	8010a50 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80105da:	4b9d      	ldr	r3, [pc, #628]	; (8010850 <tcp_process+0x5a4>)
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	f003 0310 	and.w	r3, r3, #16
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f000 8234 	beq.w	8010a50 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105e8:	4b9a      	ldr	r3, [pc, #616]	; (8010854 <tcp_process+0x5a8>)
 80105ea:	6819      	ldr	r1, [r3, #0]
 80105ec:	4b9a      	ldr	r3, [pc, #616]	; (8010858 <tcp_process+0x5ac>)
 80105ee:	881b      	ldrh	r3, [r3, #0]
 80105f0:	461a      	mov	r2, r3
 80105f2:	4b9a      	ldr	r3, [pc, #616]	; (801085c <tcp_process+0x5b0>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105f8:	4b99      	ldr	r3, [pc, #612]	; (8010860 <tcp_process+0x5b4>)
 80105fa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105fc:	885b      	ldrh	r3, [r3, #2]
 80105fe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010600:	4a97      	ldr	r2, [pc, #604]	; (8010860 <tcp_process+0x5b4>)
 8010602:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010604:	8812      	ldrh	r2, [r2, #0]
 8010606:	b292      	uxth	r2, r2
 8010608:	9202      	str	r2, [sp, #8]
 801060a:	9301      	str	r3, [sp, #4]
 801060c:	4b95      	ldr	r3, [pc, #596]	; (8010864 <tcp_process+0x5b8>)
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	4b95      	ldr	r3, [pc, #596]	; (8010868 <tcp_process+0x5bc>)
 8010612:	4602      	mov	r2, r0
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f002 fc83 	bl	8012f20 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010620:	2b05      	cmp	r3, #5
 8010622:	f200 8215 	bhi.w	8010a50 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f002 fa4d 	bl	8012acc <tcp_rexmit_rto>
      break;
 8010632:	e20d      	b.n	8010a50 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010634:	4b86      	ldr	r3, [pc, #536]	; (8010850 <tcp_process+0x5a4>)
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	f003 0310 	and.w	r3, r3, #16
 801063c:	2b00      	cmp	r3, #0
 801063e:	f000 80a1 	beq.w	8010784 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010642:	4b84      	ldr	r3, [pc, #528]	; (8010854 <tcp_process+0x5a8>)
 8010644:	681a      	ldr	r2, [r3, #0]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	3b01      	subs	r3, #1
 801064e:	2b00      	cmp	r3, #0
 8010650:	db7e      	blt.n	8010750 <tcp_process+0x4a4>
 8010652:	4b80      	ldr	r3, [pc, #512]	; (8010854 <tcp_process+0x5a8>)
 8010654:	681a      	ldr	r2, [r3, #0]
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801065a:	1ad3      	subs	r3, r2, r3
 801065c:	2b00      	cmp	r3, #0
 801065e:	dc77      	bgt.n	8010750 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2204      	movs	r2, #4
 8010664:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801066a:	2b00      	cmp	r3, #0
 801066c:	d102      	bne.n	8010674 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801066e:	23fa      	movs	r3, #250	; 0xfa
 8010670:	76bb      	strb	r3, [r7, #26]
 8010672:	e01d      	b.n	80106b0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010678:	699b      	ldr	r3, [r3, #24]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d106      	bne.n	801068c <tcp_process+0x3e0>
 801067e:	4b7b      	ldr	r3, [pc, #492]	; (801086c <tcp_process+0x5c0>)
 8010680:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010684:	497a      	ldr	r1, [pc, #488]	; (8010870 <tcp_process+0x5c4>)
 8010686:	487b      	ldr	r0, [pc, #492]	; (8010874 <tcp_process+0x5c8>)
 8010688:	f006 fa08 	bl	8016a9c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010690:	699b      	ldr	r3, [r3, #24]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d00a      	beq.n	80106ac <tcp_process+0x400>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801069a:	699b      	ldr	r3, [r3, #24]
 801069c:	687a      	ldr	r2, [r7, #4]
 801069e:	6910      	ldr	r0, [r2, #16]
 80106a0:	2200      	movs	r2, #0
 80106a2:	6879      	ldr	r1, [r7, #4]
 80106a4:	4798      	blx	r3
 80106a6:	4603      	mov	r3, r0
 80106a8:	76bb      	strb	r3, [r7, #26]
 80106aa:	e001      	b.n	80106b0 <tcp_process+0x404>
 80106ac:	23f0      	movs	r3, #240	; 0xf0
 80106ae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80106b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d00a      	beq.n	80106ce <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80106b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80106bc:	f113 0f0d 	cmn.w	r3, #13
 80106c0:	d002      	beq.n	80106c8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f7fd ff8a 	bl	800e5dc <tcp_abort>
            }
            return ERR_ABRT;
 80106c8:	f06f 030c 	mvn.w	r3, #12
 80106cc:	e1ce      	b.n	8010a6c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 fae0 	bl	8010c94 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80106d4:	4b68      	ldr	r3, [pc, #416]	; (8010878 <tcp_process+0x5cc>)
 80106d6:	881b      	ldrh	r3, [r3, #0]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d005      	beq.n	80106e8 <tcp_process+0x43c>
            recv_acked--;
 80106dc:	4b66      	ldr	r3, [pc, #408]	; (8010878 <tcp_process+0x5cc>)
 80106de:	881b      	ldrh	r3, [r3, #0]
 80106e0:	3b01      	subs	r3, #1
 80106e2:	b29a      	uxth	r2, r3
 80106e4:	4b64      	ldr	r3, [pc, #400]	; (8010878 <tcp_process+0x5cc>)
 80106e6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106ec:	009a      	lsls	r2, r3, #2
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106f2:	005b      	lsls	r3, r3, #1
 80106f4:	f241 111c 	movw	r1, #4380	; 0x111c
 80106f8:	428b      	cmp	r3, r1
 80106fa:	bf38      	it	cc
 80106fc:	460b      	movcc	r3, r1
 80106fe:	429a      	cmp	r2, r3
 8010700:	d204      	bcs.n	801070c <tcp_process+0x460>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010706:	009b      	lsls	r3, r3, #2
 8010708:	b29b      	uxth	r3, r3
 801070a:	e00d      	b.n	8010728 <tcp_process+0x47c>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010710:	005b      	lsls	r3, r3, #1
 8010712:	f241 121c 	movw	r2, #4380	; 0x111c
 8010716:	4293      	cmp	r3, r2
 8010718:	d904      	bls.n	8010724 <tcp_process+0x478>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801071e:	005b      	lsls	r3, r3, #1
 8010720:	b29b      	uxth	r3, r3
 8010722:	e001      	b.n	8010728 <tcp_process+0x47c>
 8010724:	f241 131c 	movw	r3, #4380	; 0x111c
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801072e:	4b53      	ldr	r3, [pc, #332]	; (801087c <tcp_process+0x5d0>)
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	f003 0320 	and.w	r3, r3, #32
 8010736:	2b00      	cmp	r3, #0
 8010738:	d037      	beq.n	80107aa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	8b5b      	ldrh	r3, [r3, #26]
 801073e:	f043 0302 	orr.w	r3, r3, #2
 8010742:	b29a      	uxth	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2207      	movs	r2, #7
 801074c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801074e:	e02c      	b.n	80107aa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010750:	4b40      	ldr	r3, [pc, #256]	; (8010854 <tcp_process+0x5a8>)
 8010752:	6819      	ldr	r1, [r3, #0]
 8010754:	4b40      	ldr	r3, [pc, #256]	; (8010858 <tcp_process+0x5ac>)
 8010756:	881b      	ldrh	r3, [r3, #0]
 8010758:	461a      	mov	r2, r3
 801075a:	4b40      	ldr	r3, [pc, #256]	; (801085c <tcp_process+0x5b0>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010760:	4b3f      	ldr	r3, [pc, #252]	; (8010860 <tcp_process+0x5b4>)
 8010762:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010764:	885b      	ldrh	r3, [r3, #2]
 8010766:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010768:	4a3d      	ldr	r2, [pc, #244]	; (8010860 <tcp_process+0x5b4>)
 801076a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801076c:	8812      	ldrh	r2, [r2, #0]
 801076e:	b292      	uxth	r2, r2
 8010770:	9202      	str	r2, [sp, #8]
 8010772:	9301      	str	r3, [sp, #4]
 8010774:	4b3b      	ldr	r3, [pc, #236]	; (8010864 <tcp_process+0x5b8>)
 8010776:	9300      	str	r3, [sp, #0]
 8010778:	4b3b      	ldr	r3, [pc, #236]	; (8010868 <tcp_process+0x5bc>)
 801077a:	4602      	mov	r2, r0
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f002 fbcf 	bl	8012f20 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010782:	e167      	b.n	8010a54 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010784:	4b32      	ldr	r3, [pc, #200]	; (8010850 <tcp_process+0x5a4>)
 8010786:	781b      	ldrb	r3, [r3, #0]
 8010788:	f003 0302 	and.w	r3, r3, #2
 801078c:	2b00      	cmp	r3, #0
 801078e:	f000 8161 	beq.w	8010a54 <tcp_process+0x7a8>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010796:	1e5a      	subs	r2, r3, #1
 8010798:	4b30      	ldr	r3, [pc, #192]	; (801085c <tcp_process+0x5b0>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	429a      	cmp	r2, r3
 801079e:	f040 8159 	bne.w	8010a54 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f002 f9b4 	bl	8012b10 <tcp_rexmit>
      break;
 80107a8:	e154      	b.n	8010a54 <tcp_process+0x7a8>
 80107aa:	e153      	b.n	8010a54 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f000 fa71 	bl	8010c94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80107b2:	4b32      	ldr	r3, [pc, #200]	; (801087c <tcp_process+0x5d0>)
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	f003 0320 	and.w	r3, r3, #32
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	f000 814c 	beq.w	8010a58 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	8b5b      	ldrh	r3, [r3, #26]
 80107c4:	f043 0302 	orr.w	r3, r3, #2
 80107c8:	b29a      	uxth	r2, r3
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2207      	movs	r2, #7
 80107d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80107d4:	e140      	b.n	8010a58 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f000 fa5c 	bl	8010c94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80107dc:	4b27      	ldr	r3, [pc, #156]	; (801087c <tcp_process+0x5d0>)
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	f003 0320 	and.w	r3, r3, #32
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d071      	beq.n	80108cc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80107e8:	4b19      	ldr	r3, [pc, #100]	; (8010850 <tcp_process+0x5a4>)
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	f003 0310 	and.w	r3, r3, #16
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d060      	beq.n	80108b6 <tcp_process+0x60a>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107f8:	4b16      	ldr	r3, [pc, #88]	; (8010854 <tcp_process+0x5a8>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d15a      	bne.n	80108b6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010804:	2b00      	cmp	r3, #0
 8010806:	d156      	bne.n	80108b6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	8b5b      	ldrh	r3, [r3, #26]
 801080c:	f043 0302 	orr.w	r3, r3, #2
 8010810:	b29a      	uxth	r2, r3
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f7fe fdbc 	bl	800f394 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801081c:	4b18      	ldr	r3, [pc, #96]	; (8010880 <tcp_process+0x5d4>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	687a      	ldr	r2, [r7, #4]
 8010822:	429a      	cmp	r2, r3
 8010824:	d105      	bne.n	8010832 <tcp_process+0x586>
 8010826:	4b16      	ldr	r3, [pc, #88]	; (8010880 <tcp_process+0x5d4>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	4a14      	ldr	r2, [pc, #80]	; (8010880 <tcp_process+0x5d4>)
 801082e:	6013      	str	r3, [r2, #0]
 8010830:	e02e      	b.n	8010890 <tcp_process+0x5e4>
 8010832:	4b13      	ldr	r3, [pc, #76]	; (8010880 <tcp_process+0x5d4>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	617b      	str	r3, [r7, #20]
 8010838:	e027      	b.n	801088a <tcp_process+0x5de>
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	68db      	ldr	r3, [r3, #12]
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	429a      	cmp	r2, r3
 8010842:	d11f      	bne.n	8010884 <tcp_process+0x5d8>
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	68da      	ldr	r2, [r3, #12]
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	60da      	str	r2, [r3, #12]
 801084c:	e020      	b.n	8010890 <tcp_process+0x5e4>
 801084e:	bf00      	nop
 8010850:	2406454c 	.word	0x2406454c
 8010854:	24064544 	.word	0x24064544
 8010858:	2406454a 	.word	0x2406454a
 801085c:	24064540 	.word	0x24064540
 8010860:	24064530 	.word	0x24064530
 8010864:	24064d70 	.word	0x24064d70
 8010868:	24064d74 	.word	0x24064d74
 801086c:	08018d5c 	.word	0x08018d5c
 8010870:	08018ffc 	.word	0x08018ffc
 8010874:	08018da8 	.word	0x08018da8
 8010878:	24064548 	.word	0x24064548
 801087c:	2406454d 	.word	0x2406454d
 8010880:	2406b460 	.word	0x2406b460
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	617b      	str	r3, [r7, #20]
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d1d4      	bne.n	801083a <tcp_process+0x58e>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2200      	movs	r2, #0
 8010894:	60da      	str	r2, [r3, #12]
 8010896:	4b77      	ldr	r3, [pc, #476]	; (8010a74 <tcp_process+0x7c8>)
 8010898:	2201      	movs	r2, #1
 801089a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	220a      	movs	r2, #10
 80108a0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80108a2:	4b75      	ldr	r3, [pc, #468]	; (8010a78 <tcp_process+0x7cc>)
 80108a4:	681a      	ldr	r2, [r3, #0]
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	60da      	str	r2, [r3, #12]
 80108aa:	4a73      	ldr	r2, [pc, #460]	; (8010a78 <tcp_process+0x7cc>)
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6013      	str	r3, [r2, #0]
 80108b0:	f002 fcf8 	bl	80132a4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80108b4:	e0d2      	b.n	8010a5c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	8b5b      	ldrh	r3, [r3, #26]
 80108ba:	f043 0302 	orr.w	r3, r3, #2
 80108be:	b29a      	uxth	r2, r3
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2208      	movs	r2, #8
 80108c8:	751a      	strb	r2, [r3, #20]
      break;
 80108ca:	e0c7      	b.n	8010a5c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80108cc:	4b6b      	ldr	r3, [pc, #428]	; (8010a7c <tcp_process+0x7d0>)
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	f003 0310 	and.w	r3, r3, #16
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f000 80c1 	beq.w	8010a5c <tcp_process+0x7b0>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108de:	4b68      	ldr	r3, [pc, #416]	; (8010a80 <tcp_process+0x7d4>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	f040 80ba 	bne.w	8010a5c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	f040 80b5 	bne.w	8010a5c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2206      	movs	r2, #6
 80108f6:	751a      	strb	r2, [r3, #20]
      break;
 80108f8:	e0b0      	b.n	8010a5c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f000 f9ca 	bl	8010c94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010900:	4b60      	ldr	r3, [pc, #384]	; (8010a84 <tcp_process+0x7d8>)
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	f003 0320 	and.w	r3, r3, #32
 8010908:	2b00      	cmp	r3, #0
 801090a:	f000 80a9 	beq.w	8010a60 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	8b5b      	ldrh	r3, [r3, #26]
 8010912:	f043 0302 	orr.w	r3, r3, #2
 8010916:	b29a      	uxth	r2, r3
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f7fe fd39 	bl	800f394 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010922:	4b59      	ldr	r3, [pc, #356]	; (8010a88 <tcp_process+0x7dc>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	687a      	ldr	r2, [r7, #4]
 8010928:	429a      	cmp	r2, r3
 801092a:	d105      	bne.n	8010938 <tcp_process+0x68c>
 801092c:	4b56      	ldr	r3, [pc, #344]	; (8010a88 <tcp_process+0x7dc>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	4a55      	ldr	r2, [pc, #340]	; (8010a88 <tcp_process+0x7dc>)
 8010934:	6013      	str	r3, [r2, #0]
 8010936:	e013      	b.n	8010960 <tcp_process+0x6b4>
 8010938:	4b53      	ldr	r3, [pc, #332]	; (8010a88 <tcp_process+0x7dc>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	613b      	str	r3, [r7, #16]
 801093e:	e00c      	b.n	801095a <tcp_process+0x6ae>
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	429a      	cmp	r2, r3
 8010948:	d104      	bne.n	8010954 <tcp_process+0x6a8>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	68da      	ldr	r2, [r3, #12]
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	60da      	str	r2, [r3, #12]
 8010952:	e005      	b.n	8010960 <tcp_process+0x6b4>
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	613b      	str	r3, [r7, #16]
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d1ef      	bne.n	8010940 <tcp_process+0x694>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2200      	movs	r2, #0
 8010964:	60da      	str	r2, [r3, #12]
 8010966:	4b43      	ldr	r3, [pc, #268]	; (8010a74 <tcp_process+0x7c8>)
 8010968:	2201      	movs	r2, #1
 801096a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	220a      	movs	r2, #10
 8010970:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010972:	4b41      	ldr	r3, [pc, #260]	; (8010a78 <tcp_process+0x7cc>)
 8010974:	681a      	ldr	r2, [r3, #0]
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	60da      	str	r2, [r3, #12]
 801097a:	4a3f      	ldr	r2, [pc, #252]	; (8010a78 <tcp_process+0x7cc>)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6013      	str	r3, [r2, #0]
 8010980:	f002 fc90 	bl	80132a4 <tcp_timer_needed>
      }
      break;
 8010984:	e06c      	b.n	8010a60 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f000 f984 	bl	8010c94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801098c:	4b3b      	ldr	r3, [pc, #236]	; (8010a7c <tcp_process+0x7d0>)
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	f003 0310 	and.w	r3, r3, #16
 8010994:	2b00      	cmp	r3, #0
 8010996:	d065      	beq.n	8010a64 <tcp_process+0x7b8>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801099c:	4b38      	ldr	r3, [pc, #224]	; (8010a80 <tcp_process+0x7d4>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d15f      	bne.n	8010a64 <tcp_process+0x7b8>
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d15b      	bne.n	8010a64 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f7fe fcf1 	bl	800f394 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80109b2:	4b35      	ldr	r3, [pc, #212]	; (8010a88 <tcp_process+0x7dc>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	687a      	ldr	r2, [r7, #4]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d105      	bne.n	80109c8 <tcp_process+0x71c>
 80109bc:	4b32      	ldr	r3, [pc, #200]	; (8010a88 <tcp_process+0x7dc>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	68db      	ldr	r3, [r3, #12]
 80109c2:	4a31      	ldr	r2, [pc, #196]	; (8010a88 <tcp_process+0x7dc>)
 80109c4:	6013      	str	r3, [r2, #0]
 80109c6:	e013      	b.n	80109f0 <tcp_process+0x744>
 80109c8:	4b2f      	ldr	r3, [pc, #188]	; (8010a88 <tcp_process+0x7dc>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	60fb      	str	r3, [r7, #12]
 80109ce:	e00c      	b.n	80109ea <tcp_process+0x73e>
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d104      	bne.n	80109e4 <tcp_process+0x738>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	68da      	ldr	r2, [r3, #12]
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	60da      	str	r2, [r3, #12]
 80109e2:	e005      	b.n	80109f0 <tcp_process+0x744>
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	68db      	ldr	r3, [r3, #12]
 80109e8:	60fb      	str	r3, [r7, #12]
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d1ef      	bne.n	80109d0 <tcp_process+0x724>
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2200      	movs	r2, #0
 80109f4:	60da      	str	r2, [r3, #12]
 80109f6:	4b1f      	ldr	r3, [pc, #124]	; (8010a74 <tcp_process+0x7c8>)
 80109f8:	2201      	movs	r2, #1
 80109fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	220a      	movs	r2, #10
 8010a00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010a02:	4b1d      	ldr	r3, [pc, #116]	; (8010a78 <tcp_process+0x7cc>)
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	60da      	str	r2, [r3, #12]
 8010a0a:	4a1b      	ldr	r2, [pc, #108]	; (8010a78 <tcp_process+0x7cc>)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6013      	str	r3, [r2, #0]
 8010a10:	f002 fc48 	bl	80132a4 <tcp_timer_needed>
      }
      break;
 8010a14:	e026      	b.n	8010a64 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f000 f93c 	bl	8010c94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010a1c:	4b17      	ldr	r3, [pc, #92]	; (8010a7c <tcp_process+0x7d0>)
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	f003 0310 	and.w	r3, r3, #16
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d01f      	beq.n	8010a68 <tcp_process+0x7bc>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a2c:	4b14      	ldr	r3, [pc, #80]	; (8010a80 <tcp_process+0x7d4>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d119      	bne.n	8010a68 <tcp_process+0x7bc>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d115      	bne.n	8010a68 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010a3c:	4b11      	ldr	r3, [pc, #68]	; (8010a84 <tcp_process+0x7d8>)
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	f043 0310 	orr.w	r3, r3, #16
 8010a44:	b2da      	uxtb	r2, r3
 8010a46:	4b0f      	ldr	r3, [pc, #60]	; (8010a84 <tcp_process+0x7d8>)
 8010a48:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010a4a:	e00d      	b.n	8010a68 <tcp_process+0x7bc>
    default:
      break;
 8010a4c:	bf00      	nop
 8010a4e:	e00c      	b.n	8010a6a <tcp_process+0x7be>
      break;
 8010a50:	bf00      	nop
 8010a52:	e00a      	b.n	8010a6a <tcp_process+0x7be>
      break;
 8010a54:	bf00      	nop
 8010a56:	e008      	b.n	8010a6a <tcp_process+0x7be>
      break;
 8010a58:	bf00      	nop
 8010a5a:	e006      	b.n	8010a6a <tcp_process+0x7be>
      break;
 8010a5c:	bf00      	nop
 8010a5e:	e004      	b.n	8010a6a <tcp_process+0x7be>
      break;
 8010a60:	bf00      	nop
 8010a62:	e002      	b.n	8010a6a <tcp_process+0x7be>
      break;
 8010a64:	bf00      	nop
 8010a66:	e000      	b.n	8010a6a <tcp_process+0x7be>
      break;
 8010a68:	bf00      	nop
  }
  return ERR_OK;
 8010a6a:	2300      	movs	r3, #0
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3724      	adds	r7, #36	; 0x24
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd90      	pop	{r4, r7, pc}
 8010a74:	2406b45c 	.word	0x2406b45c
 8010a78:	2406b470 	.word	0x2406b470
 8010a7c:	2406454c 	.word	0x2406454c
 8010a80:	24064544 	.word	0x24064544
 8010a84:	2406454d 	.word	0x2406454d
 8010a88:	2406b460 	.word	0x2406b460

08010a8c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010a8c:	b590      	push	{r4, r7, lr}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d106      	bne.n	8010aaa <tcp_oos_insert_segment+0x1e>
 8010a9c:	4b3b      	ldr	r3, [pc, #236]	; (8010b8c <tcp_oos_insert_segment+0x100>)
 8010a9e:	f240 421f 	movw	r2, #1055	; 0x41f
 8010aa2:	493b      	ldr	r1, [pc, #236]	; (8010b90 <tcp_oos_insert_segment+0x104>)
 8010aa4:	483b      	ldr	r0, [pc, #236]	; (8010b94 <tcp_oos_insert_segment+0x108>)
 8010aa6:	f005 fff9 	bl	8016a9c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	899b      	ldrh	r3, [r3, #12]
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fb fa5c 	bl	800bf70 <lwip_htons>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	b2db      	uxtb	r3, r3
 8010abc:	f003 0301 	and.w	r3, r3, #1
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d028      	beq.n	8010b16 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010ac4:	6838      	ldr	r0, [r7, #0]
 8010ac6:	f7fe fa63 	bl	800ef90 <tcp_segs_free>
    next = NULL;
 8010aca:	2300      	movs	r3, #0
 8010acc:	603b      	str	r3, [r7, #0]
 8010ace:	e056      	b.n	8010b7e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	899b      	ldrh	r3, [r3, #12]
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7fb fa49 	bl	800bf70 <lwip_htons>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	f003 0301 	and.w	r3, r3, #1
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d00d      	beq.n	8010b06 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	68db      	ldr	r3, [r3, #12]
 8010aee:	899b      	ldrh	r3, [r3, #12]
 8010af0:	b29c      	uxth	r4, r3
 8010af2:	2001      	movs	r0, #1
 8010af4:	f7fb fa3c 	bl	800bf70 <lwip_htons>
 8010af8:	4603      	mov	r3, r0
 8010afa:	461a      	mov	r2, r3
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	68db      	ldr	r3, [r3, #12]
 8010b00:	4322      	orrs	r2, r4
 8010b02:	b292      	uxth	r2, r2
 8010b04:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	f7fe fa52 	bl	800efba <tcp_seg_free>
    while (next &&
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d00e      	beq.n	8010b3a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	891b      	ldrh	r3, [r3, #8]
 8010b20:	461a      	mov	r2, r3
 8010b22:	4b1d      	ldr	r3, [pc, #116]	; (8010b98 <tcp_oos_insert_segment+0x10c>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	441a      	add	r2, r3
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	6839      	ldr	r1, [r7, #0]
 8010b30:	8909      	ldrh	r1, [r1, #8]
 8010b32:	440b      	add	r3, r1
 8010b34:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	daca      	bge.n	8010ad0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d01e      	beq.n	8010b7e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	891b      	ldrh	r3, [r3, #8]
 8010b44:	461a      	mov	r2, r3
 8010b46:	4b14      	ldr	r3, [pc, #80]	; (8010b98 <tcp_oos_insert_segment+0x10c>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	441a      	add	r2, r3
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	dd12      	ble.n	8010b7e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	4b0d      	ldr	r3, [pc, #52]	; (8010b98 <tcp_oos_insert_segment+0x10c>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	1ad3      	subs	r3, r2, r3
 8010b68:	b29a      	uxth	r2, r3
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	685a      	ldr	r2, [r3, #4]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	891b      	ldrh	r3, [r3, #8]
 8010b76:	4619      	mov	r1, r3
 8010b78:	4610      	mov	r0, r2
 8010b7a:	f7fc fe05 	bl	800d788 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	683a      	ldr	r2, [r7, #0]
 8010b82:	601a      	str	r2, [r3, #0]
}
 8010b84:	bf00      	nop
 8010b86:	3714      	adds	r7, #20
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd90      	pop	{r4, r7, pc}
 8010b8c:	08018d5c 	.word	0x08018d5c
 8010b90:	0801901c 	.word	0x0801901c
 8010b94:	08018da8 	.word	0x08018da8
 8010b98:	24064540 	.word	0x24064540

08010b9c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010b9c:	b5b0      	push	{r4, r5, r7, lr}
 8010b9e:	b086      	sub	sp, #24
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	60b9      	str	r1, [r7, #8]
 8010ba6:	607a      	str	r2, [r7, #4]
 8010ba8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010baa:	e03e      	b.n	8010c2a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fc fff8 	bl	800dbb0 <pbuf_clen>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010bca:	8a7a      	ldrh	r2, [r7, #18]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d906      	bls.n	8010bde <tcp_free_acked_segments+0x42>
 8010bd0:	4b2a      	ldr	r3, [pc, #168]	; (8010c7c <tcp_free_acked_segments+0xe0>)
 8010bd2:	f240 4257 	movw	r2, #1111	; 0x457
 8010bd6:	492a      	ldr	r1, [pc, #168]	; (8010c80 <tcp_free_acked_segments+0xe4>)
 8010bd8:	482a      	ldr	r0, [pc, #168]	; (8010c84 <tcp_free_acked_segments+0xe8>)
 8010bda:	f005 ff5f 	bl	8016a9c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010be4:	8a7b      	ldrh	r3, [r7, #18]
 8010be6:	1ad3      	subs	r3, r2, r3
 8010be8:	b29a      	uxth	r2, r3
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	891a      	ldrh	r2, [r3, #8]
 8010bf4:	4b24      	ldr	r3, [pc, #144]	; (8010c88 <tcp_free_acked_segments+0xec>)
 8010bf6:	881b      	ldrh	r3, [r3, #0]
 8010bf8:	4413      	add	r3, r2
 8010bfa:	b29a      	uxth	r2, r3
 8010bfc:	4b22      	ldr	r3, [pc, #136]	; (8010c88 <tcp_free_acked_segments+0xec>)
 8010bfe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010c00:	6978      	ldr	r0, [r7, #20]
 8010c02:	f7fe f9da 	bl	800efba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d00c      	beq.n	8010c2a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d109      	bne.n	8010c2a <tcp_free_acked_segments+0x8e>
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d106      	bne.n	8010c2a <tcp_free_acked_segments+0x8e>
 8010c1c:	4b17      	ldr	r3, [pc, #92]	; (8010c7c <tcp_free_acked_segments+0xe0>)
 8010c1e:	f240 4261 	movw	r2, #1121	; 0x461
 8010c22:	491a      	ldr	r1, [pc, #104]	; (8010c8c <tcp_free_acked_segments+0xf0>)
 8010c24:	4817      	ldr	r0, [pc, #92]	; (8010c84 <tcp_free_acked_segments+0xe8>)
 8010c26:	f005 ff39 	bl	8016a9c <iprintf>
  while (seg_list != NULL &&
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d020      	beq.n	8010c72 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	68db      	ldr	r3, [r3, #12]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fb f9af 	bl	800bf9a <lwip_htonl>
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	891b      	ldrh	r3, [r3, #8]
 8010c42:	461d      	mov	r5, r3
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	899b      	ldrh	r3, [r3, #12]
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7fb f98f 	bl	800bf70 <lwip_htons>
 8010c52:	4603      	mov	r3, r0
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	f003 0303 	and.w	r3, r3, #3
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d001      	beq.n	8010c62 <tcp_free_acked_segments+0xc6>
 8010c5e:	2301      	movs	r3, #1
 8010c60:	e000      	b.n	8010c64 <tcp_free_acked_segments+0xc8>
 8010c62:	2300      	movs	r3, #0
 8010c64:	442b      	add	r3, r5
 8010c66:	18e2      	adds	r2, r4, r3
 8010c68:	4b09      	ldr	r3, [pc, #36]	; (8010c90 <tcp_free_acked_segments+0xf4>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	dd9c      	ble.n	8010bac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010c72:	68bb      	ldr	r3, [r7, #8]
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3718      	adds	r7, #24
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8010c7c:	08018d5c 	.word	0x08018d5c
 8010c80:	08019044 	.word	0x08019044
 8010c84:	08018da8 	.word	0x08018da8
 8010c88:	24064548 	.word	0x24064548
 8010c8c:	0801906c 	.word	0x0801906c
 8010c90:	24064544 	.word	0x24064544

08010c94 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010c94:	b5b0      	push	{r4, r5, r7, lr}
 8010c96:	b094      	sub	sp, #80	; 0x50
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d106      	bne.n	8010cb4 <tcp_receive+0x20>
 8010ca6:	4ba6      	ldr	r3, [pc, #664]	; (8010f40 <tcp_receive+0x2ac>)
 8010ca8:	f240 427b 	movw	r2, #1147	; 0x47b
 8010cac:	49a5      	ldr	r1, [pc, #660]	; (8010f44 <tcp_receive+0x2b0>)
 8010cae:	48a6      	ldr	r0, [pc, #664]	; (8010f48 <tcp_receive+0x2b4>)
 8010cb0:	f005 fef4 	bl	8016a9c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	7d1b      	ldrb	r3, [r3, #20]
 8010cb8:	2b03      	cmp	r3, #3
 8010cba:	d806      	bhi.n	8010cca <tcp_receive+0x36>
 8010cbc:	4ba0      	ldr	r3, [pc, #640]	; (8010f40 <tcp_receive+0x2ac>)
 8010cbe:	f240 427c 	movw	r2, #1148	; 0x47c
 8010cc2:	49a2      	ldr	r1, [pc, #648]	; (8010f4c <tcp_receive+0x2b8>)
 8010cc4:	48a0      	ldr	r0, [pc, #640]	; (8010f48 <tcp_receive+0x2b4>)
 8010cc6:	f005 fee9 	bl	8016a9c <iprintf>

  if (flags & TCP_ACK) {
 8010cca:	4ba1      	ldr	r3, [pc, #644]	; (8010f50 <tcp_receive+0x2bc>)
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	f003 0310 	and.w	r3, r3, #16
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	f000 8263 	beq.w	801119e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010cde:	461a      	mov	r2, r3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ce4:	4413      	add	r3, r2
 8010ce6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010cec:	4b99      	ldr	r3, [pc, #612]	; (8010f54 <tcp_receive+0x2c0>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	1ad3      	subs	r3, r2, r3
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	db1b      	blt.n	8010d2e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010cfa:	4b96      	ldr	r3, [pc, #600]	; (8010f54 <tcp_receive+0x2c0>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d106      	bne.n	8010d10 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010d06:	4b94      	ldr	r3, [pc, #592]	; (8010f58 <tcp_receive+0x2c4>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	1ad3      	subs	r3, r2, r3
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	db0e      	blt.n	8010d2e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010d14:	4b90      	ldr	r3, [pc, #576]	; (8010f58 <tcp_receive+0x2c4>)
 8010d16:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d125      	bne.n	8010d68 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010d1c:	4b8f      	ldr	r3, [pc, #572]	; (8010f5c <tcp_receive+0x2c8>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	89db      	ldrh	r3, [r3, #14]
 8010d22:	b29a      	uxth	r2, r3
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d91c      	bls.n	8010d68 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010d2e:	4b8b      	ldr	r3, [pc, #556]	; (8010f5c <tcp_receive+0x2c8>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	89db      	ldrh	r3, [r3, #14]
 8010d34:	b29a      	uxth	r2, r3
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d205      	bcs.n	8010d58 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010d58:	4b7e      	ldr	r3, [pc, #504]	; (8010f54 <tcp_receive+0x2c0>)
 8010d5a:	681a      	ldr	r2, [r3, #0]
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010d60:	4b7d      	ldr	r3, [pc, #500]	; (8010f58 <tcp_receive+0x2c4>)
 8010d62:	681a      	ldr	r2, [r3, #0]
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010d68:	4b7b      	ldr	r3, [pc, #492]	; (8010f58 <tcp_receive+0x2c4>)
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d70:	1ad3      	subs	r3, r2, r3
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	dc58      	bgt.n	8010e28 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010d76:	4b7a      	ldr	r3, [pc, #488]	; (8010f60 <tcp_receive+0x2cc>)
 8010d78:	881b      	ldrh	r3, [r3, #0]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d14b      	bne.n	8010e16 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d82:	687a      	ldr	r2, [r7, #4]
 8010d84:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010d88:	4413      	add	r3, r2
 8010d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d142      	bne.n	8010e16 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	db3d      	blt.n	8010e16 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d9e:	4b6e      	ldr	r3, [pc, #440]	; (8010f58 <tcp_receive+0x2c4>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d137      	bne.n	8010e16 <tcp_receive+0x182>
              found_dupack = 1;
 8010da6:	2301      	movs	r3, #1
 8010da8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010db0:	2bff      	cmp	r3, #255	; 0xff
 8010db2:	d007      	beq.n	8010dc4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010dba:	3301      	adds	r3, #1
 8010dbc:	b2da      	uxtb	r2, r3
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010dca:	2b03      	cmp	r3, #3
 8010dcc:	d91b      	bls.n	8010e06 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dd8:	4413      	add	r3, r2
 8010dda:	b29a      	uxth	r2, r3
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d30a      	bcc.n	8010dfc <tcp_receive+0x168>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010df0:	4413      	add	r3, r2
 8010df2:	b29a      	uxth	r2, r3
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010dfa:	e004      	b.n	8010e06 <tcp_receive+0x172>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010e0c:	2b02      	cmp	r3, #2
 8010e0e:	d902      	bls.n	8010e16 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f001 fee9 	bl	8012be8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	f040 8160 	bne.w	80110de <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2200      	movs	r2, #0
 8010e22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e26:	e15a      	b.n	80110de <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e28:	4b4b      	ldr	r3, [pc, #300]	; (8010f58 <tcp_receive+0x2c4>)
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e30:	1ad3      	subs	r3, r2, r3
 8010e32:	3b01      	subs	r3, #1
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	f2c0 814d 	blt.w	80110d4 <tcp_receive+0x440>
 8010e3a:	4b47      	ldr	r3, [pc, #284]	; (8010f58 <tcp_receive+0x2c4>)
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e42:	1ad3      	subs	r3, r2, r3
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	f300 8145 	bgt.w	80110d4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	8b5b      	ldrh	r3, [r3, #26]
 8010e4e:	f003 0304 	and.w	r3, r3, #4
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d010      	beq.n	8010e78 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	8b5b      	ldrh	r3, [r3, #26]
 8010e5a:	f023 0304 	bic.w	r3, r3, #4
 8010e5e:	b29a      	uxth	r2, r3
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2200      	movs	r2, #0
 8010e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e86:	10db      	asrs	r3, r3, #3
 8010e88:	b21b      	sxth	r3, r3
 8010e8a:	b29a      	uxth	r2, r3
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	4413      	add	r3, r2
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	b21a      	sxth	r2, r3
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010ea0:	4b2d      	ldr	r3, [pc, #180]	; (8010f58 <tcp_receive+0x2c4>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	b29a      	uxth	r2, r3
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	1ad3      	subs	r3, r2, r3
 8010eae:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010eb8:	4b27      	ldr	r3, [pc, #156]	; (8010f58 <tcp_receive+0x2c4>)
 8010eba:	681a      	ldr	r2, [r3, #0]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	7d1b      	ldrb	r3, [r3, #20]
 8010ec4:	2b03      	cmp	r3, #3
 8010ec6:	f240 8096 	bls.w	8010ff6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d244      	bcs.n	8010f64 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	8b5b      	ldrh	r3, [r3, #26]
 8010ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d001      	beq.n	8010eea <tcp_receive+0x256>
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	e000      	b.n	8010eec <tcp_receive+0x258>
 8010eea:	2302      	movs	r3, #2
 8010eec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010ef0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010ef4:	b29a      	uxth	r2, r3
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010efa:	fb12 f303 	smulbb	r3, r2, r3
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010f02:	4293      	cmp	r3, r2
 8010f04:	bf28      	it	cs
 8010f06:	4613      	movcs	r3, r2
 8010f08:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f12:	4413      	add	r3, r2
 8010f14:	b29a      	uxth	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d309      	bcc.n	8010f34 <tcp_receive+0x2a0>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f28:	4413      	add	r3, r2
 8010f2a:	b29a      	uxth	r2, r3
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010f32:	e060      	b.n	8010ff6 <tcp_receive+0x362>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010f3e:	e05a      	b.n	8010ff6 <tcp_receive+0x362>
 8010f40:	08018d5c 	.word	0x08018d5c
 8010f44:	0801908c 	.word	0x0801908c
 8010f48:	08018da8 	.word	0x08018da8
 8010f4c:	080190a8 	.word	0x080190a8
 8010f50:	2406454c 	.word	0x2406454c
 8010f54:	24064540 	.word	0x24064540
 8010f58:	24064544 	.word	0x24064544
 8010f5c:	24064530 	.word	0x24064530
 8010f60:	2406454a 	.word	0x2406454a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010f6c:	4413      	add	r3, r2
 8010f6e:	b29a      	uxth	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d309      	bcc.n	8010f8e <tcp_receive+0x2fa>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010f82:	4413      	add	r3, r2
 8010f84:	b29a      	uxth	r2, r3
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010f8c:	e004      	b.n	8010f98 <tcp_receive+0x304>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d326      	bcc.n	8010ff6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010fb4:	1ad3      	subs	r3, r2, r3
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fc8:	4413      	add	r3, r2
 8010fca:	b29a      	uxth	r2, r3
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d30a      	bcc.n	8010fec <tcp_receive+0x358>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fe0:	4413      	add	r3, r2
 8010fe2:	b29a      	uxth	r2, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010fea:	e004      	b.n	8010ff6 <tcp_receive+0x362>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ff2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ffe:	4a98      	ldr	r2, [pc, #608]	; (8011260 <tcp_receive+0x5cc>)
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7ff fdcb 	bl	8010b9c <tcp_free_acked_segments>
 8011006:	4602      	mov	r2, r0
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011014:	4a93      	ldr	r2, [pc, #588]	; (8011264 <tcp_receive+0x5d0>)
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7ff fdc0 	bl	8010b9c <tcp_free_acked_segments>
 801101c:	4602      	mov	r2, r0
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011026:	2b00      	cmp	r3, #0
 8011028:	d104      	bne.n	8011034 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011030:	861a      	strh	r2, [r3, #48]	; 0x30
 8011032:	e002      	b.n	801103a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2200      	movs	r2, #0
 8011038:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2200      	movs	r2, #0
 801103e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011044:	2b00      	cmp	r3, #0
 8011046:	d103      	bne.n	8011050 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2200      	movs	r2, #0
 801104c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011056:	4b84      	ldr	r3, [pc, #528]	; (8011268 <tcp_receive+0x5d4>)
 8011058:	881b      	ldrh	r3, [r3, #0]
 801105a:	4413      	add	r3, r2
 801105c:	b29a      	uxth	r2, r3
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	8b5b      	ldrh	r3, [r3, #26]
 8011068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801106c:	2b00      	cmp	r3, #0
 801106e:	d035      	beq.n	80110dc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011074:	2b00      	cmp	r3, #0
 8011076:	d118      	bne.n	80110aa <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801107c:	2b00      	cmp	r3, #0
 801107e:	d00c      	beq.n	801109a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	4618      	mov	r0, r3
 801108e:	f7fa ff84 	bl	800bf9a <lwip_htonl>
 8011092:	4603      	mov	r3, r0
 8011094:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011096:	2b00      	cmp	r3, #0
 8011098:	dc20      	bgt.n	80110dc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	8b5b      	ldrh	r3, [r3, #26]
 801109e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110a2:	b29a      	uxth	r2, r3
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110a8:	e018      	b.n	80110dc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7fa ff6f 	bl	800bf9a <lwip_htonl>
 80110bc:	4603      	mov	r3, r0
 80110be:	1ae3      	subs	r3, r4, r3
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	dc0b      	bgt.n	80110dc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	8b5b      	ldrh	r3, [r3, #26]
 80110c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110cc:	b29a      	uxth	r2, r3
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110d2:	e003      	b.n	80110dc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f001 ff75 	bl	8012fc4 <tcp_send_empty_ack>
 80110da:	e000      	b.n	80110de <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110dc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d05b      	beq.n	801119e <tcp_receive+0x50a>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110ea:	4b60      	ldr	r3, [pc, #384]	; (801126c <tcp_receive+0x5d8>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	1ad3      	subs	r3, r2, r3
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	da54      	bge.n	801119e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80110f4:	4b5e      	ldr	r3, [pc, #376]	; (8011270 <tcp_receive+0x5dc>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	b29a      	uxth	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110fe:	b29b      	uxth	r3, r3
 8011100:	1ad3      	subs	r3, r2, r3
 8011102:	b29b      	uxth	r3, r3
 8011104:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011108:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011112:	10db      	asrs	r3, r3, #3
 8011114:	b21b      	sxth	r3, r3
 8011116:	b29b      	uxth	r3, r3
 8011118:	1ad3      	subs	r3, r2, r3
 801111a:	b29b      	uxth	r3, r3
 801111c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011126:	b29a      	uxth	r2, r3
 8011128:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801112c:	4413      	add	r3, r2
 801112e:	b29b      	uxth	r3, r3
 8011130:	b21a      	sxth	r2, r3
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011136:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801113a:	2b00      	cmp	r3, #0
 801113c:	da05      	bge.n	801114a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801113e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011142:	425b      	negs	r3, r3
 8011144:	b29b      	uxth	r3, r3
 8011146:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801114a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011154:	109b      	asrs	r3, r3, #2
 8011156:	b21b      	sxth	r3, r3
 8011158:	b29b      	uxth	r3, r3
 801115a:	1ad3      	subs	r3, r2, r3
 801115c:	b29b      	uxth	r3, r3
 801115e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011168:	b29a      	uxth	r2, r3
 801116a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801116e:	4413      	add	r3, r2
 8011170:	b29b      	uxth	r3, r3
 8011172:	b21a      	sxth	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801117e:	10db      	asrs	r3, r3, #3
 8011180:	b21b      	sxth	r3, r3
 8011182:	b29a      	uxth	r2, r3
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801118a:	b29b      	uxth	r3, r3
 801118c:	4413      	add	r3, r2
 801118e:	b29b      	uxth	r3, r3
 8011190:	b21a      	sxth	r2, r3
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2200      	movs	r2, #0
 801119c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801119e:	4b35      	ldr	r3, [pc, #212]	; (8011274 <tcp_receive+0x5e0>)
 80111a0:	881b      	ldrh	r3, [r3, #0]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f000 84e1 	beq.w	8011b6a <tcp_receive+0xed6>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	7d1b      	ldrb	r3, [r3, #20]
 80111ac:	2b06      	cmp	r3, #6
 80111ae:	f200 84dc 	bhi.w	8011b6a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111b6:	4b30      	ldr	r3, [pc, #192]	; (8011278 <tcp_receive+0x5e4>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	1ad3      	subs	r3, r2, r3
 80111bc:	3b01      	subs	r3, #1
 80111be:	2b00      	cmp	r3, #0
 80111c0:	f2c0 808e 	blt.w	80112e0 <tcp_receive+0x64c>
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111c8:	4b2a      	ldr	r3, [pc, #168]	; (8011274 <tcp_receive+0x5e0>)
 80111ca:	881b      	ldrh	r3, [r3, #0]
 80111cc:	4619      	mov	r1, r3
 80111ce:	4b2a      	ldr	r3, [pc, #168]	; (8011278 <tcp_receive+0x5e4>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	440b      	add	r3, r1
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	3301      	adds	r3, #1
 80111d8:	2b00      	cmp	r3, #0
 80111da:	f300 8081 	bgt.w	80112e0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80111de:	4b27      	ldr	r3, [pc, #156]	; (801127c <tcp_receive+0x5e8>)
 80111e0:	685b      	ldr	r3, [r3, #4]
 80111e2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111e8:	4b23      	ldr	r3, [pc, #140]	; (8011278 <tcp_receive+0x5e4>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	1ad3      	subs	r3, r2, r3
 80111ee:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80111f0:	4b22      	ldr	r3, [pc, #136]	; (801127c <tcp_receive+0x5e8>)
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d106      	bne.n	8011206 <tcp_receive+0x572>
 80111f8:	4b21      	ldr	r3, [pc, #132]	; (8011280 <tcp_receive+0x5ec>)
 80111fa:	f240 5294 	movw	r2, #1428	; 0x594
 80111fe:	4921      	ldr	r1, [pc, #132]	; (8011284 <tcp_receive+0x5f0>)
 8011200:	4821      	ldr	r0, [pc, #132]	; (8011288 <tcp_receive+0x5f4>)
 8011202:	f005 fc4b 	bl	8016a9c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011208:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801120c:	4293      	cmp	r3, r2
 801120e:	d906      	bls.n	801121e <tcp_receive+0x58a>
 8011210:	4b1b      	ldr	r3, [pc, #108]	; (8011280 <tcp_receive+0x5ec>)
 8011212:	f240 5295 	movw	r2, #1429	; 0x595
 8011216:	491d      	ldr	r1, [pc, #116]	; (801128c <tcp_receive+0x5f8>)
 8011218:	481b      	ldr	r0, [pc, #108]	; (8011288 <tcp_receive+0x5f4>)
 801121a:	f005 fc3f 	bl	8016a9c <iprintf>
      off = (u16_t)off32;
 801121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011220:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011224:	4b15      	ldr	r3, [pc, #84]	; (801127c <tcp_receive+0x5e8>)
 8011226:	685b      	ldr	r3, [r3, #4]
 8011228:	891b      	ldrh	r3, [r3, #8]
 801122a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801122e:	429a      	cmp	r2, r3
 8011230:	d906      	bls.n	8011240 <tcp_receive+0x5ac>
 8011232:	4b13      	ldr	r3, [pc, #76]	; (8011280 <tcp_receive+0x5ec>)
 8011234:	f240 5297 	movw	r2, #1431	; 0x597
 8011238:	4915      	ldr	r1, [pc, #84]	; (8011290 <tcp_receive+0x5fc>)
 801123a:	4813      	ldr	r0, [pc, #76]	; (8011288 <tcp_receive+0x5f4>)
 801123c:	f005 fc2e 	bl	8016a9c <iprintf>
      inseg.len -= off;
 8011240:	4b0e      	ldr	r3, [pc, #56]	; (801127c <tcp_receive+0x5e8>)
 8011242:	891a      	ldrh	r2, [r3, #8]
 8011244:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011248:	1ad3      	subs	r3, r2, r3
 801124a:	b29a      	uxth	r2, r3
 801124c:	4b0b      	ldr	r3, [pc, #44]	; (801127c <tcp_receive+0x5e8>)
 801124e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011250:	4b0a      	ldr	r3, [pc, #40]	; (801127c <tcp_receive+0x5e8>)
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	891a      	ldrh	r2, [r3, #8]
 8011256:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801125a:	1ad3      	subs	r3, r2, r3
 801125c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801125e:	e029      	b.n	80112b4 <tcp_receive+0x620>
 8011260:	080190c4 	.word	0x080190c4
 8011264:	080190cc 	.word	0x080190cc
 8011268:	24064548 	.word	0x24064548
 801126c:	24064544 	.word	0x24064544
 8011270:	2406b464 	.word	0x2406b464
 8011274:	2406454a 	.word	0x2406454a
 8011278:	24064540 	.word	0x24064540
 801127c:	24064520 	.word	0x24064520
 8011280:	08018d5c 	.word	0x08018d5c
 8011284:	080190d4 	.word	0x080190d4
 8011288:	08018da8 	.word	0x08018da8
 801128c:	080190e4 	.word	0x080190e4
 8011290:	080190f4 	.word	0x080190f4
        off -= p->len;
 8011294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011296:	895b      	ldrh	r3, [r3, #10]
 8011298:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801129c:	1ad3      	subs	r3, r2, r3
 801129e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80112a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80112a6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80112a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112aa:	2200      	movs	r2, #0
 80112ac:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80112ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80112b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112b6:	895b      	ldrh	r3, [r3, #10]
 80112b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112bc:	429a      	cmp	r2, r3
 80112be:	d8e9      	bhi.n	8011294 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80112c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112c4:	4619      	mov	r1, r3
 80112c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80112c8:	f7fc fb5e 	bl	800d988 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112d0:	4a91      	ldr	r2, [pc, #580]	; (8011518 <tcp_receive+0x884>)
 80112d2:	6013      	str	r3, [r2, #0]
 80112d4:	4b91      	ldr	r3, [pc, #580]	; (801151c <tcp_receive+0x888>)
 80112d6:	68db      	ldr	r3, [r3, #12]
 80112d8:	4a8f      	ldr	r2, [pc, #572]	; (8011518 <tcp_receive+0x884>)
 80112da:	6812      	ldr	r2, [r2, #0]
 80112dc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80112de:	e00d      	b.n	80112fc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80112e0:	4b8d      	ldr	r3, [pc, #564]	; (8011518 <tcp_receive+0x884>)
 80112e2:	681a      	ldr	r2, [r3, #0]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e8:	1ad3      	subs	r3, r2, r3
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	da06      	bge.n	80112fc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	8b5b      	ldrh	r3, [r3, #26]
 80112f2:	f043 0302 	orr.w	r3, r3, #2
 80112f6:	b29a      	uxth	r2, r3
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80112fc:	4b86      	ldr	r3, [pc, #536]	; (8011518 <tcp_receive+0x884>)
 80112fe:	681a      	ldr	r2, [r3, #0]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011304:	1ad3      	subs	r3, r2, r3
 8011306:	2b00      	cmp	r3, #0
 8011308:	f2c0 842a 	blt.w	8011b60 <tcp_receive+0xecc>
 801130c:	4b82      	ldr	r3, [pc, #520]	; (8011518 <tcp_receive+0x884>)
 801130e:	681a      	ldr	r2, [r3, #0]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011314:	6879      	ldr	r1, [r7, #4]
 8011316:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011318:	440b      	add	r3, r1
 801131a:	1ad3      	subs	r3, r2, r3
 801131c:	3301      	adds	r3, #1
 801131e:	2b00      	cmp	r3, #0
 8011320:	f300 841e 	bgt.w	8011b60 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011328:	4b7b      	ldr	r3, [pc, #492]	; (8011518 <tcp_receive+0x884>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	429a      	cmp	r2, r3
 801132e:	f040 829a 	bne.w	8011866 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011332:	4b7a      	ldr	r3, [pc, #488]	; (801151c <tcp_receive+0x888>)
 8011334:	891c      	ldrh	r4, [r3, #8]
 8011336:	4b79      	ldr	r3, [pc, #484]	; (801151c <tcp_receive+0x888>)
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	899b      	ldrh	r3, [r3, #12]
 801133c:	b29b      	uxth	r3, r3
 801133e:	4618      	mov	r0, r3
 8011340:	f7fa fe16 	bl	800bf70 <lwip_htons>
 8011344:	4603      	mov	r3, r0
 8011346:	b2db      	uxtb	r3, r3
 8011348:	f003 0303 	and.w	r3, r3, #3
 801134c:	2b00      	cmp	r3, #0
 801134e:	d001      	beq.n	8011354 <tcp_receive+0x6c0>
 8011350:	2301      	movs	r3, #1
 8011352:	e000      	b.n	8011356 <tcp_receive+0x6c2>
 8011354:	2300      	movs	r3, #0
 8011356:	4423      	add	r3, r4
 8011358:	b29a      	uxth	r2, r3
 801135a:	4b71      	ldr	r3, [pc, #452]	; (8011520 <tcp_receive+0x88c>)
 801135c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011362:	4b6f      	ldr	r3, [pc, #444]	; (8011520 <tcp_receive+0x88c>)
 8011364:	881b      	ldrh	r3, [r3, #0]
 8011366:	429a      	cmp	r2, r3
 8011368:	d275      	bcs.n	8011456 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801136a:	4b6c      	ldr	r3, [pc, #432]	; (801151c <tcp_receive+0x888>)
 801136c:	68db      	ldr	r3, [r3, #12]
 801136e:	899b      	ldrh	r3, [r3, #12]
 8011370:	b29b      	uxth	r3, r3
 8011372:	4618      	mov	r0, r3
 8011374:	f7fa fdfc 	bl	800bf70 <lwip_htons>
 8011378:	4603      	mov	r3, r0
 801137a:	b2db      	uxtb	r3, r3
 801137c:	f003 0301 	and.w	r3, r3, #1
 8011380:	2b00      	cmp	r3, #0
 8011382:	d01f      	beq.n	80113c4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011384:	4b65      	ldr	r3, [pc, #404]	; (801151c <tcp_receive+0x888>)
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	899b      	ldrh	r3, [r3, #12]
 801138a:	b29b      	uxth	r3, r3
 801138c:	b21b      	sxth	r3, r3
 801138e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011392:	b21c      	sxth	r4, r3
 8011394:	4b61      	ldr	r3, [pc, #388]	; (801151c <tcp_receive+0x888>)
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	899b      	ldrh	r3, [r3, #12]
 801139a:	b29b      	uxth	r3, r3
 801139c:	4618      	mov	r0, r3
 801139e:	f7fa fde7 	bl	800bf70 <lwip_htons>
 80113a2:	4603      	mov	r3, r0
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80113ac:	b29b      	uxth	r3, r3
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7fa fdde 	bl	800bf70 <lwip_htons>
 80113b4:	4603      	mov	r3, r0
 80113b6:	b21b      	sxth	r3, r3
 80113b8:	4323      	orrs	r3, r4
 80113ba:	b21a      	sxth	r2, r3
 80113bc:	4b57      	ldr	r3, [pc, #348]	; (801151c <tcp_receive+0x888>)
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	b292      	uxth	r2, r2
 80113c2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80113c8:	4b54      	ldr	r3, [pc, #336]	; (801151c <tcp_receive+0x888>)
 80113ca:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80113cc:	4b53      	ldr	r3, [pc, #332]	; (801151c <tcp_receive+0x888>)
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	899b      	ldrh	r3, [r3, #12]
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fa fdcb 	bl	800bf70 <lwip_htons>
 80113da:	4603      	mov	r3, r0
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	f003 0302 	and.w	r3, r3, #2
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d005      	beq.n	80113f2 <tcp_receive+0x75e>
            inseg.len -= 1;
 80113e6:	4b4d      	ldr	r3, [pc, #308]	; (801151c <tcp_receive+0x888>)
 80113e8:	891b      	ldrh	r3, [r3, #8]
 80113ea:	3b01      	subs	r3, #1
 80113ec:	b29a      	uxth	r2, r3
 80113ee:	4b4b      	ldr	r3, [pc, #300]	; (801151c <tcp_receive+0x888>)
 80113f0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80113f2:	4b4a      	ldr	r3, [pc, #296]	; (801151c <tcp_receive+0x888>)
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	4a49      	ldr	r2, [pc, #292]	; (801151c <tcp_receive+0x888>)
 80113f8:	8912      	ldrh	r2, [r2, #8]
 80113fa:	4611      	mov	r1, r2
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7fc f9c3 	bl	800d788 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011402:	4b46      	ldr	r3, [pc, #280]	; (801151c <tcp_receive+0x888>)
 8011404:	891c      	ldrh	r4, [r3, #8]
 8011406:	4b45      	ldr	r3, [pc, #276]	; (801151c <tcp_receive+0x888>)
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	899b      	ldrh	r3, [r3, #12]
 801140c:	b29b      	uxth	r3, r3
 801140e:	4618      	mov	r0, r3
 8011410:	f7fa fdae 	bl	800bf70 <lwip_htons>
 8011414:	4603      	mov	r3, r0
 8011416:	b2db      	uxtb	r3, r3
 8011418:	f003 0303 	and.w	r3, r3, #3
 801141c:	2b00      	cmp	r3, #0
 801141e:	d001      	beq.n	8011424 <tcp_receive+0x790>
 8011420:	2301      	movs	r3, #1
 8011422:	e000      	b.n	8011426 <tcp_receive+0x792>
 8011424:	2300      	movs	r3, #0
 8011426:	4423      	add	r3, r4
 8011428:	b29a      	uxth	r2, r3
 801142a:	4b3d      	ldr	r3, [pc, #244]	; (8011520 <tcp_receive+0x88c>)
 801142c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801142e:	4b3c      	ldr	r3, [pc, #240]	; (8011520 <tcp_receive+0x88c>)
 8011430:	881b      	ldrh	r3, [r3, #0]
 8011432:	461a      	mov	r2, r3
 8011434:	4b38      	ldr	r3, [pc, #224]	; (8011518 <tcp_receive+0x884>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	441a      	add	r2, r3
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801143e:	6879      	ldr	r1, [r7, #4]
 8011440:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011442:	440b      	add	r3, r1
 8011444:	429a      	cmp	r2, r3
 8011446:	d006      	beq.n	8011456 <tcp_receive+0x7c2>
 8011448:	4b36      	ldr	r3, [pc, #216]	; (8011524 <tcp_receive+0x890>)
 801144a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801144e:	4936      	ldr	r1, [pc, #216]	; (8011528 <tcp_receive+0x894>)
 8011450:	4836      	ldr	r0, [pc, #216]	; (801152c <tcp_receive+0x898>)
 8011452:	f005 fb23 	bl	8016a9c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801145a:	2b00      	cmp	r3, #0
 801145c:	f000 80e7 	beq.w	801162e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011460:	4b2e      	ldr	r3, [pc, #184]	; (801151c <tcp_receive+0x888>)
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	899b      	ldrh	r3, [r3, #12]
 8011466:	b29b      	uxth	r3, r3
 8011468:	4618      	mov	r0, r3
 801146a:	f7fa fd81 	bl	800bf70 <lwip_htons>
 801146e:	4603      	mov	r3, r0
 8011470:	b2db      	uxtb	r3, r3
 8011472:	f003 0301 	and.w	r3, r3, #1
 8011476:	2b00      	cmp	r3, #0
 8011478:	d010      	beq.n	801149c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801147a:	e00a      	b.n	8011492 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011480:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801148c:	68f8      	ldr	r0, [r7, #12]
 801148e:	f7fd fd94 	bl	800efba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011496:	2b00      	cmp	r3, #0
 8011498:	d1f0      	bne.n	801147c <tcp_receive+0x7e8>
 801149a:	e0c8      	b.n	801162e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114a0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80114a2:	e052      	b.n	801154a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80114a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	899b      	ldrh	r3, [r3, #12]
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7fa fd5f 	bl	800bf70 <lwip_htons>
 80114b2:	4603      	mov	r3, r0
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	f003 0301 	and.w	r3, r3, #1
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d03d      	beq.n	801153a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80114be:	4b17      	ldr	r3, [pc, #92]	; (801151c <tcp_receive+0x888>)
 80114c0:	68db      	ldr	r3, [r3, #12]
 80114c2:	899b      	ldrh	r3, [r3, #12]
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fa fd52 	bl	800bf70 <lwip_htons>
 80114cc:	4603      	mov	r3, r0
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d130      	bne.n	801153a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80114d8:	4b10      	ldr	r3, [pc, #64]	; (801151c <tcp_receive+0x888>)
 80114da:	68db      	ldr	r3, [r3, #12]
 80114dc:	899b      	ldrh	r3, [r3, #12]
 80114de:	b29c      	uxth	r4, r3
 80114e0:	2001      	movs	r0, #1
 80114e2:	f7fa fd45 	bl	800bf70 <lwip_htons>
 80114e6:	4603      	mov	r3, r0
 80114e8:	461a      	mov	r2, r3
 80114ea:	4b0c      	ldr	r3, [pc, #48]	; (801151c <tcp_receive+0x888>)
 80114ec:	68db      	ldr	r3, [r3, #12]
 80114ee:	4322      	orrs	r2, r4
 80114f0:	b292      	uxth	r2, r2
 80114f2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80114f4:	4b09      	ldr	r3, [pc, #36]	; (801151c <tcp_receive+0x888>)
 80114f6:	891c      	ldrh	r4, [r3, #8]
 80114f8:	4b08      	ldr	r3, [pc, #32]	; (801151c <tcp_receive+0x888>)
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	899b      	ldrh	r3, [r3, #12]
 80114fe:	b29b      	uxth	r3, r3
 8011500:	4618      	mov	r0, r3
 8011502:	f7fa fd35 	bl	800bf70 <lwip_htons>
 8011506:	4603      	mov	r3, r0
 8011508:	b2db      	uxtb	r3, r3
 801150a:	f003 0303 	and.w	r3, r3, #3
 801150e:	2b00      	cmp	r3, #0
 8011510:	d00e      	beq.n	8011530 <tcp_receive+0x89c>
 8011512:	2301      	movs	r3, #1
 8011514:	e00d      	b.n	8011532 <tcp_receive+0x89e>
 8011516:	bf00      	nop
 8011518:	24064540 	.word	0x24064540
 801151c:	24064520 	.word	0x24064520
 8011520:	2406454a 	.word	0x2406454a
 8011524:	08018d5c 	.word	0x08018d5c
 8011528:	08019104 	.word	0x08019104
 801152c:	08018da8 	.word	0x08018da8
 8011530:	2300      	movs	r3, #0
 8011532:	4423      	add	r3, r4
 8011534:	b29a      	uxth	r2, r3
 8011536:	4b98      	ldr	r3, [pc, #608]	; (8011798 <tcp_receive+0xb04>)
 8011538:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801153a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801153c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801153e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011544:	6938      	ldr	r0, [r7, #16]
 8011546:	f7fd fd38 	bl	800efba <tcp_seg_free>
            while (next &&
 801154a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801154c:	2b00      	cmp	r3, #0
 801154e:	d00e      	beq.n	801156e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011550:	4b91      	ldr	r3, [pc, #580]	; (8011798 <tcp_receive+0xb04>)
 8011552:	881b      	ldrh	r3, [r3, #0]
 8011554:	461a      	mov	r2, r3
 8011556:	4b91      	ldr	r3, [pc, #580]	; (801179c <tcp_receive+0xb08>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	441a      	add	r2, r3
 801155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011564:	8909      	ldrh	r1, [r1, #8]
 8011566:	440b      	add	r3, r1
 8011568:	1ad3      	subs	r3, r2, r3
            while (next &&
 801156a:	2b00      	cmp	r3, #0
 801156c:	da9a      	bge.n	80114a4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801156e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011570:	2b00      	cmp	r3, #0
 8011572:	d059      	beq.n	8011628 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011574:	4b88      	ldr	r3, [pc, #544]	; (8011798 <tcp_receive+0xb04>)
 8011576:	881b      	ldrh	r3, [r3, #0]
 8011578:	461a      	mov	r2, r3
 801157a:	4b88      	ldr	r3, [pc, #544]	; (801179c <tcp_receive+0xb08>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	441a      	add	r2, r3
 8011580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011588:	2b00      	cmp	r3, #0
 801158a:	dd4d      	ble.n	8011628 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801158c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	b29a      	uxth	r2, r3
 8011594:	4b81      	ldr	r3, [pc, #516]	; (801179c <tcp_receive+0xb08>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	b29b      	uxth	r3, r3
 801159a:	1ad3      	subs	r3, r2, r3
 801159c:	b29a      	uxth	r2, r3
 801159e:	4b80      	ldr	r3, [pc, #512]	; (80117a0 <tcp_receive+0xb0c>)
 80115a0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80115a2:	4b7f      	ldr	r3, [pc, #508]	; (80117a0 <tcp_receive+0xb0c>)
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	899b      	ldrh	r3, [r3, #12]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7fa fce0 	bl	800bf70 <lwip_htons>
 80115b0:	4603      	mov	r3, r0
 80115b2:	b2db      	uxtb	r3, r3
 80115b4:	f003 0302 	and.w	r3, r3, #2
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d005      	beq.n	80115c8 <tcp_receive+0x934>
                inseg.len -= 1;
 80115bc:	4b78      	ldr	r3, [pc, #480]	; (80117a0 <tcp_receive+0xb0c>)
 80115be:	891b      	ldrh	r3, [r3, #8]
 80115c0:	3b01      	subs	r3, #1
 80115c2:	b29a      	uxth	r2, r3
 80115c4:	4b76      	ldr	r3, [pc, #472]	; (80117a0 <tcp_receive+0xb0c>)
 80115c6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80115c8:	4b75      	ldr	r3, [pc, #468]	; (80117a0 <tcp_receive+0xb0c>)
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	4a74      	ldr	r2, [pc, #464]	; (80117a0 <tcp_receive+0xb0c>)
 80115ce:	8912      	ldrh	r2, [r2, #8]
 80115d0:	4611      	mov	r1, r2
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fc f8d8 	bl	800d788 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80115d8:	4b71      	ldr	r3, [pc, #452]	; (80117a0 <tcp_receive+0xb0c>)
 80115da:	891c      	ldrh	r4, [r3, #8]
 80115dc:	4b70      	ldr	r3, [pc, #448]	; (80117a0 <tcp_receive+0xb0c>)
 80115de:	68db      	ldr	r3, [r3, #12]
 80115e0:	899b      	ldrh	r3, [r3, #12]
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7fa fcc3 	bl	800bf70 <lwip_htons>
 80115ea:	4603      	mov	r3, r0
 80115ec:	b2db      	uxtb	r3, r3
 80115ee:	f003 0303 	and.w	r3, r3, #3
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d001      	beq.n	80115fa <tcp_receive+0x966>
 80115f6:	2301      	movs	r3, #1
 80115f8:	e000      	b.n	80115fc <tcp_receive+0x968>
 80115fa:	2300      	movs	r3, #0
 80115fc:	4423      	add	r3, r4
 80115fe:	b29a      	uxth	r2, r3
 8011600:	4b65      	ldr	r3, [pc, #404]	; (8011798 <tcp_receive+0xb04>)
 8011602:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011604:	4b64      	ldr	r3, [pc, #400]	; (8011798 <tcp_receive+0xb04>)
 8011606:	881b      	ldrh	r3, [r3, #0]
 8011608:	461a      	mov	r2, r3
 801160a:	4b64      	ldr	r3, [pc, #400]	; (801179c <tcp_receive+0xb08>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	441a      	add	r2, r3
 8011610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	429a      	cmp	r2, r3
 8011618:	d006      	beq.n	8011628 <tcp_receive+0x994>
 801161a:	4b62      	ldr	r3, [pc, #392]	; (80117a4 <tcp_receive+0xb10>)
 801161c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011620:	4961      	ldr	r1, [pc, #388]	; (80117a8 <tcp_receive+0xb14>)
 8011622:	4862      	ldr	r0, [pc, #392]	; (80117ac <tcp_receive+0xb18>)
 8011624:	f005 fa3a 	bl	8016a9c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801162c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801162e:	4b5a      	ldr	r3, [pc, #360]	; (8011798 <tcp_receive+0xb04>)
 8011630:	881b      	ldrh	r3, [r3, #0]
 8011632:	461a      	mov	r2, r3
 8011634:	4b59      	ldr	r3, [pc, #356]	; (801179c <tcp_receive+0xb08>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	441a      	add	r2, r3
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011642:	4b55      	ldr	r3, [pc, #340]	; (8011798 <tcp_receive+0xb04>)
 8011644:	881b      	ldrh	r3, [r3, #0]
 8011646:	429a      	cmp	r2, r3
 8011648:	d206      	bcs.n	8011658 <tcp_receive+0x9c4>
 801164a:	4b56      	ldr	r3, [pc, #344]	; (80117a4 <tcp_receive+0xb10>)
 801164c:	f240 6207 	movw	r2, #1543	; 0x607
 8011650:	4957      	ldr	r1, [pc, #348]	; (80117b0 <tcp_receive+0xb1c>)
 8011652:	4856      	ldr	r0, [pc, #344]	; (80117ac <tcp_receive+0xb18>)
 8011654:	f005 fa22 	bl	8016a9c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801165c:	4b4e      	ldr	r3, [pc, #312]	; (8011798 <tcp_receive+0xb04>)
 801165e:	881b      	ldrh	r3, [r3, #0]
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	b29a      	uxth	r2, r3
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f7fc ffc3 	bl	800e5f4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801166e:	4b4c      	ldr	r3, [pc, #304]	; (80117a0 <tcp_receive+0xb0c>)
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	891b      	ldrh	r3, [r3, #8]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d006      	beq.n	8011686 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011678:	4b49      	ldr	r3, [pc, #292]	; (80117a0 <tcp_receive+0xb0c>)
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	4a4d      	ldr	r2, [pc, #308]	; (80117b4 <tcp_receive+0xb20>)
 801167e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011680:	4b47      	ldr	r3, [pc, #284]	; (80117a0 <tcp_receive+0xb0c>)
 8011682:	2200      	movs	r2, #0
 8011684:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011686:	4b46      	ldr	r3, [pc, #280]	; (80117a0 <tcp_receive+0xb0c>)
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	899b      	ldrh	r3, [r3, #12]
 801168c:	b29b      	uxth	r3, r3
 801168e:	4618      	mov	r0, r3
 8011690:	f7fa fc6e 	bl	800bf70 <lwip_htons>
 8011694:	4603      	mov	r3, r0
 8011696:	b2db      	uxtb	r3, r3
 8011698:	f003 0301 	and.w	r3, r3, #1
 801169c:	2b00      	cmp	r3, #0
 801169e:	f000 80b8 	beq.w	8011812 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80116a2:	4b45      	ldr	r3, [pc, #276]	; (80117b8 <tcp_receive+0xb24>)
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	f043 0320 	orr.w	r3, r3, #32
 80116aa:	b2da      	uxtb	r2, r3
 80116ac:	4b42      	ldr	r3, [pc, #264]	; (80117b8 <tcp_receive+0xb24>)
 80116ae:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80116b0:	e0af      	b.n	8011812 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116b6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116bc:	68db      	ldr	r3, [r3, #12]
 80116be:	685b      	ldr	r3, [r3, #4]
 80116c0:	4a36      	ldr	r2, [pc, #216]	; (801179c <tcp_receive+0xb08>)
 80116c2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	891b      	ldrh	r3, [r3, #8]
 80116c8:	461c      	mov	r4, r3
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	68db      	ldr	r3, [r3, #12]
 80116ce:	899b      	ldrh	r3, [r3, #12]
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fa fc4c 	bl	800bf70 <lwip_htons>
 80116d8:	4603      	mov	r3, r0
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	f003 0303 	and.w	r3, r3, #3
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d001      	beq.n	80116e8 <tcp_receive+0xa54>
 80116e4:	2301      	movs	r3, #1
 80116e6:	e000      	b.n	80116ea <tcp_receive+0xa56>
 80116e8:	2300      	movs	r3, #0
 80116ea:	191a      	adds	r2, r3, r4
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f0:	441a      	add	r2, r3
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116fa:	461c      	mov	r4, r3
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	891b      	ldrh	r3, [r3, #8]
 8011700:	461d      	mov	r5, r3
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	68db      	ldr	r3, [r3, #12]
 8011706:	899b      	ldrh	r3, [r3, #12]
 8011708:	b29b      	uxth	r3, r3
 801170a:	4618      	mov	r0, r3
 801170c:	f7fa fc30 	bl	800bf70 <lwip_htons>
 8011710:	4603      	mov	r3, r0
 8011712:	b2db      	uxtb	r3, r3
 8011714:	f003 0303 	and.w	r3, r3, #3
 8011718:	2b00      	cmp	r3, #0
 801171a:	d001      	beq.n	8011720 <tcp_receive+0xa8c>
 801171c:	2301      	movs	r3, #1
 801171e:	e000      	b.n	8011722 <tcp_receive+0xa8e>
 8011720:	2300      	movs	r3, #0
 8011722:	442b      	add	r3, r5
 8011724:	429c      	cmp	r4, r3
 8011726:	d206      	bcs.n	8011736 <tcp_receive+0xaa2>
 8011728:	4b1e      	ldr	r3, [pc, #120]	; (80117a4 <tcp_receive+0xb10>)
 801172a:	f240 622b 	movw	r2, #1579	; 0x62b
 801172e:	4923      	ldr	r1, [pc, #140]	; (80117bc <tcp_receive+0xb28>)
 8011730:	481e      	ldr	r0, [pc, #120]	; (80117ac <tcp_receive+0xb18>)
 8011732:	f005 f9b3 	bl	8016a9c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	891b      	ldrh	r3, [r3, #8]
 801173a:	461c      	mov	r4, r3
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	68db      	ldr	r3, [r3, #12]
 8011740:	899b      	ldrh	r3, [r3, #12]
 8011742:	b29b      	uxth	r3, r3
 8011744:	4618      	mov	r0, r3
 8011746:	f7fa fc13 	bl	800bf70 <lwip_htons>
 801174a:	4603      	mov	r3, r0
 801174c:	b2db      	uxtb	r3, r3
 801174e:	f003 0303 	and.w	r3, r3, #3
 8011752:	2b00      	cmp	r3, #0
 8011754:	d001      	beq.n	801175a <tcp_receive+0xac6>
 8011756:	2301      	movs	r3, #1
 8011758:	e000      	b.n	801175c <tcp_receive+0xac8>
 801175a:	2300      	movs	r3, #0
 801175c:	1919      	adds	r1, r3, r4
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011762:	b28b      	uxth	r3, r1
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	b29a      	uxth	r2, r3
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f7fc ff41 	bl	800e5f4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	891b      	ldrh	r3, [r3, #8]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d028      	beq.n	80117ce <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801177c:	4b0d      	ldr	r3, [pc, #52]	; (80117b4 <tcp_receive+0xb20>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d01d      	beq.n	80117c0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011784:	4b0b      	ldr	r3, [pc, #44]	; (80117b4 <tcp_receive+0xb20>)
 8011786:	681a      	ldr	r2, [r3, #0]
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	4619      	mov	r1, r3
 801178e:	4610      	mov	r0, r2
 8011790:	f7fc fa4e 	bl	800dc30 <pbuf_cat>
 8011794:	e018      	b.n	80117c8 <tcp_receive+0xb34>
 8011796:	bf00      	nop
 8011798:	2406454a 	.word	0x2406454a
 801179c:	24064540 	.word	0x24064540
 80117a0:	24064520 	.word	0x24064520
 80117a4:	08018d5c 	.word	0x08018d5c
 80117a8:	0801913c 	.word	0x0801913c
 80117ac:	08018da8 	.word	0x08018da8
 80117b0:	08019178 	.word	0x08019178
 80117b4:	24064550 	.word	0x24064550
 80117b8:	2406454d 	.word	0x2406454d
 80117bc:	08019198 	.word	0x08019198
            } else {
              recv_data = cseg->p;
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	4a70      	ldr	r2, [pc, #448]	; (8011988 <tcp_receive+0xcf4>)
 80117c6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	2200      	movs	r2, #0
 80117cc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	899b      	ldrh	r3, [r3, #12]
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fa fbca 	bl	800bf70 <lwip_htons>
 80117dc:	4603      	mov	r3, r0
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	f003 0301 	and.w	r3, r3, #1
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00d      	beq.n	8011804 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80117e8:	4b68      	ldr	r3, [pc, #416]	; (801198c <tcp_receive+0xcf8>)
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	f043 0320 	orr.w	r3, r3, #32
 80117f0:	b2da      	uxtb	r2, r3
 80117f2:	4b66      	ldr	r3, [pc, #408]	; (801198c <tcp_receive+0xcf8>)
 80117f4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	7d1b      	ldrb	r3, [r3, #20]
 80117fa:	2b04      	cmp	r3, #4
 80117fc:	d102      	bne.n	8011804 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2207      	movs	r2, #7
 8011802:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011804:	68bb      	ldr	r3, [r7, #8]
 8011806:	681a      	ldr	r2, [r3, #0]
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801180c:	68b8      	ldr	r0, [r7, #8]
 801180e:	f7fd fbd4 	bl	800efba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011816:	2b00      	cmp	r3, #0
 8011818:	d008      	beq.n	801182c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	685a      	ldr	r2, [r3, #4]
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011826:	429a      	cmp	r2, r3
 8011828:	f43f af43 	beq.w	80116b2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	8b5b      	ldrh	r3, [r3, #26]
 8011830:	f003 0301 	and.w	r3, r3, #1
 8011834:	2b00      	cmp	r3, #0
 8011836:	d00e      	beq.n	8011856 <tcp_receive+0xbc2>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	8b5b      	ldrh	r3, [r3, #26]
 801183c:	f023 0301 	bic.w	r3, r3, #1
 8011840:	b29a      	uxth	r2, r3
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	835a      	strh	r2, [r3, #26]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	8b5b      	ldrh	r3, [r3, #26]
 801184a:	f043 0302 	orr.w	r3, r3, #2
 801184e:	b29a      	uxth	r2, r3
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011854:	e188      	b.n	8011b68 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	8b5b      	ldrh	r3, [r3, #26]
 801185a:	f043 0301 	orr.w	r3, r3, #1
 801185e:	b29a      	uxth	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011864:	e180      	b.n	8011b68 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801186a:	2b00      	cmp	r3, #0
 801186c:	d106      	bne.n	801187c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801186e:	4848      	ldr	r0, [pc, #288]	; (8011990 <tcp_receive+0xcfc>)
 8011870:	f7fd fbbc 	bl	800efec <tcp_seg_copy>
 8011874:	4602      	mov	r2, r0
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	675a      	str	r2, [r3, #116]	; 0x74
 801187a:	e16d      	b.n	8011b58 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801187c:	2300      	movs	r3, #0
 801187e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011884:	63bb      	str	r3, [r7, #56]	; 0x38
 8011886:	e157      	b.n	8011b38 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188a:	68db      	ldr	r3, [r3, #12]
 801188c:	685a      	ldr	r2, [r3, #4]
 801188e:	4b41      	ldr	r3, [pc, #260]	; (8011994 <tcp_receive+0xd00>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	429a      	cmp	r2, r3
 8011894:	d11d      	bne.n	80118d2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011896:	4b3e      	ldr	r3, [pc, #248]	; (8011990 <tcp_receive+0xcfc>)
 8011898:	891a      	ldrh	r2, [r3, #8]
 801189a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801189c:	891b      	ldrh	r3, [r3, #8]
 801189e:	429a      	cmp	r2, r3
 80118a0:	f240 814f 	bls.w	8011b42 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80118a4:	483a      	ldr	r0, [pc, #232]	; (8011990 <tcp_receive+0xcfc>)
 80118a6:	f7fd fba1 	bl	800efec <tcp_seg_copy>
 80118aa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	f000 8149 	beq.w	8011b46 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80118b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d003      	beq.n	80118c2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80118ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118bc:	697a      	ldr	r2, [r7, #20]
 80118be:	601a      	str	r2, [r3, #0]
 80118c0:	e002      	b.n	80118c8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	697a      	ldr	r2, [r7, #20]
 80118c6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80118c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80118ca:	6978      	ldr	r0, [r7, #20]
 80118cc:	f7ff f8de 	bl	8010a8c <tcp_oos_insert_segment>
                }
                break;
 80118d0:	e139      	b.n	8011b46 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80118d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d117      	bne.n	8011908 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80118d8:	4b2e      	ldr	r3, [pc, #184]	; (8011994 <tcp_receive+0xd00>)
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	1ad3      	subs	r3, r2, r3
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	da57      	bge.n	8011998 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80118e8:	4829      	ldr	r0, [pc, #164]	; (8011990 <tcp_receive+0xcfc>)
 80118ea:	f7fd fb7f 	bl	800efec <tcp_seg_copy>
 80118ee:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80118f0:	69bb      	ldr	r3, [r7, #24]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	f000 8129 	beq.w	8011b4a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	69ba      	ldr	r2, [r7, #24]
 80118fc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80118fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011900:	69b8      	ldr	r0, [r7, #24]
 8011902:	f7ff f8c3 	bl	8010a8c <tcp_oos_insert_segment>
                  }
                  break;
 8011906:	e120      	b.n	8011b4a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011908:	4b22      	ldr	r3, [pc, #136]	; (8011994 <tcp_receive+0xd00>)
 801190a:	681a      	ldr	r2, [r3, #0]
 801190c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801190e:	68db      	ldr	r3, [r3, #12]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	1ad3      	subs	r3, r2, r3
 8011914:	3b01      	subs	r3, #1
 8011916:	2b00      	cmp	r3, #0
 8011918:	db3e      	blt.n	8011998 <tcp_receive+0xd04>
 801191a:	4b1e      	ldr	r3, [pc, #120]	; (8011994 <tcp_receive+0xd00>)
 801191c:	681a      	ldr	r2, [r3, #0]
 801191e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011920:	68db      	ldr	r3, [r3, #12]
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	1ad3      	subs	r3, r2, r3
 8011926:	3301      	adds	r3, #1
 8011928:	2b00      	cmp	r3, #0
 801192a:	dc35      	bgt.n	8011998 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801192c:	4818      	ldr	r0, [pc, #96]	; (8011990 <tcp_receive+0xcfc>)
 801192e:	f7fd fb5d 	bl	800efec <tcp_seg_copy>
 8011932:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	2b00      	cmp	r3, #0
 8011938:	f000 8109 	beq.w	8011b4e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801193e:	68db      	ldr	r3, [r3, #12]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011944:	8912      	ldrh	r2, [r2, #8]
 8011946:	441a      	add	r2, r3
 8011948:	4b12      	ldr	r3, [pc, #72]	; (8011994 <tcp_receive+0xd00>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	1ad3      	subs	r3, r2, r3
 801194e:	2b00      	cmp	r3, #0
 8011950:	dd12      	ble.n	8011978 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011952:	4b10      	ldr	r3, [pc, #64]	; (8011994 <tcp_receive+0xd00>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	b29a      	uxth	r2, r3
 8011958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801195a:	68db      	ldr	r3, [r3, #12]
 801195c:	685b      	ldr	r3, [r3, #4]
 801195e:	b29b      	uxth	r3, r3
 8011960:	1ad3      	subs	r3, r2, r3
 8011962:	b29a      	uxth	r2, r3
 8011964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011966:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801196a:	685a      	ldr	r2, [r3, #4]
 801196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801196e:	891b      	ldrh	r3, [r3, #8]
 8011970:	4619      	mov	r1, r3
 8011972:	4610      	mov	r0, r2
 8011974:	f7fb ff08 	bl	800d788 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801197a:	69fa      	ldr	r2, [r7, #28]
 801197c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801197e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011980:	69f8      	ldr	r0, [r7, #28]
 8011982:	f7ff f883 	bl	8010a8c <tcp_oos_insert_segment>
                  }
                  break;
 8011986:	e0e2      	b.n	8011b4e <tcp_receive+0xeba>
 8011988:	24064550 	.word	0x24064550
 801198c:	2406454d 	.word	0x2406454d
 8011990:	24064520 	.word	0x24064520
 8011994:	24064540 	.word	0x24064540
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801199c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	f040 80c6 	bne.w	8011b32 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80119a6:	4b80      	ldr	r3, [pc, #512]	; (8011ba8 <tcp_receive+0xf14>)
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ac:	68db      	ldr	r3, [r3, #12]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f340 80bd 	ble.w	8011b32 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80119b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ba:	68db      	ldr	r3, [r3, #12]
 80119bc:	899b      	ldrh	r3, [r3, #12]
 80119be:	b29b      	uxth	r3, r3
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7fa fad5 	bl	800bf70 <lwip_htons>
 80119c6:	4603      	mov	r3, r0
 80119c8:	b2db      	uxtb	r3, r3
 80119ca:	f003 0301 	and.w	r3, r3, #1
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	f040 80bf 	bne.w	8011b52 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80119d4:	4875      	ldr	r0, [pc, #468]	; (8011bac <tcp_receive+0xf18>)
 80119d6:	f7fd fb09 	bl	800efec <tcp_seg_copy>
 80119da:	4602      	mov	r2, r0
 80119dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119de:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80119e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	f000 80b6 	beq.w	8011b56 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80119ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ec:	68db      	ldr	r3, [r3, #12]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119f2:	8912      	ldrh	r2, [r2, #8]
 80119f4:	441a      	add	r2, r3
 80119f6:	4b6c      	ldr	r3, [pc, #432]	; (8011ba8 <tcp_receive+0xf14>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	1ad3      	subs	r3, r2, r3
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	dd12      	ble.n	8011a26 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011a00:	4b69      	ldr	r3, [pc, #420]	; (8011ba8 <tcp_receive+0xf14>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	b29a      	uxth	r2, r3
 8011a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a08:	68db      	ldr	r3, [r3, #12]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	b29b      	uxth	r3, r3
 8011a0e:	1ad3      	subs	r3, r2, r3
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a14:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a18:	685a      	ldr	r2, [r3, #4]
 8011a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a1c:	891b      	ldrh	r3, [r3, #8]
 8011a1e:	4619      	mov	r1, r3
 8011a20:	4610      	mov	r0, r2
 8011a22:	f7fb feb1 	bl	800d788 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011a26:	4b62      	ldr	r3, [pc, #392]	; (8011bb0 <tcp_receive+0xf1c>)
 8011a28:	881b      	ldrh	r3, [r3, #0]
 8011a2a:	461a      	mov	r2, r3
 8011a2c:	4b5e      	ldr	r3, [pc, #376]	; (8011ba8 <tcp_receive+0xf14>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	441a      	add	r2, r3
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a36:	6879      	ldr	r1, [r7, #4]
 8011a38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a3a:	440b      	add	r3, r1
 8011a3c:	1ad3      	subs	r3, r2, r3
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	f340 8089 	ble.w	8011b56 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	68db      	ldr	r3, [r3, #12]
 8011a4a:	899b      	ldrh	r3, [r3, #12]
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7fa fa8e 	bl	800bf70 <lwip_htons>
 8011a54:	4603      	mov	r3, r0
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	f003 0301 	and.w	r3, r3, #1
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d022      	beq.n	8011aa6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	68db      	ldr	r3, [r3, #12]
 8011a66:	899b      	ldrh	r3, [r3, #12]
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	b21b      	sxth	r3, r3
 8011a6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011a70:	b21c      	sxth	r4, r3
 8011a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	68db      	ldr	r3, [r3, #12]
 8011a78:	899b      	ldrh	r3, [r3, #12]
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7fa fa77 	bl	800bf70 <lwip_htons>
 8011a82:	4603      	mov	r3, r0
 8011a84:	b2db      	uxtb	r3, r3
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7fa fa6e 	bl	800bf70 <lwip_htons>
 8011a94:	4603      	mov	r3, r0
 8011a96:	b21b      	sxth	r3, r3
 8011a98:	4323      	orrs	r3, r4
 8011a9a:	b21a      	sxth	r2, r3
 8011a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	68db      	ldr	r3, [r3, #12]
 8011aa2:	b292      	uxth	r2, r2
 8011aa4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ab0:	4413      	add	r3, r2
 8011ab2:	b299      	uxth	r1, r3
 8011ab4:	4b3c      	ldr	r3, [pc, #240]	; (8011ba8 <tcp_receive+0xf14>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	b29a      	uxth	r2, r3
 8011aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	1a8a      	subs	r2, r1, r2
 8011ac0:	b292      	uxth	r2, r2
 8011ac2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	685a      	ldr	r2, [r3, #4]
 8011aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	891b      	ldrh	r3, [r3, #8]
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	4610      	mov	r0, r2
 8011ad4:	f7fb fe58 	bl	800d788 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	891c      	ldrh	r4, [r3, #8]
 8011ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	68db      	ldr	r3, [r3, #12]
 8011ae4:	899b      	ldrh	r3, [r3, #12]
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7fa fa41 	bl	800bf70 <lwip_htons>
 8011aee:	4603      	mov	r3, r0
 8011af0:	b2db      	uxtb	r3, r3
 8011af2:	f003 0303 	and.w	r3, r3, #3
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d001      	beq.n	8011afe <tcp_receive+0xe6a>
 8011afa:	2301      	movs	r3, #1
 8011afc:	e000      	b.n	8011b00 <tcp_receive+0xe6c>
 8011afe:	2300      	movs	r3, #0
 8011b00:	4423      	add	r3, r4
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	4b2a      	ldr	r3, [pc, #168]	; (8011bb0 <tcp_receive+0xf1c>)
 8011b06:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011b08:	4b29      	ldr	r3, [pc, #164]	; (8011bb0 <tcp_receive+0xf1c>)
 8011b0a:	881b      	ldrh	r3, [r3, #0]
 8011b0c:	461a      	mov	r2, r3
 8011b0e:	4b26      	ldr	r3, [pc, #152]	; (8011ba8 <tcp_receive+0xf14>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	441a      	add	r2, r3
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b18:	6879      	ldr	r1, [r7, #4]
 8011b1a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b1c:	440b      	add	r3, r1
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d019      	beq.n	8011b56 <tcp_receive+0xec2>
 8011b22:	4b24      	ldr	r3, [pc, #144]	; (8011bb4 <tcp_receive+0xf20>)
 8011b24:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011b28:	4923      	ldr	r1, [pc, #140]	; (8011bb8 <tcp_receive+0xf24>)
 8011b2a:	4824      	ldr	r0, [pc, #144]	; (8011bbc <tcp_receive+0xf28>)
 8011b2c:	f004 ffb6 	bl	8016a9c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011b30:	e011      	b.n	8011b56 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	f47f aea4 	bne.w	8011888 <tcp_receive+0xbf4>
 8011b40:	e00a      	b.n	8011b58 <tcp_receive+0xec4>
                break;
 8011b42:	bf00      	nop
 8011b44:	e008      	b.n	8011b58 <tcp_receive+0xec4>
                break;
 8011b46:	bf00      	nop
 8011b48:	e006      	b.n	8011b58 <tcp_receive+0xec4>
                  break;
 8011b4a:	bf00      	nop
 8011b4c:	e004      	b.n	8011b58 <tcp_receive+0xec4>
                  break;
 8011b4e:	bf00      	nop
 8011b50:	e002      	b.n	8011b58 <tcp_receive+0xec4>
                  break;
 8011b52:	bf00      	nop
 8011b54:	e000      	b.n	8011b58 <tcp_receive+0xec4>
                break;
 8011b56:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f001 fa33 	bl	8012fc4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011b5e:	e003      	b.n	8011b68 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f001 fa2f 	bl	8012fc4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b66:	e01a      	b.n	8011b9e <tcp_receive+0xf0a>
 8011b68:	e019      	b.n	8011b9e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011b6a:	4b0f      	ldr	r3, [pc, #60]	; (8011ba8 <tcp_receive+0xf14>)
 8011b6c:	681a      	ldr	r2, [r3, #0]
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b72:	1ad3      	subs	r3, r2, r3
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	db0a      	blt.n	8011b8e <tcp_receive+0xefa>
 8011b78:	4b0b      	ldr	r3, [pc, #44]	; (8011ba8 <tcp_receive+0xf14>)
 8011b7a:	681a      	ldr	r2, [r3, #0]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b80:	6879      	ldr	r1, [r7, #4]
 8011b82:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b84:	440b      	add	r3, r1
 8011b86:	1ad3      	subs	r3, r2, r3
 8011b88:	3301      	adds	r3, #1
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	dd07      	ble.n	8011b9e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	8b5b      	ldrh	r3, [r3, #26]
 8011b92:	f043 0302 	orr.w	r3, r3, #2
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011b9c:	e7ff      	b.n	8011b9e <tcp_receive+0xf0a>
 8011b9e:	bf00      	nop
 8011ba0:	3750      	adds	r7, #80	; 0x50
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	24064540 	.word	0x24064540
 8011bac:	24064520 	.word	0x24064520
 8011bb0:	2406454a 	.word	0x2406454a
 8011bb4:	08018d5c 	.word	0x08018d5c
 8011bb8:	08019104 	.word	0x08019104
 8011bbc:	08018da8 	.word	0x08018da8

08011bc0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011bc6:	4b15      	ldr	r3, [pc, #84]	; (8011c1c <tcp_get_next_optbyte+0x5c>)
 8011bc8:	881b      	ldrh	r3, [r3, #0]
 8011bca:	1c5a      	adds	r2, r3, #1
 8011bcc:	b291      	uxth	r1, r2
 8011bce:	4a13      	ldr	r2, [pc, #76]	; (8011c1c <tcp_get_next_optbyte+0x5c>)
 8011bd0:	8011      	strh	r1, [r2, #0]
 8011bd2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011bd4:	4b12      	ldr	r3, [pc, #72]	; (8011c20 <tcp_get_next_optbyte+0x60>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d004      	beq.n	8011be6 <tcp_get_next_optbyte+0x26>
 8011bdc:	4b11      	ldr	r3, [pc, #68]	; (8011c24 <tcp_get_next_optbyte+0x64>)
 8011bde:	881b      	ldrh	r3, [r3, #0]
 8011be0:	88fa      	ldrh	r2, [r7, #6]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d208      	bcs.n	8011bf8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011be6:	4b10      	ldr	r3, [pc, #64]	; (8011c28 <tcp_get_next_optbyte+0x68>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	3314      	adds	r3, #20
 8011bec:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011bee:	88fb      	ldrh	r3, [r7, #6]
 8011bf0:	683a      	ldr	r2, [r7, #0]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	e00b      	b.n	8011c10 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011bf8:	88fb      	ldrh	r3, [r7, #6]
 8011bfa:	b2da      	uxtb	r2, r3
 8011bfc:	4b09      	ldr	r3, [pc, #36]	; (8011c24 <tcp_get_next_optbyte+0x64>)
 8011bfe:	881b      	ldrh	r3, [r3, #0]
 8011c00:	b2db      	uxtb	r3, r3
 8011c02:	1ad3      	subs	r3, r2, r3
 8011c04:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011c06:	4b06      	ldr	r3, [pc, #24]	; (8011c20 <tcp_get_next_optbyte+0x60>)
 8011c08:	681a      	ldr	r2, [r3, #0]
 8011c0a:	797b      	ldrb	r3, [r7, #5]
 8011c0c:	4413      	add	r3, r2
 8011c0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	370c      	adds	r7, #12
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr
 8011c1c:	2406453c 	.word	0x2406453c
 8011c20:	24064538 	.word	0x24064538
 8011c24:	24064536 	.word	0x24064536
 8011c28:	24064530 	.word	0x24064530

08011c2c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d106      	bne.n	8011c48 <tcp_parseopt+0x1c>
 8011c3a:	4b32      	ldr	r3, [pc, #200]	; (8011d04 <tcp_parseopt+0xd8>)
 8011c3c:	f240 727d 	movw	r2, #1917	; 0x77d
 8011c40:	4931      	ldr	r1, [pc, #196]	; (8011d08 <tcp_parseopt+0xdc>)
 8011c42:	4832      	ldr	r0, [pc, #200]	; (8011d0c <tcp_parseopt+0xe0>)
 8011c44:	f004 ff2a 	bl	8016a9c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011c48:	4b31      	ldr	r3, [pc, #196]	; (8011d10 <tcp_parseopt+0xe4>)
 8011c4a:	881b      	ldrh	r3, [r3, #0]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d056      	beq.n	8011cfe <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011c50:	4b30      	ldr	r3, [pc, #192]	; (8011d14 <tcp_parseopt+0xe8>)
 8011c52:	2200      	movs	r2, #0
 8011c54:	801a      	strh	r2, [r3, #0]
 8011c56:	e046      	b.n	8011ce6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011c58:	f7ff ffb2 	bl	8011bc0 <tcp_get_next_optbyte>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011c60:	7bfb      	ldrb	r3, [r7, #15]
 8011c62:	2b02      	cmp	r3, #2
 8011c64:	d006      	beq.n	8011c74 <tcp_parseopt+0x48>
 8011c66:	2b02      	cmp	r3, #2
 8011c68:	dc2c      	bgt.n	8011cc4 <tcp_parseopt+0x98>
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d042      	beq.n	8011cf4 <tcp_parseopt+0xc8>
 8011c6e:	2b01      	cmp	r3, #1
 8011c70:	d128      	bne.n	8011cc4 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011c72:	e038      	b.n	8011ce6 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011c74:	f7ff ffa4 	bl	8011bc0 <tcp_get_next_optbyte>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	2b04      	cmp	r3, #4
 8011c7c:	d13c      	bne.n	8011cf8 <tcp_parseopt+0xcc>
 8011c7e:	4b25      	ldr	r3, [pc, #148]	; (8011d14 <tcp_parseopt+0xe8>)
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	3301      	adds	r3, #1
 8011c84:	4a22      	ldr	r2, [pc, #136]	; (8011d10 <tcp_parseopt+0xe4>)
 8011c86:	8812      	ldrh	r2, [r2, #0]
 8011c88:	4293      	cmp	r3, r2
 8011c8a:	da35      	bge.n	8011cf8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011c8c:	f7ff ff98 	bl	8011bc0 <tcp_get_next_optbyte>
 8011c90:	4603      	mov	r3, r0
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	021b      	lsls	r3, r3, #8
 8011c96:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011c98:	f7ff ff92 	bl	8011bc0 <tcp_get_next_optbyte>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	b29a      	uxth	r2, r3
 8011ca0:	89bb      	ldrh	r3, [r7, #12]
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011ca6:	89bb      	ldrh	r3, [r7, #12]
 8011ca8:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8011cac:	4293      	cmp	r3, r2
 8011cae:	d804      	bhi.n	8011cba <tcp_parseopt+0x8e>
 8011cb0:	89bb      	ldrh	r3, [r7, #12]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d001      	beq.n	8011cba <tcp_parseopt+0x8e>
 8011cb6:	89ba      	ldrh	r2, [r7, #12]
 8011cb8:	e001      	b.n	8011cbe <tcp_parseopt+0x92>
 8011cba:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011cc2:	e010      	b.n	8011ce6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011cc4:	f7ff ff7c 	bl	8011bc0 <tcp_get_next_optbyte>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011ccc:	7afb      	ldrb	r3, [r7, #11]
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d914      	bls.n	8011cfc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011cd2:	7afb      	ldrb	r3, [r7, #11]
 8011cd4:	b29a      	uxth	r2, r3
 8011cd6:	4b0f      	ldr	r3, [pc, #60]	; (8011d14 <tcp_parseopt+0xe8>)
 8011cd8:	881b      	ldrh	r3, [r3, #0]
 8011cda:	4413      	add	r3, r2
 8011cdc:	b29b      	uxth	r3, r3
 8011cde:	3b02      	subs	r3, #2
 8011ce0:	b29a      	uxth	r2, r3
 8011ce2:	4b0c      	ldr	r3, [pc, #48]	; (8011d14 <tcp_parseopt+0xe8>)
 8011ce4:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011ce6:	4b0b      	ldr	r3, [pc, #44]	; (8011d14 <tcp_parseopt+0xe8>)
 8011ce8:	881a      	ldrh	r2, [r3, #0]
 8011cea:	4b09      	ldr	r3, [pc, #36]	; (8011d10 <tcp_parseopt+0xe4>)
 8011cec:	881b      	ldrh	r3, [r3, #0]
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d3b2      	bcc.n	8011c58 <tcp_parseopt+0x2c>
 8011cf2:	e004      	b.n	8011cfe <tcp_parseopt+0xd2>
          return;
 8011cf4:	bf00      	nop
 8011cf6:	e002      	b.n	8011cfe <tcp_parseopt+0xd2>
            return;
 8011cf8:	bf00      	nop
 8011cfa:	e000      	b.n	8011cfe <tcp_parseopt+0xd2>
            return;
 8011cfc:	bf00      	nop
      }
    }
  }
}
 8011cfe:	3710      	adds	r7, #16
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}
 8011d04:	08018d5c 	.word	0x08018d5c
 8011d08:	080191c0 	.word	0x080191c0
 8011d0c:	08018da8 	.word	0x08018da8
 8011d10:	24064534 	.word	0x24064534
 8011d14:	2406453c 	.word	0x2406453c

08011d18 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011d1c:	4b05      	ldr	r3, [pc, #20]	; (8011d34 <tcp_trigger_input_pcb_close+0x1c>)
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	f043 0310 	orr.w	r3, r3, #16
 8011d24:	b2da      	uxtb	r2, r3
 8011d26:	4b03      	ldr	r3, [pc, #12]	; (8011d34 <tcp_trigger_input_pcb_close+0x1c>)
 8011d28:	701a      	strb	r2, [r3, #0]
}
 8011d2a:	bf00      	nop
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr
 8011d34:	2406454d 	.word	0x2406454d

08011d38 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d00a      	beq.n	8011d60 <tcp_route+0x28>
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	7a1b      	ldrb	r3, [r3, #8]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d006      	beq.n	8011d60 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	7a1b      	ldrb	r3, [r3, #8]
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fb fadc 	bl	800d314 <netif_get_by_index>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	e003      	b.n	8011d68 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f003 fa03 	bl	801516c <ip4_route>
 8011d66:	4603      	mov	r3, r0
  }
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011d70:	b590      	push	{r4, r7, lr}
 8011d72:	b087      	sub	sp, #28
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	60f8      	str	r0, [r7, #12]
 8011d78:	60b9      	str	r1, [r7, #8]
 8011d7a:	603b      	str	r3, [r7, #0]
 8011d7c:	4613      	mov	r3, r2
 8011d7e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d105      	bne.n	8011d92 <tcp_create_segment+0x22>
 8011d86:	4b44      	ldr	r3, [pc, #272]	; (8011e98 <tcp_create_segment+0x128>)
 8011d88:	22a3      	movs	r2, #163	; 0xa3
 8011d8a:	4944      	ldr	r1, [pc, #272]	; (8011e9c <tcp_create_segment+0x12c>)
 8011d8c:	4844      	ldr	r0, [pc, #272]	; (8011ea0 <tcp_create_segment+0x130>)
 8011d8e:	f004 fe85 	bl	8016a9c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d105      	bne.n	8011da4 <tcp_create_segment+0x34>
 8011d98:	4b3f      	ldr	r3, [pc, #252]	; (8011e98 <tcp_create_segment+0x128>)
 8011d9a:	22a4      	movs	r2, #164	; 0xa4
 8011d9c:	4941      	ldr	r1, [pc, #260]	; (8011ea4 <tcp_create_segment+0x134>)
 8011d9e:	4840      	ldr	r0, [pc, #256]	; (8011ea0 <tcp_create_segment+0x130>)
 8011da0:	f004 fe7c 	bl	8016a9c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011da4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011da8:	009b      	lsls	r3, r3, #2
 8011daa:	b2db      	uxtb	r3, r3
 8011dac:	f003 0304 	and.w	r3, r3, #4
 8011db0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011db2:	2003      	movs	r0, #3
 8011db4:	f7fa fe7c 	bl	800cab0 <memp_malloc>
 8011db8:	6138      	str	r0, [r7, #16]
 8011dba:	693b      	ldr	r3, [r7, #16]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d104      	bne.n	8011dca <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011dc0:	68b8      	ldr	r0, [r7, #8]
 8011dc2:	f7fb fe67 	bl	800da94 <pbuf_free>
    return NULL;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	e061      	b.n	8011e8e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011dd0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	68ba      	ldr	r2, [r7, #8]
 8011ddc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	891a      	ldrh	r2, [r3, #8]
 8011de2:	7dfb      	ldrb	r3, [r7, #23]
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d205      	bcs.n	8011df6 <tcp_create_segment+0x86>
 8011dea:	4b2b      	ldr	r3, [pc, #172]	; (8011e98 <tcp_create_segment+0x128>)
 8011dec:	22b0      	movs	r2, #176	; 0xb0
 8011dee:	492e      	ldr	r1, [pc, #184]	; (8011ea8 <tcp_create_segment+0x138>)
 8011df0:	482b      	ldr	r0, [pc, #172]	; (8011ea0 <tcp_create_segment+0x130>)
 8011df2:	f004 fe53 	bl	8016a9c <iprintf>
  seg->len = p->tot_len - optlen;
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	891a      	ldrh	r2, [r3, #8]
 8011dfa:	7dfb      	ldrb	r3, [r7, #23]
 8011dfc:	b29b      	uxth	r3, r3
 8011dfe:	1ad3      	subs	r3, r2, r3
 8011e00:	b29a      	uxth	r2, r3
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011e06:	2114      	movs	r1, #20
 8011e08:	68b8      	ldr	r0, [r7, #8]
 8011e0a:	f7fb fdad 	bl	800d968 <pbuf_add_header>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d004      	beq.n	8011e1e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011e14:	6938      	ldr	r0, [r7, #16]
 8011e16:	f7fd f8d0 	bl	800efba <tcp_seg_free>
    return NULL;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	e037      	b.n	8011e8e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011e1e:	693b      	ldr	r3, [r7, #16]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	685a      	ldr	r2, [r3, #4]
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	8ada      	ldrh	r2, [r3, #22]
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	68dc      	ldr	r4, [r3, #12]
 8011e30:	4610      	mov	r0, r2
 8011e32:	f7fa f89d 	bl	800bf70 <lwip_htons>
 8011e36:	4603      	mov	r3, r0
 8011e38:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	8b1a      	ldrh	r2, [r3, #24]
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	68dc      	ldr	r4, [r3, #12]
 8011e42:	4610      	mov	r0, r2
 8011e44:	f7fa f894 	bl	800bf70 <lwip_htons>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	68dc      	ldr	r4, [r3, #12]
 8011e50:	6838      	ldr	r0, [r7, #0]
 8011e52:	f7fa f8a2 	bl	800bf9a <lwip_htonl>
 8011e56:	4603      	mov	r3, r0
 8011e58:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011e5a:	7dfb      	ldrb	r3, [r7, #23]
 8011e5c:	089b      	lsrs	r3, r3, #2
 8011e5e:	b2db      	uxtb	r3, r3
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	3305      	adds	r3, #5
 8011e64:	b29b      	uxth	r3, r3
 8011e66:	031b      	lsls	r3, r3, #12
 8011e68:	b29a      	uxth	r2, r3
 8011e6a:	79fb      	ldrb	r3, [r7, #7]
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	4313      	orrs	r3, r2
 8011e70:	b29a      	uxth	r2, r3
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	68dc      	ldr	r4, [r3, #12]
 8011e76:	4610      	mov	r0, r2
 8011e78:	f7fa f87a 	bl	800bf70 <lwip_htons>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	68db      	ldr	r3, [r3, #12]
 8011e84:	2200      	movs	r2, #0
 8011e86:	749a      	strb	r2, [r3, #18]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	74da      	strb	r2, [r3, #19]
  return seg;
 8011e8c:	693b      	ldr	r3, [r7, #16]
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	371c      	adds	r7, #28
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd90      	pop	{r4, r7, pc}
 8011e96:	bf00      	nop
 8011e98:	080191dc 	.word	0x080191dc
 8011e9c:	08019210 	.word	0x08019210
 8011ea0:	08019230 	.word	0x08019230
 8011ea4:	08019258 	.word	0x08019258
 8011ea8:	0801927c 	.word	0x0801927c

08011eac <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011eac:	b590      	push	{r4, r7, lr}
 8011eae:	b08b      	sub	sp, #44	; 0x2c
 8011eb0:	af02      	add	r7, sp, #8
 8011eb2:	6078      	str	r0, [r7, #4]
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	61fb      	str	r3, [r7, #28]
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d106      	bne.n	8011ed8 <tcp_split_unsent_seg+0x2c>
 8011eca:	4b95      	ldr	r3, [pc, #596]	; (8012120 <tcp_split_unsent_seg+0x274>)
 8011ecc:	f240 324b 	movw	r2, #843	; 0x34b
 8011ed0:	4994      	ldr	r1, [pc, #592]	; (8012124 <tcp_split_unsent_seg+0x278>)
 8011ed2:	4895      	ldr	r0, [pc, #596]	; (8012128 <tcp_split_unsent_seg+0x27c>)
 8011ed4:	f004 fde2 	bl	8016a9c <iprintf>

  useg = pcb->unsent;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011edc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d102      	bne.n	8011eea <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ee8:	e116      	b.n	8012118 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011eea:	887b      	ldrh	r3, [r7, #2]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d109      	bne.n	8011f04 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011ef0:	4b8b      	ldr	r3, [pc, #556]	; (8012120 <tcp_split_unsent_seg+0x274>)
 8011ef2:	f240 3253 	movw	r2, #851	; 0x353
 8011ef6:	498d      	ldr	r1, [pc, #564]	; (801212c <tcp_split_unsent_seg+0x280>)
 8011ef8:	488b      	ldr	r0, [pc, #556]	; (8012128 <tcp_split_unsent_seg+0x27c>)
 8011efa:	f004 fdcf 	bl	8016a9c <iprintf>
    return ERR_VAL;
 8011efe:	f06f 0305 	mvn.w	r3, #5
 8011f02:	e109      	b.n	8012118 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	891b      	ldrh	r3, [r3, #8]
 8011f08:	887a      	ldrh	r2, [r7, #2]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d301      	bcc.n	8011f12 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	e102      	b.n	8012118 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f16:	887a      	ldrh	r2, [r7, #2]
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d906      	bls.n	8011f2a <tcp_split_unsent_seg+0x7e>
 8011f1c:	4b80      	ldr	r3, [pc, #512]	; (8012120 <tcp_split_unsent_seg+0x274>)
 8011f1e:	f240 325b 	movw	r2, #859	; 0x35b
 8011f22:	4983      	ldr	r1, [pc, #524]	; (8012130 <tcp_split_unsent_seg+0x284>)
 8011f24:	4880      	ldr	r0, [pc, #512]	; (8012128 <tcp_split_unsent_seg+0x27c>)
 8011f26:	f004 fdb9 	bl	8016a9c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	891b      	ldrh	r3, [r3, #8]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d106      	bne.n	8011f40 <tcp_split_unsent_seg+0x94>
 8011f32:	4b7b      	ldr	r3, [pc, #492]	; (8012120 <tcp_split_unsent_seg+0x274>)
 8011f34:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011f38:	497e      	ldr	r1, [pc, #504]	; (8012134 <tcp_split_unsent_seg+0x288>)
 8011f3a:	487b      	ldr	r0, [pc, #492]	; (8012128 <tcp_split_unsent_seg+0x27c>)
 8011f3c:	f004 fdae 	bl	8016a9c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	7a9b      	ldrb	r3, [r3, #10]
 8011f44:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011f46:	7bfb      	ldrb	r3, [r7, #15]
 8011f48:	009b      	lsls	r3, r3, #2
 8011f4a:	b2db      	uxtb	r3, r3
 8011f4c:	f003 0304 	and.w	r3, r3, #4
 8011f50:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011f52:	697b      	ldr	r3, [r7, #20]
 8011f54:	891a      	ldrh	r2, [r3, #8]
 8011f56:	887b      	ldrh	r3, [r7, #2]
 8011f58:	1ad3      	subs	r3, r2, r3
 8011f5a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011f5c:	7bbb      	ldrb	r3, [r7, #14]
 8011f5e:	b29a      	uxth	r2, r3
 8011f60:	89bb      	ldrh	r3, [r7, #12]
 8011f62:	4413      	add	r3, r2
 8011f64:	b29b      	uxth	r3, r3
 8011f66:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	2036      	movs	r0, #54	; 0x36
 8011f6e:	f7fb faa9 	bl	800d4c4 <pbuf_alloc>
 8011f72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	f000 80b7 	beq.w	80120ea <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	685b      	ldr	r3, [r3, #4]
 8011f80:	891a      	ldrh	r2, [r3, #8]
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	891b      	ldrh	r3, [r3, #8]
 8011f86:	1ad3      	subs	r3, r2, r3
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	887b      	ldrh	r3, [r7, #2]
 8011f8c:	4413      	add	r3, r2
 8011f8e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	6858      	ldr	r0, [r3, #4]
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	685a      	ldr	r2, [r3, #4]
 8011f98:	7bbb      	ldrb	r3, [r7, #14]
 8011f9a:	18d1      	adds	r1, r2, r3
 8011f9c:	897b      	ldrh	r3, [r7, #10]
 8011f9e:	89ba      	ldrh	r2, [r7, #12]
 8011fa0:	f7fb ff7e 	bl	800dea0 <pbuf_copy_partial>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	89bb      	ldrh	r3, [r7, #12]
 8011faa:	4293      	cmp	r3, r2
 8011fac:	f040 809f 	bne.w	80120ee <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	899b      	ldrh	r3, [r3, #12]
 8011fb6:	b29b      	uxth	r3, r3
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7f9 ffd9 	bl	800bf70 <lwip_htons>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	b2db      	uxtb	r3, r3
 8011fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011fc6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011fc8:	2300      	movs	r3, #0
 8011fca:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011fcc:	7efb      	ldrb	r3, [r7, #27]
 8011fce:	f003 0308 	and.w	r3, r3, #8
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d007      	beq.n	8011fe6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011fd6:	7efb      	ldrb	r3, [r7, #27]
 8011fd8:	f023 0308 	bic.w	r3, r3, #8
 8011fdc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011fde:	7ebb      	ldrb	r3, [r7, #26]
 8011fe0:	f043 0308 	orr.w	r3, r3, #8
 8011fe4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011fe6:	7efb      	ldrb	r3, [r7, #27]
 8011fe8:	f003 0301 	and.w	r3, r3, #1
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d007      	beq.n	8012000 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011ff0:	7efb      	ldrb	r3, [r7, #27]
 8011ff2:	f023 0301 	bic.w	r3, r3, #1
 8011ff6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011ff8:	7ebb      	ldrb	r3, [r7, #26]
 8011ffa:	f043 0301 	orr.w	r3, r3, #1
 8011ffe:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	68db      	ldr	r3, [r3, #12]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	4618      	mov	r0, r3
 8012008:	f7f9 ffc7 	bl	800bf9a <lwip_htonl>
 801200c:	4602      	mov	r2, r0
 801200e:	887b      	ldrh	r3, [r7, #2]
 8012010:	18d1      	adds	r1, r2, r3
 8012012:	7eba      	ldrb	r2, [r7, #26]
 8012014:	7bfb      	ldrb	r3, [r7, #15]
 8012016:	9300      	str	r3, [sp, #0]
 8012018:	460b      	mov	r3, r1
 801201a:	6939      	ldr	r1, [r7, #16]
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f7ff fea7 	bl	8011d70 <tcp_create_segment>
 8012022:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d063      	beq.n	80120f2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	4618      	mov	r0, r3
 8012030:	f7fb fdbe 	bl	800dbb0 <pbuf_clen>
 8012034:	4603      	mov	r3, r0
 8012036:	461a      	mov	r2, r3
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801203e:	1a9b      	subs	r3, r3, r2
 8012040:	b29a      	uxth	r2, r3
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	6858      	ldr	r0, [r3, #4]
 801204c:	697b      	ldr	r3, [r7, #20]
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	891a      	ldrh	r2, [r3, #8]
 8012052:	89bb      	ldrh	r3, [r7, #12]
 8012054:	1ad3      	subs	r3, r2, r3
 8012056:	b29b      	uxth	r3, r3
 8012058:	4619      	mov	r1, r3
 801205a:	f7fb fb95 	bl	800d788 <pbuf_realloc>
  useg->len -= remainder;
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	891a      	ldrh	r2, [r3, #8]
 8012062:	89bb      	ldrh	r3, [r7, #12]
 8012064:	1ad3      	subs	r3, r2, r3
 8012066:	b29a      	uxth	r2, r3
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	68db      	ldr	r3, [r3, #12]
 8012070:	899b      	ldrh	r3, [r3, #12]
 8012072:	b29c      	uxth	r4, r3
 8012074:	7efb      	ldrb	r3, [r7, #27]
 8012076:	b29b      	uxth	r3, r3
 8012078:	4618      	mov	r0, r3
 801207a:	f7f9 ff79 	bl	800bf70 <lwip_htons>
 801207e:	4603      	mov	r3, r0
 8012080:	461a      	mov	r2, r3
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	68db      	ldr	r3, [r3, #12]
 8012086:	4322      	orrs	r2, r4
 8012088:	b292      	uxth	r2, r2
 801208a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	4618      	mov	r0, r3
 8012092:	f7fb fd8d 	bl	800dbb0 <pbuf_clen>
 8012096:	4603      	mov	r3, r0
 8012098:	461a      	mov	r2, r3
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120a0:	4413      	add	r3, r2
 80120a2:	b29a      	uxth	r2, r3
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fb fd7e 	bl	800dbb0 <pbuf_clen>
 80120b4:	4603      	mov	r3, r0
 80120b6:	461a      	mov	r2, r3
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120be:	4413      	add	r3, r2
 80120c0:	b29a      	uxth	r2, r3
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	681a      	ldr	r2, [r3, #0]
 80120cc:	69fb      	ldr	r3, [r7, #28]
 80120ce:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	69fa      	ldr	r2, [r7, #28]
 80120d4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d103      	bne.n	80120e6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2200      	movs	r2, #0
 80120e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80120e6:	2300      	movs	r3, #0
 80120e8:	e016      	b.n	8012118 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80120ea:	bf00      	nop
 80120ec:	e002      	b.n	80120f4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80120ee:	bf00      	nop
 80120f0:	e000      	b.n	80120f4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80120f2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80120f4:	69fb      	ldr	r3, [r7, #28]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d006      	beq.n	8012108 <tcp_split_unsent_seg+0x25c>
 80120fa:	4b09      	ldr	r3, [pc, #36]	; (8012120 <tcp_split_unsent_seg+0x274>)
 80120fc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012100:	490d      	ldr	r1, [pc, #52]	; (8012138 <tcp_split_unsent_seg+0x28c>)
 8012102:	4809      	ldr	r0, [pc, #36]	; (8012128 <tcp_split_unsent_seg+0x27c>)
 8012104:	f004 fcca 	bl	8016a9c <iprintf>
  if (p != NULL) {
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d002      	beq.n	8012114 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801210e:	6938      	ldr	r0, [r7, #16]
 8012110:	f7fb fcc0 	bl	800da94 <pbuf_free>
  }

  return ERR_MEM;
 8012114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012118:	4618      	mov	r0, r3
 801211a:	3724      	adds	r7, #36	; 0x24
 801211c:	46bd      	mov	sp, r7
 801211e:	bd90      	pop	{r4, r7, pc}
 8012120:	080191dc 	.word	0x080191dc
 8012124:	08019570 	.word	0x08019570
 8012128:	08019230 	.word	0x08019230
 801212c:	08019594 	.word	0x08019594
 8012130:	080195b8 	.word	0x080195b8
 8012134:	080195c8 	.word	0x080195c8
 8012138:	080195d8 	.word	0x080195d8

0801213c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801213c:	b590      	push	{r4, r7, lr}
 801213e:	b085      	sub	sp, #20
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d106      	bne.n	8012158 <tcp_send_fin+0x1c>
 801214a:	4b21      	ldr	r3, [pc, #132]	; (80121d0 <tcp_send_fin+0x94>)
 801214c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012150:	4920      	ldr	r1, [pc, #128]	; (80121d4 <tcp_send_fin+0x98>)
 8012152:	4821      	ldr	r0, [pc, #132]	; (80121d8 <tcp_send_fin+0x9c>)
 8012154:	f004 fca2 	bl	8016a9c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801215c:	2b00      	cmp	r3, #0
 801215e:	d02e      	beq.n	80121be <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012164:	60fb      	str	r3, [r7, #12]
 8012166:	e002      	b.n	801216e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d1f8      	bne.n	8012168 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	68db      	ldr	r3, [r3, #12]
 801217a:	899b      	ldrh	r3, [r3, #12]
 801217c:	b29b      	uxth	r3, r3
 801217e:	4618      	mov	r0, r3
 8012180:	f7f9 fef6 	bl	800bf70 <lwip_htons>
 8012184:	4603      	mov	r3, r0
 8012186:	b2db      	uxtb	r3, r3
 8012188:	f003 0307 	and.w	r3, r3, #7
 801218c:	2b00      	cmp	r3, #0
 801218e:	d116      	bne.n	80121be <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	68db      	ldr	r3, [r3, #12]
 8012194:	899b      	ldrh	r3, [r3, #12]
 8012196:	b29c      	uxth	r4, r3
 8012198:	2001      	movs	r0, #1
 801219a:	f7f9 fee9 	bl	800bf70 <lwip_htons>
 801219e:	4603      	mov	r3, r0
 80121a0:	461a      	mov	r2, r3
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	4322      	orrs	r2, r4
 80121a8:	b292      	uxth	r2, r2
 80121aa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	8b5b      	ldrh	r3, [r3, #26]
 80121b0:	f043 0320 	orr.w	r3, r3, #32
 80121b4:	b29a      	uxth	r2, r3
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80121ba:	2300      	movs	r3, #0
 80121bc:	e004      	b.n	80121c8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80121be:	2101      	movs	r1, #1
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f000 f80b 	bl	80121dc <tcp_enqueue_flags>
 80121c6:	4603      	mov	r3, r0
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	3714      	adds	r7, #20
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd90      	pop	{r4, r7, pc}
 80121d0:	080191dc 	.word	0x080191dc
 80121d4:	080195e4 	.word	0x080195e4
 80121d8:	08019230 	.word	0x08019230

080121dc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b08a      	sub	sp, #40	; 0x28
 80121e0:	af02      	add	r7, sp, #8
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	460b      	mov	r3, r1
 80121e6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80121e8:	2300      	movs	r3, #0
 80121ea:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80121ec:	2300      	movs	r3, #0
 80121ee:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80121f0:	78fb      	ldrb	r3, [r7, #3]
 80121f2:	f003 0303 	and.w	r3, r3, #3
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d106      	bne.n	8012208 <tcp_enqueue_flags+0x2c>
 80121fa:	4b67      	ldr	r3, [pc, #412]	; (8012398 <tcp_enqueue_flags+0x1bc>)
 80121fc:	f240 4211 	movw	r2, #1041	; 0x411
 8012200:	4966      	ldr	r1, [pc, #408]	; (801239c <tcp_enqueue_flags+0x1c0>)
 8012202:	4867      	ldr	r0, [pc, #412]	; (80123a0 <tcp_enqueue_flags+0x1c4>)
 8012204:	f004 fc4a 	bl	8016a9c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d106      	bne.n	801221c <tcp_enqueue_flags+0x40>
 801220e:	4b62      	ldr	r3, [pc, #392]	; (8012398 <tcp_enqueue_flags+0x1bc>)
 8012210:	f240 4213 	movw	r2, #1043	; 0x413
 8012214:	4963      	ldr	r1, [pc, #396]	; (80123a4 <tcp_enqueue_flags+0x1c8>)
 8012216:	4862      	ldr	r0, [pc, #392]	; (80123a0 <tcp_enqueue_flags+0x1c4>)
 8012218:	f004 fc40 	bl	8016a9c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801221c:	78fb      	ldrb	r3, [r7, #3]
 801221e:	f003 0302 	and.w	r3, r3, #2
 8012222:	2b00      	cmp	r3, #0
 8012224:	d001      	beq.n	801222a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012226:	2301      	movs	r3, #1
 8012228:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801222a:	7ffb      	ldrb	r3, [r7, #31]
 801222c:	009b      	lsls	r3, r3, #2
 801222e:	b2db      	uxtb	r3, r3
 8012230:	f003 0304 	and.w	r3, r3, #4
 8012234:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012236:	7dfb      	ldrb	r3, [r7, #23]
 8012238:	b29b      	uxth	r3, r3
 801223a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801223e:	4619      	mov	r1, r3
 8012240:	2036      	movs	r0, #54	; 0x36
 8012242:	f7fb f93f 	bl	800d4c4 <pbuf_alloc>
 8012246:	6138      	str	r0, [r7, #16]
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d109      	bne.n	8012262 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	8b5b      	ldrh	r3, [r3, #26]
 8012252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012256:	b29a      	uxth	r2, r3
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801225c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012260:	e095      	b.n	801238e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	895a      	ldrh	r2, [r3, #10]
 8012266:	7dfb      	ldrb	r3, [r7, #23]
 8012268:	b29b      	uxth	r3, r3
 801226a:	429a      	cmp	r2, r3
 801226c:	d206      	bcs.n	801227c <tcp_enqueue_flags+0xa0>
 801226e:	4b4a      	ldr	r3, [pc, #296]	; (8012398 <tcp_enqueue_flags+0x1bc>)
 8012270:	f240 4239 	movw	r2, #1081	; 0x439
 8012274:	494c      	ldr	r1, [pc, #304]	; (80123a8 <tcp_enqueue_flags+0x1cc>)
 8012276:	484a      	ldr	r0, [pc, #296]	; (80123a0 <tcp_enqueue_flags+0x1c4>)
 8012278:	f004 fc10 	bl	8016a9c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012280:	78fa      	ldrb	r2, [r7, #3]
 8012282:	7ffb      	ldrb	r3, [r7, #31]
 8012284:	9300      	str	r3, [sp, #0]
 8012286:	460b      	mov	r3, r1
 8012288:	6939      	ldr	r1, [r7, #16]
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f7ff fd70 	bl	8011d70 <tcp_create_segment>
 8012290:	60f8      	str	r0, [r7, #12]
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d109      	bne.n	80122ac <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	8b5b      	ldrh	r3, [r3, #26]
 801229c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122a0:	b29a      	uxth	r2, r3
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80122a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122aa:	e070      	b.n	801238e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	68db      	ldr	r3, [r3, #12]
 80122b0:	f003 0303 	and.w	r3, r3, #3
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d006      	beq.n	80122c6 <tcp_enqueue_flags+0xea>
 80122b8:	4b37      	ldr	r3, [pc, #220]	; (8012398 <tcp_enqueue_flags+0x1bc>)
 80122ba:	f240 4242 	movw	r2, #1090	; 0x442
 80122be:	493b      	ldr	r1, [pc, #236]	; (80123ac <tcp_enqueue_flags+0x1d0>)
 80122c0:	4837      	ldr	r0, [pc, #220]	; (80123a0 <tcp_enqueue_flags+0x1c4>)
 80122c2:	f004 fbeb 	bl	8016a9c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	891b      	ldrh	r3, [r3, #8]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d006      	beq.n	80122dc <tcp_enqueue_flags+0x100>
 80122ce:	4b32      	ldr	r3, [pc, #200]	; (8012398 <tcp_enqueue_flags+0x1bc>)
 80122d0:	f240 4243 	movw	r2, #1091	; 0x443
 80122d4:	4936      	ldr	r1, [pc, #216]	; (80123b0 <tcp_enqueue_flags+0x1d4>)
 80122d6:	4832      	ldr	r0, [pc, #200]	; (80123a0 <tcp_enqueue_flags+0x1c4>)
 80122d8:	f004 fbe0 	bl	8016a9c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d103      	bne.n	80122ec <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	68fa      	ldr	r2, [r7, #12]
 80122e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80122ea:	e00d      	b.n	8012308 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122f0:	61bb      	str	r3, [r7, #24]
 80122f2:	e002      	b.n	80122fa <tcp_enqueue_flags+0x11e>
 80122f4:	69bb      	ldr	r3, [r7, #24]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	61bb      	str	r3, [r7, #24]
 80122fa:	69bb      	ldr	r3, [r7, #24]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d1f8      	bne.n	80122f4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012302:	69bb      	ldr	r3, [r7, #24]
 8012304:	68fa      	ldr	r2, [r7, #12]
 8012306:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2200      	movs	r2, #0
 801230c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012310:	78fb      	ldrb	r3, [r7, #3]
 8012312:	f003 0302 	and.w	r3, r3, #2
 8012316:	2b00      	cmp	r3, #0
 8012318:	d104      	bne.n	8012324 <tcp_enqueue_flags+0x148>
 801231a:	78fb      	ldrb	r3, [r7, #3]
 801231c:	f003 0301 	and.w	r3, r3, #1
 8012320:	2b00      	cmp	r3, #0
 8012322:	d004      	beq.n	801232e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012328:	1c5a      	adds	r2, r3, #1
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801232e:	78fb      	ldrb	r3, [r7, #3]
 8012330:	f003 0301 	and.w	r3, r3, #1
 8012334:	2b00      	cmp	r3, #0
 8012336:	d006      	beq.n	8012346 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	8b5b      	ldrh	r3, [r3, #26]
 801233c:	f043 0320 	orr.w	r3, r3, #32
 8012340:	b29a      	uxth	r2, r3
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	4618      	mov	r0, r3
 801234c:	f7fb fc30 	bl	800dbb0 <pbuf_clen>
 8012350:	4603      	mov	r3, r0
 8012352:	461a      	mov	r2, r3
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801235a:	4413      	add	r3, r2
 801235c:	b29a      	uxth	r2, r3
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801236a:	2b00      	cmp	r3, #0
 801236c:	d00e      	beq.n	801238c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012372:	2b00      	cmp	r3, #0
 8012374:	d10a      	bne.n	801238c <tcp_enqueue_flags+0x1b0>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801237a:	2b00      	cmp	r3, #0
 801237c:	d106      	bne.n	801238c <tcp_enqueue_flags+0x1b0>
 801237e:	4b06      	ldr	r3, [pc, #24]	; (8012398 <tcp_enqueue_flags+0x1bc>)
 8012380:	f240 4265 	movw	r2, #1125	; 0x465
 8012384:	490b      	ldr	r1, [pc, #44]	; (80123b4 <tcp_enqueue_flags+0x1d8>)
 8012386:	4806      	ldr	r0, [pc, #24]	; (80123a0 <tcp_enqueue_flags+0x1c4>)
 8012388:	f004 fb88 	bl	8016a9c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801238c:	2300      	movs	r3, #0
}
 801238e:	4618      	mov	r0, r3
 8012390:	3720      	adds	r7, #32
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
 8012396:	bf00      	nop
 8012398:	080191dc 	.word	0x080191dc
 801239c:	08019600 	.word	0x08019600
 80123a0:	08019230 	.word	0x08019230
 80123a4:	08019658 	.word	0x08019658
 80123a8:	08019678 	.word	0x08019678
 80123ac:	080196b4 	.word	0x080196b4
 80123b0:	080196cc 	.word	0x080196cc
 80123b4:	080196f8 	.word	0x080196f8

080123b8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80123b8:	b5b0      	push	{r4, r5, r7, lr}
 80123ba:	b08a      	sub	sp, #40	; 0x28
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d106      	bne.n	80123d4 <tcp_output+0x1c>
 80123c6:	4b9e      	ldr	r3, [pc, #632]	; (8012640 <tcp_output+0x288>)
 80123c8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80123cc:	499d      	ldr	r1, [pc, #628]	; (8012644 <tcp_output+0x28c>)
 80123ce:	489e      	ldr	r0, [pc, #632]	; (8012648 <tcp_output+0x290>)
 80123d0:	f004 fb64 	bl	8016a9c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	7d1b      	ldrb	r3, [r3, #20]
 80123d8:	2b01      	cmp	r3, #1
 80123da:	d106      	bne.n	80123ea <tcp_output+0x32>
 80123dc:	4b98      	ldr	r3, [pc, #608]	; (8012640 <tcp_output+0x288>)
 80123de:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80123e2:	499a      	ldr	r1, [pc, #616]	; (801264c <tcp_output+0x294>)
 80123e4:	4898      	ldr	r0, [pc, #608]	; (8012648 <tcp_output+0x290>)
 80123e6:	f004 fb59 	bl	8016a9c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80123ea:	4b99      	ldr	r3, [pc, #612]	; (8012650 <tcp_output+0x298>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	687a      	ldr	r2, [r7, #4]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d101      	bne.n	80123f8 <tcp_output+0x40>
    return ERR_OK;
 80123f4:	2300      	movs	r3, #0
 80123f6:	e1ce      	b.n	8012796 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012404:	4293      	cmp	r3, r2
 8012406:	bf28      	it	cs
 8012408:	4613      	movcs	r3, r2
 801240a:	b29b      	uxth	r3, r3
 801240c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012412:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012416:	2b00      	cmp	r3, #0
 8012418:	d10b      	bne.n	8012432 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	8b5b      	ldrh	r3, [r3, #26]
 801241e:	f003 0302 	and.w	r3, r3, #2
 8012422:	2b00      	cmp	r3, #0
 8012424:	f000 81aa 	beq.w	801277c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f000 fdcb 	bl	8012fc4 <tcp_send_empty_ack>
 801242e:	4603      	mov	r3, r0
 8012430:	e1b1      	b.n	8012796 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012432:	6879      	ldr	r1, [r7, #4]
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	3304      	adds	r3, #4
 8012438:	461a      	mov	r2, r3
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f7ff fc7c 	bl	8011d38 <tcp_route>
 8012440:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d102      	bne.n	801244e <tcp_output+0x96>
    return ERR_RTE;
 8012448:	f06f 0303 	mvn.w	r3, #3
 801244c:	e1a3      	b.n	8012796 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d003      	beq.n	801245c <tcp_output+0xa4>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d111      	bne.n	8012480 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d002      	beq.n	8012468 <tcp_output+0xb0>
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	3304      	adds	r3, #4
 8012466:	e000      	b.n	801246a <tcp_output+0xb2>
 8012468:	2300      	movs	r3, #0
 801246a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d102      	bne.n	8012478 <tcp_output+0xc0>
      return ERR_RTE;
 8012472:	f06f 0303 	mvn.w	r3, #3
 8012476:	e18e      	b.n	8012796 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	681a      	ldr	r2, [r3, #0]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012482:	68db      	ldr	r3, [r3, #12]
 8012484:	685b      	ldr	r3, [r3, #4]
 8012486:	4618      	mov	r0, r3
 8012488:	f7f9 fd87 	bl	800bf9a <lwip_htonl>
 801248c:	4602      	mov	r2, r0
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012492:	1ad3      	subs	r3, r2, r3
 8012494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012496:	8912      	ldrh	r2, [r2, #8]
 8012498:	4413      	add	r3, r2
 801249a:	69ba      	ldr	r2, [r7, #24]
 801249c:	429a      	cmp	r2, r3
 801249e:	d227      	bcs.n	80124f0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124a6:	461a      	mov	r2, r3
 80124a8:	69bb      	ldr	r3, [r7, #24]
 80124aa:	4293      	cmp	r3, r2
 80124ac:	d114      	bne.n	80124d8 <tcp_output+0x120>
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d110      	bne.n	80124d8 <tcp_output+0x120>
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d10b      	bne.n	80124d8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2200      	movs	r2, #0
 80124c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2201      	movs	r2, #1
 80124cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2200      	movs	r2, #0
 80124d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	8b5b      	ldrh	r3, [r3, #26]
 80124dc:	f003 0302 	and.w	r3, r3, #2
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	f000 814d 	beq.w	8012780 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f000 fd6c 	bl	8012fc4 <tcp_send_empty_ack>
 80124ec:	4603      	mov	r3, r0
 80124ee:	e152      	b.n	8012796 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2200      	movs	r2, #0
 80124f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124fc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80124fe:	6a3b      	ldr	r3, [r7, #32]
 8012500:	2b00      	cmp	r3, #0
 8012502:	f000 811c 	beq.w	801273e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012506:	e002      	b.n	801250e <tcp_output+0x156>
 8012508:	6a3b      	ldr	r3, [r7, #32]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	623b      	str	r3, [r7, #32]
 801250e:	6a3b      	ldr	r3, [r7, #32]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d1f8      	bne.n	8012508 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012516:	e112      	b.n	801273e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251a:	68db      	ldr	r3, [r3, #12]
 801251c:	899b      	ldrh	r3, [r3, #12]
 801251e:	b29b      	uxth	r3, r3
 8012520:	4618      	mov	r0, r3
 8012522:	f7f9 fd25 	bl	800bf70 <lwip_htons>
 8012526:	4603      	mov	r3, r0
 8012528:	b2db      	uxtb	r3, r3
 801252a:	f003 0304 	and.w	r3, r3, #4
 801252e:	2b00      	cmp	r3, #0
 8012530:	d006      	beq.n	8012540 <tcp_output+0x188>
 8012532:	4b43      	ldr	r3, [pc, #268]	; (8012640 <tcp_output+0x288>)
 8012534:	f240 5236 	movw	r2, #1334	; 0x536
 8012538:	4946      	ldr	r1, [pc, #280]	; (8012654 <tcp_output+0x29c>)
 801253a:	4843      	ldr	r0, [pc, #268]	; (8012648 <tcp_output+0x290>)
 801253c:	f004 faae 	bl	8016a9c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012544:	2b00      	cmp	r3, #0
 8012546:	d01f      	beq.n	8012588 <tcp_output+0x1d0>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	8b5b      	ldrh	r3, [r3, #26]
 801254c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012550:	2b00      	cmp	r3, #0
 8012552:	d119      	bne.n	8012588 <tcp_output+0x1d0>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012558:	2b00      	cmp	r3, #0
 801255a:	d00b      	beq.n	8012574 <tcp_output+0x1bc>
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d110      	bne.n	8012588 <tcp_output+0x1d0>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801256a:	891a      	ldrh	r2, [r3, #8]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012570:	429a      	cmp	r2, r3
 8012572:	d209      	bcs.n	8012588 <tcp_output+0x1d0>
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801257a:	2b00      	cmp	r3, #0
 801257c:	d004      	beq.n	8012588 <tcp_output+0x1d0>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012584:	2b08      	cmp	r3, #8
 8012586:	d901      	bls.n	801258c <tcp_output+0x1d4>
 8012588:	2301      	movs	r3, #1
 801258a:	e000      	b.n	801258e <tcp_output+0x1d6>
 801258c:	2300      	movs	r3, #0
 801258e:	2b00      	cmp	r3, #0
 8012590:	d106      	bne.n	80125a0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	8b5b      	ldrh	r3, [r3, #26]
 8012596:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801259a:	2b00      	cmp	r3, #0
 801259c:	f000 80e4 	beq.w	8012768 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	7d1b      	ldrb	r3, [r3, #20]
 80125a4:	2b02      	cmp	r3, #2
 80125a6:	d00d      	beq.n	80125c4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80125a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	899b      	ldrh	r3, [r3, #12]
 80125ae:	b29c      	uxth	r4, r3
 80125b0:	2010      	movs	r0, #16
 80125b2:	f7f9 fcdd 	bl	800bf70 <lwip_htons>
 80125b6:	4603      	mov	r3, r0
 80125b8:	461a      	mov	r2, r3
 80125ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125bc:	68db      	ldr	r3, [r3, #12]
 80125be:	4322      	orrs	r2, r4
 80125c0:	b292      	uxth	r2, r2
 80125c2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80125c4:	697a      	ldr	r2, [r7, #20]
 80125c6:	6879      	ldr	r1, [r7, #4]
 80125c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125ca:	f000 f909 	bl	80127e0 <tcp_output_segment>
 80125ce:	4603      	mov	r3, r0
 80125d0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80125d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d009      	beq.n	80125ee <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	8b5b      	ldrh	r3, [r3, #26]
 80125de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125e2:	b29a      	uxth	r2, r3
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	835a      	strh	r2, [r3, #26]
      return err;
 80125e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125ec:	e0d3      	b.n	8012796 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80125ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f0:	681a      	ldr	r2, [r3, #0]
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	7d1b      	ldrb	r3, [r3, #20]
 80125fa:	2b02      	cmp	r3, #2
 80125fc:	d006      	beq.n	801260c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	8b5b      	ldrh	r3, [r3, #26]
 8012602:	f023 0303 	bic.w	r3, r3, #3
 8012606:	b29a      	uxth	r2, r3
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	4618      	mov	r0, r3
 8012614:	f7f9 fcc1 	bl	800bf9a <lwip_htonl>
 8012618:	4604      	mov	r4, r0
 801261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801261c:	891b      	ldrh	r3, [r3, #8]
 801261e:	461d      	mov	r5, r3
 8012620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012622:	68db      	ldr	r3, [r3, #12]
 8012624:	899b      	ldrh	r3, [r3, #12]
 8012626:	b29b      	uxth	r3, r3
 8012628:	4618      	mov	r0, r3
 801262a:	f7f9 fca1 	bl	800bf70 <lwip_htons>
 801262e:	4603      	mov	r3, r0
 8012630:	b2db      	uxtb	r3, r3
 8012632:	f003 0303 	and.w	r3, r3, #3
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00e      	beq.n	8012658 <tcp_output+0x2a0>
 801263a:	2301      	movs	r3, #1
 801263c:	e00d      	b.n	801265a <tcp_output+0x2a2>
 801263e:	bf00      	nop
 8012640:	080191dc 	.word	0x080191dc
 8012644:	08019720 	.word	0x08019720
 8012648:	08019230 	.word	0x08019230
 801264c:	08019738 	.word	0x08019738
 8012650:	2406b474 	.word	0x2406b474
 8012654:	08019760 	.word	0x08019760
 8012658:	2300      	movs	r3, #0
 801265a:	442b      	add	r3, r5
 801265c:	4423      	add	r3, r4
 801265e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012664:	68bb      	ldr	r3, [r7, #8]
 8012666:	1ad3      	subs	r3, r2, r3
 8012668:	2b00      	cmp	r3, #0
 801266a:	da02      	bge.n	8012672 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	68ba      	ldr	r2, [r7, #8]
 8012670:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012674:	891b      	ldrh	r3, [r3, #8]
 8012676:	461c      	mov	r4, r3
 8012678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	899b      	ldrh	r3, [r3, #12]
 801267e:	b29b      	uxth	r3, r3
 8012680:	4618      	mov	r0, r3
 8012682:	f7f9 fc75 	bl	800bf70 <lwip_htons>
 8012686:	4603      	mov	r3, r0
 8012688:	b2db      	uxtb	r3, r3
 801268a:	f003 0303 	and.w	r3, r3, #3
 801268e:	2b00      	cmp	r3, #0
 8012690:	d001      	beq.n	8012696 <tcp_output+0x2de>
 8012692:	2301      	movs	r3, #1
 8012694:	e000      	b.n	8012698 <tcp_output+0x2e0>
 8012696:	2300      	movs	r3, #0
 8012698:	4423      	add	r3, r4
 801269a:	2b00      	cmp	r3, #0
 801269c:	d049      	beq.n	8012732 <tcp_output+0x37a>
      seg->next = NULL;
 801269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a0:	2200      	movs	r2, #0
 80126a2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d105      	bne.n	80126b8 <tcp_output+0x300>
        pcb->unacked = seg;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126b0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80126b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b4:	623b      	str	r3, [r7, #32]
 80126b6:	e03f      	b.n	8012738 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80126b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ba:	68db      	ldr	r3, [r3, #12]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	4618      	mov	r0, r3
 80126c0:	f7f9 fc6b 	bl	800bf9a <lwip_htonl>
 80126c4:	4604      	mov	r4, r0
 80126c6:	6a3b      	ldr	r3, [r7, #32]
 80126c8:	68db      	ldr	r3, [r3, #12]
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	4618      	mov	r0, r3
 80126ce:	f7f9 fc64 	bl	800bf9a <lwip_htonl>
 80126d2:	4603      	mov	r3, r0
 80126d4:	1ae3      	subs	r3, r4, r3
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	da24      	bge.n	8012724 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	3370      	adds	r3, #112	; 0x70
 80126de:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80126e0:	e002      	b.n	80126e8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d011      	beq.n	8012714 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80126f0:	69fb      	ldr	r3, [r7, #28]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	68db      	ldr	r3, [r3, #12]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7f9 fc4e 	bl	800bf9a <lwip_htonl>
 80126fe:	4604      	mov	r4, r0
 8012700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012702:	68db      	ldr	r3, [r3, #12]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	4618      	mov	r0, r3
 8012708:	f7f9 fc47 	bl	800bf9a <lwip_htonl>
 801270c:	4603      	mov	r3, r0
 801270e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012710:	2b00      	cmp	r3, #0
 8012712:	dbe6      	blt.n	80126e2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	681a      	ldr	r2, [r3, #0]
 8012718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801271c:	69fb      	ldr	r3, [r7, #28]
 801271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012720:	601a      	str	r2, [r3, #0]
 8012722:	e009      	b.n	8012738 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012724:	6a3b      	ldr	r3, [r7, #32]
 8012726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012728:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801272a:	6a3b      	ldr	r3, [r7, #32]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	623b      	str	r3, [r7, #32]
 8012730:	e002      	b.n	8012738 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012734:	f7fc fc41 	bl	800efba <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801273c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012740:	2b00      	cmp	r3, #0
 8012742:	d012      	beq.n	801276a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012746:	68db      	ldr	r3, [r3, #12]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	4618      	mov	r0, r3
 801274c:	f7f9 fc25 	bl	800bf9a <lwip_htonl>
 8012750:	4602      	mov	r2, r0
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012756:	1ad3      	subs	r3, r2, r3
 8012758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801275a:	8912      	ldrh	r2, [r2, #8]
 801275c:	4413      	add	r3, r2
  while (seg != NULL &&
 801275e:	69ba      	ldr	r2, [r7, #24]
 8012760:	429a      	cmp	r2, r3
 8012762:	f4bf aed9 	bcs.w	8012518 <tcp_output+0x160>
 8012766:	e000      	b.n	801276a <tcp_output+0x3b2>
      break;
 8012768:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801276e:	2b00      	cmp	r3, #0
 8012770:	d108      	bne.n	8012784 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2200      	movs	r2, #0
 8012776:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801277a:	e004      	b.n	8012786 <tcp_output+0x3ce>
    goto output_done;
 801277c:	bf00      	nop
 801277e:	e002      	b.n	8012786 <tcp_output+0x3ce>
    goto output_done;
 8012780:	bf00      	nop
 8012782:	e000      	b.n	8012786 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012784:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	8b5b      	ldrh	r3, [r3, #26]
 801278a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801278e:	b29a      	uxth	r2, r3
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012794:	2300      	movs	r3, #0
}
 8012796:	4618      	mov	r0, r3
 8012798:	3728      	adds	r7, #40	; 0x28
 801279a:	46bd      	mov	sp, r7
 801279c:	bdb0      	pop	{r4, r5, r7, pc}
 801279e:	bf00      	nop

080127a0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b082      	sub	sp, #8
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d106      	bne.n	80127bc <tcp_output_segment_busy+0x1c>
 80127ae:	4b09      	ldr	r3, [pc, #36]	; (80127d4 <tcp_output_segment_busy+0x34>)
 80127b0:	f240 529a 	movw	r2, #1434	; 0x59a
 80127b4:	4908      	ldr	r1, [pc, #32]	; (80127d8 <tcp_output_segment_busy+0x38>)
 80127b6:	4809      	ldr	r0, [pc, #36]	; (80127dc <tcp_output_segment_busy+0x3c>)
 80127b8:	f004 f970 	bl	8016a9c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	7b9b      	ldrb	r3, [r3, #14]
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d001      	beq.n	80127ca <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80127c6:	2301      	movs	r3, #1
 80127c8:	e000      	b.n	80127cc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80127ca:	2300      	movs	r3, #0
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	080191dc 	.word	0x080191dc
 80127d8:	08019778 	.word	0x08019778
 80127dc:	08019230 	.word	0x08019230

080127e0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80127e0:	b5b0      	push	{r4, r5, r7, lr}
 80127e2:	b08c      	sub	sp, #48	; 0x30
 80127e4:	af04      	add	r7, sp, #16
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	60b9      	str	r1, [r7, #8]
 80127ea:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d106      	bne.n	8012800 <tcp_output_segment+0x20>
 80127f2:	4b63      	ldr	r3, [pc, #396]	; (8012980 <tcp_output_segment+0x1a0>)
 80127f4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80127f8:	4962      	ldr	r1, [pc, #392]	; (8012984 <tcp_output_segment+0x1a4>)
 80127fa:	4863      	ldr	r0, [pc, #396]	; (8012988 <tcp_output_segment+0x1a8>)
 80127fc:	f004 f94e 	bl	8016a9c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d106      	bne.n	8012814 <tcp_output_segment+0x34>
 8012806:	4b5e      	ldr	r3, [pc, #376]	; (8012980 <tcp_output_segment+0x1a0>)
 8012808:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801280c:	495f      	ldr	r1, [pc, #380]	; (801298c <tcp_output_segment+0x1ac>)
 801280e:	485e      	ldr	r0, [pc, #376]	; (8012988 <tcp_output_segment+0x1a8>)
 8012810:	f004 f944 	bl	8016a9c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d106      	bne.n	8012828 <tcp_output_segment+0x48>
 801281a:	4b59      	ldr	r3, [pc, #356]	; (8012980 <tcp_output_segment+0x1a0>)
 801281c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012820:	495b      	ldr	r1, [pc, #364]	; (8012990 <tcp_output_segment+0x1b0>)
 8012822:	4859      	ldr	r0, [pc, #356]	; (8012988 <tcp_output_segment+0x1a8>)
 8012824:	f004 f93a 	bl	8016a9c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012828:	68f8      	ldr	r0, [r7, #12]
 801282a:	f7ff ffb9 	bl	80127a0 <tcp_output_segment_busy>
 801282e:	4603      	mov	r3, r0
 8012830:	2b00      	cmp	r3, #0
 8012832:	d001      	beq.n	8012838 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012834:	2300      	movs	r3, #0
 8012836:	e09f      	b.n	8012978 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	68dc      	ldr	r4, [r3, #12]
 8012840:	4610      	mov	r0, r2
 8012842:	f7f9 fbaa 	bl	800bf9a <lwip_htonl>
 8012846:	4603      	mov	r3, r0
 8012848:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	68dc      	ldr	r4, [r3, #12]
 8012852:	4610      	mov	r0, r2
 8012854:	f7f9 fb8c 	bl	800bf70 <lwip_htons>
 8012858:	4603      	mov	r3, r0
 801285a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012860:	68ba      	ldr	r2, [r7, #8]
 8012862:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012864:	441a      	add	r2, r3
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	68db      	ldr	r3, [r3, #12]
 801286e:	3314      	adds	r3, #20
 8012870:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	7a9b      	ldrb	r3, [r3, #10]
 8012876:	f003 0301 	and.w	r3, r3, #1
 801287a:	2b00      	cmp	r3, #0
 801287c:	d015      	beq.n	80128aa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	3304      	adds	r3, #4
 8012882:	461a      	mov	r2, r3
 8012884:	6879      	ldr	r1, [r7, #4]
 8012886:	f240 50b4 	movw	r0, #1460	; 0x5b4
 801288a:	f7fc fe8d 	bl	800f5a8 <tcp_eff_send_mss_netif>
 801288e:	4603      	mov	r3, r0
 8012890:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012892:	8b7b      	ldrh	r3, [r7, #26]
 8012894:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012898:	4618      	mov	r0, r3
 801289a:	f7f9 fb7e 	bl	800bf9a <lwip_htonl>
 801289e:	4602      	mov	r2, r0
 80128a0:	69fb      	ldr	r3, [r7, #28]
 80128a2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	3304      	adds	r3, #4
 80128a8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	da02      	bge.n	80128ba <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	2200      	movs	r2, #0
 80128b8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d10c      	bne.n	80128dc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80128c2:	4b34      	ldr	r3, [pc, #208]	; (8012994 <tcp_output_segment+0x1b4>)
 80128c4:	681a      	ldr	r2, [r3, #0]
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	68db      	ldr	r3, [r3, #12]
 80128ce:	685b      	ldr	r3, [r3, #4]
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7f9 fb62 	bl	800bf9a <lwip_htonl>
 80128d6:	4602      	mov	r2, r0
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	68da      	ldr	r2, [r3, #12]
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	1ad3      	subs	r3, r2, r3
 80128e8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	8959      	ldrh	r1, [r3, #10]
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	8b3a      	ldrh	r2, [r7, #24]
 80128f6:	1a8a      	subs	r2, r1, r2
 80128f8:	b292      	uxth	r2, r2
 80128fa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	8919      	ldrh	r1, [r3, #8]
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	685b      	ldr	r3, [r3, #4]
 8012906:	8b3a      	ldrh	r2, [r7, #24]
 8012908:	1a8a      	subs	r2, r1, r2
 801290a:	b292      	uxth	r2, r2
 801290c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	685b      	ldr	r3, [r3, #4]
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	68d2      	ldr	r2, [r2, #12]
 8012916:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	68db      	ldr	r3, [r3, #12]
 801291c:	2200      	movs	r2, #0
 801291e:	741a      	strb	r2, [r3, #16]
 8012920:	2200      	movs	r2, #0
 8012922:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	68db      	ldr	r3, [r3, #12]
 8012928:	f103 0214 	add.w	r2, r3, #20
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	7a9b      	ldrb	r3, [r3, #10]
 8012930:	009b      	lsls	r3, r3, #2
 8012932:	f003 0304 	and.w	r3, r3, #4
 8012936:	4413      	add	r3, r2
 8012938:	69fa      	ldr	r2, [r7, #28]
 801293a:	429a      	cmp	r2, r3
 801293c:	d006      	beq.n	801294c <tcp_output_segment+0x16c>
 801293e:	4b10      	ldr	r3, [pc, #64]	; (8012980 <tcp_output_segment+0x1a0>)
 8012940:	f240 621c 	movw	r2, #1564	; 0x61c
 8012944:	4914      	ldr	r1, [pc, #80]	; (8012998 <tcp_output_segment+0x1b8>)
 8012946:	4810      	ldr	r0, [pc, #64]	; (8012988 <tcp_output_segment+0x1a8>)
 8012948:	f004 f8a8 	bl	8016a9c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	6858      	ldr	r0, [r3, #4]
 8012950:	68b9      	ldr	r1, [r7, #8]
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	1d1c      	adds	r4, r3, #4
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	7add      	ldrb	r5, [r3, #11]
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	7a9b      	ldrb	r3, [r3, #10]
 801295e:	687a      	ldr	r2, [r7, #4]
 8012960:	9202      	str	r2, [sp, #8]
 8012962:	2206      	movs	r2, #6
 8012964:	9201      	str	r2, [sp, #4]
 8012966:	9300      	str	r3, [sp, #0]
 8012968:	462b      	mov	r3, r5
 801296a:	4622      	mov	r2, r4
 801296c:	f002 fdbc 	bl	80154e8 <ip4_output_if>
 8012970:	4603      	mov	r3, r0
 8012972:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012974:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012978:	4618      	mov	r0, r3
 801297a:	3720      	adds	r7, #32
 801297c:	46bd      	mov	sp, r7
 801297e:	bdb0      	pop	{r4, r5, r7, pc}
 8012980:	080191dc 	.word	0x080191dc
 8012984:	080197a0 	.word	0x080197a0
 8012988:	08019230 	.word	0x08019230
 801298c:	080197c0 	.word	0x080197c0
 8012990:	080197e0 	.word	0x080197e0
 8012994:	2406b464 	.word	0x2406b464
 8012998:	08019804 	.word	0x08019804

0801299c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801299c:	b5b0      	push	{r4, r5, r7, lr}
 801299e:	b084      	sub	sp, #16
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d106      	bne.n	80129b8 <tcp_rexmit_rto_prepare+0x1c>
 80129aa:	4b31      	ldr	r3, [pc, #196]	; (8012a70 <tcp_rexmit_rto_prepare+0xd4>)
 80129ac:	f240 6263 	movw	r2, #1635	; 0x663
 80129b0:	4930      	ldr	r1, [pc, #192]	; (8012a74 <tcp_rexmit_rto_prepare+0xd8>)
 80129b2:	4831      	ldr	r0, [pc, #196]	; (8012a78 <tcp_rexmit_rto_prepare+0xdc>)
 80129b4:	f004 f872 	bl	8016a9c <iprintf>

  if (pcb->unacked == NULL) {
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d102      	bne.n	80129c6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80129c0:	f06f 0305 	mvn.w	r3, #5
 80129c4:	e050      	b.n	8012a68 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129ca:	60fb      	str	r3, [r7, #12]
 80129cc:	e00b      	b.n	80129e6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80129ce:	68f8      	ldr	r0, [r7, #12]
 80129d0:	f7ff fee6 	bl	80127a0 <tcp_output_segment_busy>
 80129d4:	4603      	mov	r3, r0
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d002      	beq.n	80129e0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80129da:	f06f 0305 	mvn.w	r3, #5
 80129de:	e043      	b.n	8012a68 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	60fb      	str	r3, [r7, #12]
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d1ef      	bne.n	80129ce <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80129ee:	68f8      	ldr	r0, [r7, #12]
 80129f0:	f7ff fed6 	bl	80127a0 <tcp_output_segment_busy>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d002      	beq.n	8012a00 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80129fa:	f06f 0305 	mvn.w	r3, #5
 80129fe:	e033      	b.n	8012a68 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2200      	movs	r2, #0
 8012a14:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	8b5b      	ldrh	r3, [r3, #26]
 8012a1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012a1e:	b29a      	uxth	r2, r3
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	685b      	ldr	r3, [r3, #4]
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7f9 fab5 	bl	800bf9a <lwip_htonl>
 8012a30:	4604      	mov	r4, r0
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	891b      	ldrh	r3, [r3, #8]
 8012a36:	461d      	mov	r5, r3
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	68db      	ldr	r3, [r3, #12]
 8012a3c:	899b      	ldrh	r3, [r3, #12]
 8012a3e:	b29b      	uxth	r3, r3
 8012a40:	4618      	mov	r0, r3
 8012a42:	f7f9 fa95 	bl	800bf70 <lwip_htons>
 8012a46:	4603      	mov	r3, r0
 8012a48:	b2db      	uxtb	r3, r3
 8012a4a:	f003 0303 	and.w	r3, r3, #3
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d001      	beq.n	8012a56 <tcp_rexmit_rto_prepare+0xba>
 8012a52:	2301      	movs	r3, #1
 8012a54:	e000      	b.n	8012a58 <tcp_rexmit_rto_prepare+0xbc>
 8012a56:	2300      	movs	r3, #0
 8012a58:	442b      	add	r3, r5
 8012a5a:	18e2      	adds	r2, r4, r3
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2200      	movs	r2, #0
 8012a64:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012a66:	2300      	movs	r3, #0
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3710      	adds	r7, #16
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8012a70:	080191dc 	.word	0x080191dc
 8012a74:	08019818 	.word	0x08019818
 8012a78:	08019230 	.word	0x08019230

08012a7c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b082      	sub	sp, #8
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d106      	bne.n	8012a98 <tcp_rexmit_rto_commit+0x1c>
 8012a8a:	4b0d      	ldr	r3, [pc, #52]	; (8012ac0 <tcp_rexmit_rto_commit+0x44>)
 8012a8c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012a90:	490c      	ldr	r1, [pc, #48]	; (8012ac4 <tcp_rexmit_rto_commit+0x48>)
 8012a92:	480d      	ldr	r0, [pc, #52]	; (8012ac8 <tcp_rexmit_rto_commit+0x4c>)
 8012a94:	f004 f802 	bl	8016a9c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a9e:	2bff      	cmp	r3, #255	; 0xff
 8012aa0:	d007      	beq.n	8012ab2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	b2da      	uxtb	r2, r3
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f7ff fc80 	bl	80123b8 <tcp_output>
}
 8012ab8:	bf00      	nop
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	080191dc 	.word	0x080191dc
 8012ac4:	0801983c 	.word	0x0801983c
 8012ac8:	08019230 	.word	0x08019230

08012acc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d106      	bne.n	8012ae8 <tcp_rexmit_rto+0x1c>
 8012ada:	4b0a      	ldr	r3, [pc, #40]	; (8012b04 <tcp_rexmit_rto+0x38>)
 8012adc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012ae0:	4909      	ldr	r1, [pc, #36]	; (8012b08 <tcp_rexmit_rto+0x3c>)
 8012ae2:	480a      	ldr	r0, [pc, #40]	; (8012b0c <tcp_rexmit_rto+0x40>)
 8012ae4:	f003 ffda 	bl	8016a9c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f7ff ff57 	bl	801299c <tcp_rexmit_rto_prepare>
 8012aee:	4603      	mov	r3, r0
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d102      	bne.n	8012afa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f7ff ffc1 	bl	8012a7c <tcp_rexmit_rto_commit>
  }
}
 8012afa:	bf00      	nop
 8012afc:	3708      	adds	r7, #8
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}
 8012b02:	bf00      	nop
 8012b04:	080191dc 	.word	0x080191dc
 8012b08:	08019860 	.word	0x08019860
 8012b0c:	08019230 	.word	0x08019230

08012b10 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012b10:	b590      	push	{r4, r7, lr}
 8012b12:	b085      	sub	sp, #20
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d106      	bne.n	8012b2c <tcp_rexmit+0x1c>
 8012b1e:	4b2f      	ldr	r3, [pc, #188]	; (8012bdc <tcp_rexmit+0xcc>)
 8012b20:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012b24:	492e      	ldr	r1, [pc, #184]	; (8012be0 <tcp_rexmit+0xd0>)
 8012b26:	482f      	ldr	r0, [pc, #188]	; (8012be4 <tcp_rexmit+0xd4>)
 8012b28:	f003 ffb8 	bl	8016a9c <iprintf>

  if (pcb->unacked == NULL) {
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d102      	bne.n	8012b3a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012b34:	f06f 0305 	mvn.w	r3, #5
 8012b38:	e04c      	b.n	8012bd4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b3e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012b40:	68b8      	ldr	r0, [r7, #8]
 8012b42:	f7ff fe2d 	bl	80127a0 <tcp_output_segment_busy>
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d002      	beq.n	8012b52 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012b4c:	f06f 0305 	mvn.w	r3, #5
 8012b50:	e040      	b.n	8012bd4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	681a      	ldr	r2, [r3, #0]
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	336c      	adds	r3, #108	; 0x6c
 8012b5e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012b60:	e002      	b.n	8012b68 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d011      	beq.n	8012b94 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	68db      	ldr	r3, [r3, #12]
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7f9 fa0e 	bl	800bf9a <lwip_htonl>
 8012b7e:	4604      	mov	r4, r0
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7f9 fa07 	bl	800bf9a <lwip_htonl>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	dbe6      	blt.n	8012b62 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	681a      	ldr	r2, [r3, #0]
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	68ba      	ldr	r2, [r7, #8]
 8012ba0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d103      	bne.n	8012bb2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2200      	movs	r2, #0
 8012bae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012bb8:	2bff      	cmp	r3, #255	; 0xff
 8012bba:	d007      	beq.n	8012bcc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	b2da      	uxtb	r2, r3
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012bd2:	2300      	movs	r3, #0
}
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	3714      	adds	r7, #20
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd90      	pop	{r4, r7, pc}
 8012bdc:	080191dc 	.word	0x080191dc
 8012be0:	0801987c 	.word	0x0801987c
 8012be4:	08019230 	.word	0x08019230

08012be8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d106      	bne.n	8012c04 <tcp_rexmit_fast+0x1c>
 8012bf6:	4b2a      	ldr	r3, [pc, #168]	; (8012ca0 <tcp_rexmit_fast+0xb8>)
 8012bf8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012bfc:	4929      	ldr	r1, [pc, #164]	; (8012ca4 <tcp_rexmit_fast+0xbc>)
 8012bfe:	482a      	ldr	r0, [pc, #168]	; (8012ca8 <tcp_rexmit_fast+0xc0>)
 8012c00:	f003 ff4c 	bl	8016a9c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d045      	beq.n	8012c98 <tcp_rexmit_fast+0xb0>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	8b5b      	ldrh	r3, [r3, #26]
 8012c10:	f003 0304 	and.w	r3, r3, #4
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d13f      	bne.n	8012c98 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f7ff ff79 	bl	8012b10 <tcp_rexmit>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d139      	bne.n	8012c98 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c30:	4293      	cmp	r3, r2
 8012c32:	bf28      	it	cs
 8012c34:	4613      	movcs	r3, r2
 8012c36:	b29b      	uxth	r3, r3
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	da00      	bge.n	8012c3e <tcp_rexmit_fast+0x56>
 8012c3c:	3301      	adds	r3, #1
 8012c3e:	105b      	asrs	r3, r3, #1
 8012c40:	b29a      	uxth	r2, r3
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012c4e:	461a      	mov	r2, r3
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c54:	005b      	lsls	r3, r3, #1
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d206      	bcs.n	8012c68 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c5e:	005b      	lsls	r3, r3, #1
 8012c60:	b29a      	uxth	r2, r3
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c72:	4619      	mov	r1, r3
 8012c74:	0049      	lsls	r1, r1, #1
 8012c76:	440b      	add	r3, r1
 8012c78:	b29b      	uxth	r3, r3
 8012c7a:	4413      	add	r3, r2
 8012c7c:	b29a      	uxth	r2, r3
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	8b5b      	ldrh	r3, [r3, #26]
 8012c88:	f043 0304 	orr.w	r3, r3, #4
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2200      	movs	r2, #0
 8012c96:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012c98:	bf00      	nop
 8012c9a:	3708      	adds	r7, #8
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	080191dc 	.word	0x080191dc
 8012ca4:	08019894 	.word	0x08019894
 8012ca8:	08019230 	.word	0x08019230

08012cac <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b086      	sub	sp, #24
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	607b      	str	r3, [r7, #4]
 8012cb6:	460b      	mov	r3, r1
 8012cb8:	817b      	strh	r3, [r7, #10]
 8012cba:	4613      	mov	r3, r2
 8012cbc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012cbe:	897a      	ldrh	r2, [r7, #10]
 8012cc0:	893b      	ldrh	r3, [r7, #8]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	3314      	adds	r3, #20
 8012cc8:	b29b      	uxth	r3, r3
 8012cca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012cce:	4619      	mov	r1, r3
 8012cd0:	2022      	movs	r0, #34	; 0x22
 8012cd2:	f7fa fbf7 	bl	800d4c4 <pbuf_alloc>
 8012cd6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d04d      	beq.n	8012d7a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012cde:	897b      	ldrh	r3, [r7, #10]
 8012ce0:	3313      	adds	r3, #19
 8012ce2:	697a      	ldr	r2, [r7, #20]
 8012ce4:	8952      	ldrh	r2, [r2, #10]
 8012ce6:	4293      	cmp	r3, r2
 8012ce8:	db06      	blt.n	8012cf8 <tcp_output_alloc_header_common+0x4c>
 8012cea:	4b26      	ldr	r3, [pc, #152]	; (8012d84 <tcp_output_alloc_header_common+0xd8>)
 8012cec:	f240 7223 	movw	r2, #1827	; 0x723
 8012cf0:	4925      	ldr	r1, [pc, #148]	; (8012d88 <tcp_output_alloc_header_common+0xdc>)
 8012cf2:	4826      	ldr	r0, [pc, #152]	; (8012d8c <tcp_output_alloc_header_common+0xe0>)
 8012cf4:	f003 fed2 	bl	8016a9c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012cfe:	8c3b      	ldrh	r3, [r7, #32]
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7f9 f935 	bl	800bf70 <lwip_htons>
 8012d06:	4603      	mov	r3, r0
 8012d08:	461a      	mov	r2, r3
 8012d0a:	693b      	ldr	r3, [r7, #16]
 8012d0c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012d0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7f9 f92d 	bl	800bf70 <lwip_htons>
 8012d16:	4603      	mov	r3, r0
 8012d18:	461a      	mov	r2, r3
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012d24:	68f8      	ldr	r0, [r7, #12]
 8012d26:	f7f9 f938 	bl	800bf9a <lwip_htonl>
 8012d2a:	4602      	mov	r2, r0
 8012d2c:	693b      	ldr	r3, [r7, #16]
 8012d2e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012d30:	897b      	ldrh	r3, [r7, #10]
 8012d32:	089b      	lsrs	r3, r3, #2
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	3305      	adds	r3, #5
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	031b      	lsls	r3, r3, #12
 8012d3c:	b29a      	uxth	r2, r3
 8012d3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012d42:	b29b      	uxth	r3, r3
 8012d44:	4313      	orrs	r3, r2
 8012d46:	b29b      	uxth	r3, r3
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7f9 f911 	bl	800bf70 <lwip_htons>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	461a      	mov	r2, r3
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012d56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7f9 f909 	bl	800bf70 <lwip_htons>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	461a      	mov	r2, r3
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012d66:	693b      	ldr	r3, [r7, #16]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	741a      	strb	r2, [r3, #16]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	2200      	movs	r2, #0
 8012d74:	749a      	strb	r2, [r3, #18]
 8012d76:	2200      	movs	r2, #0
 8012d78:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012d7a:	697b      	ldr	r3, [r7, #20]
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3718      	adds	r7, #24
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}
 8012d84:	080191dc 	.word	0x080191dc
 8012d88:	080198b4 	.word	0x080198b4
 8012d8c:	08019230 	.word	0x08019230

08012d90 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012d90:	b5b0      	push	{r4, r5, r7, lr}
 8012d92:	b08a      	sub	sp, #40	; 0x28
 8012d94:	af04      	add	r7, sp, #16
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	607b      	str	r3, [r7, #4]
 8012d9a:	460b      	mov	r3, r1
 8012d9c:	817b      	strh	r3, [r7, #10]
 8012d9e:	4613      	mov	r3, r2
 8012da0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d106      	bne.n	8012db6 <tcp_output_alloc_header+0x26>
 8012da8:	4b15      	ldr	r3, [pc, #84]	; (8012e00 <tcp_output_alloc_header+0x70>)
 8012daa:	f240 7242 	movw	r2, #1858	; 0x742
 8012dae:	4915      	ldr	r1, [pc, #84]	; (8012e04 <tcp_output_alloc_header+0x74>)
 8012db0:	4815      	ldr	r0, [pc, #84]	; (8012e08 <tcp_output_alloc_header+0x78>)
 8012db2:	f003 fe73 	bl	8016a9c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	8adb      	ldrh	r3, [r3, #22]
 8012dbe:	68fa      	ldr	r2, [r7, #12]
 8012dc0:	8b12      	ldrh	r2, [r2, #24]
 8012dc2:	68f9      	ldr	r1, [r7, #12]
 8012dc4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012dc6:	893d      	ldrh	r5, [r7, #8]
 8012dc8:	897c      	ldrh	r4, [r7, #10]
 8012dca:	9103      	str	r1, [sp, #12]
 8012dcc:	2110      	movs	r1, #16
 8012dce:	9102      	str	r1, [sp, #8]
 8012dd0:	9201      	str	r2, [sp, #4]
 8012dd2:	9300      	str	r3, [sp, #0]
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	462a      	mov	r2, r5
 8012dd8:	4621      	mov	r1, r4
 8012dda:	f7ff ff67 	bl	8012cac <tcp_output_alloc_header_common>
 8012dde:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d006      	beq.n	8012df4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dea:	68fa      	ldr	r2, [r7, #12]
 8012dec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012dee:	441a      	add	r2, r3
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012df4:	697b      	ldr	r3, [r7, #20]
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3718      	adds	r7, #24
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	080191dc 	.word	0x080191dc
 8012e04:	080198e4 	.word	0x080198e4
 8012e08:	08019230 	.word	0x08019230

08012e0c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b088      	sub	sp, #32
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	60f8      	str	r0, [r7, #12]
 8012e14:	60b9      	str	r1, [r7, #8]
 8012e16:	4611      	mov	r1, r2
 8012e18:	461a      	mov	r2, r3
 8012e1a:	460b      	mov	r3, r1
 8012e1c:	71fb      	strb	r3, [r7, #7]
 8012e1e:	4613      	mov	r3, r2
 8012e20:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012e22:	2300      	movs	r3, #0
 8012e24:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d106      	bne.n	8012e3a <tcp_output_fill_options+0x2e>
 8012e2c:	4b13      	ldr	r3, [pc, #76]	; (8012e7c <tcp_output_fill_options+0x70>)
 8012e2e:	f240 7256 	movw	r2, #1878	; 0x756
 8012e32:	4913      	ldr	r1, [pc, #76]	; (8012e80 <tcp_output_fill_options+0x74>)
 8012e34:	4813      	ldr	r0, [pc, #76]	; (8012e84 <tcp_output_fill_options+0x78>)
 8012e36:	f003 fe31 	bl	8016a9c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	3314      	adds	r3, #20
 8012e44:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	f103 0214 	add.w	r2, r3, #20
 8012e4c:	8bfb      	ldrh	r3, [r7, #30]
 8012e4e:	009b      	lsls	r3, r3, #2
 8012e50:	4619      	mov	r1, r3
 8012e52:	79fb      	ldrb	r3, [r7, #7]
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	f003 0304 	and.w	r3, r3, #4
 8012e5a:	440b      	add	r3, r1
 8012e5c:	4413      	add	r3, r2
 8012e5e:	697a      	ldr	r2, [r7, #20]
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d006      	beq.n	8012e72 <tcp_output_fill_options+0x66>
 8012e64:	4b05      	ldr	r3, [pc, #20]	; (8012e7c <tcp_output_fill_options+0x70>)
 8012e66:	f240 7275 	movw	r2, #1909	; 0x775
 8012e6a:	4907      	ldr	r1, [pc, #28]	; (8012e88 <tcp_output_fill_options+0x7c>)
 8012e6c:	4805      	ldr	r0, [pc, #20]	; (8012e84 <tcp_output_fill_options+0x78>)
 8012e6e:	f003 fe15 	bl	8016a9c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012e72:	bf00      	nop
 8012e74:	3720      	adds	r7, #32
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}
 8012e7a:	bf00      	nop
 8012e7c:	080191dc 	.word	0x080191dc
 8012e80:	0801990c 	.word	0x0801990c
 8012e84:	08019230 	.word	0x08019230
 8012e88:	08019804 	.word	0x08019804

08012e8c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b08a      	sub	sp, #40	; 0x28
 8012e90:	af04      	add	r7, sp, #16
 8012e92:	60f8      	str	r0, [r7, #12]
 8012e94:	60b9      	str	r1, [r7, #8]
 8012e96:	607a      	str	r2, [r7, #4]
 8012e98:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d106      	bne.n	8012eae <tcp_output_control_segment+0x22>
 8012ea0:	4b1c      	ldr	r3, [pc, #112]	; (8012f14 <tcp_output_control_segment+0x88>)
 8012ea2:	f240 7287 	movw	r2, #1927	; 0x787
 8012ea6:	491c      	ldr	r1, [pc, #112]	; (8012f18 <tcp_output_control_segment+0x8c>)
 8012ea8:	481c      	ldr	r0, [pc, #112]	; (8012f1c <tcp_output_control_segment+0x90>)
 8012eaa:	f003 fdf7 	bl	8016a9c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012eae:	683a      	ldr	r2, [r7, #0]
 8012eb0:	6879      	ldr	r1, [r7, #4]
 8012eb2:	68f8      	ldr	r0, [r7, #12]
 8012eb4:	f7fe ff40 	bl	8011d38 <tcp_route>
 8012eb8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d102      	bne.n	8012ec6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012ec0:	23fc      	movs	r3, #252	; 0xfc
 8012ec2:	75fb      	strb	r3, [r7, #23]
 8012ec4:	e01c      	b.n	8012f00 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d006      	beq.n	8012eda <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	7adb      	ldrb	r3, [r3, #11]
 8012ed0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	7a9b      	ldrb	r3, [r3, #10]
 8012ed6:	757b      	strb	r3, [r7, #21]
 8012ed8:	e003      	b.n	8012ee2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012eda:	23ff      	movs	r3, #255	; 0xff
 8012edc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012ee2:	7dba      	ldrb	r2, [r7, #22]
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	9302      	str	r3, [sp, #8]
 8012ee8:	2306      	movs	r3, #6
 8012eea:	9301      	str	r3, [sp, #4]
 8012eec:	7d7b      	ldrb	r3, [r7, #21]
 8012eee:	9300      	str	r3, [sp, #0]
 8012ef0:	4613      	mov	r3, r2
 8012ef2:	683a      	ldr	r2, [r7, #0]
 8012ef4:	6879      	ldr	r1, [r7, #4]
 8012ef6:	68b8      	ldr	r0, [r7, #8]
 8012ef8:	f002 faf6 	bl	80154e8 <ip4_output_if>
 8012efc:	4603      	mov	r3, r0
 8012efe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012f00:	68b8      	ldr	r0, [r7, #8]
 8012f02:	f7fa fdc7 	bl	800da94 <pbuf_free>
  return err;
 8012f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3718      	adds	r7, #24
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd80      	pop	{r7, pc}
 8012f12:	bf00      	nop
 8012f14:	080191dc 	.word	0x080191dc
 8012f18:	08019934 	.word	0x08019934
 8012f1c:	08019230 	.word	0x08019230

08012f20 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012f20:	b590      	push	{r4, r7, lr}
 8012f22:	b08b      	sub	sp, #44	; 0x2c
 8012f24:	af04      	add	r7, sp, #16
 8012f26:	60f8      	str	r0, [r7, #12]
 8012f28:	60b9      	str	r1, [r7, #8]
 8012f2a:	607a      	str	r2, [r7, #4]
 8012f2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d106      	bne.n	8012f42 <tcp_rst+0x22>
 8012f34:	4b1f      	ldr	r3, [pc, #124]	; (8012fb4 <tcp_rst+0x94>)
 8012f36:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012f3a:	491f      	ldr	r1, [pc, #124]	; (8012fb8 <tcp_rst+0x98>)
 8012f3c:	481f      	ldr	r0, [pc, #124]	; (8012fbc <tcp_rst+0x9c>)
 8012f3e:	f003 fdad 	bl	8016a9c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d106      	bne.n	8012f56 <tcp_rst+0x36>
 8012f48:	4b1a      	ldr	r3, [pc, #104]	; (8012fb4 <tcp_rst+0x94>)
 8012f4a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012f4e:	491c      	ldr	r1, [pc, #112]	; (8012fc0 <tcp_rst+0xa0>)
 8012f50:	481a      	ldr	r0, [pc, #104]	; (8012fbc <tcp_rst+0x9c>)
 8012f52:	f003 fda3 	bl	8016a9c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012f56:	2300      	movs	r3, #0
 8012f58:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012f5a:	f24d 0316 	movw	r3, #53270	; 0xd016
 8012f5e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012f60:	7dfb      	ldrb	r3, [r7, #23]
 8012f62:	b29c      	uxth	r4, r3
 8012f64:	68b8      	ldr	r0, [r7, #8]
 8012f66:	f7f9 f818 	bl	800bf9a <lwip_htonl>
 8012f6a:	4602      	mov	r2, r0
 8012f6c:	8abb      	ldrh	r3, [r7, #20]
 8012f6e:	9303      	str	r3, [sp, #12]
 8012f70:	2314      	movs	r3, #20
 8012f72:	9302      	str	r3, [sp, #8]
 8012f74:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012f76:	9301      	str	r3, [sp, #4]
 8012f78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012f7a:	9300      	str	r3, [sp, #0]
 8012f7c:	4613      	mov	r3, r2
 8012f7e:	2200      	movs	r2, #0
 8012f80:	4621      	mov	r1, r4
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f7ff fe92 	bl	8012cac <tcp_output_alloc_header_common>
 8012f88:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012f8a:	693b      	ldr	r3, [r7, #16]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d00c      	beq.n	8012faa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f90:	7dfb      	ldrb	r3, [r7, #23]
 8012f92:	2200      	movs	r2, #0
 8012f94:	6939      	ldr	r1, [r7, #16]
 8012f96:	68f8      	ldr	r0, [r7, #12]
 8012f98:	f7ff ff38 	bl	8012e0c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f9e:	683a      	ldr	r2, [r7, #0]
 8012fa0:	6939      	ldr	r1, [r7, #16]
 8012fa2:	68f8      	ldr	r0, [r7, #12]
 8012fa4:	f7ff ff72 	bl	8012e8c <tcp_output_control_segment>
 8012fa8:	e000      	b.n	8012fac <tcp_rst+0x8c>
    return;
 8012faa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012fac:	371c      	adds	r7, #28
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd90      	pop	{r4, r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	080191dc 	.word	0x080191dc
 8012fb8:	08019960 	.word	0x08019960
 8012fbc:	08019230 	.word	0x08019230
 8012fc0:	0801997c 	.word	0x0801997c

08012fc4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012fc4:	b590      	push	{r4, r7, lr}
 8012fc6:	b087      	sub	sp, #28
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d106      	bne.n	8012fe8 <tcp_send_empty_ack+0x24>
 8012fda:	4b28      	ldr	r3, [pc, #160]	; (801307c <tcp_send_empty_ack+0xb8>)
 8012fdc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012fe0:	4927      	ldr	r1, [pc, #156]	; (8013080 <tcp_send_empty_ack+0xbc>)
 8012fe2:	4828      	ldr	r0, [pc, #160]	; (8013084 <tcp_send_empty_ack+0xc0>)
 8012fe4:	f003 fd5a 	bl	8016a9c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012fe8:	7dfb      	ldrb	r3, [r7, #23]
 8012fea:	009b      	lsls	r3, r3, #2
 8012fec:	b2db      	uxtb	r3, r3
 8012fee:	f003 0304 	and.w	r3, r3, #4
 8012ff2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012ff4:	7d7b      	ldrb	r3, [r7, #21]
 8012ff6:	b29c      	uxth	r4, r3
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7f8 ffcc 	bl	800bf9a <lwip_htonl>
 8013002:	4603      	mov	r3, r0
 8013004:	2200      	movs	r2, #0
 8013006:	4621      	mov	r1, r4
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f7ff fec1 	bl	8012d90 <tcp_output_alloc_header>
 801300e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d109      	bne.n	801302a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	8b5b      	ldrh	r3, [r3, #26]
 801301a:	f043 0303 	orr.w	r3, r3, #3
 801301e:	b29a      	uxth	r2, r3
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013024:	f06f 0301 	mvn.w	r3, #1
 8013028:	e023      	b.n	8013072 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801302a:	7dbb      	ldrb	r3, [r7, #22]
 801302c:	7dfa      	ldrb	r2, [r7, #23]
 801302e:	6939      	ldr	r1, [r7, #16]
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f7ff feeb 	bl	8012e0c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013036:	687a      	ldr	r2, [r7, #4]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	3304      	adds	r3, #4
 801303c:	6939      	ldr	r1, [r7, #16]
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	f7ff ff24 	bl	8012e8c <tcp_output_control_segment>
 8013044:	4603      	mov	r3, r0
 8013046:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d007      	beq.n	8013060 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	8b5b      	ldrh	r3, [r3, #26]
 8013054:	f043 0303 	orr.w	r3, r3, #3
 8013058:	b29a      	uxth	r2, r3
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	835a      	strh	r2, [r3, #26]
 801305e:	e006      	b.n	801306e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	8b5b      	ldrh	r3, [r3, #26]
 8013064:	f023 0303 	bic.w	r3, r3, #3
 8013068:	b29a      	uxth	r2, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013072:	4618      	mov	r0, r3
 8013074:	371c      	adds	r7, #28
 8013076:	46bd      	mov	sp, r7
 8013078:	bd90      	pop	{r4, r7, pc}
 801307a:	bf00      	nop
 801307c:	080191dc 	.word	0x080191dc
 8013080:	08019998 	.word	0x08019998
 8013084:	08019230 	.word	0x08019230

08013088 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013088:	b590      	push	{r4, r7, lr}
 801308a:	b087      	sub	sp, #28
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013090:	2300      	movs	r3, #0
 8013092:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d106      	bne.n	80130a8 <tcp_keepalive+0x20>
 801309a:	4b18      	ldr	r3, [pc, #96]	; (80130fc <tcp_keepalive+0x74>)
 801309c:	f640 0224 	movw	r2, #2084	; 0x824
 80130a0:	4917      	ldr	r1, [pc, #92]	; (8013100 <tcp_keepalive+0x78>)
 80130a2:	4818      	ldr	r0, [pc, #96]	; (8013104 <tcp_keepalive+0x7c>)
 80130a4:	f003 fcfa 	bl	8016a9c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80130a8:	7dfb      	ldrb	r3, [r7, #23]
 80130aa:	b29c      	uxth	r4, r3
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130b0:	3b01      	subs	r3, #1
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7f8 ff71 	bl	800bf9a <lwip_htonl>
 80130b8:	4603      	mov	r3, r0
 80130ba:	2200      	movs	r2, #0
 80130bc:	4621      	mov	r1, r4
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f7ff fe66 	bl	8012d90 <tcp_output_alloc_header>
 80130c4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d102      	bne.n	80130d2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80130cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130d0:	e010      	b.n	80130f4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80130d2:	7dfb      	ldrb	r3, [r7, #23]
 80130d4:	2200      	movs	r2, #0
 80130d6:	6939      	ldr	r1, [r7, #16]
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f7ff fe97 	bl	8012e0c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	3304      	adds	r3, #4
 80130e4:	6939      	ldr	r1, [r7, #16]
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f7ff fed0 	bl	8012e8c <tcp_output_control_segment>
 80130ec:	4603      	mov	r3, r0
 80130ee:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80130f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	371c      	adds	r7, #28
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd90      	pop	{r4, r7, pc}
 80130fc:	080191dc 	.word	0x080191dc
 8013100:	080199b8 	.word	0x080199b8
 8013104:	08019230 	.word	0x08019230

08013108 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013108:	b590      	push	{r4, r7, lr}
 801310a:	b08b      	sub	sp, #44	; 0x2c
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013110:	2300      	movs	r3, #0
 8013112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d106      	bne.n	801312a <tcp_zero_window_probe+0x22>
 801311c:	4b4c      	ldr	r3, [pc, #304]	; (8013250 <tcp_zero_window_probe+0x148>)
 801311e:	f640 024f 	movw	r2, #2127	; 0x84f
 8013122:	494c      	ldr	r1, [pc, #304]	; (8013254 <tcp_zero_window_probe+0x14c>)
 8013124:	484c      	ldr	r0, [pc, #304]	; (8013258 <tcp_zero_window_probe+0x150>)
 8013126:	f003 fcb9 	bl	8016a9c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801312e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013130:	6a3b      	ldr	r3, [r7, #32]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d101      	bne.n	801313a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013136:	2300      	movs	r3, #0
 8013138:	e086      	b.n	8013248 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013140:	2bff      	cmp	r3, #255	; 0xff
 8013142:	d007      	beq.n	8013154 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801314a:	3301      	adds	r3, #1
 801314c:	b2da      	uxtb	r2, r3
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013154:	6a3b      	ldr	r3, [r7, #32]
 8013156:	68db      	ldr	r3, [r3, #12]
 8013158:	899b      	ldrh	r3, [r3, #12]
 801315a:	b29b      	uxth	r3, r3
 801315c:	4618      	mov	r0, r3
 801315e:	f7f8 ff07 	bl	800bf70 <lwip_htons>
 8013162:	4603      	mov	r3, r0
 8013164:	b2db      	uxtb	r3, r3
 8013166:	f003 0301 	and.w	r3, r3, #1
 801316a:	2b00      	cmp	r3, #0
 801316c:	d005      	beq.n	801317a <tcp_zero_window_probe+0x72>
 801316e:	6a3b      	ldr	r3, [r7, #32]
 8013170:	891b      	ldrh	r3, [r3, #8]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d101      	bne.n	801317a <tcp_zero_window_probe+0x72>
 8013176:	2301      	movs	r3, #1
 8013178:	e000      	b.n	801317c <tcp_zero_window_probe+0x74>
 801317a:	2300      	movs	r3, #0
 801317c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801317e:	7ffb      	ldrb	r3, [r7, #31]
 8013180:	2b00      	cmp	r3, #0
 8013182:	bf0c      	ite	eq
 8013184:	2301      	moveq	r3, #1
 8013186:	2300      	movne	r3, #0
 8013188:	b2db      	uxtb	r3, r3
 801318a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801318c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013190:	b299      	uxth	r1, r3
 8013192:	6a3b      	ldr	r3, [r7, #32]
 8013194:	68db      	ldr	r3, [r3, #12]
 8013196:	685b      	ldr	r3, [r3, #4]
 8013198:	8bba      	ldrh	r2, [r7, #28]
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f7ff fdf8 	bl	8012d90 <tcp_output_alloc_header>
 80131a0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80131a2:	69bb      	ldr	r3, [r7, #24]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d102      	bne.n	80131ae <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80131a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131ac:	e04c      	b.n	8013248 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80131ae:	69bb      	ldr	r3, [r7, #24]
 80131b0:	685b      	ldr	r3, [r3, #4]
 80131b2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80131b4:	7ffb      	ldrb	r3, [r7, #31]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d011      	beq.n	80131de <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	899b      	ldrh	r3, [r3, #12]
 80131be:	b29b      	uxth	r3, r3
 80131c0:	b21b      	sxth	r3, r3
 80131c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80131c6:	b21c      	sxth	r4, r3
 80131c8:	2011      	movs	r0, #17
 80131ca:	f7f8 fed1 	bl	800bf70 <lwip_htons>
 80131ce:	4603      	mov	r3, r0
 80131d0:	b21b      	sxth	r3, r3
 80131d2:	4323      	orrs	r3, r4
 80131d4:	b21b      	sxth	r3, r3
 80131d6:	b29a      	uxth	r2, r3
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	819a      	strh	r2, [r3, #12]
 80131dc:	e010      	b.n	8013200 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80131de:	69bb      	ldr	r3, [r7, #24]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	3314      	adds	r3, #20
 80131e4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80131e6:	6a3b      	ldr	r3, [r7, #32]
 80131e8:	6858      	ldr	r0, [r3, #4]
 80131ea:	6a3b      	ldr	r3, [r7, #32]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	891a      	ldrh	r2, [r3, #8]
 80131f0:	6a3b      	ldr	r3, [r7, #32]
 80131f2:	891b      	ldrh	r3, [r3, #8]
 80131f4:	1ad3      	subs	r3, r2, r3
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	2201      	movs	r2, #1
 80131fa:	6939      	ldr	r1, [r7, #16]
 80131fc:	f7fa fe50 	bl	800dea0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013200:	6a3b      	ldr	r3, [r7, #32]
 8013202:	68db      	ldr	r3, [r3, #12]
 8013204:	685b      	ldr	r3, [r3, #4]
 8013206:	4618      	mov	r0, r3
 8013208:	f7f8 fec7 	bl	800bf9a <lwip_htonl>
 801320c:	4603      	mov	r3, r0
 801320e:	3301      	adds	r3, #1
 8013210:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	1ad3      	subs	r3, r2, r3
 801321a:	2b00      	cmp	r3, #0
 801321c:	da02      	bge.n	8013224 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	68fa      	ldr	r2, [r7, #12]
 8013222:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013228:	2200      	movs	r2, #0
 801322a:	69b9      	ldr	r1, [r7, #24]
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f7ff fded 	bl	8012e0c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013232:	687a      	ldr	r2, [r7, #4]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	3304      	adds	r3, #4
 8013238:	69b9      	ldr	r1, [r7, #24]
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f7ff fe26 	bl	8012e8c <tcp_output_control_segment>
 8013240:	4603      	mov	r3, r0
 8013242:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013244:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013248:	4618      	mov	r0, r3
 801324a:	372c      	adds	r7, #44	; 0x2c
 801324c:	46bd      	mov	sp, r7
 801324e:	bd90      	pop	{r4, r7, pc}
 8013250:	080191dc 	.word	0x080191dc
 8013254:	080199d4 	.word	0x080199d4
 8013258:	08019230 	.word	0x08019230

0801325c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b082      	sub	sp, #8
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013264:	f7fa ff0a 	bl	800e07c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013268:	4b0a      	ldr	r3, [pc, #40]	; (8013294 <tcpip_tcp_timer+0x38>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d103      	bne.n	8013278 <tcpip_tcp_timer+0x1c>
 8013270:	4b09      	ldr	r3, [pc, #36]	; (8013298 <tcpip_tcp_timer+0x3c>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d005      	beq.n	8013284 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013278:	2200      	movs	r2, #0
 801327a:	4908      	ldr	r1, [pc, #32]	; (801329c <tcpip_tcp_timer+0x40>)
 801327c:	20fa      	movs	r0, #250	; 0xfa
 801327e:	f000 f8f3 	bl	8013468 <sys_timeout>
 8013282:	e003      	b.n	801328c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013284:	4b06      	ldr	r3, [pc, #24]	; (80132a0 <tcpip_tcp_timer+0x44>)
 8013286:	2200      	movs	r2, #0
 8013288:	601a      	str	r2, [r3, #0]
  }
}
 801328a:	bf00      	nop
 801328c:	bf00      	nop
 801328e:	3708      	adds	r7, #8
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}
 8013294:	2406b460 	.word	0x2406b460
 8013298:	2406b470 	.word	0x2406b470
 801329c:	0801325d 	.word	0x0801325d
 80132a0:	2406455c 	.word	0x2406455c

080132a4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80132a8:	4b0a      	ldr	r3, [pc, #40]	; (80132d4 <tcp_timer_needed+0x30>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d10f      	bne.n	80132d0 <tcp_timer_needed+0x2c>
 80132b0:	4b09      	ldr	r3, [pc, #36]	; (80132d8 <tcp_timer_needed+0x34>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d103      	bne.n	80132c0 <tcp_timer_needed+0x1c>
 80132b8:	4b08      	ldr	r3, [pc, #32]	; (80132dc <tcp_timer_needed+0x38>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d007      	beq.n	80132d0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80132c0:	4b04      	ldr	r3, [pc, #16]	; (80132d4 <tcp_timer_needed+0x30>)
 80132c2:	2201      	movs	r2, #1
 80132c4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80132c6:	2200      	movs	r2, #0
 80132c8:	4905      	ldr	r1, [pc, #20]	; (80132e0 <tcp_timer_needed+0x3c>)
 80132ca:	20fa      	movs	r0, #250	; 0xfa
 80132cc:	f000 f8cc 	bl	8013468 <sys_timeout>
  }
}
 80132d0:	bf00      	nop
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	2406455c 	.word	0x2406455c
 80132d8:	2406b460 	.word	0x2406b460
 80132dc:	2406b470 	.word	0x2406b470
 80132e0:	0801325d 	.word	0x0801325d

080132e4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b086      	sub	sp, #24
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	60f8      	str	r0, [r7, #12]
 80132ec:	60b9      	str	r1, [r7, #8]
 80132ee:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80132f0:	200a      	movs	r0, #10
 80132f2:	f7f9 fbdd 	bl	800cab0 <memp_malloc>
 80132f6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d109      	bne.n	8013312 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d151      	bne.n	80133a8 <sys_timeout_abs+0xc4>
 8013304:	4b2a      	ldr	r3, [pc, #168]	; (80133b0 <sys_timeout_abs+0xcc>)
 8013306:	22be      	movs	r2, #190	; 0xbe
 8013308:	492a      	ldr	r1, [pc, #168]	; (80133b4 <sys_timeout_abs+0xd0>)
 801330a:	482b      	ldr	r0, [pc, #172]	; (80133b8 <sys_timeout_abs+0xd4>)
 801330c:	f003 fbc6 	bl	8016a9c <iprintf>
    return;
 8013310:	e04a      	b.n	80133a8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	2200      	movs	r2, #0
 8013316:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	68ba      	ldr	r2, [r7, #8]
 801331c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	687a      	ldr	r2, [r7, #4]
 8013322:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	68fa      	ldr	r2, [r7, #12]
 8013328:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801332a:	4b24      	ldr	r3, [pc, #144]	; (80133bc <sys_timeout_abs+0xd8>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d103      	bne.n	801333a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013332:	4a22      	ldr	r2, [pc, #136]	; (80133bc <sys_timeout_abs+0xd8>)
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	6013      	str	r3, [r2, #0]
    return;
 8013338:	e037      	b.n	80133aa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	685a      	ldr	r2, [r3, #4]
 801333e:	4b1f      	ldr	r3, [pc, #124]	; (80133bc <sys_timeout_abs+0xd8>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	685b      	ldr	r3, [r3, #4]
 8013344:	1ad3      	subs	r3, r2, r3
 8013346:	0fdb      	lsrs	r3, r3, #31
 8013348:	f003 0301 	and.w	r3, r3, #1
 801334c:	b2db      	uxtb	r3, r3
 801334e:	2b00      	cmp	r3, #0
 8013350:	d007      	beq.n	8013362 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013352:	4b1a      	ldr	r3, [pc, #104]	; (80133bc <sys_timeout_abs+0xd8>)
 8013354:	681a      	ldr	r2, [r3, #0]
 8013356:	693b      	ldr	r3, [r7, #16]
 8013358:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801335a:	4a18      	ldr	r2, [pc, #96]	; (80133bc <sys_timeout_abs+0xd8>)
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	6013      	str	r3, [r2, #0]
 8013360:	e023      	b.n	80133aa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013362:	4b16      	ldr	r3, [pc, #88]	; (80133bc <sys_timeout_abs+0xd8>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	617b      	str	r3, [r7, #20]
 8013368:	e01a      	b.n	80133a0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d00b      	beq.n	801338a <sys_timeout_abs+0xa6>
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	685a      	ldr	r2, [r3, #4]
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	685b      	ldr	r3, [r3, #4]
 801337c:	1ad3      	subs	r3, r2, r3
 801337e:	0fdb      	lsrs	r3, r3, #31
 8013380:	f003 0301 	and.w	r3, r3, #1
 8013384:	b2db      	uxtb	r3, r3
 8013386:	2b00      	cmp	r3, #0
 8013388:	d007      	beq.n	801339a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	681a      	ldr	r2, [r3, #0]
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	693a      	ldr	r2, [r7, #16]
 8013396:	601a      	str	r2, [r3, #0]
        break;
 8013398:	e007      	b.n	80133aa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	617b      	str	r3, [r7, #20]
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d1e1      	bne.n	801336a <sys_timeout_abs+0x86>
 80133a6:	e000      	b.n	80133aa <sys_timeout_abs+0xc6>
    return;
 80133a8:	bf00      	nop
      }
    }
  }
}
 80133aa:	3718      	adds	r7, #24
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	080199f8 	.word	0x080199f8
 80133b4:	08019a2c 	.word	0x08019a2c
 80133b8:	08019a6c 	.word	0x08019a6c
 80133bc:	24064554 	.word	0x24064554

080133c0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b086      	sub	sp, #24
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	4798      	blx	r3

  now = sys_now();
 80133d2:	f7f5 fc21 	bl	8008c18 <sys_now>
 80133d6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	681a      	ldr	r2, [r3, #0]
 80133dc:	4b0f      	ldr	r3, [pc, #60]	; (801341c <lwip_cyclic_timer+0x5c>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	4413      	add	r3, r2
 80133e2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80133e4:	68fa      	ldr	r2, [r7, #12]
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	1ad3      	subs	r3, r2, r3
 80133ea:	0fdb      	lsrs	r3, r3, #31
 80133ec:	f003 0301 	and.w	r3, r3, #1
 80133f0:	b2db      	uxtb	r3, r3
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d009      	beq.n	801340a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	4413      	add	r3, r2
 80133fe:	687a      	ldr	r2, [r7, #4]
 8013400:	4907      	ldr	r1, [pc, #28]	; (8013420 <lwip_cyclic_timer+0x60>)
 8013402:	4618      	mov	r0, r3
 8013404:	f7ff ff6e 	bl	80132e4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013408:	e004      	b.n	8013414 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	4904      	ldr	r1, [pc, #16]	; (8013420 <lwip_cyclic_timer+0x60>)
 801340e:	68f8      	ldr	r0, [r7, #12]
 8013410:	f7ff ff68 	bl	80132e4 <sys_timeout_abs>
}
 8013414:	bf00      	nop
 8013416:	3718      	adds	r7, #24
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}
 801341c:	24064558 	.word	0x24064558
 8013420:	080133c1 	.word	0x080133c1

08013424 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b082      	sub	sp, #8
 8013428:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801342a:	2301      	movs	r3, #1
 801342c:	607b      	str	r3, [r7, #4]
 801342e:	e00e      	b.n	801344e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013430:	4a0b      	ldr	r2, [pc, #44]	; (8013460 <sys_timeouts_init+0x3c>)
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	00db      	lsls	r3, r3, #3
 801343c:	4a08      	ldr	r2, [pc, #32]	; (8013460 <sys_timeouts_init+0x3c>)
 801343e:	4413      	add	r3, r2
 8013440:	461a      	mov	r2, r3
 8013442:	4908      	ldr	r1, [pc, #32]	; (8013464 <sys_timeouts_init+0x40>)
 8013444:	f000 f810 	bl	8013468 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	3301      	adds	r3, #1
 801344c:	607b      	str	r3, [r7, #4]
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	2b02      	cmp	r3, #2
 8013452:	d9ed      	bls.n	8013430 <sys_timeouts_init+0xc>
  }
}
 8013454:	bf00      	nop
 8013456:	bf00      	nop
 8013458:	3708      	adds	r7, #8
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
 801345e:	bf00      	nop
 8013460:	0801a644 	.word	0x0801a644
 8013464:	080133c1 	.word	0x080133c1

08013468 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b086      	sub	sp, #24
 801346c:	af00      	add	r7, sp, #0
 801346e:	60f8      	str	r0, [r7, #12]
 8013470:	60b9      	str	r1, [r7, #8]
 8013472:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801347a:	d306      	bcc.n	801348a <sys_timeout+0x22>
 801347c:	4b0a      	ldr	r3, [pc, #40]	; (80134a8 <sys_timeout+0x40>)
 801347e:	f240 1229 	movw	r2, #297	; 0x129
 8013482:	490a      	ldr	r1, [pc, #40]	; (80134ac <sys_timeout+0x44>)
 8013484:	480a      	ldr	r0, [pc, #40]	; (80134b0 <sys_timeout+0x48>)
 8013486:	f003 fb09 	bl	8016a9c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801348a:	f7f5 fbc5 	bl	8008c18 <sys_now>
 801348e:	4602      	mov	r2, r0
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	4413      	add	r3, r2
 8013494:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	68b9      	ldr	r1, [r7, #8]
 801349a:	6978      	ldr	r0, [r7, #20]
 801349c:	f7ff ff22 	bl	80132e4 <sys_timeout_abs>
#endif
}
 80134a0:	bf00      	nop
 80134a2:	3718      	adds	r7, #24
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	080199f8 	.word	0x080199f8
 80134ac:	08019a94 	.word	0x08019a94
 80134b0:	08019a6c 	.word	0x08019a6c

080134b4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b084      	sub	sp, #16
 80134b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80134ba:	f7f5 fbad 	bl	8008c18 <sys_now>
 80134be:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80134c0:	4b17      	ldr	r3, [pc, #92]	; (8013520 <sys_check_timeouts+0x6c>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d022      	beq.n	8013512 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	68fa      	ldr	r2, [r7, #12]
 80134d2:	1ad3      	subs	r3, r2, r3
 80134d4:	0fdb      	lsrs	r3, r3, #31
 80134d6:	f003 0301 	and.w	r3, r3, #1
 80134da:	b2db      	uxtb	r3, r3
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d11a      	bne.n	8013516 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	4a0e      	ldr	r2, [pc, #56]	; (8013520 <sys_check_timeouts+0x6c>)
 80134e6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	689b      	ldr	r3, [r3, #8]
 80134ec:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	68db      	ldr	r3, [r3, #12]
 80134f2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	4a0a      	ldr	r2, [pc, #40]	; (8013524 <sys_check_timeouts+0x70>)
 80134fa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80134fc:	68b9      	ldr	r1, [r7, #8]
 80134fe:	200a      	movs	r0, #10
 8013500:	f7f9 fb4c 	bl	800cb9c <memp_free>
    if (handler != NULL) {
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d0da      	beq.n	80134c0 <sys_check_timeouts+0xc>
      handler(arg);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6838      	ldr	r0, [r7, #0]
 801350e:	4798      	blx	r3
  do {
 8013510:	e7d6      	b.n	80134c0 <sys_check_timeouts+0xc>
      return;
 8013512:	bf00      	nop
 8013514:	e000      	b.n	8013518 <sys_check_timeouts+0x64>
      return;
 8013516:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013518:	3710      	adds	r7, #16
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}
 801351e:	bf00      	nop
 8013520:	24064554 	.word	0x24064554
 8013524:	24064558 	.word	0x24064558

08013528 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801352e:	4b16      	ldr	r3, [pc, #88]	; (8013588 <sys_timeouts_sleeptime+0x60>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d102      	bne.n	801353c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801353a:	e020      	b.n	801357e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801353c:	f7f5 fb6c 	bl	8008c18 <sys_now>
 8013540:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013542:	4b11      	ldr	r3, [pc, #68]	; (8013588 <sys_timeouts_sleeptime+0x60>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	685a      	ldr	r2, [r3, #4]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	1ad3      	subs	r3, r2, r3
 801354c:	0fdb      	lsrs	r3, r3, #31
 801354e:	f003 0301 	and.w	r3, r3, #1
 8013552:	b2db      	uxtb	r3, r3
 8013554:	2b00      	cmp	r3, #0
 8013556:	d001      	beq.n	801355c <sys_timeouts_sleeptime+0x34>
    return 0;
 8013558:	2300      	movs	r3, #0
 801355a:	e010      	b.n	801357e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801355c:	4b0a      	ldr	r3, [pc, #40]	; (8013588 <sys_timeouts_sleeptime+0x60>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	685a      	ldr	r2, [r3, #4]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	1ad3      	subs	r3, r2, r3
 8013566:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	2b00      	cmp	r3, #0
 801356c:	da06      	bge.n	801357c <sys_timeouts_sleeptime+0x54>
 801356e:	4b07      	ldr	r3, [pc, #28]	; (801358c <sys_timeouts_sleeptime+0x64>)
 8013570:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013574:	4906      	ldr	r1, [pc, #24]	; (8013590 <sys_timeouts_sleeptime+0x68>)
 8013576:	4807      	ldr	r0, [pc, #28]	; (8013594 <sys_timeouts_sleeptime+0x6c>)
 8013578:	f003 fa90 	bl	8016a9c <iprintf>
    return ret;
 801357c:	683b      	ldr	r3, [r7, #0]
  }
}
 801357e:	4618      	mov	r0, r3
 8013580:	3708      	adds	r7, #8
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	24064554 	.word	0x24064554
 801358c:	080199f8 	.word	0x080199f8
 8013590:	08019acc 	.word	0x08019acc
 8013594:	08019a6c 	.word	0x08019a6c

08013598 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801359c:	f003 fa96 	bl	8016acc <rand>
 80135a0:	4603      	mov	r3, r0
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80135ae:	b29a      	uxth	r2, r3
 80135b0:	4b01      	ldr	r3, [pc, #4]	; (80135b8 <udp_init+0x20>)
 80135b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80135b4:	bf00      	nop
 80135b6:	bd80      	pop	{r7, pc}
 80135b8:	24000030 	.word	0x24000030

080135bc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80135bc:	b480      	push	{r7}
 80135be:	b083      	sub	sp, #12
 80135c0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80135c2:	2300      	movs	r3, #0
 80135c4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80135c6:	4b17      	ldr	r3, [pc, #92]	; (8013624 <udp_new_port+0x68>)
 80135c8:	881b      	ldrh	r3, [r3, #0]
 80135ca:	1c5a      	adds	r2, r3, #1
 80135cc:	b291      	uxth	r1, r2
 80135ce:	4a15      	ldr	r2, [pc, #84]	; (8013624 <udp_new_port+0x68>)
 80135d0:	8011      	strh	r1, [r2, #0]
 80135d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135d6:	4293      	cmp	r3, r2
 80135d8:	d103      	bne.n	80135e2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80135da:	4b12      	ldr	r3, [pc, #72]	; (8013624 <udp_new_port+0x68>)
 80135dc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80135e0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80135e2:	4b11      	ldr	r3, [pc, #68]	; (8013628 <udp_new_port+0x6c>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	603b      	str	r3, [r7, #0]
 80135e8:	e011      	b.n	801360e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80135ea:	683b      	ldr	r3, [r7, #0]
 80135ec:	8a5a      	ldrh	r2, [r3, #18]
 80135ee:	4b0d      	ldr	r3, [pc, #52]	; (8013624 <udp_new_port+0x68>)
 80135f0:	881b      	ldrh	r3, [r3, #0]
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d108      	bne.n	8013608 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80135f6:	88fb      	ldrh	r3, [r7, #6]
 80135f8:	3301      	adds	r3, #1
 80135fa:	80fb      	strh	r3, [r7, #6]
 80135fc:	88fb      	ldrh	r3, [r7, #6]
 80135fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013602:	d3e0      	bcc.n	80135c6 <udp_new_port+0xa>
        return 0;
 8013604:	2300      	movs	r3, #0
 8013606:	e007      	b.n	8013618 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	68db      	ldr	r3, [r3, #12]
 801360c:	603b      	str	r3, [r7, #0]
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d1ea      	bne.n	80135ea <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013614:	4b03      	ldr	r3, [pc, #12]	; (8013624 <udp_new_port+0x68>)
 8013616:	881b      	ldrh	r3, [r3, #0]
}
 8013618:	4618      	mov	r0, r3
 801361a:	370c      	adds	r7, #12
 801361c:	46bd      	mov	sp, r7
 801361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013622:	4770      	bx	lr
 8013624:	24000030 	.word	0x24000030
 8013628:	2406b478 	.word	0x2406b478

0801362c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b084      	sub	sp, #16
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	4613      	mov	r3, r2
 8013638:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d105      	bne.n	801364c <udp_input_local_match+0x20>
 8013640:	4b27      	ldr	r3, [pc, #156]	; (80136e0 <udp_input_local_match+0xb4>)
 8013642:	2287      	movs	r2, #135	; 0x87
 8013644:	4927      	ldr	r1, [pc, #156]	; (80136e4 <udp_input_local_match+0xb8>)
 8013646:	4828      	ldr	r0, [pc, #160]	; (80136e8 <udp_input_local_match+0xbc>)
 8013648:	f003 fa28 	bl	8016a9c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d105      	bne.n	801365e <udp_input_local_match+0x32>
 8013652:	4b23      	ldr	r3, [pc, #140]	; (80136e0 <udp_input_local_match+0xb4>)
 8013654:	2288      	movs	r2, #136	; 0x88
 8013656:	4925      	ldr	r1, [pc, #148]	; (80136ec <udp_input_local_match+0xc0>)
 8013658:	4823      	ldr	r0, [pc, #140]	; (80136e8 <udp_input_local_match+0xbc>)
 801365a:	f003 fa1f 	bl	8016a9c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	7a1b      	ldrb	r3, [r3, #8]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d00b      	beq.n	801367e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	7a1a      	ldrb	r2, [r3, #8]
 801366a:	4b21      	ldr	r3, [pc, #132]	; (80136f0 <udp_input_local_match+0xc4>)
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013672:	3301      	adds	r3, #1
 8013674:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013676:	429a      	cmp	r2, r3
 8013678:	d001      	beq.n	801367e <udp_input_local_match+0x52>
    return 0;
 801367a:	2300      	movs	r3, #0
 801367c:	e02b      	b.n	80136d6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801367e:	79fb      	ldrb	r3, [r7, #7]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d018      	beq.n	80136b6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d013      	beq.n	80136b2 <udp_input_local_match+0x86>
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d00f      	beq.n	80136b2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013692:	4b17      	ldr	r3, [pc, #92]	; (80136f0 <udp_input_local_match+0xc4>)
 8013694:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801369a:	d00a      	beq.n	80136b2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	4b13      	ldr	r3, [pc, #76]	; (80136f0 <udp_input_local_match+0xc4>)
 80136a2:	695b      	ldr	r3, [r3, #20]
 80136a4:	405a      	eors	r2, r3
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	3308      	adds	r3, #8
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d110      	bne.n	80136d4 <udp_input_local_match+0xa8>
          return 1;
 80136b2:	2301      	movs	r3, #1
 80136b4:	e00f      	b.n	80136d6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d009      	beq.n	80136d0 <udp_input_local_match+0xa4>
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d005      	beq.n	80136d0 <udp_input_local_match+0xa4>
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	681a      	ldr	r2, [r3, #0]
 80136c8:	4b09      	ldr	r3, [pc, #36]	; (80136f0 <udp_input_local_match+0xc4>)
 80136ca:	695b      	ldr	r3, [r3, #20]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d101      	bne.n	80136d4 <udp_input_local_match+0xa8>
        return 1;
 80136d0:	2301      	movs	r3, #1
 80136d2:	e000      	b.n	80136d6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80136d4:	2300      	movs	r3, #0
}
 80136d6:	4618      	mov	r0, r3
 80136d8:	3710      	adds	r7, #16
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}
 80136de:	bf00      	nop
 80136e0:	08019ae0 	.word	0x08019ae0
 80136e4:	08019b10 	.word	0x08019b10
 80136e8:	08019b34 	.word	0x08019b34
 80136ec:	08019b5c 	.word	0x08019b5c
 80136f0:	24064d60 	.word	0x24064d60

080136f4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80136f4:	b590      	push	{r4, r7, lr}
 80136f6:	b08d      	sub	sp, #52	; 0x34
 80136f8:	af02      	add	r7, sp, #8
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80136fe:	2300      	movs	r3, #0
 8013700:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d105      	bne.n	8013714 <udp_input+0x20>
 8013708:	4b7c      	ldr	r3, [pc, #496]	; (80138fc <udp_input+0x208>)
 801370a:	22cf      	movs	r2, #207	; 0xcf
 801370c:	497c      	ldr	r1, [pc, #496]	; (8013900 <udp_input+0x20c>)
 801370e:	487d      	ldr	r0, [pc, #500]	; (8013904 <udp_input+0x210>)
 8013710:	f003 f9c4 	bl	8016a9c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d105      	bne.n	8013726 <udp_input+0x32>
 801371a:	4b78      	ldr	r3, [pc, #480]	; (80138fc <udp_input+0x208>)
 801371c:	22d0      	movs	r2, #208	; 0xd0
 801371e:	497a      	ldr	r1, [pc, #488]	; (8013908 <udp_input+0x214>)
 8013720:	4878      	ldr	r0, [pc, #480]	; (8013904 <udp_input+0x210>)
 8013722:	f003 f9bb 	bl	8016a9c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	895b      	ldrh	r3, [r3, #10]
 801372a:	2b07      	cmp	r3, #7
 801372c:	d803      	bhi.n	8013736 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f7fa f9b0 	bl	800da94 <pbuf_free>
    goto end;
 8013734:	e0de      	b.n	80138f4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801373c:	4b73      	ldr	r3, [pc, #460]	; (801390c <udp_input+0x218>)
 801373e:	695b      	ldr	r3, [r3, #20]
 8013740:	4a72      	ldr	r2, [pc, #456]	; (801390c <udp_input+0x218>)
 8013742:	6812      	ldr	r2, [r2, #0]
 8013744:	4611      	mov	r1, r2
 8013746:	4618      	mov	r0, r3
 8013748:	f001 ffa6 	bl	8015698 <ip4_addr_isbroadcast_u32>
 801374c:	4603      	mov	r3, r0
 801374e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	881b      	ldrh	r3, [r3, #0]
 8013754:	b29b      	uxth	r3, r3
 8013756:	4618      	mov	r0, r3
 8013758:	f7f8 fc0a 	bl	800bf70 <lwip_htons>
 801375c:	4603      	mov	r3, r0
 801375e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	885b      	ldrh	r3, [r3, #2]
 8013764:	b29b      	uxth	r3, r3
 8013766:	4618      	mov	r0, r3
 8013768:	f7f8 fc02 	bl	800bf70 <lwip_htons>
 801376c:	4603      	mov	r3, r0
 801376e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013770:	2300      	movs	r3, #0
 8013772:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013774:	2300      	movs	r3, #0
 8013776:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013778:	2300      	movs	r3, #0
 801377a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801377c:	4b64      	ldr	r3, [pc, #400]	; (8013910 <udp_input+0x21c>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	627b      	str	r3, [r7, #36]	; 0x24
 8013782:	e054      	b.n	801382e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013786:	8a5b      	ldrh	r3, [r3, #18]
 8013788:	89fa      	ldrh	r2, [r7, #14]
 801378a:	429a      	cmp	r2, r3
 801378c:	d14a      	bne.n	8013824 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801378e:	7cfb      	ldrb	r3, [r7, #19]
 8013790:	461a      	mov	r2, r3
 8013792:	6839      	ldr	r1, [r7, #0]
 8013794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013796:	f7ff ff49 	bl	801362c <udp_input_local_match>
 801379a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801379c:	2b00      	cmp	r3, #0
 801379e:	d041      	beq.n	8013824 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80137a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a2:	7c1b      	ldrb	r3, [r3, #16]
 80137a4:	f003 0304 	and.w	r3, r3, #4
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d11d      	bne.n	80137e8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80137ac:	69fb      	ldr	r3, [r7, #28]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d102      	bne.n	80137b8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80137b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b4:	61fb      	str	r3, [r7, #28]
 80137b6:	e017      	b.n	80137e8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80137b8:	7cfb      	ldrb	r3, [r7, #19]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d014      	beq.n	80137e8 <udp_input+0xf4>
 80137be:	4b53      	ldr	r3, [pc, #332]	; (801390c <udp_input+0x218>)
 80137c0:	695b      	ldr	r3, [r3, #20]
 80137c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137c6:	d10f      	bne.n	80137e8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80137c8:	69fb      	ldr	r3, [r7, #28]
 80137ca:	681a      	ldr	r2, [r3, #0]
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	3304      	adds	r3, #4
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d008      	beq.n	80137e8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80137d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	3304      	adds	r3, #4
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d101      	bne.n	80137e8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80137e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80137e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ea:	8a9b      	ldrh	r3, [r3, #20]
 80137ec:	8a3a      	ldrh	r2, [r7, #16]
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d118      	bne.n	8013824 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80137f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d005      	beq.n	8013806 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80137fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fc:	685a      	ldr	r2, [r3, #4]
 80137fe:	4b43      	ldr	r3, [pc, #268]	; (801390c <udp_input+0x218>)
 8013800:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013802:	429a      	cmp	r2, r3
 8013804:	d10e      	bne.n	8013824 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013806:	6a3b      	ldr	r3, [r7, #32]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d014      	beq.n	8013836 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380e:	68da      	ldr	r2, [r3, #12]
 8013810:	6a3b      	ldr	r3, [r7, #32]
 8013812:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013814:	4b3e      	ldr	r3, [pc, #248]	; (8013910 <udp_input+0x21c>)
 8013816:	681a      	ldr	r2, [r3, #0]
 8013818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801381c:	4a3c      	ldr	r2, [pc, #240]	; (8013910 <udp_input+0x21c>)
 801381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013820:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013822:	e008      	b.n	8013836 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013826:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382a:	68db      	ldr	r3, [r3, #12]
 801382c:	627b      	str	r3, [r7, #36]	; 0x24
 801382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013830:	2b00      	cmp	r3, #0
 8013832:	d1a7      	bne.n	8013784 <udp_input+0x90>
 8013834:	e000      	b.n	8013838 <udp_input+0x144>
        break;
 8013836:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383a:	2b00      	cmp	r3, #0
 801383c:	d101      	bne.n	8013842 <udp_input+0x14e>
    pcb = uncon_pcb;
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013844:	2b00      	cmp	r3, #0
 8013846:	d002      	beq.n	801384e <udp_input+0x15a>
    for_us = 1;
 8013848:	2301      	movs	r3, #1
 801384a:	76fb      	strb	r3, [r7, #27]
 801384c:	e00a      	b.n	8013864 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	3304      	adds	r3, #4
 8013852:	681a      	ldr	r2, [r3, #0]
 8013854:	4b2d      	ldr	r3, [pc, #180]	; (801390c <udp_input+0x218>)
 8013856:	695b      	ldr	r3, [r3, #20]
 8013858:	429a      	cmp	r2, r3
 801385a:	bf0c      	ite	eq
 801385c:	2301      	moveq	r3, #1
 801385e:	2300      	movne	r3, #0
 8013860:	b2db      	uxtb	r3, r3
 8013862:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013864:	7efb      	ldrb	r3, [r7, #27]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d041      	beq.n	80138ee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801386a:	2108      	movs	r1, #8
 801386c:	6878      	ldr	r0, [r7, #4]
 801386e:	f7fa f88b 	bl	800d988 <pbuf_remove_header>
 8013872:	4603      	mov	r3, r0
 8013874:	2b00      	cmp	r3, #0
 8013876:	d00a      	beq.n	801388e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013878:	4b20      	ldr	r3, [pc, #128]	; (80138fc <udp_input+0x208>)
 801387a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801387e:	4925      	ldr	r1, [pc, #148]	; (8013914 <udp_input+0x220>)
 8013880:	4820      	ldr	r0, [pc, #128]	; (8013904 <udp_input+0x210>)
 8013882:	f003 f90b 	bl	8016a9c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f7fa f904 	bl	800da94 <pbuf_free>
      goto end;
 801388c:	e032      	b.n	80138f4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013890:	2b00      	cmp	r3, #0
 8013892:	d012      	beq.n	80138ba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013896:	699b      	ldr	r3, [r3, #24]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d00a      	beq.n	80138b2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389e:	699c      	ldr	r4, [r3, #24]
 80138a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a2:	69d8      	ldr	r0, [r3, #28]
 80138a4:	8a3b      	ldrh	r3, [r7, #16]
 80138a6:	9300      	str	r3, [sp, #0]
 80138a8:	4b1b      	ldr	r3, [pc, #108]	; (8013918 <udp_input+0x224>)
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80138ae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80138b0:	e021      	b.n	80138f6 <udp_input+0x202>
        pbuf_free(p);
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	f7fa f8ee 	bl	800da94 <pbuf_free>
        goto end;
 80138b8:	e01c      	b.n	80138f4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80138ba:	7cfb      	ldrb	r3, [r7, #19]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d112      	bne.n	80138e6 <udp_input+0x1f2>
 80138c0:	4b12      	ldr	r3, [pc, #72]	; (801390c <udp_input+0x218>)
 80138c2:	695b      	ldr	r3, [r3, #20]
 80138c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80138c8:	2be0      	cmp	r3, #224	; 0xe0
 80138ca:	d00c      	beq.n	80138e6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80138cc:	4b0f      	ldr	r3, [pc, #60]	; (801390c <udp_input+0x218>)
 80138ce:	899b      	ldrh	r3, [r3, #12]
 80138d0:	3308      	adds	r3, #8
 80138d2:	b29b      	uxth	r3, r3
 80138d4:	b21b      	sxth	r3, r3
 80138d6:	4619      	mov	r1, r3
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f7fa f8c8 	bl	800da6e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80138de:	2103      	movs	r1, #3
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f001 fbaf 	bl	8015044 <icmp_dest_unreach>
      pbuf_free(p);
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7fa f8d4 	bl	800da94 <pbuf_free>
  return;
 80138ec:	e003      	b.n	80138f6 <udp_input+0x202>
    pbuf_free(p);
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f7fa f8d0 	bl	800da94 <pbuf_free>
  return;
 80138f4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80138f6:	372c      	adds	r7, #44	; 0x2c
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd90      	pop	{r4, r7, pc}
 80138fc:	08019ae0 	.word	0x08019ae0
 8013900:	08019b84 	.word	0x08019b84
 8013904:	08019b34 	.word	0x08019b34
 8013908:	08019b9c 	.word	0x08019b9c
 801390c:	24064d60 	.word	0x24064d60
 8013910:	2406b478 	.word	0x2406b478
 8013914:	08019bb8 	.word	0x08019bb8
 8013918:	24064d70 	.word	0x24064d70

0801391c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b082      	sub	sp, #8
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d109      	bne.n	8013940 <udp_send+0x24>
 801392c:	4b11      	ldr	r3, [pc, #68]	; (8013974 <udp_send+0x58>)
 801392e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8013932:	4911      	ldr	r1, [pc, #68]	; (8013978 <udp_send+0x5c>)
 8013934:	4811      	ldr	r0, [pc, #68]	; (801397c <udp_send+0x60>)
 8013936:	f003 f8b1 	bl	8016a9c <iprintf>
 801393a:	f06f 030f 	mvn.w	r3, #15
 801393e:	e015      	b.n	801396c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d109      	bne.n	801395a <udp_send+0x3e>
 8013946:	4b0b      	ldr	r3, [pc, #44]	; (8013974 <udp_send+0x58>)
 8013948:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801394c:	490c      	ldr	r1, [pc, #48]	; (8013980 <udp_send+0x64>)
 801394e:	480b      	ldr	r0, [pc, #44]	; (801397c <udp_send+0x60>)
 8013950:	f003 f8a4 	bl	8016a9c <iprintf>
 8013954:	f06f 030f 	mvn.w	r3, #15
 8013958:	e008      	b.n	801396c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	1d1a      	adds	r2, r3, #4
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	8a9b      	ldrh	r3, [r3, #20]
 8013962:	6839      	ldr	r1, [r7, #0]
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f000 f80d 	bl	8013984 <udp_sendto>
 801396a:	4603      	mov	r3, r0
}
 801396c:	4618      	mov	r0, r3
 801396e:	3708      	adds	r7, #8
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}
 8013974:	08019ae0 	.word	0x08019ae0
 8013978:	08019bd4 	.word	0x08019bd4
 801397c:	08019b34 	.word	0x08019b34
 8013980:	08019bec 	.word	0x08019bec

08013984 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b088      	sub	sp, #32
 8013988:	af02      	add	r7, sp, #8
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	607a      	str	r2, [r7, #4]
 8013990:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d109      	bne.n	80139ac <udp_sendto+0x28>
 8013998:	4b23      	ldr	r3, [pc, #140]	; (8013a28 <udp_sendto+0xa4>)
 801399a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801399e:	4923      	ldr	r1, [pc, #140]	; (8013a2c <udp_sendto+0xa8>)
 80139a0:	4823      	ldr	r0, [pc, #140]	; (8013a30 <udp_sendto+0xac>)
 80139a2:	f003 f87b 	bl	8016a9c <iprintf>
 80139a6:	f06f 030f 	mvn.w	r3, #15
 80139aa:	e038      	b.n	8013a1e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d109      	bne.n	80139c6 <udp_sendto+0x42>
 80139b2:	4b1d      	ldr	r3, [pc, #116]	; (8013a28 <udp_sendto+0xa4>)
 80139b4:	f240 2219 	movw	r2, #537	; 0x219
 80139b8:	491e      	ldr	r1, [pc, #120]	; (8013a34 <udp_sendto+0xb0>)
 80139ba:	481d      	ldr	r0, [pc, #116]	; (8013a30 <udp_sendto+0xac>)
 80139bc:	f003 f86e 	bl	8016a9c <iprintf>
 80139c0:	f06f 030f 	mvn.w	r3, #15
 80139c4:	e02b      	b.n	8013a1e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d109      	bne.n	80139e0 <udp_sendto+0x5c>
 80139cc:	4b16      	ldr	r3, [pc, #88]	; (8013a28 <udp_sendto+0xa4>)
 80139ce:	f240 221a 	movw	r2, #538	; 0x21a
 80139d2:	4919      	ldr	r1, [pc, #100]	; (8013a38 <udp_sendto+0xb4>)
 80139d4:	4816      	ldr	r0, [pc, #88]	; (8013a30 <udp_sendto+0xac>)
 80139d6:	f003 f861 	bl	8016a9c <iprintf>
 80139da:	f06f 030f 	mvn.w	r3, #15
 80139de:	e01e      	b.n	8013a1e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	7a1b      	ldrb	r3, [r3, #8]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d006      	beq.n	80139f6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	7a1b      	ldrb	r3, [r3, #8]
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7f9 fc91 	bl	800d314 <netif_get_by_index>
 80139f2:	6178      	str	r0, [r7, #20]
 80139f4:	e003      	b.n	80139fe <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f001 fbb8 	bl	801516c <ip4_route>
 80139fc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d102      	bne.n	8013a0a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013a04:	f06f 0303 	mvn.w	r3, #3
 8013a08:	e009      	b.n	8013a1e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013a0a:	887a      	ldrh	r2, [r7, #2]
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	9300      	str	r3, [sp, #0]
 8013a10:	4613      	mov	r3, r2
 8013a12:	687a      	ldr	r2, [r7, #4]
 8013a14:	68b9      	ldr	r1, [r7, #8]
 8013a16:	68f8      	ldr	r0, [r7, #12]
 8013a18:	f000 f810 	bl	8013a3c <udp_sendto_if>
 8013a1c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3718      	adds	r7, #24
 8013a22:	46bd      	mov	sp, r7
 8013a24:	bd80      	pop	{r7, pc}
 8013a26:	bf00      	nop
 8013a28:	08019ae0 	.word	0x08019ae0
 8013a2c:	08019c04 	.word	0x08019c04
 8013a30:	08019b34 	.word	0x08019b34
 8013a34:	08019c1c 	.word	0x08019c1c
 8013a38:	08019c38 	.word	0x08019c38

08013a3c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b088      	sub	sp, #32
 8013a40:	af02      	add	r7, sp, #8
 8013a42:	60f8      	str	r0, [r7, #12]
 8013a44:	60b9      	str	r1, [r7, #8]
 8013a46:	607a      	str	r2, [r7, #4]
 8013a48:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d109      	bne.n	8013a64 <udp_sendto_if+0x28>
 8013a50:	4b2e      	ldr	r3, [pc, #184]	; (8013b0c <udp_sendto_if+0xd0>)
 8013a52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013a56:	492e      	ldr	r1, [pc, #184]	; (8013b10 <udp_sendto_if+0xd4>)
 8013a58:	482e      	ldr	r0, [pc, #184]	; (8013b14 <udp_sendto_if+0xd8>)
 8013a5a:	f003 f81f 	bl	8016a9c <iprintf>
 8013a5e:	f06f 030f 	mvn.w	r3, #15
 8013a62:	e04f      	b.n	8013b04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d109      	bne.n	8013a7e <udp_sendto_if+0x42>
 8013a6a:	4b28      	ldr	r3, [pc, #160]	; (8013b0c <udp_sendto_if+0xd0>)
 8013a6c:	f240 2281 	movw	r2, #641	; 0x281
 8013a70:	4929      	ldr	r1, [pc, #164]	; (8013b18 <udp_sendto_if+0xdc>)
 8013a72:	4828      	ldr	r0, [pc, #160]	; (8013b14 <udp_sendto_if+0xd8>)
 8013a74:	f003 f812 	bl	8016a9c <iprintf>
 8013a78:	f06f 030f 	mvn.w	r3, #15
 8013a7c:	e042      	b.n	8013b04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d109      	bne.n	8013a98 <udp_sendto_if+0x5c>
 8013a84:	4b21      	ldr	r3, [pc, #132]	; (8013b0c <udp_sendto_if+0xd0>)
 8013a86:	f240 2282 	movw	r2, #642	; 0x282
 8013a8a:	4924      	ldr	r1, [pc, #144]	; (8013b1c <udp_sendto_if+0xe0>)
 8013a8c:	4821      	ldr	r0, [pc, #132]	; (8013b14 <udp_sendto_if+0xd8>)
 8013a8e:	f003 f805 	bl	8016a9c <iprintf>
 8013a92:	f06f 030f 	mvn.w	r3, #15
 8013a96:	e035      	b.n	8013b04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013a98:	6a3b      	ldr	r3, [r7, #32]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d109      	bne.n	8013ab2 <udp_sendto_if+0x76>
 8013a9e:	4b1b      	ldr	r3, [pc, #108]	; (8013b0c <udp_sendto_if+0xd0>)
 8013aa0:	f240 2283 	movw	r2, #643	; 0x283
 8013aa4:	491e      	ldr	r1, [pc, #120]	; (8013b20 <udp_sendto_if+0xe4>)
 8013aa6:	481b      	ldr	r0, [pc, #108]	; (8013b14 <udp_sendto_if+0xd8>)
 8013aa8:	f002 fff8 	bl	8016a9c <iprintf>
 8013aac:	f06f 030f 	mvn.w	r3, #15
 8013ab0:	e028      	b.n	8013b04 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d009      	beq.n	8013acc <udp_sendto_if+0x90>
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d005      	beq.n	8013acc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ac8:	2be0      	cmp	r3, #224	; 0xe0
 8013aca:	d103      	bne.n	8013ad4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013acc:	6a3b      	ldr	r3, [r7, #32]
 8013ace:	3304      	adds	r3, #4
 8013ad0:	617b      	str	r3, [r7, #20]
 8013ad2:	e00b      	b.n	8013aec <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	681a      	ldr	r2, [r3, #0]
 8013ad8:	6a3b      	ldr	r3, [r7, #32]
 8013ada:	3304      	adds	r3, #4
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d002      	beq.n	8013ae8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013ae2:	f06f 0303 	mvn.w	r3, #3
 8013ae6:	e00d      	b.n	8013b04 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013aec:	887a      	ldrh	r2, [r7, #2]
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	9301      	str	r3, [sp, #4]
 8013af2:	6a3b      	ldr	r3, [r7, #32]
 8013af4:	9300      	str	r3, [sp, #0]
 8013af6:	4613      	mov	r3, r2
 8013af8:	687a      	ldr	r2, [r7, #4]
 8013afa:	68b9      	ldr	r1, [r7, #8]
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f000 f811 	bl	8013b24 <udp_sendto_if_src>
 8013b02:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013b04:	4618      	mov	r0, r3
 8013b06:	3718      	adds	r7, #24
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	08019ae0 	.word	0x08019ae0
 8013b10:	08019c54 	.word	0x08019c54
 8013b14:	08019b34 	.word	0x08019b34
 8013b18:	08019c70 	.word	0x08019c70
 8013b1c:	08019c8c 	.word	0x08019c8c
 8013b20:	08019cac 	.word	0x08019cac

08013b24 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b08c      	sub	sp, #48	; 0x30
 8013b28:	af04      	add	r7, sp, #16
 8013b2a:	60f8      	str	r0, [r7, #12]
 8013b2c:	60b9      	str	r1, [r7, #8]
 8013b2e:	607a      	str	r2, [r7, #4]
 8013b30:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d109      	bne.n	8013b4c <udp_sendto_if_src+0x28>
 8013b38:	4b65      	ldr	r3, [pc, #404]	; (8013cd0 <udp_sendto_if_src+0x1ac>)
 8013b3a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013b3e:	4965      	ldr	r1, [pc, #404]	; (8013cd4 <udp_sendto_if_src+0x1b0>)
 8013b40:	4865      	ldr	r0, [pc, #404]	; (8013cd8 <udp_sendto_if_src+0x1b4>)
 8013b42:	f002 ffab 	bl	8016a9c <iprintf>
 8013b46:	f06f 030f 	mvn.w	r3, #15
 8013b4a:	e0bc      	b.n	8013cc6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d109      	bne.n	8013b66 <udp_sendto_if_src+0x42>
 8013b52:	4b5f      	ldr	r3, [pc, #380]	; (8013cd0 <udp_sendto_if_src+0x1ac>)
 8013b54:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013b58:	4960      	ldr	r1, [pc, #384]	; (8013cdc <udp_sendto_if_src+0x1b8>)
 8013b5a:	485f      	ldr	r0, [pc, #380]	; (8013cd8 <udp_sendto_if_src+0x1b4>)
 8013b5c:	f002 ff9e 	bl	8016a9c <iprintf>
 8013b60:	f06f 030f 	mvn.w	r3, #15
 8013b64:	e0af      	b.n	8013cc6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d109      	bne.n	8013b80 <udp_sendto_if_src+0x5c>
 8013b6c:	4b58      	ldr	r3, [pc, #352]	; (8013cd0 <udp_sendto_if_src+0x1ac>)
 8013b6e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013b72:	495b      	ldr	r1, [pc, #364]	; (8013ce0 <udp_sendto_if_src+0x1bc>)
 8013b74:	4858      	ldr	r0, [pc, #352]	; (8013cd8 <udp_sendto_if_src+0x1b4>)
 8013b76:	f002 ff91 	bl	8016a9c <iprintf>
 8013b7a:	f06f 030f 	mvn.w	r3, #15
 8013b7e:	e0a2      	b.n	8013cc6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d109      	bne.n	8013b9a <udp_sendto_if_src+0x76>
 8013b86:	4b52      	ldr	r3, [pc, #328]	; (8013cd0 <udp_sendto_if_src+0x1ac>)
 8013b88:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013b8c:	4955      	ldr	r1, [pc, #340]	; (8013ce4 <udp_sendto_if_src+0x1c0>)
 8013b8e:	4852      	ldr	r0, [pc, #328]	; (8013cd8 <udp_sendto_if_src+0x1b4>)
 8013b90:	f002 ff84 	bl	8016a9c <iprintf>
 8013b94:	f06f 030f 	mvn.w	r3, #15
 8013b98:	e095      	b.n	8013cc6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d109      	bne.n	8013bb4 <udp_sendto_if_src+0x90>
 8013ba0:	4b4b      	ldr	r3, [pc, #300]	; (8013cd0 <udp_sendto_if_src+0x1ac>)
 8013ba2:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013ba6:	4950      	ldr	r1, [pc, #320]	; (8013ce8 <udp_sendto_if_src+0x1c4>)
 8013ba8:	484b      	ldr	r0, [pc, #300]	; (8013cd8 <udp_sendto_if_src+0x1b4>)
 8013baa:	f002 ff77 	bl	8016a9c <iprintf>
 8013bae:	f06f 030f 	mvn.w	r3, #15
 8013bb2:	e088      	b.n	8013cc6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	8a5b      	ldrh	r3, [r3, #18]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d10f      	bne.n	8013bdc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013bbc:	68f9      	ldr	r1, [r7, #12]
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	8a5b      	ldrh	r3, [r3, #18]
 8013bc2:	461a      	mov	r2, r3
 8013bc4:	68f8      	ldr	r0, [r7, #12]
 8013bc6:	f000 f893 	bl	8013cf0 <udp_bind>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013bce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d002      	beq.n	8013bdc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013bd6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013bda:	e074      	b.n	8013cc6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	891b      	ldrh	r3, [r3, #8]
 8013be0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d902      	bls.n	8013bee <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bec:	e06b      	b.n	8013cc6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013bee:	2108      	movs	r1, #8
 8013bf0:	68b8      	ldr	r0, [r7, #8]
 8013bf2:	f7f9 feb9 	bl	800d968 <pbuf_add_header>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d015      	beq.n	8013c28 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013bfc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c00:	2108      	movs	r1, #8
 8013c02:	2022      	movs	r0, #34	; 0x22
 8013c04:	f7f9 fc5e 	bl	800d4c4 <pbuf_alloc>
 8013c08:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013c0a:	69fb      	ldr	r3, [r7, #28]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d102      	bne.n	8013c16 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c14:	e057      	b.n	8013cc6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	891b      	ldrh	r3, [r3, #8]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d006      	beq.n	8013c2c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013c1e:	68b9      	ldr	r1, [r7, #8]
 8013c20:	69f8      	ldr	r0, [r7, #28]
 8013c22:	f7fa f85b 	bl	800dcdc <pbuf_chain>
 8013c26:	e001      	b.n	8013c2c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013c2c:	69fb      	ldr	r3, [r7, #28]
 8013c2e:	895b      	ldrh	r3, [r3, #10]
 8013c30:	2b07      	cmp	r3, #7
 8013c32:	d806      	bhi.n	8013c42 <udp_sendto_if_src+0x11e>
 8013c34:	4b26      	ldr	r3, [pc, #152]	; (8013cd0 <udp_sendto_if_src+0x1ac>)
 8013c36:	f240 320d 	movw	r2, #781	; 0x30d
 8013c3a:	492c      	ldr	r1, [pc, #176]	; (8013cec <udp_sendto_if_src+0x1c8>)
 8013c3c:	4826      	ldr	r0, [pc, #152]	; (8013cd8 <udp_sendto_if_src+0x1b4>)
 8013c3e:	f002 ff2d 	bl	8016a9c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013c42:	69fb      	ldr	r3, [r7, #28]
 8013c44:	685b      	ldr	r3, [r3, #4]
 8013c46:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	8a5b      	ldrh	r3, [r3, #18]
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7f8 f98f 	bl	800bf70 <lwip_htons>
 8013c52:	4603      	mov	r3, r0
 8013c54:	461a      	mov	r2, r3
 8013c56:	697b      	ldr	r3, [r7, #20]
 8013c58:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013c5a:	887b      	ldrh	r3, [r7, #2]
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f7f8 f987 	bl	800bf70 <lwip_htons>
 8013c62:	4603      	mov	r3, r0
 8013c64:	461a      	mov	r2, r3
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013c6a:	697b      	ldr	r3, [r7, #20]
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	719a      	strb	r2, [r3, #6]
 8013c70:	2200      	movs	r2, #0
 8013c72:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013c74:	69fb      	ldr	r3, [r7, #28]
 8013c76:	891b      	ldrh	r3, [r3, #8]
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7f8 f979 	bl	800bf70 <lwip_htons>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	461a      	mov	r2, r3
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013c86:	2311      	movs	r3, #17
 8013c88:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	7adb      	ldrb	r3, [r3, #11]
 8013c8e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	7a9b      	ldrb	r3, [r3, #10]
 8013c94:	7cb9      	ldrb	r1, [r7, #18]
 8013c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c98:	9202      	str	r2, [sp, #8]
 8013c9a:	7cfa      	ldrb	r2, [r7, #19]
 8013c9c:	9201      	str	r2, [sp, #4]
 8013c9e:	9300      	str	r3, [sp, #0]
 8013ca0:	460b      	mov	r3, r1
 8013ca2:	687a      	ldr	r2, [r7, #4]
 8013ca4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ca6:	69f8      	ldr	r0, [r7, #28]
 8013ca8:	f001 fc48 	bl	801553c <ip4_output_if_src>
 8013cac:	4603      	mov	r3, r0
 8013cae:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013cb0:	69fa      	ldr	r2, [r7, #28]
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d004      	beq.n	8013cc2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013cb8:	69f8      	ldr	r0, [r7, #28]
 8013cba:	f7f9 feeb 	bl	800da94 <pbuf_free>
    q = NULL;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013cc2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	3720      	adds	r7, #32
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}
 8013cce:	bf00      	nop
 8013cd0:	08019ae0 	.word	0x08019ae0
 8013cd4:	08019ccc 	.word	0x08019ccc
 8013cd8:	08019b34 	.word	0x08019b34
 8013cdc:	08019cec 	.word	0x08019cec
 8013ce0:	08019d0c 	.word	0x08019d0c
 8013ce4:	08019d30 	.word	0x08019d30
 8013ce8:	08019d54 	.word	0x08019d54
 8013cec:	08019d78 	.word	0x08019d78

08013cf0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b086      	sub	sp, #24
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	60f8      	str	r0, [r7, #12]
 8013cf8:	60b9      	str	r1, [r7, #8]
 8013cfa:	4613      	mov	r3, r2
 8013cfc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d101      	bne.n	8013d08 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013d04:	4b39      	ldr	r3, [pc, #228]	; (8013dec <udp_bind+0xfc>)
 8013d06:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d109      	bne.n	8013d22 <udp_bind+0x32>
 8013d0e:	4b38      	ldr	r3, [pc, #224]	; (8013df0 <udp_bind+0x100>)
 8013d10:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013d14:	4937      	ldr	r1, [pc, #220]	; (8013df4 <udp_bind+0x104>)
 8013d16:	4838      	ldr	r0, [pc, #224]	; (8013df8 <udp_bind+0x108>)
 8013d18:	f002 fec0 	bl	8016a9c <iprintf>
 8013d1c:	f06f 030f 	mvn.w	r3, #15
 8013d20:	e060      	b.n	8013de4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013d22:	2300      	movs	r3, #0
 8013d24:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d26:	4b35      	ldr	r3, [pc, #212]	; (8013dfc <udp_bind+0x10c>)
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	617b      	str	r3, [r7, #20]
 8013d2c:	e009      	b.n	8013d42 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013d2e:	68fa      	ldr	r2, [r7, #12]
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d102      	bne.n	8013d3c <udp_bind+0x4c>
      rebind = 1;
 8013d36:	2301      	movs	r3, #1
 8013d38:	74fb      	strb	r3, [r7, #19]
      break;
 8013d3a:	e005      	b.n	8013d48 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	68db      	ldr	r3, [r3, #12]
 8013d40:	617b      	str	r3, [r7, #20]
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d1f2      	bne.n	8013d2e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013d48:	88fb      	ldrh	r3, [r7, #6]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d109      	bne.n	8013d62 <udp_bind+0x72>
    port = udp_new_port();
 8013d4e:	f7ff fc35 	bl	80135bc <udp_new_port>
 8013d52:	4603      	mov	r3, r0
 8013d54:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013d56:	88fb      	ldrh	r3, [r7, #6]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d12c      	bne.n	8013db6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013d5c:	f06f 0307 	mvn.w	r3, #7
 8013d60:	e040      	b.n	8013de4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d62:	4b26      	ldr	r3, [pc, #152]	; (8013dfc <udp_bind+0x10c>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	617b      	str	r3, [r7, #20]
 8013d68:	e022      	b.n	8013db0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013d6a:	68fa      	ldr	r2, [r7, #12]
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	d01b      	beq.n	8013daa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	8a5b      	ldrh	r3, [r3, #18]
 8013d76:	88fa      	ldrh	r2, [r7, #6]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d116      	bne.n	8013daa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013d7c:	697b      	ldr	r3, [r7, #20]
 8013d7e:	681a      	ldr	r2, [r3, #0]
 8013d80:	68bb      	ldr	r3, [r7, #8]
 8013d82:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d00d      	beq.n	8013da4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013d88:	68bb      	ldr	r3, [r7, #8]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d00a      	beq.n	8013da4 <udp_bind+0xb4>
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d006      	beq.n	8013da4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013d96:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d003      	beq.n	8013da4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d102      	bne.n	8013daa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013da4:	f06f 0307 	mvn.w	r3, #7
 8013da8:	e01c      	b.n	8013de4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	68db      	ldr	r3, [r3, #12]
 8013dae:	617b      	str	r3, [r7, #20]
 8013db0:	697b      	ldr	r3, [r7, #20]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d1d9      	bne.n	8013d6a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013db6:	68bb      	ldr	r3, [r7, #8]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d002      	beq.n	8013dc2 <udp_bind+0xd2>
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	e000      	b.n	8013dc4 <udp_bind+0xd4>
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	68fa      	ldr	r2, [r7, #12]
 8013dc6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	88fa      	ldrh	r2, [r7, #6]
 8013dcc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013dce:	7cfb      	ldrb	r3, [r7, #19]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d106      	bne.n	8013de2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013dd4:	4b09      	ldr	r3, [pc, #36]	; (8013dfc <udp_bind+0x10c>)
 8013dd6:	681a      	ldr	r2, [r3, #0]
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013ddc:	4a07      	ldr	r2, [pc, #28]	; (8013dfc <udp_bind+0x10c>)
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013de2:	2300      	movs	r3, #0
}
 8013de4:	4618      	mov	r0, r3
 8013de6:	3718      	adds	r7, #24
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}
 8013dec:	0801a65c 	.word	0x0801a65c
 8013df0:	08019ae0 	.word	0x08019ae0
 8013df4:	08019da8 	.word	0x08019da8
 8013df8:	08019b34 	.word	0x08019b34
 8013dfc:	2406b478 	.word	0x2406b478

08013e00 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b086      	sub	sp, #24
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	60f8      	str	r0, [r7, #12]
 8013e08:	60b9      	str	r1, [r7, #8]
 8013e0a:	4613      	mov	r3, r2
 8013e0c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d109      	bne.n	8013e28 <udp_connect+0x28>
 8013e14:	4b2c      	ldr	r3, [pc, #176]	; (8013ec8 <udp_connect+0xc8>)
 8013e16:	f240 4235 	movw	r2, #1077	; 0x435
 8013e1a:	492c      	ldr	r1, [pc, #176]	; (8013ecc <udp_connect+0xcc>)
 8013e1c:	482c      	ldr	r0, [pc, #176]	; (8013ed0 <udp_connect+0xd0>)
 8013e1e:	f002 fe3d 	bl	8016a9c <iprintf>
 8013e22:	f06f 030f 	mvn.w	r3, #15
 8013e26:	e04b      	b.n	8013ec0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d109      	bne.n	8013e42 <udp_connect+0x42>
 8013e2e:	4b26      	ldr	r3, [pc, #152]	; (8013ec8 <udp_connect+0xc8>)
 8013e30:	f240 4236 	movw	r2, #1078	; 0x436
 8013e34:	4927      	ldr	r1, [pc, #156]	; (8013ed4 <udp_connect+0xd4>)
 8013e36:	4826      	ldr	r0, [pc, #152]	; (8013ed0 <udp_connect+0xd0>)
 8013e38:	f002 fe30 	bl	8016a9c <iprintf>
 8013e3c:	f06f 030f 	mvn.w	r3, #15
 8013e40:	e03e      	b.n	8013ec0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	8a5b      	ldrh	r3, [r3, #18]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d10f      	bne.n	8013e6a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013e4a:	68f9      	ldr	r1, [r7, #12]
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	8a5b      	ldrh	r3, [r3, #18]
 8013e50:	461a      	mov	r2, r3
 8013e52:	68f8      	ldr	r0, [r7, #12]
 8013e54:	f7ff ff4c 	bl	8013cf0 <udp_bind>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013e5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d002      	beq.n	8013e6a <udp_connect+0x6a>
      return err;
 8013e64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013e68:	e02a      	b.n	8013ec0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d002      	beq.n	8013e76 <udp_connect+0x76>
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	e000      	b.n	8013e78 <udp_connect+0x78>
 8013e76:	2300      	movs	r3, #0
 8013e78:	68fa      	ldr	r2, [r7, #12]
 8013e7a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	88fa      	ldrh	r2, [r7, #6]
 8013e80:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	7c1b      	ldrb	r3, [r3, #16]
 8013e86:	f043 0304 	orr.w	r3, r3, #4
 8013e8a:	b2da      	uxtb	r2, r3
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e90:	4b11      	ldr	r3, [pc, #68]	; (8013ed8 <udp_connect+0xd8>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	617b      	str	r3, [r7, #20]
 8013e96:	e008      	b.n	8013eaa <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013e98:	68fa      	ldr	r2, [r7, #12]
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d101      	bne.n	8013ea4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	e00d      	b.n	8013ec0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	68db      	ldr	r3, [r3, #12]
 8013ea8:	617b      	str	r3, [r7, #20]
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d1f3      	bne.n	8013e98 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013eb0:	4b09      	ldr	r3, [pc, #36]	; (8013ed8 <udp_connect+0xd8>)
 8013eb2:	681a      	ldr	r2, [r3, #0]
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013eb8:	4a07      	ldr	r2, [pc, #28]	; (8013ed8 <udp_connect+0xd8>)
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013ebe:	2300      	movs	r3, #0
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3718      	adds	r7, #24
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}
 8013ec8:	08019ae0 	.word	0x08019ae0
 8013ecc:	08019dc0 	.word	0x08019dc0
 8013ed0:	08019b34 	.word	0x08019b34
 8013ed4:	08019ddc 	.word	0x08019ddc
 8013ed8:	2406b478 	.word	0x2406b478

08013edc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013ee2:	2000      	movs	r0, #0
 8013ee4:	f7f8 fde4 	bl	800cab0 <memp_malloc>
 8013ee8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d007      	beq.n	8013f00 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013ef0:	2220      	movs	r2, #32
 8013ef2:	2100      	movs	r1, #0
 8013ef4:	6878      	ldr	r0, [r7, #4]
 8013ef6:	f002 fd6e 	bl	80169d6 <memset>
    pcb->ttl = UDP_TTL;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	22ff      	movs	r2, #255	; 0xff
 8013efe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013f00:	687b      	ldr	r3, [r7, #4]
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	3708      	adds	r7, #8
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
	...

08013f0c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b085      	sub	sp, #20
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d01e      	beq.n	8013f5a <udp_netif_ip_addr_changed+0x4e>
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d01a      	beq.n	8013f5a <udp_netif_ip_addr_changed+0x4e>
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d017      	beq.n	8013f5a <udp_netif_ip_addr_changed+0x4e>
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d013      	beq.n	8013f5a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013f32:	4b0d      	ldr	r3, [pc, #52]	; (8013f68 <udp_netif_ip_addr_changed+0x5c>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	60fb      	str	r3, [r7, #12]
 8013f38:	e00c      	b.n	8013f54 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	681a      	ldr	r2, [r3, #0]
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	429a      	cmp	r2, r3
 8013f44:	d103      	bne.n	8013f4e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	681a      	ldr	r2, [r3, #0]
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	68db      	ldr	r3, [r3, #12]
 8013f52:	60fb      	str	r3, [r7, #12]
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d1ef      	bne.n	8013f3a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013f5a:	bf00      	nop
 8013f5c:	3714      	adds	r7, #20
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f64:	4770      	bx	lr
 8013f66:	bf00      	nop
 8013f68:	2406b478 	.word	0x2406b478

08013f6c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013f74:	4915      	ldr	r1, [pc, #84]	; (8013fcc <etharp_free_entry+0x60>)
 8013f76:	687a      	ldr	r2, [r7, #4]
 8013f78:	4613      	mov	r3, r2
 8013f7a:	005b      	lsls	r3, r3, #1
 8013f7c:	4413      	add	r3, r2
 8013f7e:	00db      	lsls	r3, r3, #3
 8013f80:	440b      	add	r3, r1
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d013      	beq.n	8013fb0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013f88:	4910      	ldr	r1, [pc, #64]	; (8013fcc <etharp_free_entry+0x60>)
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	005b      	lsls	r3, r3, #1
 8013f90:	4413      	add	r3, r2
 8013f92:	00db      	lsls	r3, r3, #3
 8013f94:	440b      	add	r3, r1
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7f9 fd7b 	bl	800da94 <pbuf_free>
    arp_table[i].q = NULL;
 8013f9e:	490b      	ldr	r1, [pc, #44]	; (8013fcc <etharp_free_entry+0x60>)
 8013fa0:	687a      	ldr	r2, [r7, #4]
 8013fa2:	4613      	mov	r3, r2
 8013fa4:	005b      	lsls	r3, r3, #1
 8013fa6:	4413      	add	r3, r2
 8013fa8:	00db      	lsls	r3, r3, #3
 8013faa:	440b      	add	r3, r1
 8013fac:	2200      	movs	r2, #0
 8013fae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013fb0:	4906      	ldr	r1, [pc, #24]	; (8013fcc <etharp_free_entry+0x60>)
 8013fb2:	687a      	ldr	r2, [r7, #4]
 8013fb4:	4613      	mov	r3, r2
 8013fb6:	005b      	lsls	r3, r3, #1
 8013fb8:	4413      	add	r3, r2
 8013fba:	00db      	lsls	r3, r3, #3
 8013fbc:	440b      	add	r3, r1
 8013fbe:	3314      	adds	r3, #20
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013fc4:	bf00      	nop
 8013fc6:	3708      	adds	r7, #8
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}
 8013fcc:	24064560 	.word	0x24064560

08013fd0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	607b      	str	r3, [r7, #4]
 8013fda:	e096      	b.n	801410a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013fdc:	494f      	ldr	r1, [pc, #316]	; (801411c <etharp_tmr+0x14c>)
 8013fde:	687a      	ldr	r2, [r7, #4]
 8013fe0:	4613      	mov	r3, r2
 8013fe2:	005b      	lsls	r3, r3, #1
 8013fe4:	4413      	add	r3, r2
 8013fe6:	00db      	lsls	r3, r3, #3
 8013fe8:	440b      	add	r3, r1
 8013fea:	3314      	adds	r3, #20
 8013fec:	781b      	ldrb	r3, [r3, #0]
 8013fee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013ff0:	78fb      	ldrb	r3, [r7, #3]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	f000 8086 	beq.w	8014104 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013ff8:	4948      	ldr	r1, [pc, #288]	; (801411c <etharp_tmr+0x14c>)
 8013ffa:	687a      	ldr	r2, [r7, #4]
 8013ffc:	4613      	mov	r3, r2
 8013ffe:	005b      	lsls	r3, r3, #1
 8014000:	4413      	add	r3, r2
 8014002:	00db      	lsls	r3, r3, #3
 8014004:	440b      	add	r3, r1
 8014006:	3312      	adds	r3, #18
 8014008:	881b      	ldrh	r3, [r3, #0]
 801400a:	3301      	adds	r3, #1
 801400c:	b298      	uxth	r0, r3
 801400e:	4943      	ldr	r1, [pc, #268]	; (801411c <etharp_tmr+0x14c>)
 8014010:	687a      	ldr	r2, [r7, #4]
 8014012:	4613      	mov	r3, r2
 8014014:	005b      	lsls	r3, r3, #1
 8014016:	4413      	add	r3, r2
 8014018:	00db      	lsls	r3, r3, #3
 801401a:	440b      	add	r3, r1
 801401c:	3312      	adds	r3, #18
 801401e:	4602      	mov	r2, r0
 8014020:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014022:	493e      	ldr	r1, [pc, #248]	; (801411c <etharp_tmr+0x14c>)
 8014024:	687a      	ldr	r2, [r7, #4]
 8014026:	4613      	mov	r3, r2
 8014028:	005b      	lsls	r3, r3, #1
 801402a:	4413      	add	r3, r2
 801402c:	00db      	lsls	r3, r3, #3
 801402e:	440b      	add	r3, r1
 8014030:	3312      	adds	r3, #18
 8014032:	881b      	ldrh	r3, [r3, #0]
 8014034:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014038:	d215      	bcs.n	8014066 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801403a:	4938      	ldr	r1, [pc, #224]	; (801411c <etharp_tmr+0x14c>)
 801403c:	687a      	ldr	r2, [r7, #4]
 801403e:	4613      	mov	r3, r2
 8014040:	005b      	lsls	r3, r3, #1
 8014042:	4413      	add	r3, r2
 8014044:	00db      	lsls	r3, r3, #3
 8014046:	440b      	add	r3, r1
 8014048:	3314      	adds	r3, #20
 801404a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801404c:	2b01      	cmp	r3, #1
 801404e:	d10e      	bne.n	801406e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014050:	4932      	ldr	r1, [pc, #200]	; (801411c <etharp_tmr+0x14c>)
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	4613      	mov	r3, r2
 8014056:	005b      	lsls	r3, r3, #1
 8014058:	4413      	add	r3, r2
 801405a:	00db      	lsls	r3, r3, #3
 801405c:	440b      	add	r3, r1
 801405e:	3312      	adds	r3, #18
 8014060:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014062:	2b04      	cmp	r3, #4
 8014064:	d903      	bls.n	801406e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f7ff ff80 	bl	8013f6c <etharp_free_entry>
 801406c:	e04a      	b.n	8014104 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801406e:	492b      	ldr	r1, [pc, #172]	; (801411c <etharp_tmr+0x14c>)
 8014070:	687a      	ldr	r2, [r7, #4]
 8014072:	4613      	mov	r3, r2
 8014074:	005b      	lsls	r3, r3, #1
 8014076:	4413      	add	r3, r2
 8014078:	00db      	lsls	r3, r3, #3
 801407a:	440b      	add	r3, r1
 801407c:	3314      	adds	r3, #20
 801407e:	781b      	ldrb	r3, [r3, #0]
 8014080:	2b03      	cmp	r3, #3
 8014082:	d10a      	bne.n	801409a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014084:	4925      	ldr	r1, [pc, #148]	; (801411c <etharp_tmr+0x14c>)
 8014086:	687a      	ldr	r2, [r7, #4]
 8014088:	4613      	mov	r3, r2
 801408a:	005b      	lsls	r3, r3, #1
 801408c:	4413      	add	r3, r2
 801408e:	00db      	lsls	r3, r3, #3
 8014090:	440b      	add	r3, r1
 8014092:	3314      	adds	r3, #20
 8014094:	2204      	movs	r2, #4
 8014096:	701a      	strb	r2, [r3, #0]
 8014098:	e034      	b.n	8014104 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801409a:	4920      	ldr	r1, [pc, #128]	; (801411c <etharp_tmr+0x14c>)
 801409c:	687a      	ldr	r2, [r7, #4]
 801409e:	4613      	mov	r3, r2
 80140a0:	005b      	lsls	r3, r3, #1
 80140a2:	4413      	add	r3, r2
 80140a4:	00db      	lsls	r3, r3, #3
 80140a6:	440b      	add	r3, r1
 80140a8:	3314      	adds	r3, #20
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	2b04      	cmp	r3, #4
 80140ae:	d10a      	bne.n	80140c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80140b0:	491a      	ldr	r1, [pc, #104]	; (801411c <etharp_tmr+0x14c>)
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	4613      	mov	r3, r2
 80140b6:	005b      	lsls	r3, r3, #1
 80140b8:	4413      	add	r3, r2
 80140ba:	00db      	lsls	r3, r3, #3
 80140bc:	440b      	add	r3, r1
 80140be:	3314      	adds	r3, #20
 80140c0:	2202      	movs	r2, #2
 80140c2:	701a      	strb	r2, [r3, #0]
 80140c4:	e01e      	b.n	8014104 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80140c6:	4915      	ldr	r1, [pc, #84]	; (801411c <etharp_tmr+0x14c>)
 80140c8:	687a      	ldr	r2, [r7, #4]
 80140ca:	4613      	mov	r3, r2
 80140cc:	005b      	lsls	r3, r3, #1
 80140ce:	4413      	add	r3, r2
 80140d0:	00db      	lsls	r3, r3, #3
 80140d2:	440b      	add	r3, r1
 80140d4:	3314      	adds	r3, #20
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	2b01      	cmp	r3, #1
 80140da:	d113      	bne.n	8014104 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80140dc:	490f      	ldr	r1, [pc, #60]	; (801411c <etharp_tmr+0x14c>)
 80140de:	687a      	ldr	r2, [r7, #4]
 80140e0:	4613      	mov	r3, r2
 80140e2:	005b      	lsls	r3, r3, #1
 80140e4:	4413      	add	r3, r2
 80140e6:	00db      	lsls	r3, r3, #3
 80140e8:	440b      	add	r3, r1
 80140ea:	3308      	adds	r3, #8
 80140ec:	6818      	ldr	r0, [r3, #0]
 80140ee:	687a      	ldr	r2, [r7, #4]
 80140f0:	4613      	mov	r3, r2
 80140f2:	005b      	lsls	r3, r3, #1
 80140f4:	4413      	add	r3, r2
 80140f6:	00db      	lsls	r3, r3, #3
 80140f8:	4a08      	ldr	r2, [pc, #32]	; (801411c <etharp_tmr+0x14c>)
 80140fa:	4413      	add	r3, r2
 80140fc:	3304      	adds	r3, #4
 80140fe:	4619      	mov	r1, r3
 8014100:	f000 fe6e 	bl	8014de0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	3301      	adds	r3, #1
 8014108:	607b      	str	r3, [r7, #4]
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	2b09      	cmp	r3, #9
 801410e:	f77f af65 	ble.w	8013fdc <etharp_tmr+0xc>
      }
    }
  }
}
 8014112:	bf00      	nop
 8014114:	bf00      	nop
 8014116:	3708      	adds	r7, #8
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}
 801411c:	24064560 	.word	0x24064560

08014120 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b08a      	sub	sp, #40	; 0x28
 8014124:	af00      	add	r7, sp, #0
 8014126:	60f8      	str	r0, [r7, #12]
 8014128:	460b      	mov	r3, r1
 801412a:	607a      	str	r2, [r7, #4]
 801412c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801412e:	230a      	movs	r3, #10
 8014130:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014132:	230a      	movs	r3, #10
 8014134:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014136:	230a      	movs	r3, #10
 8014138:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801413a:	2300      	movs	r3, #0
 801413c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801413e:	230a      	movs	r3, #10
 8014140:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014142:	2300      	movs	r3, #0
 8014144:	83bb      	strh	r3, [r7, #28]
 8014146:	2300      	movs	r3, #0
 8014148:	837b      	strh	r3, [r7, #26]
 801414a:	2300      	movs	r3, #0
 801414c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801414e:	2300      	movs	r3, #0
 8014150:	843b      	strh	r3, [r7, #32]
 8014152:	e0ae      	b.n	80142b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014154:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014158:	49a6      	ldr	r1, [pc, #664]	; (80143f4 <etharp_find_entry+0x2d4>)
 801415a:	4613      	mov	r3, r2
 801415c:	005b      	lsls	r3, r3, #1
 801415e:	4413      	add	r3, r2
 8014160:	00db      	lsls	r3, r3, #3
 8014162:	440b      	add	r3, r1
 8014164:	3314      	adds	r3, #20
 8014166:	781b      	ldrb	r3, [r3, #0]
 8014168:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801416a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801416e:	2b0a      	cmp	r3, #10
 8014170:	d105      	bne.n	801417e <etharp_find_entry+0x5e>
 8014172:	7dfb      	ldrb	r3, [r7, #23]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d102      	bne.n	801417e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014178:	8c3b      	ldrh	r3, [r7, #32]
 801417a:	847b      	strh	r3, [r7, #34]	; 0x22
 801417c:	e095      	b.n	80142aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801417e:	7dfb      	ldrb	r3, [r7, #23]
 8014180:	2b00      	cmp	r3, #0
 8014182:	f000 8092 	beq.w	80142aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014186:	7dfb      	ldrb	r3, [r7, #23]
 8014188:	2b01      	cmp	r3, #1
 801418a:	d009      	beq.n	80141a0 <etharp_find_entry+0x80>
 801418c:	7dfb      	ldrb	r3, [r7, #23]
 801418e:	2b01      	cmp	r3, #1
 8014190:	d806      	bhi.n	80141a0 <etharp_find_entry+0x80>
 8014192:	4b99      	ldr	r3, [pc, #612]	; (80143f8 <etharp_find_entry+0x2d8>)
 8014194:	f240 1223 	movw	r2, #291	; 0x123
 8014198:	4998      	ldr	r1, [pc, #608]	; (80143fc <etharp_find_entry+0x2dc>)
 801419a:	4899      	ldr	r0, [pc, #612]	; (8014400 <etharp_find_entry+0x2e0>)
 801419c:	f002 fc7e 	bl	8016a9c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d020      	beq.n	80141e8 <etharp_find_entry+0xc8>
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	6819      	ldr	r1, [r3, #0]
 80141aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141ae:	4891      	ldr	r0, [pc, #580]	; (80143f4 <etharp_find_entry+0x2d4>)
 80141b0:	4613      	mov	r3, r2
 80141b2:	005b      	lsls	r3, r3, #1
 80141b4:	4413      	add	r3, r2
 80141b6:	00db      	lsls	r3, r3, #3
 80141b8:	4403      	add	r3, r0
 80141ba:	3304      	adds	r3, #4
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	4299      	cmp	r1, r3
 80141c0:	d112      	bne.n	80141e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d00c      	beq.n	80141e2 <etharp_find_entry+0xc2>
 80141c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141cc:	4989      	ldr	r1, [pc, #548]	; (80143f4 <etharp_find_entry+0x2d4>)
 80141ce:	4613      	mov	r3, r2
 80141d0:	005b      	lsls	r3, r3, #1
 80141d2:	4413      	add	r3, r2
 80141d4:	00db      	lsls	r3, r3, #3
 80141d6:	440b      	add	r3, r1
 80141d8:	3308      	adds	r3, #8
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	687a      	ldr	r2, [r7, #4]
 80141de:	429a      	cmp	r2, r3
 80141e0:	d102      	bne.n	80141e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80141e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141e6:	e100      	b.n	80143ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80141e8:	7dfb      	ldrb	r3, [r7, #23]
 80141ea:	2b01      	cmp	r3, #1
 80141ec:	d140      	bne.n	8014270 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80141ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141f2:	4980      	ldr	r1, [pc, #512]	; (80143f4 <etharp_find_entry+0x2d4>)
 80141f4:	4613      	mov	r3, r2
 80141f6:	005b      	lsls	r3, r3, #1
 80141f8:	4413      	add	r3, r2
 80141fa:	00db      	lsls	r3, r3, #3
 80141fc:	440b      	add	r3, r1
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d01a      	beq.n	801423a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014204:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014208:	497a      	ldr	r1, [pc, #488]	; (80143f4 <etharp_find_entry+0x2d4>)
 801420a:	4613      	mov	r3, r2
 801420c:	005b      	lsls	r3, r3, #1
 801420e:	4413      	add	r3, r2
 8014210:	00db      	lsls	r3, r3, #3
 8014212:	440b      	add	r3, r1
 8014214:	3312      	adds	r3, #18
 8014216:	881b      	ldrh	r3, [r3, #0]
 8014218:	8bba      	ldrh	r2, [r7, #28]
 801421a:	429a      	cmp	r2, r3
 801421c:	d845      	bhi.n	80142aa <etharp_find_entry+0x18a>
            old_queue = i;
 801421e:	8c3b      	ldrh	r3, [r7, #32]
 8014220:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014222:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014226:	4973      	ldr	r1, [pc, #460]	; (80143f4 <etharp_find_entry+0x2d4>)
 8014228:	4613      	mov	r3, r2
 801422a:	005b      	lsls	r3, r3, #1
 801422c:	4413      	add	r3, r2
 801422e:	00db      	lsls	r3, r3, #3
 8014230:	440b      	add	r3, r1
 8014232:	3312      	adds	r3, #18
 8014234:	881b      	ldrh	r3, [r3, #0]
 8014236:	83bb      	strh	r3, [r7, #28]
 8014238:	e037      	b.n	80142aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801423a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801423e:	496d      	ldr	r1, [pc, #436]	; (80143f4 <etharp_find_entry+0x2d4>)
 8014240:	4613      	mov	r3, r2
 8014242:	005b      	lsls	r3, r3, #1
 8014244:	4413      	add	r3, r2
 8014246:	00db      	lsls	r3, r3, #3
 8014248:	440b      	add	r3, r1
 801424a:	3312      	adds	r3, #18
 801424c:	881b      	ldrh	r3, [r3, #0]
 801424e:	8b7a      	ldrh	r2, [r7, #26]
 8014250:	429a      	cmp	r2, r3
 8014252:	d82a      	bhi.n	80142aa <etharp_find_entry+0x18a>
            old_pending = i;
 8014254:	8c3b      	ldrh	r3, [r7, #32]
 8014256:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014258:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801425c:	4965      	ldr	r1, [pc, #404]	; (80143f4 <etharp_find_entry+0x2d4>)
 801425e:	4613      	mov	r3, r2
 8014260:	005b      	lsls	r3, r3, #1
 8014262:	4413      	add	r3, r2
 8014264:	00db      	lsls	r3, r3, #3
 8014266:	440b      	add	r3, r1
 8014268:	3312      	adds	r3, #18
 801426a:	881b      	ldrh	r3, [r3, #0]
 801426c:	837b      	strh	r3, [r7, #26]
 801426e:	e01c      	b.n	80142aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014270:	7dfb      	ldrb	r3, [r7, #23]
 8014272:	2b01      	cmp	r3, #1
 8014274:	d919      	bls.n	80142aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014276:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801427a:	495e      	ldr	r1, [pc, #376]	; (80143f4 <etharp_find_entry+0x2d4>)
 801427c:	4613      	mov	r3, r2
 801427e:	005b      	lsls	r3, r3, #1
 8014280:	4413      	add	r3, r2
 8014282:	00db      	lsls	r3, r3, #3
 8014284:	440b      	add	r3, r1
 8014286:	3312      	adds	r3, #18
 8014288:	881b      	ldrh	r3, [r3, #0]
 801428a:	8b3a      	ldrh	r2, [r7, #24]
 801428c:	429a      	cmp	r2, r3
 801428e:	d80c      	bhi.n	80142aa <etharp_find_entry+0x18a>
            old_stable = i;
 8014290:	8c3b      	ldrh	r3, [r7, #32]
 8014292:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014294:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014298:	4956      	ldr	r1, [pc, #344]	; (80143f4 <etharp_find_entry+0x2d4>)
 801429a:	4613      	mov	r3, r2
 801429c:	005b      	lsls	r3, r3, #1
 801429e:	4413      	add	r3, r2
 80142a0:	00db      	lsls	r3, r3, #3
 80142a2:	440b      	add	r3, r1
 80142a4:	3312      	adds	r3, #18
 80142a6:	881b      	ldrh	r3, [r3, #0]
 80142a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142aa:	8c3b      	ldrh	r3, [r7, #32]
 80142ac:	3301      	adds	r3, #1
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	843b      	strh	r3, [r7, #32]
 80142b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80142b6:	2b09      	cmp	r3, #9
 80142b8:	f77f af4c 	ble.w	8014154 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80142bc:	7afb      	ldrb	r3, [r7, #11]
 80142be:	f003 0302 	and.w	r3, r3, #2
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d108      	bne.n	80142d8 <etharp_find_entry+0x1b8>
 80142c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80142ca:	2b0a      	cmp	r3, #10
 80142cc:	d107      	bne.n	80142de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80142ce:	7afb      	ldrb	r3, [r7, #11]
 80142d0:	f003 0301 	and.w	r3, r3, #1
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d102      	bne.n	80142de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80142d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142dc:	e085      	b.n	80143ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80142de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80142e2:	2b09      	cmp	r3, #9
 80142e4:	dc02      	bgt.n	80142ec <etharp_find_entry+0x1cc>
    i = empty;
 80142e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80142e8:	843b      	strh	r3, [r7, #32]
 80142ea:	e039      	b.n	8014360 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80142ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80142f0:	2b09      	cmp	r3, #9
 80142f2:	dc14      	bgt.n	801431e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80142f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80142f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80142f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142fc:	493d      	ldr	r1, [pc, #244]	; (80143f4 <etharp_find_entry+0x2d4>)
 80142fe:	4613      	mov	r3, r2
 8014300:	005b      	lsls	r3, r3, #1
 8014302:	4413      	add	r3, r2
 8014304:	00db      	lsls	r3, r3, #3
 8014306:	440b      	add	r3, r1
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d018      	beq.n	8014340 <etharp_find_entry+0x220>
 801430e:	4b3a      	ldr	r3, [pc, #232]	; (80143f8 <etharp_find_entry+0x2d8>)
 8014310:	f240 126d 	movw	r2, #365	; 0x16d
 8014314:	493b      	ldr	r1, [pc, #236]	; (8014404 <etharp_find_entry+0x2e4>)
 8014316:	483a      	ldr	r0, [pc, #232]	; (8014400 <etharp_find_entry+0x2e0>)
 8014318:	f002 fbc0 	bl	8016a9c <iprintf>
 801431c:	e010      	b.n	8014340 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801431e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014322:	2b09      	cmp	r3, #9
 8014324:	dc02      	bgt.n	801432c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014326:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014328:	843b      	strh	r3, [r7, #32]
 801432a:	e009      	b.n	8014340 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801432c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014330:	2b09      	cmp	r3, #9
 8014332:	dc02      	bgt.n	801433a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014334:	8bfb      	ldrh	r3, [r7, #30]
 8014336:	843b      	strh	r3, [r7, #32]
 8014338:	e002      	b.n	8014340 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801433a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801433e:	e054      	b.n	80143ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014340:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014344:	2b09      	cmp	r3, #9
 8014346:	dd06      	ble.n	8014356 <etharp_find_entry+0x236>
 8014348:	4b2b      	ldr	r3, [pc, #172]	; (80143f8 <etharp_find_entry+0x2d8>)
 801434a:	f240 127f 	movw	r2, #383	; 0x17f
 801434e:	492e      	ldr	r1, [pc, #184]	; (8014408 <etharp_find_entry+0x2e8>)
 8014350:	482b      	ldr	r0, [pc, #172]	; (8014400 <etharp_find_entry+0x2e0>)
 8014352:	f002 fba3 	bl	8016a9c <iprintf>
    etharp_free_entry(i);
 8014356:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801435a:	4618      	mov	r0, r3
 801435c:	f7ff fe06 	bl	8013f6c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014360:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014364:	2b09      	cmp	r3, #9
 8014366:	dd06      	ble.n	8014376 <etharp_find_entry+0x256>
 8014368:	4b23      	ldr	r3, [pc, #140]	; (80143f8 <etharp_find_entry+0x2d8>)
 801436a:	f240 1283 	movw	r2, #387	; 0x183
 801436e:	4926      	ldr	r1, [pc, #152]	; (8014408 <etharp_find_entry+0x2e8>)
 8014370:	4823      	ldr	r0, [pc, #140]	; (8014400 <etharp_find_entry+0x2e0>)
 8014372:	f002 fb93 	bl	8016a9c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014376:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801437a:	491e      	ldr	r1, [pc, #120]	; (80143f4 <etharp_find_entry+0x2d4>)
 801437c:	4613      	mov	r3, r2
 801437e:	005b      	lsls	r3, r3, #1
 8014380:	4413      	add	r3, r2
 8014382:	00db      	lsls	r3, r3, #3
 8014384:	440b      	add	r3, r1
 8014386:	3314      	adds	r3, #20
 8014388:	781b      	ldrb	r3, [r3, #0]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d006      	beq.n	801439c <etharp_find_entry+0x27c>
 801438e:	4b1a      	ldr	r3, [pc, #104]	; (80143f8 <etharp_find_entry+0x2d8>)
 8014390:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014394:	491d      	ldr	r1, [pc, #116]	; (801440c <etharp_find_entry+0x2ec>)
 8014396:	481a      	ldr	r0, [pc, #104]	; (8014400 <etharp_find_entry+0x2e0>)
 8014398:	f002 fb80 	bl	8016a9c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d00b      	beq.n	80143ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80143a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	6819      	ldr	r1, [r3, #0]
 80143aa:	4812      	ldr	r0, [pc, #72]	; (80143f4 <etharp_find_entry+0x2d4>)
 80143ac:	4613      	mov	r3, r2
 80143ae:	005b      	lsls	r3, r3, #1
 80143b0:	4413      	add	r3, r2
 80143b2:	00db      	lsls	r3, r3, #3
 80143b4:	4403      	add	r3, r0
 80143b6:	3304      	adds	r3, #4
 80143b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80143ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143be:	490d      	ldr	r1, [pc, #52]	; (80143f4 <etharp_find_entry+0x2d4>)
 80143c0:	4613      	mov	r3, r2
 80143c2:	005b      	lsls	r3, r3, #1
 80143c4:	4413      	add	r3, r2
 80143c6:	00db      	lsls	r3, r3, #3
 80143c8:	440b      	add	r3, r1
 80143ca:	3312      	adds	r3, #18
 80143cc:	2200      	movs	r2, #0
 80143ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80143d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143d4:	4907      	ldr	r1, [pc, #28]	; (80143f4 <etharp_find_entry+0x2d4>)
 80143d6:	4613      	mov	r3, r2
 80143d8:	005b      	lsls	r3, r3, #1
 80143da:	4413      	add	r3, r2
 80143dc:	00db      	lsls	r3, r3, #3
 80143de:	440b      	add	r3, r1
 80143e0:	3308      	adds	r3, #8
 80143e2:	687a      	ldr	r2, [r7, #4]
 80143e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80143e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3728      	adds	r7, #40	; 0x28
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}
 80143f2:	bf00      	nop
 80143f4:	24064560 	.word	0x24064560
 80143f8:	08019e44 	.word	0x08019e44
 80143fc:	08019e7c 	.word	0x08019e7c
 8014400:	08019ebc 	.word	0x08019ebc
 8014404:	08019ee4 	.word	0x08019ee4
 8014408:	08019efc 	.word	0x08019efc
 801440c:	08019f10 	.word	0x08019f10

08014410 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b088      	sub	sp, #32
 8014414:	af02      	add	r7, sp, #8
 8014416:	60f8      	str	r0, [r7, #12]
 8014418:	60b9      	str	r1, [r7, #8]
 801441a:	607a      	str	r2, [r7, #4]
 801441c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014424:	2b06      	cmp	r3, #6
 8014426:	d006      	beq.n	8014436 <etharp_update_arp_entry+0x26>
 8014428:	4b48      	ldr	r3, [pc, #288]	; (801454c <etharp_update_arp_entry+0x13c>)
 801442a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801442e:	4948      	ldr	r1, [pc, #288]	; (8014550 <etharp_update_arp_entry+0x140>)
 8014430:	4848      	ldr	r0, [pc, #288]	; (8014554 <etharp_update_arp_entry+0x144>)
 8014432:	f002 fb33 	bl	8016a9c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d012      	beq.n	8014462 <etharp_update_arp_entry+0x52>
 801443c:	68bb      	ldr	r3, [r7, #8]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d00e      	beq.n	8014462 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	68f9      	ldr	r1, [r7, #12]
 801444a:	4618      	mov	r0, r3
 801444c:	f001 f924 	bl	8015698 <ip4_addr_isbroadcast_u32>
 8014450:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014452:	2b00      	cmp	r3, #0
 8014454:	d105      	bne.n	8014462 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801445e:	2be0      	cmp	r3, #224	; 0xe0
 8014460:	d102      	bne.n	8014468 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014462:	f06f 030f 	mvn.w	r3, #15
 8014466:	e06c      	b.n	8014542 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014468:	78fb      	ldrb	r3, [r7, #3]
 801446a:	68fa      	ldr	r2, [r7, #12]
 801446c:	4619      	mov	r1, r3
 801446e:	68b8      	ldr	r0, [r7, #8]
 8014470:	f7ff fe56 	bl	8014120 <etharp_find_entry>
 8014474:	4603      	mov	r3, r0
 8014476:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014478:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801447c:	2b00      	cmp	r3, #0
 801447e:	da02      	bge.n	8014486 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014480:	8afb      	ldrh	r3, [r7, #22]
 8014482:	b25b      	sxtb	r3, r3
 8014484:	e05d      	b.n	8014542 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014486:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801448a:	4933      	ldr	r1, [pc, #204]	; (8014558 <etharp_update_arp_entry+0x148>)
 801448c:	4613      	mov	r3, r2
 801448e:	005b      	lsls	r3, r3, #1
 8014490:	4413      	add	r3, r2
 8014492:	00db      	lsls	r3, r3, #3
 8014494:	440b      	add	r3, r1
 8014496:	3314      	adds	r3, #20
 8014498:	2202      	movs	r2, #2
 801449a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801449c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144a0:	492d      	ldr	r1, [pc, #180]	; (8014558 <etharp_update_arp_entry+0x148>)
 80144a2:	4613      	mov	r3, r2
 80144a4:	005b      	lsls	r3, r3, #1
 80144a6:	4413      	add	r3, r2
 80144a8:	00db      	lsls	r3, r3, #3
 80144aa:	440b      	add	r3, r1
 80144ac:	3308      	adds	r3, #8
 80144ae:	68fa      	ldr	r2, [r7, #12]
 80144b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80144b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144b6:	4613      	mov	r3, r2
 80144b8:	005b      	lsls	r3, r3, #1
 80144ba:	4413      	add	r3, r2
 80144bc:	00db      	lsls	r3, r3, #3
 80144be:	3308      	adds	r3, #8
 80144c0:	4a25      	ldr	r2, [pc, #148]	; (8014558 <etharp_update_arp_entry+0x148>)
 80144c2:	4413      	add	r3, r2
 80144c4:	3304      	adds	r3, #4
 80144c6:	2206      	movs	r2, #6
 80144c8:	6879      	ldr	r1, [r7, #4]
 80144ca:	4618      	mov	r0, r3
 80144cc:	f002 fa75 	bl	80169ba <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80144d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144d4:	4920      	ldr	r1, [pc, #128]	; (8014558 <etharp_update_arp_entry+0x148>)
 80144d6:	4613      	mov	r3, r2
 80144d8:	005b      	lsls	r3, r3, #1
 80144da:	4413      	add	r3, r2
 80144dc:	00db      	lsls	r3, r3, #3
 80144de:	440b      	add	r3, r1
 80144e0:	3312      	adds	r3, #18
 80144e2:	2200      	movs	r2, #0
 80144e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80144e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144ea:	491b      	ldr	r1, [pc, #108]	; (8014558 <etharp_update_arp_entry+0x148>)
 80144ec:	4613      	mov	r3, r2
 80144ee:	005b      	lsls	r3, r3, #1
 80144f0:	4413      	add	r3, r2
 80144f2:	00db      	lsls	r3, r3, #3
 80144f4:	440b      	add	r3, r1
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d021      	beq.n	8014540 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80144fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014500:	4915      	ldr	r1, [pc, #84]	; (8014558 <etharp_update_arp_entry+0x148>)
 8014502:	4613      	mov	r3, r2
 8014504:	005b      	lsls	r3, r3, #1
 8014506:	4413      	add	r3, r2
 8014508:	00db      	lsls	r3, r3, #3
 801450a:	440b      	add	r3, r1
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014510:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014514:	4910      	ldr	r1, [pc, #64]	; (8014558 <etharp_update_arp_entry+0x148>)
 8014516:	4613      	mov	r3, r2
 8014518:	005b      	lsls	r3, r3, #1
 801451a:	4413      	add	r3, r2
 801451c:	00db      	lsls	r3, r3, #3
 801451e:	440b      	add	r3, r1
 8014520:	2200      	movs	r2, #0
 8014522:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801452a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801452e:	9300      	str	r3, [sp, #0]
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	6939      	ldr	r1, [r7, #16]
 8014534:	68f8      	ldr	r0, [r7, #12]
 8014536:	f001 ffb7 	bl	80164a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801453a:	6938      	ldr	r0, [r7, #16]
 801453c:	f7f9 faaa 	bl	800da94 <pbuf_free>
  }
  return ERR_OK;
 8014540:	2300      	movs	r3, #0
}
 8014542:	4618      	mov	r0, r3
 8014544:	3718      	adds	r7, #24
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}
 801454a:	bf00      	nop
 801454c:	08019e44 	.word	0x08019e44
 8014550:	08019f3c 	.word	0x08019f3c
 8014554:	08019ebc 	.word	0x08019ebc
 8014558:	24064560 	.word	0x24064560

0801455c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b084      	sub	sp, #16
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014564:	2300      	movs	r3, #0
 8014566:	60fb      	str	r3, [r7, #12]
 8014568:	e01e      	b.n	80145a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801456a:	4913      	ldr	r1, [pc, #76]	; (80145b8 <etharp_cleanup_netif+0x5c>)
 801456c:	68fa      	ldr	r2, [r7, #12]
 801456e:	4613      	mov	r3, r2
 8014570:	005b      	lsls	r3, r3, #1
 8014572:	4413      	add	r3, r2
 8014574:	00db      	lsls	r3, r3, #3
 8014576:	440b      	add	r3, r1
 8014578:	3314      	adds	r3, #20
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801457e:	7afb      	ldrb	r3, [r7, #11]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d00e      	beq.n	80145a2 <etharp_cleanup_netif+0x46>
 8014584:	490c      	ldr	r1, [pc, #48]	; (80145b8 <etharp_cleanup_netif+0x5c>)
 8014586:	68fa      	ldr	r2, [r7, #12]
 8014588:	4613      	mov	r3, r2
 801458a:	005b      	lsls	r3, r3, #1
 801458c:	4413      	add	r3, r2
 801458e:	00db      	lsls	r3, r3, #3
 8014590:	440b      	add	r3, r1
 8014592:	3308      	adds	r3, #8
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	687a      	ldr	r2, [r7, #4]
 8014598:	429a      	cmp	r2, r3
 801459a:	d102      	bne.n	80145a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801459c:	68f8      	ldr	r0, [r7, #12]
 801459e:	f7ff fce5 	bl	8013f6c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	3301      	adds	r3, #1
 80145a6:	60fb      	str	r3, [r7, #12]
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	2b09      	cmp	r3, #9
 80145ac:	dddd      	ble.n	801456a <etharp_cleanup_netif+0xe>
    }
  }
}
 80145ae:	bf00      	nop
 80145b0:	bf00      	nop
 80145b2:	3710      	adds	r7, #16
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	24064560 	.word	0x24064560

080145bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80145bc:	b5b0      	push	{r4, r5, r7, lr}
 80145be:	b08a      	sub	sp, #40	; 0x28
 80145c0:	af04      	add	r7, sp, #16
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d107      	bne.n	80145dc <etharp_input+0x20>
 80145cc:	4b3d      	ldr	r3, [pc, #244]	; (80146c4 <etharp_input+0x108>)
 80145ce:	f240 228a 	movw	r2, #650	; 0x28a
 80145d2:	493d      	ldr	r1, [pc, #244]	; (80146c8 <etharp_input+0x10c>)
 80145d4:	483d      	ldr	r0, [pc, #244]	; (80146cc <etharp_input+0x110>)
 80145d6:	f002 fa61 	bl	8016a9c <iprintf>
 80145da:	e06f      	b.n	80146bc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	685b      	ldr	r3, [r3, #4]
 80145e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80145e2:	693b      	ldr	r3, [r7, #16]
 80145e4:	881b      	ldrh	r3, [r3, #0]
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145ec:	d10c      	bne.n	8014608 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80145f2:	2b06      	cmp	r3, #6
 80145f4:	d108      	bne.n	8014608 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80145f6:	693b      	ldr	r3, [r7, #16]
 80145f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80145fa:	2b04      	cmp	r3, #4
 80145fc:	d104      	bne.n	8014608 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	885b      	ldrh	r3, [r3, #2]
 8014602:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014604:	2b08      	cmp	r3, #8
 8014606:	d003      	beq.n	8014610 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f7f9 fa43 	bl	800da94 <pbuf_free>
    return;
 801460e:	e055      	b.n	80146bc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	330e      	adds	r3, #14
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	3318      	adds	r3, #24
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	3304      	adds	r3, #4
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d102      	bne.n	8014630 <etharp_input+0x74>
    for_us = 0;
 801462a:	2300      	movs	r3, #0
 801462c:	75fb      	strb	r3, [r7, #23]
 801462e:	e009      	b.n	8014644 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014630:	68ba      	ldr	r2, [r7, #8]
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	3304      	adds	r3, #4
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	429a      	cmp	r2, r3
 801463a:	bf0c      	ite	eq
 801463c:	2301      	moveq	r3, #1
 801463e:	2300      	movne	r3, #0
 8014640:	b2db      	uxtb	r3, r3
 8014642:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	f103 0208 	add.w	r2, r3, #8
 801464a:	7dfb      	ldrb	r3, [r7, #23]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d001      	beq.n	8014654 <etharp_input+0x98>
 8014650:	2301      	movs	r3, #1
 8014652:	e000      	b.n	8014656 <etharp_input+0x9a>
 8014654:	2302      	movs	r3, #2
 8014656:	f107 010c 	add.w	r1, r7, #12
 801465a:	6838      	ldr	r0, [r7, #0]
 801465c:	f7ff fed8 	bl	8014410 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014660:	693b      	ldr	r3, [r7, #16]
 8014662:	88db      	ldrh	r3, [r3, #6]
 8014664:	b29b      	uxth	r3, r3
 8014666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801466a:	d003      	beq.n	8014674 <etharp_input+0xb8>
 801466c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014670:	d01e      	beq.n	80146b0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014672:	e020      	b.n	80146b6 <etharp_input+0xfa>
      if (for_us) {
 8014674:	7dfb      	ldrb	r3, [r7, #23]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d01c      	beq.n	80146b4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014690:	693a      	ldr	r2, [r7, #16]
 8014692:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014694:	2102      	movs	r1, #2
 8014696:	9103      	str	r1, [sp, #12]
 8014698:	f107 010c 	add.w	r1, r7, #12
 801469c:	9102      	str	r1, [sp, #8]
 801469e:	9201      	str	r2, [sp, #4]
 80146a0:	9300      	str	r3, [sp, #0]
 80146a2:	462b      	mov	r3, r5
 80146a4:	4622      	mov	r2, r4
 80146a6:	4601      	mov	r1, r0
 80146a8:	6838      	ldr	r0, [r7, #0]
 80146aa:	f000 faeb 	bl	8014c84 <etharp_raw>
      break;
 80146ae:	e001      	b.n	80146b4 <etharp_input+0xf8>
      break;
 80146b0:	bf00      	nop
 80146b2:	e000      	b.n	80146b6 <etharp_input+0xfa>
      break;
 80146b4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f7f9 f9ec 	bl	800da94 <pbuf_free>
}
 80146bc:	3718      	adds	r7, #24
 80146be:	46bd      	mov	sp, r7
 80146c0:	bdb0      	pop	{r4, r5, r7, pc}
 80146c2:	bf00      	nop
 80146c4:	08019e44 	.word	0x08019e44
 80146c8:	08019f94 	.word	0x08019f94
 80146cc:	08019ebc 	.word	0x08019ebc

080146d0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b086      	sub	sp, #24
 80146d4:	af02      	add	r7, sp, #8
 80146d6:	60f8      	str	r0, [r7, #12]
 80146d8:	60b9      	str	r1, [r7, #8]
 80146da:	4613      	mov	r3, r2
 80146dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80146de:	79fa      	ldrb	r2, [r7, #7]
 80146e0:	4944      	ldr	r1, [pc, #272]	; (80147f4 <etharp_output_to_arp_index+0x124>)
 80146e2:	4613      	mov	r3, r2
 80146e4:	005b      	lsls	r3, r3, #1
 80146e6:	4413      	add	r3, r2
 80146e8:	00db      	lsls	r3, r3, #3
 80146ea:	440b      	add	r3, r1
 80146ec:	3314      	adds	r3, #20
 80146ee:	781b      	ldrb	r3, [r3, #0]
 80146f0:	2b01      	cmp	r3, #1
 80146f2:	d806      	bhi.n	8014702 <etharp_output_to_arp_index+0x32>
 80146f4:	4b40      	ldr	r3, [pc, #256]	; (80147f8 <etharp_output_to_arp_index+0x128>)
 80146f6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80146fa:	4940      	ldr	r1, [pc, #256]	; (80147fc <etharp_output_to_arp_index+0x12c>)
 80146fc:	4840      	ldr	r0, [pc, #256]	; (8014800 <etharp_output_to_arp_index+0x130>)
 80146fe:	f002 f9cd 	bl	8016a9c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014702:	79fa      	ldrb	r2, [r7, #7]
 8014704:	493b      	ldr	r1, [pc, #236]	; (80147f4 <etharp_output_to_arp_index+0x124>)
 8014706:	4613      	mov	r3, r2
 8014708:	005b      	lsls	r3, r3, #1
 801470a:	4413      	add	r3, r2
 801470c:	00db      	lsls	r3, r3, #3
 801470e:	440b      	add	r3, r1
 8014710:	3314      	adds	r3, #20
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	2b02      	cmp	r3, #2
 8014716:	d153      	bne.n	80147c0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014718:	79fa      	ldrb	r2, [r7, #7]
 801471a:	4936      	ldr	r1, [pc, #216]	; (80147f4 <etharp_output_to_arp_index+0x124>)
 801471c:	4613      	mov	r3, r2
 801471e:	005b      	lsls	r3, r3, #1
 8014720:	4413      	add	r3, r2
 8014722:	00db      	lsls	r3, r3, #3
 8014724:	440b      	add	r3, r1
 8014726:	3312      	adds	r3, #18
 8014728:	881b      	ldrh	r3, [r3, #0]
 801472a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801472e:	d919      	bls.n	8014764 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014730:	79fa      	ldrb	r2, [r7, #7]
 8014732:	4613      	mov	r3, r2
 8014734:	005b      	lsls	r3, r3, #1
 8014736:	4413      	add	r3, r2
 8014738:	00db      	lsls	r3, r3, #3
 801473a:	4a2e      	ldr	r2, [pc, #184]	; (80147f4 <etharp_output_to_arp_index+0x124>)
 801473c:	4413      	add	r3, r2
 801473e:	3304      	adds	r3, #4
 8014740:	4619      	mov	r1, r3
 8014742:	68f8      	ldr	r0, [r7, #12]
 8014744:	f000 fb4c 	bl	8014de0 <etharp_request>
 8014748:	4603      	mov	r3, r0
 801474a:	2b00      	cmp	r3, #0
 801474c:	d138      	bne.n	80147c0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801474e:	79fa      	ldrb	r2, [r7, #7]
 8014750:	4928      	ldr	r1, [pc, #160]	; (80147f4 <etharp_output_to_arp_index+0x124>)
 8014752:	4613      	mov	r3, r2
 8014754:	005b      	lsls	r3, r3, #1
 8014756:	4413      	add	r3, r2
 8014758:	00db      	lsls	r3, r3, #3
 801475a:	440b      	add	r3, r1
 801475c:	3314      	adds	r3, #20
 801475e:	2203      	movs	r2, #3
 8014760:	701a      	strb	r2, [r3, #0]
 8014762:	e02d      	b.n	80147c0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014764:	79fa      	ldrb	r2, [r7, #7]
 8014766:	4923      	ldr	r1, [pc, #140]	; (80147f4 <etharp_output_to_arp_index+0x124>)
 8014768:	4613      	mov	r3, r2
 801476a:	005b      	lsls	r3, r3, #1
 801476c:	4413      	add	r3, r2
 801476e:	00db      	lsls	r3, r3, #3
 8014770:	440b      	add	r3, r1
 8014772:	3312      	adds	r3, #18
 8014774:	881b      	ldrh	r3, [r3, #0]
 8014776:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801477a:	d321      	bcc.n	80147c0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801477c:	79fa      	ldrb	r2, [r7, #7]
 801477e:	4613      	mov	r3, r2
 8014780:	005b      	lsls	r3, r3, #1
 8014782:	4413      	add	r3, r2
 8014784:	00db      	lsls	r3, r3, #3
 8014786:	4a1b      	ldr	r2, [pc, #108]	; (80147f4 <etharp_output_to_arp_index+0x124>)
 8014788:	4413      	add	r3, r2
 801478a:	1d19      	adds	r1, r3, #4
 801478c:	79fa      	ldrb	r2, [r7, #7]
 801478e:	4613      	mov	r3, r2
 8014790:	005b      	lsls	r3, r3, #1
 8014792:	4413      	add	r3, r2
 8014794:	00db      	lsls	r3, r3, #3
 8014796:	3308      	adds	r3, #8
 8014798:	4a16      	ldr	r2, [pc, #88]	; (80147f4 <etharp_output_to_arp_index+0x124>)
 801479a:	4413      	add	r3, r2
 801479c:	3304      	adds	r3, #4
 801479e:	461a      	mov	r2, r3
 80147a0:	68f8      	ldr	r0, [r7, #12]
 80147a2:	f000 fafb 	bl	8014d9c <etharp_request_dst>
 80147a6:	4603      	mov	r3, r0
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d109      	bne.n	80147c0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80147ac:	79fa      	ldrb	r2, [r7, #7]
 80147ae:	4911      	ldr	r1, [pc, #68]	; (80147f4 <etharp_output_to_arp_index+0x124>)
 80147b0:	4613      	mov	r3, r2
 80147b2:	005b      	lsls	r3, r3, #1
 80147b4:	4413      	add	r3, r2
 80147b6:	00db      	lsls	r3, r3, #3
 80147b8:	440b      	add	r3, r1
 80147ba:	3314      	adds	r3, #20
 80147bc:	2203      	movs	r2, #3
 80147be:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80147c6:	79fa      	ldrb	r2, [r7, #7]
 80147c8:	4613      	mov	r3, r2
 80147ca:	005b      	lsls	r3, r3, #1
 80147cc:	4413      	add	r3, r2
 80147ce:	00db      	lsls	r3, r3, #3
 80147d0:	3308      	adds	r3, #8
 80147d2:	4a08      	ldr	r2, [pc, #32]	; (80147f4 <etharp_output_to_arp_index+0x124>)
 80147d4:	4413      	add	r3, r2
 80147d6:	3304      	adds	r3, #4
 80147d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80147dc:	9200      	str	r2, [sp, #0]
 80147de:	460a      	mov	r2, r1
 80147e0:	68b9      	ldr	r1, [r7, #8]
 80147e2:	68f8      	ldr	r0, [r7, #12]
 80147e4:	f001 fe60 	bl	80164a8 <ethernet_output>
 80147e8:	4603      	mov	r3, r0
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3710      	adds	r7, #16
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	24064560 	.word	0x24064560
 80147f8:	08019e44 	.word	0x08019e44
 80147fc:	08019fb4 	.word	0x08019fb4
 8014800:	08019ebc 	.word	0x08019ebc

08014804 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b08a      	sub	sp, #40	; 0x28
 8014808:	af02      	add	r7, sp, #8
 801480a:	60f8      	str	r0, [r7, #12]
 801480c:	60b9      	str	r1, [r7, #8]
 801480e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d106      	bne.n	8014828 <etharp_output+0x24>
 801481a:	4b73      	ldr	r3, [pc, #460]	; (80149e8 <etharp_output+0x1e4>)
 801481c:	f240 321e 	movw	r2, #798	; 0x31e
 8014820:	4972      	ldr	r1, [pc, #456]	; (80149ec <etharp_output+0x1e8>)
 8014822:	4873      	ldr	r0, [pc, #460]	; (80149f0 <etharp_output+0x1ec>)
 8014824:	f002 f93a 	bl	8016a9c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014828:	68bb      	ldr	r3, [r7, #8]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d106      	bne.n	801483c <etharp_output+0x38>
 801482e:	4b6e      	ldr	r3, [pc, #440]	; (80149e8 <etharp_output+0x1e4>)
 8014830:	f240 321f 	movw	r2, #799	; 0x31f
 8014834:	496f      	ldr	r1, [pc, #444]	; (80149f4 <etharp_output+0x1f0>)
 8014836:	486e      	ldr	r0, [pc, #440]	; (80149f0 <etharp_output+0x1ec>)
 8014838:	f002 f930 	bl	8016a9c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d106      	bne.n	8014850 <etharp_output+0x4c>
 8014842:	4b69      	ldr	r3, [pc, #420]	; (80149e8 <etharp_output+0x1e4>)
 8014844:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014848:	496b      	ldr	r1, [pc, #428]	; (80149f8 <etharp_output+0x1f4>)
 801484a:	4869      	ldr	r0, [pc, #420]	; (80149f0 <etharp_output+0x1ec>)
 801484c:	f002 f926 	bl	8016a9c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	68f9      	ldr	r1, [r7, #12]
 8014856:	4618      	mov	r0, r3
 8014858:	f000 ff1e 	bl	8015698 <ip4_addr_isbroadcast_u32>
 801485c:	4603      	mov	r3, r0
 801485e:	2b00      	cmp	r3, #0
 8014860:	d002      	beq.n	8014868 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014862:	4b66      	ldr	r3, [pc, #408]	; (80149fc <etharp_output+0x1f8>)
 8014864:	61fb      	str	r3, [r7, #28]
 8014866:	e0af      	b.n	80149c8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014870:	2be0      	cmp	r3, #224	; 0xe0
 8014872:	d118      	bne.n	80148a6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014874:	2301      	movs	r3, #1
 8014876:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014878:	2300      	movs	r3, #0
 801487a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801487c:	235e      	movs	r3, #94	; 0x5e
 801487e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	3301      	adds	r3, #1
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801488a:	b2db      	uxtb	r3, r3
 801488c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	3302      	adds	r3, #2
 8014892:	781b      	ldrb	r3, [r3, #0]
 8014894:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	3303      	adds	r3, #3
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801489e:	f107 0310 	add.w	r3, r7, #16
 80148a2:	61fb      	str	r3, [r7, #28]
 80148a4:	e090      	b.n	80149c8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681a      	ldr	r2, [r3, #0]
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	3304      	adds	r3, #4
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	405a      	eors	r2, r3
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	3308      	adds	r3, #8
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	4013      	ands	r3, r2
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d012      	beq.n	80148e4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80148c4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80148c8:	4293      	cmp	r3, r2
 80148ca:	d00b      	beq.n	80148e4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	330c      	adds	r3, #12
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d003      	beq.n	80148de <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	330c      	adds	r3, #12
 80148da:	61bb      	str	r3, [r7, #24]
 80148dc:	e002      	b.n	80148e4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80148de:	f06f 0303 	mvn.w	r3, #3
 80148e2:	e07d      	b.n	80149e0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80148e4:	4b46      	ldr	r3, [pc, #280]	; (8014a00 <etharp_output+0x1fc>)
 80148e6:	781b      	ldrb	r3, [r3, #0]
 80148e8:	4619      	mov	r1, r3
 80148ea:	4a46      	ldr	r2, [pc, #280]	; (8014a04 <etharp_output+0x200>)
 80148ec:	460b      	mov	r3, r1
 80148ee:	005b      	lsls	r3, r3, #1
 80148f0:	440b      	add	r3, r1
 80148f2:	00db      	lsls	r3, r3, #3
 80148f4:	4413      	add	r3, r2
 80148f6:	3314      	adds	r3, #20
 80148f8:	781b      	ldrb	r3, [r3, #0]
 80148fa:	2b01      	cmp	r3, #1
 80148fc:	d925      	bls.n	801494a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80148fe:	4b40      	ldr	r3, [pc, #256]	; (8014a00 <etharp_output+0x1fc>)
 8014900:	781b      	ldrb	r3, [r3, #0]
 8014902:	4619      	mov	r1, r3
 8014904:	4a3f      	ldr	r2, [pc, #252]	; (8014a04 <etharp_output+0x200>)
 8014906:	460b      	mov	r3, r1
 8014908:	005b      	lsls	r3, r3, #1
 801490a:	440b      	add	r3, r1
 801490c:	00db      	lsls	r3, r3, #3
 801490e:	4413      	add	r3, r2
 8014910:	3308      	adds	r3, #8
 8014912:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014914:	68fa      	ldr	r2, [r7, #12]
 8014916:	429a      	cmp	r2, r3
 8014918:	d117      	bne.n	801494a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801491a:	69bb      	ldr	r3, [r7, #24]
 801491c:	681a      	ldr	r2, [r3, #0]
 801491e:	4b38      	ldr	r3, [pc, #224]	; (8014a00 <etharp_output+0x1fc>)
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	4618      	mov	r0, r3
 8014924:	4937      	ldr	r1, [pc, #220]	; (8014a04 <etharp_output+0x200>)
 8014926:	4603      	mov	r3, r0
 8014928:	005b      	lsls	r3, r3, #1
 801492a:	4403      	add	r3, r0
 801492c:	00db      	lsls	r3, r3, #3
 801492e:	440b      	add	r3, r1
 8014930:	3304      	adds	r3, #4
 8014932:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014934:	429a      	cmp	r2, r3
 8014936:	d108      	bne.n	801494a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014938:	4b31      	ldr	r3, [pc, #196]	; (8014a00 <etharp_output+0x1fc>)
 801493a:	781b      	ldrb	r3, [r3, #0]
 801493c:	461a      	mov	r2, r3
 801493e:	68b9      	ldr	r1, [r7, #8]
 8014940:	68f8      	ldr	r0, [r7, #12]
 8014942:	f7ff fec5 	bl	80146d0 <etharp_output_to_arp_index>
 8014946:	4603      	mov	r3, r0
 8014948:	e04a      	b.n	80149e0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801494a:	2300      	movs	r3, #0
 801494c:	75fb      	strb	r3, [r7, #23]
 801494e:	e031      	b.n	80149b4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014950:	7dfa      	ldrb	r2, [r7, #23]
 8014952:	492c      	ldr	r1, [pc, #176]	; (8014a04 <etharp_output+0x200>)
 8014954:	4613      	mov	r3, r2
 8014956:	005b      	lsls	r3, r3, #1
 8014958:	4413      	add	r3, r2
 801495a:	00db      	lsls	r3, r3, #3
 801495c:	440b      	add	r3, r1
 801495e:	3314      	adds	r3, #20
 8014960:	781b      	ldrb	r3, [r3, #0]
 8014962:	2b01      	cmp	r3, #1
 8014964:	d923      	bls.n	80149ae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014966:	7dfa      	ldrb	r2, [r7, #23]
 8014968:	4926      	ldr	r1, [pc, #152]	; (8014a04 <etharp_output+0x200>)
 801496a:	4613      	mov	r3, r2
 801496c:	005b      	lsls	r3, r3, #1
 801496e:	4413      	add	r3, r2
 8014970:	00db      	lsls	r3, r3, #3
 8014972:	440b      	add	r3, r1
 8014974:	3308      	adds	r3, #8
 8014976:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014978:	68fa      	ldr	r2, [r7, #12]
 801497a:	429a      	cmp	r2, r3
 801497c:	d117      	bne.n	80149ae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801497e:	69bb      	ldr	r3, [r7, #24]
 8014980:	6819      	ldr	r1, [r3, #0]
 8014982:	7dfa      	ldrb	r2, [r7, #23]
 8014984:	481f      	ldr	r0, [pc, #124]	; (8014a04 <etharp_output+0x200>)
 8014986:	4613      	mov	r3, r2
 8014988:	005b      	lsls	r3, r3, #1
 801498a:	4413      	add	r3, r2
 801498c:	00db      	lsls	r3, r3, #3
 801498e:	4403      	add	r3, r0
 8014990:	3304      	adds	r3, #4
 8014992:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014994:	4299      	cmp	r1, r3
 8014996:	d10a      	bne.n	80149ae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014998:	4a19      	ldr	r2, [pc, #100]	; (8014a00 <etharp_output+0x1fc>)
 801499a:	7dfb      	ldrb	r3, [r7, #23]
 801499c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801499e:	7dfb      	ldrb	r3, [r7, #23]
 80149a0:	461a      	mov	r2, r3
 80149a2:	68b9      	ldr	r1, [r7, #8]
 80149a4:	68f8      	ldr	r0, [r7, #12]
 80149a6:	f7ff fe93 	bl	80146d0 <etharp_output_to_arp_index>
 80149aa:	4603      	mov	r3, r0
 80149ac:	e018      	b.n	80149e0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80149ae:	7dfb      	ldrb	r3, [r7, #23]
 80149b0:	3301      	adds	r3, #1
 80149b2:	75fb      	strb	r3, [r7, #23]
 80149b4:	7dfb      	ldrb	r3, [r7, #23]
 80149b6:	2b09      	cmp	r3, #9
 80149b8:	d9ca      	bls.n	8014950 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80149ba:	68ba      	ldr	r2, [r7, #8]
 80149bc:	69b9      	ldr	r1, [r7, #24]
 80149be:	68f8      	ldr	r0, [r7, #12]
 80149c0:	f000 f822 	bl	8014a08 <etharp_query>
 80149c4:	4603      	mov	r3, r0
 80149c6:	e00b      	b.n	80149e0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80149ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80149d2:	9300      	str	r3, [sp, #0]
 80149d4:	69fb      	ldr	r3, [r7, #28]
 80149d6:	68b9      	ldr	r1, [r7, #8]
 80149d8:	68f8      	ldr	r0, [r7, #12]
 80149da:	f001 fd65 	bl	80164a8 <ethernet_output>
 80149de:	4603      	mov	r3, r0
}
 80149e0:	4618      	mov	r0, r3
 80149e2:	3720      	adds	r7, #32
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}
 80149e8:	08019e44 	.word	0x08019e44
 80149ec:	08019f94 	.word	0x08019f94
 80149f0:	08019ebc 	.word	0x08019ebc
 80149f4:	08019fe4 	.word	0x08019fe4
 80149f8:	08019f84 	.word	0x08019f84
 80149fc:	0801a660 	.word	0x0801a660
 8014a00:	24064650 	.word	0x24064650
 8014a04:	24064560 	.word	0x24064560

08014a08 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b08c      	sub	sp, #48	; 0x30
 8014a0c:	af02      	add	r7, sp, #8
 8014a0e:	60f8      	str	r0, [r7, #12]
 8014a10:	60b9      	str	r1, [r7, #8]
 8014a12:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	332a      	adds	r3, #42	; 0x2a
 8014a18:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014a1a:	23ff      	movs	r3, #255	; 0xff
 8014a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014a20:	2300      	movs	r3, #0
 8014a22:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	68f9      	ldr	r1, [r7, #12]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f000 fe34 	bl	8015698 <ip4_addr_isbroadcast_u32>
 8014a30:	4603      	mov	r3, r0
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d10c      	bne.n	8014a50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a3e:	2be0      	cmp	r3, #224	; 0xe0
 8014a40:	d006      	beq.n	8014a50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d003      	beq.n	8014a50 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014a48:	68bb      	ldr	r3, [r7, #8]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d102      	bne.n	8014a56 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014a50:	f06f 030f 	mvn.w	r3, #15
 8014a54:	e101      	b.n	8014c5a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014a56:	68fa      	ldr	r2, [r7, #12]
 8014a58:	2101      	movs	r1, #1
 8014a5a:	68b8      	ldr	r0, [r7, #8]
 8014a5c:	f7ff fb60 	bl	8014120 <etharp_find_entry>
 8014a60:	4603      	mov	r3, r0
 8014a62:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014a64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	da02      	bge.n	8014a72 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014a6c:	8a7b      	ldrh	r3, [r7, #18]
 8014a6e:	b25b      	sxtb	r3, r3
 8014a70:	e0f3      	b.n	8014c5a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014a72:	8a7b      	ldrh	r3, [r7, #18]
 8014a74:	2b7e      	cmp	r3, #126	; 0x7e
 8014a76:	d906      	bls.n	8014a86 <etharp_query+0x7e>
 8014a78:	4b7a      	ldr	r3, [pc, #488]	; (8014c64 <etharp_query+0x25c>)
 8014a7a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014a7e:	497a      	ldr	r1, [pc, #488]	; (8014c68 <etharp_query+0x260>)
 8014a80:	487a      	ldr	r0, [pc, #488]	; (8014c6c <etharp_query+0x264>)
 8014a82:	f002 f80b 	bl	8016a9c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014a86:	8a7b      	ldrh	r3, [r7, #18]
 8014a88:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014a8a:	7c7a      	ldrb	r2, [r7, #17]
 8014a8c:	4978      	ldr	r1, [pc, #480]	; (8014c70 <etharp_query+0x268>)
 8014a8e:	4613      	mov	r3, r2
 8014a90:	005b      	lsls	r3, r3, #1
 8014a92:	4413      	add	r3, r2
 8014a94:	00db      	lsls	r3, r3, #3
 8014a96:	440b      	add	r3, r1
 8014a98:	3314      	adds	r3, #20
 8014a9a:	781b      	ldrb	r3, [r3, #0]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d115      	bne.n	8014acc <etharp_query+0xc4>
    is_new_entry = 1;
 8014aa0:	2301      	movs	r3, #1
 8014aa2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014aa4:	7c7a      	ldrb	r2, [r7, #17]
 8014aa6:	4972      	ldr	r1, [pc, #456]	; (8014c70 <etharp_query+0x268>)
 8014aa8:	4613      	mov	r3, r2
 8014aaa:	005b      	lsls	r3, r3, #1
 8014aac:	4413      	add	r3, r2
 8014aae:	00db      	lsls	r3, r3, #3
 8014ab0:	440b      	add	r3, r1
 8014ab2:	3314      	adds	r3, #20
 8014ab4:	2201      	movs	r2, #1
 8014ab6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014ab8:	7c7a      	ldrb	r2, [r7, #17]
 8014aba:	496d      	ldr	r1, [pc, #436]	; (8014c70 <etharp_query+0x268>)
 8014abc:	4613      	mov	r3, r2
 8014abe:	005b      	lsls	r3, r3, #1
 8014ac0:	4413      	add	r3, r2
 8014ac2:	00db      	lsls	r3, r3, #3
 8014ac4:	440b      	add	r3, r1
 8014ac6:	3308      	adds	r3, #8
 8014ac8:	68fa      	ldr	r2, [r7, #12]
 8014aca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014acc:	7c7a      	ldrb	r2, [r7, #17]
 8014ace:	4968      	ldr	r1, [pc, #416]	; (8014c70 <etharp_query+0x268>)
 8014ad0:	4613      	mov	r3, r2
 8014ad2:	005b      	lsls	r3, r3, #1
 8014ad4:	4413      	add	r3, r2
 8014ad6:	00db      	lsls	r3, r3, #3
 8014ad8:	440b      	add	r3, r1
 8014ada:	3314      	adds	r3, #20
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	2b01      	cmp	r3, #1
 8014ae0:	d011      	beq.n	8014b06 <etharp_query+0xfe>
 8014ae2:	7c7a      	ldrb	r2, [r7, #17]
 8014ae4:	4962      	ldr	r1, [pc, #392]	; (8014c70 <etharp_query+0x268>)
 8014ae6:	4613      	mov	r3, r2
 8014ae8:	005b      	lsls	r3, r3, #1
 8014aea:	4413      	add	r3, r2
 8014aec:	00db      	lsls	r3, r3, #3
 8014aee:	440b      	add	r3, r1
 8014af0:	3314      	adds	r3, #20
 8014af2:	781b      	ldrb	r3, [r3, #0]
 8014af4:	2b01      	cmp	r3, #1
 8014af6:	d806      	bhi.n	8014b06 <etharp_query+0xfe>
 8014af8:	4b5a      	ldr	r3, [pc, #360]	; (8014c64 <etharp_query+0x25c>)
 8014afa:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014afe:	495d      	ldr	r1, [pc, #372]	; (8014c74 <etharp_query+0x26c>)
 8014b00:	485a      	ldr	r0, [pc, #360]	; (8014c6c <etharp_query+0x264>)
 8014b02:	f001 ffcb 	bl	8016a9c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014b06:	6a3b      	ldr	r3, [r7, #32]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d102      	bne.n	8014b12 <etharp_query+0x10a>
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d10c      	bne.n	8014b2c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014b12:	68b9      	ldr	r1, [r7, #8]
 8014b14:	68f8      	ldr	r0, [r7, #12]
 8014b16:	f000 f963 	bl	8014de0 <etharp_request>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d102      	bne.n	8014b2c <etharp_query+0x124>
      return result;
 8014b26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014b2a:	e096      	b.n	8014c5a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d106      	bne.n	8014b40 <etharp_query+0x138>
 8014b32:	4b4c      	ldr	r3, [pc, #304]	; (8014c64 <etharp_query+0x25c>)
 8014b34:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014b38:	494f      	ldr	r1, [pc, #316]	; (8014c78 <etharp_query+0x270>)
 8014b3a:	484c      	ldr	r0, [pc, #304]	; (8014c6c <etharp_query+0x264>)
 8014b3c:	f001 ffae 	bl	8016a9c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014b40:	7c7a      	ldrb	r2, [r7, #17]
 8014b42:	494b      	ldr	r1, [pc, #300]	; (8014c70 <etharp_query+0x268>)
 8014b44:	4613      	mov	r3, r2
 8014b46:	005b      	lsls	r3, r3, #1
 8014b48:	4413      	add	r3, r2
 8014b4a:	00db      	lsls	r3, r3, #3
 8014b4c:	440b      	add	r3, r1
 8014b4e:	3314      	adds	r3, #20
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	2b01      	cmp	r3, #1
 8014b54:	d917      	bls.n	8014b86 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014b56:	4a49      	ldr	r2, [pc, #292]	; (8014c7c <etharp_query+0x274>)
 8014b58:	7c7b      	ldrb	r3, [r7, #17]
 8014b5a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014b5c:	7c7a      	ldrb	r2, [r7, #17]
 8014b5e:	4613      	mov	r3, r2
 8014b60:	005b      	lsls	r3, r3, #1
 8014b62:	4413      	add	r3, r2
 8014b64:	00db      	lsls	r3, r3, #3
 8014b66:	3308      	adds	r3, #8
 8014b68:	4a41      	ldr	r2, [pc, #260]	; (8014c70 <etharp_query+0x268>)
 8014b6a:	4413      	add	r3, r2
 8014b6c:	3304      	adds	r3, #4
 8014b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014b72:	9200      	str	r2, [sp, #0]
 8014b74:	697a      	ldr	r2, [r7, #20]
 8014b76:	6879      	ldr	r1, [r7, #4]
 8014b78:	68f8      	ldr	r0, [r7, #12]
 8014b7a:	f001 fc95 	bl	80164a8 <ethernet_output>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b84:	e067      	b.n	8014c56 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014b86:	7c7a      	ldrb	r2, [r7, #17]
 8014b88:	4939      	ldr	r1, [pc, #228]	; (8014c70 <etharp_query+0x268>)
 8014b8a:	4613      	mov	r3, r2
 8014b8c:	005b      	lsls	r3, r3, #1
 8014b8e:	4413      	add	r3, r2
 8014b90:	00db      	lsls	r3, r3, #3
 8014b92:	440b      	add	r3, r1
 8014b94:	3314      	adds	r3, #20
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	2b01      	cmp	r3, #1
 8014b9a:	d15c      	bne.n	8014c56 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ba4:	e01c      	b.n	8014be0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014ba6:	69fb      	ldr	r3, [r7, #28]
 8014ba8:	895a      	ldrh	r2, [r3, #10]
 8014baa:	69fb      	ldr	r3, [r7, #28]
 8014bac:	891b      	ldrh	r3, [r3, #8]
 8014bae:	429a      	cmp	r2, r3
 8014bb0:	d10a      	bne.n	8014bc8 <etharp_query+0x1c0>
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d006      	beq.n	8014bc8 <etharp_query+0x1c0>
 8014bba:	4b2a      	ldr	r3, [pc, #168]	; (8014c64 <etharp_query+0x25c>)
 8014bbc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014bc0:	492f      	ldr	r1, [pc, #188]	; (8014c80 <etharp_query+0x278>)
 8014bc2:	482a      	ldr	r0, [pc, #168]	; (8014c6c <etharp_query+0x264>)
 8014bc4:	f001 ff6a 	bl	8016a9c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014bc8:	69fb      	ldr	r3, [r7, #28]
 8014bca:	7b1b      	ldrb	r3, [r3, #12]
 8014bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d002      	beq.n	8014bda <etharp_query+0x1d2>
        copy_needed = 1;
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	61bb      	str	r3, [r7, #24]
        break;
 8014bd8:	e005      	b.n	8014be6 <etharp_query+0x1de>
      }
      p = p->next;
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014be0:	69fb      	ldr	r3, [r7, #28]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d1df      	bne.n	8014ba6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d007      	beq.n	8014bfc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014bec:	687a      	ldr	r2, [r7, #4]
 8014bee:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014bf2:	200e      	movs	r0, #14
 8014bf4:	f7f9 f9c6 	bl	800df84 <pbuf_clone>
 8014bf8:	61f8      	str	r0, [r7, #28]
 8014bfa:	e004      	b.n	8014c06 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014c00:	69f8      	ldr	r0, [r7, #28]
 8014c02:	f7f8 ffed 	bl	800dbe0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014c06:	69fb      	ldr	r3, [r7, #28]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d021      	beq.n	8014c50 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014c0c:	7c7a      	ldrb	r2, [r7, #17]
 8014c0e:	4918      	ldr	r1, [pc, #96]	; (8014c70 <etharp_query+0x268>)
 8014c10:	4613      	mov	r3, r2
 8014c12:	005b      	lsls	r3, r3, #1
 8014c14:	4413      	add	r3, r2
 8014c16:	00db      	lsls	r3, r3, #3
 8014c18:	440b      	add	r3, r1
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d00a      	beq.n	8014c36 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014c20:	7c7a      	ldrb	r2, [r7, #17]
 8014c22:	4913      	ldr	r1, [pc, #76]	; (8014c70 <etharp_query+0x268>)
 8014c24:	4613      	mov	r3, r2
 8014c26:	005b      	lsls	r3, r3, #1
 8014c28:	4413      	add	r3, r2
 8014c2a:	00db      	lsls	r3, r3, #3
 8014c2c:	440b      	add	r3, r1
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	4618      	mov	r0, r3
 8014c32:	f7f8 ff2f 	bl	800da94 <pbuf_free>
      }
      arp_table[i].q = p;
 8014c36:	7c7a      	ldrb	r2, [r7, #17]
 8014c38:	490d      	ldr	r1, [pc, #52]	; (8014c70 <etharp_query+0x268>)
 8014c3a:	4613      	mov	r3, r2
 8014c3c:	005b      	lsls	r3, r3, #1
 8014c3e:	4413      	add	r3, r2
 8014c40:	00db      	lsls	r3, r3, #3
 8014c42:	440b      	add	r3, r1
 8014c44:	69fa      	ldr	r2, [r7, #28]
 8014c46:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014c48:	2300      	movs	r3, #0
 8014c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c4e:	e002      	b.n	8014c56 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014c50:	23ff      	movs	r3, #255	; 0xff
 8014c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014c56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3728      	adds	r7, #40	; 0x28
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	08019e44 	.word	0x08019e44
 8014c68:	08019ff0 	.word	0x08019ff0
 8014c6c:	08019ebc 	.word	0x08019ebc
 8014c70:	24064560 	.word	0x24064560
 8014c74:	0801a000 	.word	0x0801a000
 8014c78:	08019fe4 	.word	0x08019fe4
 8014c7c:	24064650 	.word	0x24064650
 8014c80:	0801a028 	.word	0x0801a028

08014c84 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b08a      	sub	sp, #40	; 0x28
 8014c88:	af02      	add	r7, sp, #8
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	60b9      	str	r1, [r7, #8]
 8014c8e:	607a      	str	r2, [r7, #4]
 8014c90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014c92:	2300      	movs	r3, #0
 8014c94:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d106      	bne.n	8014caa <etharp_raw+0x26>
 8014c9c:	4b3a      	ldr	r3, [pc, #232]	; (8014d88 <etharp_raw+0x104>)
 8014c9e:	f240 4257 	movw	r2, #1111	; 0x457
 8014ca2:	493a      	ldr	r1, [pc, #232]	; (8014d8c <etharp_raw+0x108>)
 8014ca4:	483a      	ldr	r0, [pc, #232]	; (8014d90 <etharp_raw+0x10c>)
 8014ca6:	f001 fef9 	bl	8016a9c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014caa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014cae:	211c      	movs	r1, #28
 8014cb0:	200e      	movs	r0, #14
 8014cb2:	f7f8 fc07 	bl	800d4c4 <pbuf_alloc>
 8014cb6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014cb8:	69bb      	ldr	r3, [r7, #24]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d102      	bne.n	8014cc4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cc2:	e05d      	b.n	8014d80 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014cc4:	69bb      	ldr	r3, [r7, #24]
 8014cc6:	895b      	ldrh	r3, [r3, #10]
 8014cc8:	2b1b      	cmp	r3, #27
 8014cca:	d806      	bhi.n	8014cda <etharp_raw+0x56>
 8014ccc:	4b2e      	ldr	r3, [pc, #184]	; (8014d88 <etharp_raw+0x104>)
 8014cce:	f240 4262 	movw	r2, #1122	; 0x462
 8014cd2:	4930      	ldr	r1, [pc, #192]	; (8014d94 <etharp_raw+0x110>)
 8014cd4:	482e      	ldr	r0, [pc, #184]	; (8014d90 <etharp_raw+0x10c>)
 8014cd6:	f001 fee1 	bl	8016a9c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014cda:	69bb      	ldr	r3, [r7, #24]
 8014cdc:	685b      	ldr	r3, [r3, #4]
 8014cde:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014ce0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f7f7 f944 	bl	800bf70 <lwip_htons>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	461a      	mov	r2, r3
 8014cec:	697b      	ldr	r3, [r7, #20]
 8014cee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014cf6:	2b06      	cmp	r3, #6
 8014cf8:	d006      	beq.n	8014d08 <etharp_raw+0x84>
 8014cfa:	4b23      	ldr	r3, [pc, #140]	; (8014d88 <etharp_raw+0x104>)
 8014cfc:	f240 4269 	movw	r2, #1129	; 0x469
 8014d00:	4925      	ldr	r1, [pc, #148]	; (8014d98 <etharp_raw+0x114>)
 8014d02:	4823      	ldr	r0, [pc, #140]	; (8014d90 <etharp_raw+0x10c>)
 8014d04:	f001 feca 	bl	8016a9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	3308      	adds	r3, #8
 8014d0c:	2206      	movs	r2, #6
 8014d0e:	6839      	ldr	r1, [r7, #0]
 8014d10:	4618      	mov	r0, r3
 8014d12:	f001 fe52 	bl	80169ba <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	3312      	adds	r3, #18
 8014d1a:	2206      	movs	r2, #6
 8014d1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f001 fe4b 	bl	80169ba <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014d24:	697b      	ldr	r3, [r7, #20]
 8014d26:	330e      	adds	r3, #14
 8014d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d2a:	6812      	ldr	r2, [r2, #0]
 8014d2c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	3318      	adds	r3, #24
 8014d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d34:	6812      	ldr	r2, [r2, #0]
 8014d36:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	701a      	strb	r2, [r3, #0]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	f042 0201 	orr.w	r2, r2, #1
 8014d44:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014d46:	697b      	ldr	r3, [r7, #20]
 8014d48:	2200      	movs	r2, #0
 8014d4a:	f042 0208 	orr.w	r2, r2, #8
 8014d4e:	709a      	strb	r2, [r3, #2]
 8014d50:	2200      	movs	r2, #0
 8014d52:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	2206      	movs	r2, #6
 8014d58:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014d5a:	697b      	ldr	r3, [r7, #20]
 8014d5c:	2204      	movs	r2, #4
 8014d5e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014d60:	f640 0306 	movw	r3, #2054	; 0x806
 8014d64:	9300      	str	r3, [sp, #0]
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	68ba      	ldr	r2, [r7, #8]
 8014d6a:	69b9      	ldr	r1, [r7, #24]
 8014d6c:	68f8      	ldr	r0, [r7, #12]
 8014d6e:	f001 fb9b 	bl	80164a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014d72:	69b8      	ldr	r0, [r7, #24]
 8014d74:	f7f8 fe8e 	bl	800da94 <pbuf_free>
  p = NULL;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014d7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	3720      	adds	r7, #32
 8014d84:	46bd      	mov	sp, r7
 8014d86:	bd80      	pop	{r7, pc}
 8014d88:	08019e44 	.word	0x08019e44
 8014d8c:	08019f94 	.word	0x08019f94
 8014d90:	08019ebc 	.word	0x08019ebc
 8014d94:	0801a044 	.word	0x0801a044
 8014d98:	0801a078 	.word	0x0801a078

08014d9c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b088      	sub	sp, #32
 8014da0:	af04      	add	r7, sp, #16
 8014da2:	60f8      	str	r0, [r7, #12]
 8014da4:	60b9      	str	r1, [r7, #8]
 8014da6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014db8:	2201      	movs	r2, #1
 8014dba:	9203      	str	r2, [sp, #12]
 8014dbc:	68ba      	ldr	r2, [r7, #8]
 8014dbe:	9202      	str	r2, [sp, #8]
 8014dc0:	4a06      	ldr	r2, [pc, #24]	; (8014ddc <etharp_request_dst+0x40>)
 8014dc2:	9201      	str	r2, [sp, #4]
 8014dc4:	9300      	str	r3, [sp, #0]
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	687a      	ldr	r2, [r7, #4]
 8014dca:	68f8      	ldr	r0, [r7, #12]
 8014dcc:	f7ff ff5a 	bl	8014c84 <etharp_raw>
 8014dd0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	3710      	adds	r7, #16
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	bd80      	pop	{r7, pc}
 8014dda:	bf00      	nop
 8014ddc:	0801a668 	.word	0x0801a668

08014de0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b082      	sub	sp, #8
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
 8014de8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014dea:	4a05      	ldr	r2, [pc, #20]	; (8014e00 <etharp_request+0x20>)
 8014dec:	6839      	ldr	r1, [r7, #0]
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	f7ff ffd4 	bl	8014d9c <etharp_request_dst>
 8014df4:	4603      	mov	r3, r0
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3708      	adds	r7, #8
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	bf00      	nop
 8014e00:	0801a660 	.word	0x0801a660

08014e04 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b08e      	sub	sp, #56	; 0x38
 8014e08:	af04      	add	r7, sp, #16
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014e0e:	4b87      	ldr	r3, [pc, #540]	; (801502c <icmp_input+0x228>)
 8014e10:	689b      	ldr	r3, [r3, #8]
 8014e12:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	f003 030f 	and.w	r3, r3, #15
 8014e1c:	b2db      	uxtb	r3, r3
 8014e1e:	009b      	lsls	r3, r3, #2
 8014e20:	b2db      	uxtb	r3, r3
 8014e22:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014e24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e26:	2b13      	cmp	r3, #19
 8014e28:	f240 80e8 	bls.w	8014ffc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	895b      	ldrh	r3, [r3, #10]
 8014e30:	2b03      	cmp	r3, #3
 8014e32:	f240 80e5 	bls.w	8015000 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	781b      	ldrb	r3, [r3, #0]
 8014e3c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014e40:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	f000 80d2 	beq.w	8014fee <icmp_input+0x1ea>
 8014e4a:	2b08      	cmp	r3, #8
 8014e4c:	f040 80d2 	bne.w	8014ff4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014e50:	4b77      	ldr	r3, [pc, #476]	; (8015030 <icmp_input+0x22c>)
 8014e52:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014e54:	4b75      	ldr	r3, [pc, #468]	; (801502c <icmp_input+0x228>)
 8014e56:	695b      	ldr	r3, [r3, #20]
 8014e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e5c:	2be0      	cmp	r3, #224	; 0xe0
 8014e5e:	f000 80d6 	beq.w	801500e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014e62:	4b72      	ldr	r3, [pc, #456]	; (801502c <icmp_input+0x228>)
 8014e64:	695b      	ldr	r3, [r3, #20]
 8014e66:	4a71      	ldr	r2, [pc, #452]	; (801502c <icmp_input+0x228>)
 8014e68:	6812      	ldr	r2, [r2, #0]
 8014e6a:	4611      	mov	r1, r2
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f000 fc13 	bl	8015698 <ip4_addr_isbroadcast_u32>
 8014e72:	4603      	mov	r3, r0
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f040 80cc 	bne.w	8015012 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	891b      	ldrh	r3, [r3, #8]
 8014e7e:	2b07      	cmp	r3, #7
 8014e80:	f240 80c0 	bls.w	8015004 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014e84:	6878      	ldr	r0, [r7, #4]
 8014e86:	f7f7 f910 	bl	800c0aa <inet_chksum_pbuf>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d003      	beq.n	8014e98 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f7f8 fdff 	bl	800da94 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8014e96:	e0c5      	b.n	8015024 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e9a:	330e      	adds	r3, #14
 8014e9c:	4619      	mov	r1, r3
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	f7f8 fd62 	bl	800d968 <pbuf_add_header>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d04b      	beq.n	8014f42 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	891a      	ldrh	r2, [r3, #8]
 8014eae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014eb0:	4413      	add	r3, r2
 8014eb2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	891b      	ldrh	r3, [r3, #8]
 8014eb8:	8b7a      	ldrh	r2, [r7, #26]
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	f0c0 80ab 	bcc.w	8015016 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014ec0:	8b7b      	ldrh	r3, [r7, #26]
 8014ec2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	200e      	movs	r0, #14
 8014eca:	f7f8 fafb 	bl	800d4c4 <pbuf_alloc>
 8014ece:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	f000 80a1 	beq.w	801501a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014ed8:	697b      	ldr	r3, [r7, #20]
 8014eda:	895b      	ldrh	r3, [r3, #10]
 8014edc:	461a      	mov	r2, r3
 8014ede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ee0:	3308      	adds	r3, #8
 8014ee2:	429a      	cmp	r2, r3
 8014ee4:	d203      	bcs.n	8014eee <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014ee6:	6978      	ldr	r0, [r7, #20]
 8014ee8:	f7f8 fdd4 	bl	800da94 <pbuf_free>
          goto icmperr;
 8014eec:	e096      	b.n	801501c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	685b      	ldr	r3, [r3, #4]
 8014ef2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f001 fd5f 	bl	80169ba <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014efc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014efe:	4619      	mov	r1, r3
 8014f00:	6978      	ldr	r0, [r7, #20]
 8014f02:	f7f8 fd41 	bl	800d988 <pbuf_remove_header>
 8014f06:	4603      	mov	r3, r0
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d009      	beq.n	8014f20 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014f0c:	4b49      	ldr	r3, [pc, #292]	; (8015034 <icmp_input+0x230>)
 8014f0e:	22b6      	movs	r2, #182	; 0xb6
 8014f10:	4949      	ldr	r1, [pc, #292]	; (8015038 <icmp_input+0x234>)
 8014f12:	484a      	ldr	r0, [pc, #296]	; (801503c <icmp_input+0x238>)
 8014f14:	f001 fdc2 	bl	8016a9c <iprintf>
          pbuf_free(r);
 8014f18:	6978      	ldr	r0, [r7, #20]
 8014f1a:	f7f8 fdbb 	bl	800da94 <pbuf_free>
          goto icmperr;
 8014f1e:	e07d      	b.n	801501c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014f20:	6879      	ldr	r1, [r7, #4]
 8014f22:	6978      	ldr	r0, [r7, #20]
 8014f24:	f7f8 feea 	bl	800dcfc <pbuf_copy>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d003      	beq.n	8014f36 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014f2e:	6978      	ldr	r0, [r7, #20]
 8014f30:	f7f8 fdb0 	bl	800da94 <pbuf_free>
          goto icmperr;
 8014f34:	e072      	b.n	801501c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f7f8 fdac 	bl	800da94 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	607b      	str	r3, [r7, #4]
 8014f40:	e00f      	b.n	8014f62 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014f42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f44:	330e      	adds	r3, #14
 8014f46:	4619      	mov	r1, r3
 8014f48:	6878      	ldr	r0, [r7, #4]
 8014f4a:	f7f8 fd1d 	bl	800d988 <pbuf_remove_header>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d006      	beq.n	8014f62 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014f54:	4b37      	ldr	r3, [pc, #220]	; (8015034 <icmp_input+0x230>)
 8014f56:	22c7      	movs	r2, #199	; 0xc7
 8014f58:	4939      	ldr	r1, [pc, #228]	; (8015040 <icmp_input+0x23c>)
 8014f5a:	4838      	ldr	r0, [pc, #224]	; (801503c <icmp_input+0x238>)
 8014f5c:	f001 fd9e 	bl	8016a9c <iprintf>
          goto icmperr;
 8014f60:	e05c      	b.n	801501c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	685b      	ldr	r3, [r3, #4]
 8014f66:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014f68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f6a:	4619      	mov	r1, r3
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f7f8 fcfb 	bl	800d968 <pbuf_add_header>
 8014f72:	4603      	mov	r3, r0
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d13c      	bne.n	8014ff2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	685b      	ldr	r3, [r3, #4]
 8014f7c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014f7e:	69fb      	ldr	r3, [r7, #28]
 8014f80:	681a      	ldr	r2, [r3, #0]
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014f86:	4b29      	ldr	r3, [pc, #164]	; (801502c <icmp_input+0x228>)
 8014f88:	691a      	ldr	r2, [r3, #16]
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014f8e:	693b      	ldr	r3, [r7, #16]
 8014f90:	2200      	movs	r2, #0
 8014f92:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8014f94:	693b      	ldr	r3, [r7, #16]
 8014f96:	885b      	ldrh	r3, [r3, #2]
 8014f98:	b29b      	uxth	r3, r3
 8014f9a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014f9e:	4293      	cmp	r3, r2
 8014fa0:	d907      	bls.n	8014fb2 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	885b      	ldrh	r3, [r3, #2]
 8014fa6:	b29b      	uxth	r3, r3
 8014fa8:	3309      	adds	r3, #9
 8014faa:	b29a      	uxth	r2, r3
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	805a      	strh	r2, [r3, #2]
 8014fb0:	e006      	b.n	8014fc0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014fb2:	693b      	ldr	r3, [r7, #16]
 8014fb4:	885b      	ldrh	r3, [r3, #2]
 8014fb6:	b29b      	uxth	r3, r3
 8014fb8:	3308      	adds	r3, #8
 8014fba:	b29a      	uxth	r2, r3
 8014fbc:	693b      	ldr	r3, [r7, #16]
 8014fbe:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	22ff      	movs	r2, #255	; 0xff
 8014fc4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	729a      	strb	r2, [r3, #10]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	9302      	str	r3, [sp, #8]
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	9301      	str	r3, [sp, #4]
 8014fd8:	2300      	movs	r3, #0
 8014fda:	9300      	str	r3, [sp, #0]
 8014fdc:	23ff      	movs	r3, #255	; 0xff
 8014fde:	2200      	movs	r2, #0
 8014fe0:	69f9      	ldr	r1, [r7, #28]
 8014fe2:	6878      	ldr	r0, [r7, #4]
 8014fe4:	f000 fa80 	bl	80154e8 <ip4_output_if>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014fec:	e001      	b.n	8014ff2 <icmp_input+0x1ee>
      break;
 8014fee:	bf00      	nop
 8014ff0:	e000      	b.n	8014ff4 <icmp_input+0x1f0>
      break;
 8014ff2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f7f8 fd4d 	bl	800da94 <pbuf_free>
  return;
 8014ffa:	e013      	b.n	8015024 <icmp_input+0x220>
    goto lenerr;
 8014ffc:	bf00      	nop
 8014ffe:	e002      	b.n	8015006 <icmp_input+0x202>
    goto lenerr;
 8015000:	bf00      	nop
 8015002:	e000      	b.n	8015006 <icmp_input+0x202>
        goto lenerr;
 8015004:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f7f8 fd44 	bl	800da94 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801500c:	e00a      	b.n	8015024 <icmp_input+0x220>
        goto icmperr;
 801500e:	bf00      	nop
 8015010:	e004      	b.n	801501c <icmp_input+0x218>
        goto icmperr;
 8015012:	bf00      	nop
 8015014:	e002      	b.n	801501c <icmp_input+0x218>
          goto icmperr;
 8015016:	bf00      	nop
 8015018:	e000      	b.n	801501c <icmp_input+0x218>
          goto icmperr;
 801501a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f7f8 fd39 	bl	800da94 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015022:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015024:	3728      	adds	r7, #40	; 0x28
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}
 801502a:	bf00      	nop
 801502c:	24064d60 	.word	0x24064d60
 8015030:	24064d74 	.word	0x24064d74
 8015034:	0801a0bc 	.word	0x0801a0bc
 8015038:	0801a0f4 	.word	0x0801a0f4
 801503c:	0801a12c 	.word	0x0801a12c
 8015040:	0801a154 	.word	0x0801a154

08015044 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b082      	sub	sp, #8
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	460b      	mov	r3, r1
 801504e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015050:	78fb      	ldrb	r3, [r7, #3]
 8015052:	461a      	mov	r2, r3
 8015054:	2103      	movs	r1, #3
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f000 f814 	bl	8015084 <icmp_send_response>
}
 801505c:	bf00      	nop
 801505e:	3708      	adds	r7, #8
 8015060:	46bd      	mov	sp, r7
 8015062:	bd80      	pop	{r7, pc}

08015064 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b082      	sub	sp, #8
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
 801506c:	460b      	mov	r3, r1
 801506e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015070:	78fb      	ldrb	r3, [r7, #3]
 8015072:	461a      	mov	r2, r3
 8015074:	210b      	movs	r1, #11
 8015076:	6878      	ldr	r0, [r7, #4]
 8015078:	f000 f804 	bl	8015084 <icmp_send_response>
}
 801507c:	bf00      	nop
 801507e:	3708      	adds	r7, #8
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}

08015084 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b08c      	sub	sp, #48	; 0x30
 8015088:	af04      	add	r7, sp, #16
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	460b      	mov	r3, r1
 801508e:	70fb      	strb	r3, [r7, #3]
 8015090:	4613      	mov	r3, r2
 8015092:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015094:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015098:	2124      	movs	r1, #36	; 0x24
 801509a:	2022      	movs	r0, #34	; 0x22
 801509c:	f7f8 fa12 	bl	800d4c4 <pbuf_alloc>
 80150a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80150a2:	69fb      	ldr	r3, [r7, #28]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d056      	beq.n	8015156 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80150a8:	69fb      	ldr	r3, [r7, #28]
 80150aa:	895b      	ldrh	r3, [r3, #10]
 80150ac:	2b23      	cmp	r3, #35	; 0x23
 80150ae:	d806      	bhi.n	80150be <icmp_send_response+0x3a>
 80150b0:	4b2b      	ldr	r3, [pc, #172]	; (8015160 <icmp_send_response+0xdc>)
 80150b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80150b6:	492b      	ldr	r1, [pc, #172]	; (8015164 <icmp_send_response+0xe0>)
 80150b8:	482b      	ldr	r0, [pc, #172]	; (8015168 <icmp_send_response+0xe4>)
 80150ba:	f001 fcef 	bl	8016a9c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	685b      	ldr	r3, [r3, #4]
 80150c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80150c4:	69fb      	ldr	r3, [r7, #28]
 80150c6:	685b      	ldr	r3, [r3, #4]
 80150c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80150ca:	697b      	ldr	r3, [r7, #20]
 80150cc:	78fa      	ldrb	r2, [r7, #3]
 80150ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	78ba      	ldrb	r2, [r7, #2]
 80150d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	2200      	movs	r2, #0
 80150da:	711a      	strb	r2, [r3, #4]
 80150dc:	2200      	movs	r2, #0
 80150de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	2200      	movs	r2, #0
 80150e4:	719a      	strb	r2, [r3, #6]
 80150e6:	2200      	movs	r2, #0
 80150e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80150ea:	69fb      	ldr	r3, [r7, #28]
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	f103 0008 	add.w	r0, r3, #8
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	685b      	ldr	r3, [r3, #4]
 80150f6:	221c      	movs	r2, #28
 80150f8:	4619      	mov	r1, r3
 80150fa:	f001 fc5e 	bl	80169ba <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80150fe:	69bb      	ldr	r3, [r7, #24]
 8015100:	68db      	ldr	r3, [r3, #12]
 8015102:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015104:	f107 030c 	add.w	r3, r7, #12
 8015108:	4618      	mov	r0, r3
 801510a:	f000 f82f 	bl	801516c <ip4_route>
 801510e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d01b      	beq.n	801514e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	2200      	movs	r2, #0
 801511a:	709a      	strb	r2, [r3, #2]
 801511c:	2200      	movs	r2, #0
 801511e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8015120:	69fb      	ldr	r3, [r7, #28]
 8015122:	895b      	ldrh	r3, [r3, #10]
 8015124:	4619      	mov	r1, r3
 8015126:	6978      	ldr	r0, [r7, #20]
 8015128:	f7f6 ffad 	bl	800c086 <inet_chksum>
 801512c:	4603      	mov	r3, r0
 801512e:	461a      	mov	r2, r3
 8015130:	697b      	ldr	r3, [r7, #20]
 8015132:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015134:	f107 020c 	add.w	r2, r7, #12
 8015138:	693b      	ldr	r3, [r7, #16]
 801513a:	9302      	str	r3, [sp, #8]
 801513c:	2301      	movs	r3, #1
 801513e:	9301      	str	r3, [sp, #4]
 8015140:	2300      	movs	r3, #0
 8015142:	9300      	str	r3, [sp, #0]
 8015144:	23ff      	movs	r3, #255	; 0xff
 8015146:	2100      	movs	r1, #0
 8015148:	69f8      	ldr	r0, [r7, #28]
 801514a:	f000 f9cd 	bl	80154e8 <ip4_output_if>
  }
  pbuf_free(q);
 801514e:	69f8      	ldr	r0, [r7, #28]
 8015150:	f7f8 fca0 	bl	800da94 <pbuf_free>
 8015154:	e000      	b.n	8015158 <icmp_send_response+0xd4>
    return;
 8015156:	bf00      	nop
}
 8015158:	3720      	adds	r7, #32
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop
 8015160:	0801a0bc 	.word	0x0801a0bc
 8015164:	0801a188 	.word	0x0801a188
 8015168:	0801a12c 	.word	0x0801a12c

0801516c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801516c:	b480      	push	{r7}
 801516e:	b085      	sub	sp, #20
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015174:	4b33      	ldr	r3, [pc, #204]	; (8015244 <ip4_route+0xd8>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	60fb      	str	r3, [r7, #12]
 801517a:	e036      	b.n	80151ea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015182:	f003 0301 	and.w	r3, r3, #1
 8015186:	b2db      	uxtb	r3, r3
 8015188:	2b00      	cmp	r3, #0
 801518a:	d02b      	beq.n	80151e4 <ip4_route+0x78>
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015192:	089b      	lsrs	r3, r3, #2
 8015194:	f003 0301 	and.w	r3, r3, #1
 8015198:	b2db      	uxtb	r3, r3
 801519a:	2b00      	cmp	r3, #0
 801519c:	d022      	beq.n	80151e4 <ip4_route+0x78>
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	3304      	adds	r3, #4
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d01d      	beq.n	80151e4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	681a      	ldr	r2, [r3, #0]
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	3304      	adds	r3, #4
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	405a      	eors	r2, r3
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	3308      	adds	r3, #8
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	4013      	ands	r3, r2
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d101      	bne.n	80151c4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	e038      	b.n	8015236 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80151ca:	f003 0302 	and.w	r3, r3, #2
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d108      	bne.n	80151e4 <ip4_route+0x78>
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	681a      	ldr	r2, [r3, #0]
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	330c      	adds	r3, #12
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	429a      	cmp	r2, r3
 80151de:	d101      	bne.n	80151e4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	e028      	b.n	8015236 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	60fb      	str	r3, [r7, #12]
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d1c5      	bne.n	801517c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80151f0:	4b15      	ldr	r3, [pc, #84]	; (8015248 <ip4_route+0xdc>)
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d01a      	beq.n	801522e <ip4_route+0xc2>
 80151f8:	4b13      	ldr	r3, [pc, #76]	; (8015248 <ip4_route+0xdc>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015200:	f003 0301 	and.w	r3, r3, #1
 8015204:	2b00      	cmp	r3, #0
 8015206:	d012      	beq.n	801522e <ip4_route+0xc2>
 8015208:	4b0f      	ldr	r3, [pc, #60]	; (8015248 <ip4_route+0xdc>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015210:	f003 0304 	and.w	r3, r3, #4
 8015214:	2b00      	cmp	r3, #0
 8015216:	d00a      	beq.n	801522e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015218:	4b0b      	ldr	r3, [pc, #44]	; (8015248 <ip4_route+0xdc>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	3304      	adds	r3, #4
 801521e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015220:	2b00      	cmp	r3, #0
 8015222:	d004      	beq.n	801522e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	b2db      	uxtb	r3, r3
 801522a:	2b7f      	cmp	r3, #127	; 0x7f
 801522c:	d101      	bne.n	8015232 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801522e:	2300      	movs	r3, #0
 8015230:	e001      	b.n	8015236 <ip4_route+0xca>
  }

  return netif_default;
 8015232:	4b05      	ldr	r3, [pc, #20]	; (8015248 <ip4_route+0xdc>)
 8015234:	681b      	ldr	r3, [r3, #0]
}
 8015236:	4618      	mov	r0, r3
 8015238:	3714      	adds	r7, #20
 801523a:	46bd      	mov	sp, r7
 801523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015240:	4770      	bx	lr
 8015242:	bf00      	nop
 8015244:	2406b450 	.word	0x2406b450
 8015248:	2406b454 	.word	0x2406b454

0801524c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b082      	sub	sp, #8
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801525a:	f003 0301 	and.w	r3, r3, #1
 801525e:	b2db      	uxtb	r3, r3
 8015260:	2b00      	cmp	r3, #0
 8015262:	d016      	beq.n	8015292 <ip4_input_accept+0x46>
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	3304      	adds	r3, #4
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d011      	beq.n	8015292 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801526e:	4b0b      	ldr	r3, [pc, #44]	; (801529c <ip4_input_accept+0x50>)
 8015270:	695a      	ldr	r2, [r3, #20]
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	3304      	adds	r3, #4
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	429a      	cmp	r2, r3
 801527a:	d008      	beq.n	801528e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801527c:	4b07      	ldr	r3, [pc, #28]	; (801529c <ip4_input_accept+0x50>)
 801527e:	695b      	ldr	r3, [r3, #20]
 8015280:	6879      	ldr	r1, [r7, #4]
 8015282:	4618      	mov	r0, r3
 8015284:	f000 fa08 	bl	8015698 <ip4_addr_isbroadcast_u32>
 8015288:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801528a:	2b00      	cmp	r3, #0
 801528c:	d001      	beq.n	8015292 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801528e:	2301      	movs	r3, #1
 8015290:	e000      	b.n	8015294 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015292:	2300      	movs	r3, #0
}
 8015294:	4618      	mov	r0, r3
 8015296:	3708      	adds	r7, #8
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}
 801529c:	24064d60 	.word	0x24064d60

080152a0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b086      	sub	sp, #24
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
 80152a8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	781b      	ldrb	r3, [r3, #0]
 80152b4:	091b      	lsrs	r3, r3, #4
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	2b04      	cmp	r3, #4
 80152ba:	d004      	beq.n	80152c6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f7f8 fbe9 	bl	800da94 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80152c2:	2300      	movs	r3, #0
 80152c4:	e107      	b.n	80154d6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80152c6:	697b      	ldr	r3, [r7, #20]
 80152c8:	781b      	ldrb	r3, [r3, #0]
 80152ca:	f003 030f 	and.w	r3, r3, #15
 80152ce:	b2db      	uxtb	r3, r3
 80152d0:	009b      	lsls	r3, r3, #2
 80152d2:	b2db      	uxtb	r3, r3
 80152d4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80152d6:	697b      	ldr	r3, [r7, #20]
 80152d8:	885b      	ldrh	r3, [r3, #2]
 80152da:	b29b      	uxth	r3, r3
 80152dc:	4618      	mov	r0, r3
 80152de:	f7f6 fe47 	bl	800bf70 <lwip_htons>
 80152e2:	4603      	mov	r3, r0
 80152e4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	891b      	ldrh	r3, [r3, #8]
 80152ea:	89ba      	ldrh	r2, [r7, #12]
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d204      	bcs.n	80152fa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80152f0:	89bb      	ldrh	r3, [r7, #12]
 80152f2:	4619      	mov	r1, r3
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f7f8 fa47 	bl	800d788 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	895b      	ldrh	r3, [r3, #10]
 80152fe:	89fa      	ldrh	r2, [r7, #14]
 8015300:	429a      	cmp	r2, r3
 8015302:	d807      	bhi.n	8015314 <ip4_input+0x74>
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	891b      	ldrh	r3, [r3, #8]
 8015308:	89ba      	ldrh	r2, [r7, #12]
 801530a:	429a      	cmp	r2, r3
 801530c:	d802      	bhi.n	8015314 <ip4_input+0x74>
 801530e:	89fb      	ldrh	r3, [r7, #14]
 8015310:	2b13      	cmp	r3, #19
 8015312:	d804      	bhi.n	801531e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015314:	6878      	ldr	r0, [r7, #4]
 8015316:	f7f8 fbbd 	bl	800da94 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801531a:	2300      	movs	r3, #0
 801531c:	e0db      	b.n	80154d6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801531e:	697b      	ldr	r3, [r7, #20]
 8015320:	691b      	ldr	r3, [r3, #16]
 8015322:	4a6f      	ldr	r2, [pc, #444]	; (80154e0 <ip4_input+0x240>)
 8015324:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015326:	697b      	ldr	r3, [r7, #20]
 8015328:	68db      	ldr	r3, [r3, #12]
 801532a:	4a6d      	ldr	r2, [pc, #436]	; (80154e0 <ip4_input+0x240>)
 801532c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801532e:	4b6c      	ldr	r3, [pc, #432]	; (80154e0 <ip4_input+0x240>)
 8015330:	695b      	ldr	r3, [r3, #20]
 8015332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015336:	2be0      	cmp	r3, #224	; 0xe0
 8015338:	d112      	bne.n	8015360 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015340:	f003 0301 	and.w	r3, r3, #1
 8015344:	b2db      	uxtb	r3, r3
 8015346:	2b00      	cmp	r3, #0
 8015348:	d007      	beq.n	801535a <ip4_input+0xba>
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	3304      	adds	r3, #4
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d002      	beq.n	801535a <ip4_input+0xba>
      netif = inp;
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	613b      	str	r3, [r7, #16]
 8015358:	e02a      	b.n	80153b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801535a:	2300      	movs	r3, #0
 801535c:	613b      	str	r3, [r7, #16]
 801535e:	e027      	b.n	80153b0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015360:	6838      	ldr	r0, [r7, #0]
 8015362:	f7ff ff73 	bl	801524c <ip4_input_accept>
 8015366:	4603      	mov	r3, r0
 8015368:	2b00      	cmp	r3, #0
 801536a:	d002      	beq.n	8015372 <ip4_input+0xd2>
      netif = inp;
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	613b      	str	r3, [r7, #16]
 8015370:	e01e      	b.n	80153b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015372:	2300      	movs	r3, #0
 8015374:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015376:	4b5a      	ldr	r3, [pc, #360]	; (80154e0 <ip4_input+0x240>)
 8015378:	695b      	ldr	r3, [r3, #20]
 801537a:	b2db      	uxtb	r3, r3
 801537c:	2b7f      	cmp	r3, #127	; 0x7f
 801537e:	d017      	beq.n	80153b0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015380:	4b58      	ldr	r3, [pc, #352]	; (80154e4 <ip4_input+0x244>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	613b      	str	r3, [r7, #16]
 8015386:	e00e      	b.n	80153a6 <ip4_input+0x106>
          if (netif == inp) {
 8015388:	693a      	ldr	r2, [r7, #16]
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	429a      	cmp	r2, r3
 801538e:	d006      	beq.n	801539e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015390:	6938      	ldr	r0, [r7, #16]
 8015392:	f7ff ff5b 	bl	801524c <ip4_input_accept>
 8015396:	4603      	mov	r3, r0
 8015398:	2b00      	cmp	r3, #0
 801539a:	d108      	bne.n	80153ae <ip4_input+0x10e>
 801539c:	e000      	b.n	80153a0 <ip4_input+0x100>
            continue;
 801539e:	bf00      	nop
        NETIF_FOREACH(netif) {
 80153a0:	693b      	ldr	r3, [r7, #16]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	613b      	str	r3, [r7, #16]
 80153a6:	693b      	ldr	r3, [r7, #16]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d1ed      	bne.n	8015388 <ip4_input+0xe8>
 80153ac:	e000      	b.n	80153b0 <ip4_input+0x110>
            break;
 80153ae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80153b0:	4b4b      	ldr	r3, [pc, #300]	; (80154e0 <ip4_input+0x240>)
 80153b2:	691b      	ldr	r3, [r3, #16]
 80153b4:	6839      	ldr	r1, [r7, #0]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f000 f96e 	bl	8015698 <ip4_addr_isbroadcast_u32>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d105      	bne.n	80153ce <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80153c2:	4b47      	ldr	r3, [pc, #284]	; (80154e0 <ip4_input+0x240>)
 80153c4:	691b      	ldr	r3, [r3, #16]
 80153c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80153ca:	2be0      	cmp	r3, #224	; 0xe0
 80153cc:	d104      	bne.n	80153d8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80153ce:	6878      	ldr	r0, [r7, #4]
 80153d0:	f7f8 fb60 	bl	800da94 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80153d4:	2300      	movs	r3, #0
 80153d6:	e07e      	b.n	80154d6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d104      	bne.n	80153e8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f7f8 fb58 	bl	800da94 <pbuf_free>
    return ERR_OK;
 80153e4:	2300      	movs	r3, #0
 80153e6:	e076      	b.n	80154d6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	88db      	ldrh	r3, [r3, #6]
 80153ec:	b29b      	uxth	r3, r3
 80153ee:	461a      	mov	r2, r3
 80153f0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80153f4:	4013      	ands	r3, r2
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d00b      	beq.n	8015412 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f000 fc92 	bl	8015d24 <ip4_reass>
 8015400:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d101      	bne.n	801540c <ip4_input+0x16c>
      return ERR_OK;
 8015408:	2300      	movs	r3, #0
 801540a:	e064      	b.n	80154d6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	685b      	ldr	r3, [r3, #4]
 8015410:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015412:	4a33      	ldr	r2, [pc, #204]	; (80154e0 <ip4_input+0x240>)
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015418:	4a31      	ldr	r2, [pc, #196]	; (80154e0 <ip4_input+0x240>)
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801541e:	4a30      	ldr	r2, [pc, #192]	; (80154e0 <ip4_input+0x240>)
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	f003 030f 	and.w	r3, r3, #15
 801542c:	b2db      	uxtb	r3, r3
 801542e:	009b      	lsls	r3, r3, #2
 8015430:	b2db      	uxtb	r3, r3
 8015432:	b29a      	uxth	r2, r3
 8015434:	4b2a      	ldr	r3, [pc, #168]	; (80154e0 <ip4_input+0x240>)
 8015436:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015438:	89fb      	ldrh	r3, [r7, #14]
 801543a:	4619      	mov	r1, r3
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f7f8 faa3 	bl	800d988 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015442:	697b      	ldr	r3, [r7, #20]
 8015444:	7a5b      	ldrb	r3, [r3, #9]
 8015446:	2b11      	cmp	r3, #17
 8015448:	d006      	beq.n	8015458 <ip4_input+0x1b8>
 801544a:	2b11      	cmp	r3, #17
 801544c:	dc13      	bgt.n	8015476 <ip4_input+0x1d6>
 801544e:	2b01      	cmp	r3, #1
 8015450:	d00c      	beq.n	801546c <ip4_input+0x1cc>
 8015452:	2b06      	cmp	r3, #6
 8015454:	d005      	beq.n	8015462 <ip4_input+0x1c2>
 8015456:	e00e      	b.n	8015476 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015458:	6839      	ldr	r1, [r7, #0]
 801545a:	6878      	ldr	r0, [r7, #4]
 801545c:	f7fe f94a 	bl	80136f4 <udp_input>
        break;
 8015460:	e026      	b.n	80154b0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015462:	6839      	ldr	r1, [r7, #0]
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	f7fa f95d 	bl	800f724 <tcp_input>
        break;
 801546a:	e021      	b.n	80154b0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801546c:	6839      	ldr	r1, [r7, #0]
 801546e:	6878      	ldr	r0, [r7, #4]
 8015470:	f7ff fcc8 	bl	8014e04 <icmp_input>
        break;
 8015474:	e01c      	b.n	80154b0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015476:	4b1a      	ldr	r3, [pc, #104]	; (80154e0 <ip4_input+0x240>)
 8015478:	695b      	ldr	r3, [r3, #20]
 801547a:	6939      	ldr	r1, [r7, #16]
 801547c:	4618      	mov	r0, r3
 801547e:	f000 f90b 	bl	8015698 <ip4_addr_isbroadcast_u32>
 8015482:	4603      	mov	r3, r0
 8015484:	2b00      	cmp	r3, #0
 8015486:	d10f      	bne.n	80154a8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015488:	4b15      	ldr	r3, [pc, #84]	; (80154e0 <ip4_input+0x240>)
 801548a:	695b      	ldr	r3, [r3, #20]
 801548c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015490:	2be0      	cmp	r3, #224	; 0xe0
 8015492:	d009      	beq.n	80154a8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015494:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015498:	4619      	mov	r1, r3
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	f7f8 fae7 	bl	800da6e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80154a0:	2102      	movs	r1, #2
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f7ff fdce 	bl	8015044 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f7f8 faf3 	bl	800da94 <pbuf_free>
        break;
 80154ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80154b0:	4b0b      	ldr	r3, [pc, #44]	; (80154e0 <ip4_input+0x240>)
 80154b2:	2200      	movs	r2, #0
 80154b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80154b6:	4b0a      	ldr	r3, [pc, #40]	; (80154e0 <ip4_input+0x240>)
 80154b8:	2200      	movs	r2, #0
 80154ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80154bc:	4b08      	ldr	r3, [pc, #32]	; (80154e0 <ip4_input+0x240>)
 80154be:	2200      	movs	r2, #0
 80154c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80154c2:	4b07      	ldr	r3, [pc, #28]	; (80154e0 <ip4_input+0x240>)
 80154c4:	2200      	movs	r2, #0
 80154c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80154c8:	4b05      	ldr	r3, [pc, #20]	; (80154e0 <ip4_input+0x240>)
 80154ca:	2200      	movs	r2, #0
 80154cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80154ce:	4b04      	ldr	r3, [pc, #16]	; (80154e0 <ip4_input+0x240>)
 80154d0:	2200      	movs	r2, #0
 80154d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80154d4:	2300      	movs	r3, #0
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3718      	adds	r7, #24
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}
 80154de:	bf00      	nop
 80154e0:	24064d60 	.word	0x24064d60
 80154e4:	2406b450 	.word	0x2406b450

080154e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b08a      	sub	sp, #40	; 0x28
 80154ec:	af04      	add	r7, sp, #16
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	60b9      	str	r1, [r7, #8]
 80154f2:	607a      	str	r2, [r7, #4]
 80154f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d009      	beq.n	8015514 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d003      	beq.n	801550e <ip4_output_if+0x26>
 8015506:	68bb      	ldr	r3, [r7, #8]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d102      	bne.n	8015514 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015510:	3304      	adds	r3, #4
 8015512:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015514:	78fa      	ldrb	r2, [r7, #3]
 8015516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015518:	9302      	str	r3, [sp, #8]
 801551a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801551e:	9301      	str	r3, [sp, #4]
 8015520:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015524:	9300      	str	r3, [sp, #0]
 8015526:	4613      	mov	r3, r2
 8015528:	687a      	ldr	r2, [r7, #4]
 801552a:	6979      	ldr	r1, [r7, #20]
 801552c:	68f8      	ldr	r0, [r7, #12]
 801552e:	f000 f805 	bl	801553c <ip4_output_if_src>
 8015532:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015534:	4618      	mov	r0, r3
 8015536:	3718      	adds	r7, #24
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}

0801553c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b088      	sub	sp, #32
 8015540:	af00      	add	r7, sp, #0
 8015542:	60f8      	str	r0, [r7, #12]
 8015544:	60b9      	str	r1, [r7, #8]
 8015546:	607a      	str	r2, [r7, #4]
 8015548:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	7b9b      	ldrb	r3, [r3, #14]
 801554e:	2b01      	cmp	r3, #1
 8015550:	d006      	beq.n	8015560 <ip4_output_if_src+0x24>
 8015552:	4b4b      	ldr	r3, [pc, #300]	; (8015680 <ip4_output_if_src+0x144>)
 8015554:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015558:	494a      	ldr	r1, [pc, #296]	; (8015684 <ip4_output_if_src+0x148>)
 801555a:	484b      	ldr	r0, [pc, #300]	; (8015688 <ip4_output_if_src+0x14c>)
 801555c:	f001 fa9e 	bl	8016a9c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d060      	beq.n	8015628 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015566:	2314      	movs	r3, #20
 8015568:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801556a:	2114      	movs	r1, #20
 801556c:	68f8      	ldr	r0, [r7, #12]
 801556e:	f7f8 f9fb 	bl	800d968 <pbuf_add_header>
 8015572:	4603      	mov	r3, r0
 8015574:	2b00      	cmp	r3, #0
 8015576:	d002      	beq.n	801557e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015578:	f06f 0301 	mvn.w	r3, #1
 801557c:	e07c      	b.n	8015678 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	895b      	ldrh	r3, [r3, #10]
 8015588:	2b13      	cmp	r3, #19
 801558a:	d806      	bhi.n	801559a <ip4_output_if_src+0x5e>
 801558c:	4b3c      	ldr	r3, [pc, #240]	; (8015680 <ip4_output_if_src+0x144>)
 801558e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015592:	493e      	ldr	r1, [pc, #248]	; (801568c <ip4_output_if_src+0x150>)
 8015594:	483c      	ldr	r0, [pc, #240]	; (8015688 <ip4_output_if_src+0x14c>)
 8015596:	f001 fa81 	bl	8016a9c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801559a:	69fb      	ldr	r3, [r7, #28]
 801559c:	78fa      	ldrb	r2, [r7, #3]
 801559e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80155a0:	69fb      	ldr	r3, [r7, #28]
 80155a2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80155a6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	681a      	ldr	r2, [r3, #0]
 80155ac:	69fb      	ldr	r3, [r7, #28]
 80155ae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80155b0:	8b7b      	ldrh	r3, [r7, #26]
 80155b2:	089b      	lsrs	r3, r3, #2
 80155b4:	b29b      	uxth	r3, r3
 80155b6:	b2db      	uxtb	r3, r3
 80155b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155bc:	b2da      	uxtb	r2, r3
 80155be:	69fb      	ldr	r3, [r7, #28]
 80155c0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80155c2:	69fb      	ldr	r3, [r7, #28]
 80155c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80155c8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	891b      	ldrh	r3, [r3, #8]
 80155ce:	4618      	mov	r0, r3
 80155d0:	f7f6 fcce 	bl	800bf70 <lwip_htons>
 80155d4:	4603      	mov	r3, r0
 80155d6:	461a      	mov	r2, r3
 80155d8:	69fb      	ldr	r3, [r7, #28]
 80155da:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80155dc:	69fb      	ldr	r3, [r7, #28]
 80155de:	2200      	movs	r2, #0
 80155e0:	719a      	strb	r2, [r3, #6]
 80155e2:	2200      	movs	r2, #0
 80155e4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80155e6:	4b2a      	ldr	r3, [pc, #168]	; (8015690 <ip4_output_if_src+0x154>)
 80155e8:	881b      	ldrh	r3, [r3, #0]
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7f6 fcc0 	bl	800bf70 <lwip_htons>
 80155f0:	4603      	mov	r3, r0
 80155f2:	461a      	mov	r2, r3
 80155f4:	69fb      	ldr	r3, [r7, #28]
 80155f6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80155f8:	4b25      	ldr	r3, [pc, #148]	; (8015690 <ip4_output_if_src+0x154>)
 80155fa:	881b      	ldrh	r3, [r3, #0]
 80155fc:	3301      	adds	r3, #1
 80155fe:	b29a      	uxth	r2, r3
 8015600:	4b23      	ldr	r3, [pc, #140]	; (8015690 <ip4_output_if_src+0x154>)
 8015602:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015604:	68bb      	ldr	r3, [r7, #8]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d104      	bne.n	8015614 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801560a:	4b22      	ldr	r3, [pc, #136]	; (8015694 <ip4_output_if_src+0x158>)
 801560c:	681a      	ldr	r2, [r3, #0]
 801560e:	69fb      	ldr	r3, [r7, #28]
 8015610:	60da      	str	r2, [r3, #12]
 8015612:	e003      	b.n	801561c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	681a      	ldr	r2, [r3, #0]
 8015618:	69fb      	ldr	r3, [r7, #28]
 801561a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	2200      	movs	r2, #0
 8015620:	729a      	strb	r2, [r3, #10]
 8015622:	2200      	movs	r2, #0
 8015624:	72da      	strb	r2, [r3, #11]
 8015626:	e00f      	b.n	8015648 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	895b      	ldrh	r3, [r3, #10]
 801562c:	2b13      	cmp	r3, #19
 801562e:	d802      	bhi.n	8015636 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015630:	f06f 0301 	mvn.w	r3, #1
 8015634:	e020      	b.n	8015678 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801563c:	69fb      	ldr	r3, [r7, #28]
 801563e:	691b      	ldr	r3, [r3, #16]
 8015640:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015642:	f107 0314 	add.w	r3, r7, #20
 8015646:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801564c:	2b00      	cmp	r3, #0
 801564e:	d00c      	beq.n	801566a <ip4_output_if_src+0x12e>
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	891a      	ldrh	r2, [r3, #8]
 8015654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015658:	429a      	cmp	r2, r3
 801565a:	d906      	bls.n	801566a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801565c:	687a      	ldr	r2, [r7, #4]
 801565e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015660:	68f8      	ldr	r0, [r7, #12]
 8015662:	f000 fd4d 	bl	8016100 <ip4_frag>
 8015666:	4603      	mov	r3, r0
 8015668:	e006      	b.n	8015678 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801566c:	695b      	ldr	r3, [r3, #20]
 801566e:	687a      	ldr	r2, [r7, #4]
 8015670:	68f9      	ldr	r1, [r7, #12]
 8015672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015674:	4798      	blx	r3
 8015676:	4603      	mov	r3, r0
}
 8015678:	4618      	mov	r0, r3
 801567a:	3720      	adds	r7, #32
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}
 8015680:	0801a1b4 	.word	0x0801a1b4
 8015684:	0801a1e8 	.word	0x0801a1e8
 8015688:	0801a1f4 	.word	0x0801a1f4
 801568c:	0801a21c 	.word	0x0801a21c
 8015690:	24064652 	.word	0x24064652
 8015694:	0801a65c 	.word	0x0801a65c

08015698 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015698:	b480      	push	{r7}
 801569a:	b085      	sub	sp, #20
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80156ac:	d002      	beq.n	80156b4 <ip4_addr_isbroadcast_u32+0x1c>
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d101      	bne.n	80156b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80156b4:	2301      	movs	r3, #1
 80156b6:	e02a      	b.n	801570e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80156be:	f003 0302 	and.w	r3, r3, #2
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d101      	bne.n	80156ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80156c6:	2300      	movs	r3, #0
 80156c8:	e021      	b.n	801570e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80156ca:	683b      	ldr	r3, [r7, #0]
 80156cc:	3304      	adds	r3, #4
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	687a      	ldr	r2, [r7, #4]
 80156d2:	429a      	cmp	r2, r3
 80156d4:	d101      	bne.n	80156da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80156d6:	2300      	movs	r3, #0
 80156d8:	e019      	b.n	801570e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80156da:	68fa      	ldr	r2, [r7, #12]
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	3304      	adds	r3, #4
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	405a      	eors	r2, r3
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	3308      	adds	r3, #8
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	4013      	ands	r3, r2
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d10d      	bne.n	801570c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	3308      	adds	r3, #8
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	43da      	mvns	r2, r3
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	3308      	adds	r3, #8
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015704:	429a      	cmp	r2, r3
 8015706:	d101      	bne.n	801570c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015708:	2301      	movs	r3, #1
 801570a:	e000      	b.n	801570e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801570c:	2300      	movs	r3, #0
  }
}
 801570e:	4618      	mov	r0, r3
 8015710:	3714      	adds	r7, #20
 8015712:	46bd      	mov	sp, r7
 8015714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015718:	4770      	bx	lr
	...

0801571c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b084      	sub	sp, #16
 8015720:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015722:	2300      	movs	r3, #0
 8015724:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015726:	4b12      	ldr	r3, [pc, #72]	; (8015770 <ip_reass_tmr+0x54>)
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801572c:	e018      	b.n	8015760 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	7fdb      	ldrb	r3, [r3, #31]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d00b      	beq.n	801574e <ip_reass_tmr+0x32>
      r->timer--;
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	7fdb      	ldrb	r3, [r3, #31]
 801573a:	3b01      	subs	r3, #1
 801573c:	b2da      	uxtb	r2, r3
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	60fb      	str	r3, [r7, #12]
 801574c:	e008      	b.n	8015760 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015758:	68b9      	ldr	r1, [r7, #8]
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	f000 f80a 	bl	8015774 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d1e3      	bne.n	801572e <ip_reass_tmr+0x12>
    }
  }
}
 8015766:	bf00      	nop
 8015768:	bf00      	nop
 801576a:	3710      	adds	r7, #16
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}
 8015770:	24064654 	.word	0x24064654

08015774 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b088      	sub	sp, #32
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801577e:	2300      	movs	r3, #0
 8015780:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015782:	683a      	ldr	r2, [r7, #0]
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	429a      	cmp	r2, r3
 8015788:	d105      	bne.n	8015796 <ip_reass_free_complete_datagram+0x22>
 801578a:	4b45      	ldr	r3, [pc, #276]	; (80158a0 <ip_reass_free_complete_datagram+0x12c>)
 801578c:	22ab      	movs	r2, #171	; 0xab
 801578e:	4945      	ldr	r1, [pc, #276]	; (80158a4 <ip_reass_free_complete_datagram+0x130>)
 8015790:	4845      	ldr	r0, [pc, #276]	; (80158a8 <ip_reass_free_complete_datagram+0x134>)
 8015792:	f001 f983 	bl	8016a9c <iprintf>
  if (prev != NULL) {
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d00a      	beq.n	80157b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	687a      	ldr	r2, [r7, #4]
 80157a2:	429a      	cmp	r2, r3
 80157a4:	d005      	beq.n	80157b2 <ip_reass_free_complete_datagram+0x3e>
 80157a6:	4b3e      	ldr	r3, [pc, #248]	; (80158a0 <ip_reass_free_complete_datagram+0x12c>)
 80157a8:	22ad      	movs	r2, #173	; 0xad
 80157aa:	4940      	ldr	r1, [pc, #256]	; (80158ac <ip_reass_free_complete_datagram+0x138>)
 80157ac:	483e      	ldr	r0, [pc, #248]	; (80158a8 <ip_reass_free_complete_datagram+0x134>)
 80157ae:	f001 f975 	bl	8016a9c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	685b      	ldr	r3, [r3, #4]
 80157b6:	685b      	ldr	r3, [r3, #4]
 80157b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80157ba:	697b      	ldr	r3, [r7, #20]
 80157bc:	889b      	ldrh	r3, [r3, #4]
 80157be:	b29b      	uxth	r3, r3
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d12a      	bne.n	801581a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	685b      	ldr	r3, [r3, #4]
 80157c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80157ca:	697b      	ldr	r3, [r7, #20]
 80157cc:	681a      	ldr	r2, [r3, #0]
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	6858      	ldr	r0, [r3, #4]
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	3308      	adds	r3, #8
 80157da:	2214      	movs	r2, #20
 80157dc:	4619      	mov	r1, r3
 80157de:	f001 f8ec 	bl	80169ba <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80157e2:	2101      	movs	r1, #1
 80157e4:	69b8      	ldr	r0, [r7, #24]
 80157e6:	f7ff fc3d 	bl	8015064 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80157ea:	69b8      	ldr	r0, [r7, #24]
 80157ec:	f7f8 f9e0 	bl	800dbb0 <pbuf_clen>
 80157f0:	4603      	mov	r3, r0
 80157f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80157f4:	8bfa      	ldrh	r2, [r7, #30]
 80157f6:	8a7b      	ldrh	r3, [r7, #18]
 80157f8:	4413      	add	r3, r2
 80157fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80157fe:	db05      	blt.n	801580c <ip_reass_free_complete_datagram+0x98>
 8015800:	4b27      	ldr	r3, [pc, #156]	; (80158a0 <ip_reass_free_complete_datagram+0x12c>)
 8015802:	22bc      	movs	r2, #188	; 0xbc
 8015804:	492a      	ldr	r1, [pc, #168]	; (80158b0 <ip_reass_free_complete_datagram+0x13c>)
 8015806:	4828      	ldr	r0, [pc, #160]	; (80158a8 <ip_reass_free_complete_datagram+0x134>)
 8015808:	f001 f948 	bl	8016a9c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801580c:	8bfa      	ldrh	r2, [r7, #30]
 801580e:	8a7b      	ldrh	r3, [r7, #18]
 8015810:	4413      	add	r3, r2
 8015812:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015814:	69b8      	ldr	r0, [r7, #24]
 8015816:	f7f8 f93d 	bl	800da94 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	685b      	ldr	r3, [r3, #4]
 801581e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015820:	e01f      	b.n	8015862 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015822:	69bb      	ldr	r3, [r7, #24]
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015828:	69bb      	ldr	r3, [r7, #24]
 801582a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801582c:	697b      	ldr	r3, [r7, #20]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015832:	68f8      	ldr	r0, [r7, #12]
 8015834:	f7f8 f9bc 	bl	800dbb0 <pbuf_clen>
 8015838:	4603      	mov	r3, r0
 801583a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801583c:	8bfa      	ldrh	r2, [r7, #30]
 801583e:	8a7b      	ldrh	r3, [r7, #18]
 8015840:	4413      	add	r3, r2
 8015842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015846:	db05      	blt.n	8015854 <ip_reass_free_complete_datagram+0xe0>
 8015848:	4b15      	ldr	r3, [pc, #84]	; (80158a0 <ip_reass_free_complete_datagram+0x12c>)
 801584a:	22cc      	movs	r2, #204	; 0xcc
 801584c:	4918      	ldr	r1, [pc, #96]	; (80158b0 <ip_reass_free_complete_datagram+0x13c>)
 801584e:	4816      	ldr	r0, [pc, #88]	; (80158a8 <ip_reass_free_complete_datagram+0x134>)
 8015850:	f001 f924 	bl	8016a9c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015854:	8bfa      	ldrh	r2, [r7, #30]
 8015856:	8a7b      	ldrh	r3, [r7, #18]
 8015858:	4413      	add	r3, r2
 801585a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801585c:	68f8      	ldr	r0, [r7, #12]
 801585e:	f7f8 f919 	bl	800da94 <pbuf_free>
  while (p != NULL) {
 8015862:	69bb      	ldr	r3, [r7, #24]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d1dc      	bne.n	8015822 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015868:	6839      	ldr	r1, [r7, #0]
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	f000 f8c2 	bl	80159f4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015870:	4b10      	ldr	r3, [pc, #64]	; (80158b4 <ip_reass_free_complete_datagram+0x140>)
 8015872:	881b      	ldrh	r3, [r3, #0]
 8015874:	8bfa      	ldrh	r2, [r7, #30]
 8015876:	429a      	cmp	r2, r3
 8015878:	d905      	bls.n	8015886 <ip_reass_free_complete_datagram+0x112>
 801587a:	4b09      	ldr	r3, [pc, #36]	; (80158a0 <ip_reass_free_complete_datagram+0x12c>)
 801587c:	22d2      	movs	r2, #210	; 0xd2
 801587e:	490e      	ldr	r1, [pc, #56]	; (80158b8 <ip_reass_free_complete_datagram+0x144>)
 8015880:	4809      	ldr	r0, [pc, #36]	; (80158a8 <ip_reass_free_complete_datagram+0x134>)
 8015882:	f001 f90b 	bl	8016a9c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015886:	4b0b      	ldr	r3, [pc, #44]	; (80158b4 <ip_reass_free_complete_datagram+0x140>)
 8015888:	881a      	ldrh	r2, [r3, #0]
 801588a:	8bfb      	ldrh	r3, [r7, #30]
 801588c:	1ad3      	subs	r3, r2, r3
 801588e:	b29a      	uxth	r2, r3
 8015890:	4b08      	ldr	r3, [pc, #32]	; (80158b4 <ip_reass_free_complete_datagram+0x140>)
 8015892:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015894:	8bfb      	ldrh	r3, [r7, #30]
}
 8015896:	4618      	mov	r0, r3
 8015898:	3720      	adds	r7, #32
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}
 801589e:	bf00      	nop
 80158a0:	0801a24c 	.word	0x0801a24c
 80158a4:	0801a288 	.word	0x0801a288
 80158a8:	0801a294 	.word	0x0801a294
 80158ac:	0801a2bc 	.word	0x0801a2bc
 80158b0:	0801a2d0 	.word	0x0801a2d0
 80158b4:	24064658 	.word	0x24064658
 80158b8:	0801a2f0 	.word	0x0801a2f0

080158bc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b08a      	sub	sp, #40	; 0x28
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
 80158c4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80158c6:	2300      	movs	r3, #0
 80158c8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80158ca:	2300      	movs	r3, #0
 80158cc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80158ce:	2300      	movs	r3, #0
 80158d0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80158d2:	2300      	movs	r3, #0
 80158d4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80158d6:	2300      	movs	r3, #0
 80158d8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80158da:	4b28      	ldr	r3, [pc, #160]	; (801597c <ip_reass_remove_oldest_datagram+0xc0>)
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80158e0:	e030      	b.n	8015944 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80158e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e4:	695a      	ldr	r2, [r3, #20]
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	68db      	ldr	r3, [r3, #12]
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d10c      	bne.n	8015908 <ip_reass_remove_oldest_datagram+0x4c>
 80158ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f0:	699a      	ldr	r2, [r3, #24]
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	691b      	ldr	r3, [r3, #16]
 80158f6:	429a      	cmp	r2, r3
 80158f8:	d106      	bne.n	8015908 <ip_reass_remove_oldest_datagram+0x4c>
 80158fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158fc:	899a      	ldrh	r2, [r3, #12]
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	889b      	ldrh	r3, [r3, #4]
 8015902:	b29b      	uxth	r3, r3
 8015904:	429a      	cmp	r2, r3
 8015906:	d014      	beq.n	8015932 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015908:	693b      	ldr	r3, [r7, #16]
 801590a:	3301      	adds	r3, #1
 801590c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801590e:	6a3b      	ldr	r3, [r7, #32]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d104      	bne.n	801591e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015916:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015918:	69fb      	ldr	r3, [r7, #28]
 801591a:	61bb      	str	r3, [r7, #24]
 801591c:	e009      	b.n	8015932 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015920:	7fda      	ldrb	r2, [r3, #31]
 8015922:	6a3b      	ldr	r3, [r7, #32]
 8015924:	7fdb      	ldrb	r3, [r3, #31]
 8015926:	429a      	cmp	r2, r3
 8015928:	d803      	bhi.n	8015932 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801592c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801592e:	69fb      	ldr	r3, [r7, #28]
 8015930:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d001      	beq.n	801593e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801593c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015946:	2b00      	cmp	r3, #0
 8015948:	d1cb      	bne.n	80158e2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801594a:	6a3b      	ldr	r3, [r7, #32]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d008      	beq.n	8015962 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015950:	69b9      	ldr	r1, [r7, #24]
 8015952:	6a38      	ldr	r0, [r7, #32]
 8015954:	f7ff ff0e 	bl	8015774 <ip_reass_free_complete_datagram>
 8015958:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801595a:	697a      	ldr	r2, [r7, #20]
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	4413      	add	r3, r2
 8015960:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015962:	697a      	ldr	r2, [r7, #20]
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	429a      	cmp	r2, r3
 8015968:	da02      	bge.n	8015970 <ip_reass_remove_oldest_datagram+0xb4>
 801596a:	693b      	ldr	r3, [r7, #16]
 801596c:	2b01      	cmp	r3, #1
 801596e:	dcac      	bgt.n	80158ca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015970:	697b      	ldr	r3, [r7, #20]
}
 8015972:	4618      	mov	r0, r3
 8015974:	3728      	adds	r7, #40	; 0x28
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
 801597a:	bf00      	nop
 801597c:	24064654 	.word	0x24064654

08015980 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b084      	sub	sp, #16
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
 8015988:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801598a:	2004      	movs	r0, #4
 801598c:	f7f7 f890 	bl	800cab0 <memp_malloc>
 8015990:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d110      	bne.n	80159ba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015998:	6839      	ldr	r1, [r7, #0]
 801599a:	6878      	ldr	r0, [r7, #4]
 801599c:	f7ff ff8e 	bl	80158bc <ip_reass_remove_oldest_datagram>
 80159a0:	4602      	mov	r2, r0
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	4293      	cmp	r3, r2
 80159a6:	dc03      	bgt.n	80159b0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80159a8:	2004      	movs	r0, #4
 80159aa:	f7f7 f881 	bl	800cab0 <memp_malloc>
 80159ae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d101      	bne.n	80159ba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80159b6:	2300      	movs	r3, #0
 80159b8:	e016      	b.n	80159e8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80159ba:	2220      	movs	r2, #32
 80159bc:	2100      	movs	r1, #0
 80159be:	68f8      	ldr	r0, [r7, #12]
 80159c0:	f001 f809 	bl	80169d6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	220f      	movs	r2, #15
 80159c8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80159ca:	4b09      	ldr	r3, [pc, #36]	; (80159f0 <ip_reass_enqueue_new_datagram+0x70>)
 80159cc:	681a      	ldr	r2, [r3, #0]
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80159d2:	4a07      	ldr	r2, [pc, #28]	; (80159f0 <ip_reass_enqueue_new_datagram+0x70>)
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	3308      	adds	r3, #8
 80159dc:	2214      	movs	r2, #20
 80159de:	6879      	ldr	r1, [r7, #4]
 80159e0:	4618      	mov	r0, r3
 80159e2:	f000 ffea 	bl	80169ba <memcpy>
  return ipr;
 80159e6:	68fb      	ldr	r3, [r7, #12]
}
 80159e8:	4618      	mov	r0, r3
 80159ea:	3710      	adds	r7, #16
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bd80      	pop	{r7, pc}
 80159f0:	24064654 	.word	0x24064654

080159f4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b082      	sub	sp, #8
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
 80159fc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80159fe:	4b10      	ldr	r3, [pc, #64]	; (8015a40 <ip_reass_dequeue_datagram+0x4c>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	687a      	ldr	r2, [r7, #4]
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d104      	bne.n	8015a12 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	4a0c      	ldr	r2, [pc, #48]	; (8015a40 <ip_reass_dequeue_datagram+0x4c>)
 8015a0e:	6013      	str	r3, [r2, #0]
 8015a10:	e00d      	b.n	8015a2e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d106      	bne.n	8015a26 <ip_reass_dequeue_datagram+0x32>
 8015a18:	4b0a      	ldr	r3, [pc, #40]	; (8015a44 <ip_reass_dequeue_datagram+0x50>)
 8015a1a:	f240 1245 	movw	r2, #325	; 0x145
 8015a1e:	490a      	ldr	r1, [pc, #40]	; (8015a48 <ip_reass_dequeue_datagram+0x54>)
 8015a20:	480a      	ldr	r0, [pc, #40]	; (8015a4c <ip_reass_dequeue_datagram+0x58>)
 8015a22:	f001 f83b 	bl	8016a9c <iprintf>
    prev->next = ipr->next;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	681a      	ldr	r2, [r3, #0]
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015a2e:	6879      	ldr	r1, [r7, #4]
 8015a30:	2004      	movs	r0, #4
 8015a32:	f7f7 f8b3 	bl	800cb9c <memp_free>
}
 8015a36:	bf00      	nop
 8015a38:	3708      	adds	r7, #8
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bd80      	pop	{r7, pc}
 8015a3e:	bf00      	nop
 8015a40:	24064654 	.word	0x24064654
 8015a44:	0801a24c 	.word	0x0801a24c
 8015a48:	0801a314 	.word	0x0801a314
 8015a4c:	0801a294 	.word	0x0801a294

08015a50 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b08c      	sub	sp, #48	; 0x30
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	60f8      	str	r0, [r7, #12]
 8015a58:	60b9      	str	r1, [r7, #8]
 8015a5a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015a60:	2301      	movs	r3, #1
 8015a62:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	685b      	ldr	r3, [r3, #4]
 8015a68:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015a6a:	69fb      	ldr	r3, [r7, #28]
 8015a6c:	885b      	ldrh	r3, [r3, #2]
 8015a6e:	b29b      	uxth	r3, r3
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7f6 fa7d 	bl	800bf70 <lwip_htons>
 8015a76:	4603      	mov	r3, r0
 8015a78:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015a7a:	69fb      	ldr	r3, [r7, #28]
 8015a7c:	781b      	ldrb	r3, [r3, #0]
 8015a7e:	f003 030f 	and.w	r3, r3, #15
 8015a82:	b2db      	uxtb	r3, r3
 8015a84:	009b      	lsls	r3, r3, #2
 8015a86:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015a88:	7e7b      	ldrb	r3, [r7, #25]
 8015a8a:	b29b      	uxth	r3, r3
 8015a8c:	8b7a      	ldrh	r2, [r7, #26]
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d202      	bcs.n	8015a98 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a96:	e135      	b.n	8015d04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015a98:	7e7b      	ldrb	r3, [r7, #25]
 8015a9a:	b29b      	uxth	r3, r3
 8015a9c:	8b7a      	ldrh	r2, [r7, #26]
 8015a9e:	1ad3      	subs	r3, r2, r3
 8015aa0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015aa2:	69fb      	ldr	r3, [r7, #28]
 8015aa4:	88db      	ldrh	r3, [r3, #6]
 8015aa6:	b29b      	uxth	r3, r3
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7f6 fa61 	bl	800bf70 <lwip_htons>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ab4:	b29b      	uxth	r3, r3
 8015ab6:	00db      	lsls	r3, r3, #3
 8015ab8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	685b      	ldr	r3, [r3, #4]
 8015abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	701a      	strb	r2, [r3, #0]
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	705a      	strb	r2, [r3, #1]
 8015aca:	2200      	movs	r2, #0
 8015acc:	709a      	strb	r2, [r3, #2]
 8015ace:	2200      	movs	r2, #0
 8015ad0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ad4:	8afa      	ldrh	r2, [r7, #22]
 8015ad6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015ad8:	8afa      	ldrh	r2, [r7, #22]
 8015ada:	8b7b      	ldrh	r3, [r7, #26]
 8015adc:	4413      	add	r3, r2
 8015ade:	b29a      	uxth	r2, r3
 8015ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ae2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ae6:	88db      	ldrh	r3, [r3, #6]
 8015ae8:	b29b      	uxth	r3, r3
 8015aea:	8afa      	ldrh	r2, [r7, #22]
 8015aec:	429a      	cmp	r2, r3
 8015aee:	d902      	bls.n	8015af6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015af4:	e106      	b.n	8015d04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	685b      	ldr	r3, [r3, #4]
 8015afa:	627b      	str	r3, [r7, #36]	; 0x24
 8015afc:	e068      	b.n	8015bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b06:	889b      	ldrh	r3, [r3, #4]
 8015b08:	b29a      	uxth	r2, r3
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	889b      	ldrh	r3, [r3, #4]
 8015b0e:	b29b      	uxth	r3, r3
 8015b10:	429a      	cmp	r2, r3
 8015b12:	d235      	bcs.n	8015b80 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b18:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d020      	beq.n	8015b62 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b22:	889b      	ldrh	r3, [r3, #4]
 8015b24:	b29a      	uxth	r2, r3
 8015b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b28:	88db      	ldrh	r3, [r3, #6]
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	d307      	bcc.n	8015b40 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b32:	88db      	ldrh	r3, [r3, #6]
 8015b34:	b29a      	uxth	r2, r3
 8015b36:	693b      	ldr	r3, [r7, #16]
 8015b38:	889b      	ldrh	r3, [r3, #4]
 8015b3a:	b29b      	uxth	r3, r3
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d902      	bls.n	8015b46 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b44:	e0de      	b.n	8015d04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b48:	68ba      	ldr	r2, [r7, #8]
 8015b4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b4e:	88db      	ldrh	r3, [r3, #6]
 8015b50:	b29a      	uxth	r2, r3
 8015b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b54:	889b      	ldrh	r3, [r3, #4]
 8015b56:	b29b      	uxth	r3, r3
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	d03d      	beq.n	8015bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015b60:	e03a      	b.n	8015bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b64:	88db      	ldrh	r3, [r3, #6]
 8015b66:	b29a      	uxth	r2, r3
 8015b68:	693b      	ldr	r3, [r7, #16]
 8015b6a:	889b      	ldrh	r3, [r3, #4]
 8015b6c:	b29b      	uxth	r3, r3
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	d902      	bls.n	8015b78 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b76:	e0c5      	b.n	8015d04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	68ba      	ldr	r2, [r7, #8]
 8015b7c:	605a      	str	r2, [r3, #4]
      break;
 8015b7e:	e02b      	b.n	8015bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b82:	889b      	ldrh	r3, [r3, #4]
 8015b84:	b29a      	uxth	r2, r3
 8015b86:	693b      	ldr	r3, [r7, #16]
 8015b88:	889b      	ldrh	r3, [r3, #4]
 8015b8a:	b29b      	uxth	r3, r3
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	d102      	bne.n	8015b96 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b94:	e0b6      	b.n	8015d04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b98:	889b      	ldrh	r3, [r3, #4]
 8015b9a:	b29a      	uxth	r2, r3
 8015b9c:	693b      	ldr	r3, [r7, #16]
 8015b9e:	88db      	ldrh	r3, [r3, #6]
 8015ba0:	b29b      	uxth	r3, r3
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d202      	bcs.n	8015bac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015baa:	e0ab      	b.n	8015d04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d009      	beq.n	8015bc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb4:	88db      	ldrh	r3, [r3, #6]
 8015bb6:	b29a      	uxth	r2, r3
 8015bb8:	693b      	ldr	r3, [r7, #16]
 8015bba:	889b      	ldrh	r3, [r3, #4]
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	d001      	beq.n	8015bc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015bc6:	693b      	ldr	r3, [r7, #16]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d193      	bne.n	8015afe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015bd6:	e000      	b.n	8015bda <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015bd8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d12d      	bne.n	8015c3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d01c      	beq.n	8015c20 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be8:	88db      	ldrh	r3, [r3, #6]
 8015bea:	b29a      	uxth	r2, r3
 8015bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bee:	889b      	ldrh	r3, [r3, #4]
 8015bf0:	b29b      	uxth	r3, r3
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	d906      	bls.n	8015c04 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015bf6:	4b45      	ldr	r3, [pc, #276]	; (8015d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015bf8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015bfc:	4944      	ldr	r1, [pc, #272]	; (8015d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015bfe:	4845      	ldr	r0, [pc, #276]	; (8015d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c00:	f000 ff4c 	bl	8016a9c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c06:	68ba      	ldr	r2, [r7, #8]
 8015c08:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c0c:	88db      	ldrh	r3, [r3, #6]
 8015c0e:	b29a      	uxth	r2, r3
 8015c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c12:	889b      	ldrh	r3, [r3, #4]
 8015c14:	b29b      	uxth	r3, r3
 8015c16:	429a      	cmp	r2, r3
 8015c18:	d010      	beq.n	8015c3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	623b      	str	r3, [r7, #32]
 8015c1e:	e00d      	b.n	8015c3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	685b      	ldr	r3, [r3, #4]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d006      	beq.n	8015c36 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015c28:	4b38      	ldr	r3, [pc, #224]	; (8015d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c2a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015c2e:	493a      	ldr	r1, [pc, #232]	; (8015d18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015c30:	4838      	ldr	r0, [pc, #224]	; (8015d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c32:	f000 ff33 	bl	8016a9c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	68ba      	ldr	r2, [r7, #8]
 8015c3a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d105      	bne.n	8015c4e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	7f9b      	ldrb	r3, [r3, #30]
 8015c46:	f003 0301 	and.w	r3, r3, #1
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d059      	beq.n	8015d02 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015c4e:	6a3b      	ldr	r3, [r7, #32]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d04f      	beq.n	8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	685b      	ldr	r3, [r3, #4]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d006      	beq.n	8015c6a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	685b      	ldr	r3, [r3, #4]
 8015c60:	685b      	ldr	r3, [r3, #4]
 8015c62:	889b      	ldrh	r3, [r3, #4]
 8015c64:	b29b      	uxth	r3, r3
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d002      	beq.n	8015c70 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	623b      	str	r3, [r7, #32]
 8015c6e:	e041      	b.n	8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c72:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015c7a:	e012      	b.n	8015ca2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7e:	685b      	ldr	r3, [r3, #4]
 8015c80:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c84:	88db      	ldrh	r3, [r3, #6]
 8015c86:	b29a      	uxth	r2, r3
 8015c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8a:	889b      	ldrh	r3, [r3, #4]
 8015c8c:	b29b      	uxth	r3, r3
 8015c8e:	429a      	cmp	r2, r3
 8015c90:	d002      	beq.n	8015c98 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015c92:	2300      	movs	r3, #0
 8015c94:	623b      	str	r3, [r7, #32]
            break;
 8015c96:	e007      	b.n	8015ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d1e9      	bne.n	8015c7c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015ca8:	6a3b      	ldr	r3, [r7, #32]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d022      	beq.n	8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	685b      	ldr	r3, [r3, #4]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d106      	bne.n	8015cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015cb6:	4b15      	ldr	r3, [pc, #84]	; (8015d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015cb8:	f240 12df 	movw	r2, #479	; 0x1df
 8015cbc:	4917      	ldr	r1, [pc, #92]	; (8015d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015cbe:	4815      	ldr	r0, [pc, #84]	; (8015d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015cc0:	f000 feec 	bl	8016a9c <iprintf>
          LWIP_ASSERT("sanity check",
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	685b      	ldr	r3, [r3, #4]
 8015cc8:	685b      	ldr	r3, [r3, #4]
 8015cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d106      	bne.n	8015cde <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015cd0:	4b0e      	ldr	r3, [pc, #56]	; (8015d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015cd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015cd6:	4911      	ldr	r1, [pc, #68]	; (8015d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015cd8:	480e      	ldr	r0, [pc, #56]	; (8015d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015cda:	f000 fedf 	bl	8016a9c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d006      	beq.n	8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015ce6:	4b09      	ldr	r3, [pc, #36]	; (8015d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ce8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015cec:	490c      	ldr	r1, [pc, #48]	; (8015d20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015cee:	4809      	ldr	r0, [pc, #36]	; (8015d14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015cf0:	f000 fed4 	bl	8016a9c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015cf4:	6a3b      	ldr	r3, [r7, #32]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	bf14      	ite	ne
 8015cfa:	2301      	movne	r3, #1
 8015cfc:	2300      	moveq	r3, #0
 8015cfe:	b2db      	uxtb	r3, r3
 8015d00:	e000      	b.n	8015d04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015d02:	2300      	movs	r3, #0
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3730      	adds	r7, #48	; 0x30
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}
 8015d0c:	0801a24c 	.word	0x0801a24c
 8015d10:	0801a330 	.word	0x0801a330
 8015d14:	0801a294 	.word	0x0801a294
 8015d18:	0801a350 	.word	0x0801a350
 8015d1c:	0801a388 	.word	0x0801a388
 8015d20:	0801a398 	.word	0x0801a398

08015d24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b08e      	sub	sp, #56	; 0x38
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	685b      	ldr	r3, [r3, #4]
 8015d30:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	f003 030f 	and.w	r3, r3, #15
 8015d3a:	b2db      	uxtb	r3, r3
 8015d3c:	009b      	lsls	r3, r3, #2
 8015d3e:	b2db      	uxtb	r3, r3
 8015d40:	2b14      	cmp	r3, #20
 8015d42:	f040 8167 	bne.w	8016014 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d48:	88db      	ldrh	r3, [r3, #6]
 8015d4a:	b29b      	uxth	r3, r3
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f7f6 f90f 	bl	800bf70 <lwip_htons>
 8015d52:	4603      	mov	r3, r0
 8015d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d58:	b29b      	uxth	r3, r3
 8015d5a:	00db      	lsls	r3, r3, #3
 8015d5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d60:	885b      	ldrh	r3, [r3, #2]
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	4618      	mov	r0, r3
 8015d66:	f7f6 f903 	bl	800bf70 <lwip_htons>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d70:	781b      	ldrb	r3, [r3, #0]
 8015d72:	f003 030f 	and.w	r3, r3, #15
 8015d76:	b2db      	uxtb	r3, r3
 8015d78:	009b      	lsls	r3, r3, #2
 8015d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d82:	b29b      	uxth	r3, r3
 8015d84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015d86:	429a      	cmp	r2, r3
 8015d88:	f0c0 8146 	bcc.w	8016018 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d90:	b29b      	uxth	r3, r3
 8015d92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015d94:	1ad3      	subs	r3, r2, r3
 8015d96:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	f7f7 ff09 	bl	800dbb0 <pbuf_clen>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015da2:	4b9f      	ldr	r3, [pc, #636]	; (8016020 <ip4_reass+0x2fc>)
 8015da4:	881b      	ldrh	r3, [r3, #0]
 8015da6:	461a      	mov	r2, r3
 8015da8:	8c3b      	ldrh	r3, [r7, #32]
 8015daa:	4413      	add	r3, r2
 8015dac:	2b0a      	cmp	r3, #10
 8015dae:	dd10      	ble.n	8015dd2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015db0:	8c3b      	ldrh	r3, [r7, #32]
 8015db2:	4619      	mov	r1, r3
 8015db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015db6:	f7ff fd81 	bl	80158bc <ip_reass_remove_oldest_datagram>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	f000 812d 	beq.w	801601c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015dc2:	4b97      	ldr	r3, [pc, #604]	; (8016020 <ip4_reass+0x2fc>)
 8015dc4:	881b      	ldrh	r3, [r3, #0]
 8015dc6:	461a      	mov	r2, r3
 8015dc8:	8c3b      	ldrh	r3, [r7, #32]
 8015dca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015dcc:	2b0a      	cmp	r3, #10
 8015dce:	f300 8125 	bgt.w	801601c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015dd2:	4b94      	ldr	r3, [pc, #592]	; (8016024 <ip4_reass+0x300>)
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	633b      	str	r3, [r7, #48]	; 0x30
 8015dd8:	e015      	b.n	8015e06 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ddc:	695a      	ldr	r2, [r3, #20]
 8015dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de0:	68db      	ldr	r3, [r3, #12]
 8015de2:	429a      	cmp	r2, r3
 8015de4:	d10c      	bne.n	8015e00 <ip4_reass+0xdc>
 8015de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de8:	699a      	ldr	r2, [r3, #24]
 8015dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dec:	691b      	ldr	r3, [r3, #16]
 8015dee:	429a      	cmp	r2, r3
 8015df0:	d106      	bne.n	8015e00 <ip4_reass+0xdc>
 8015df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df4:	899a      	ldrh	r2, [r3, #12]
 8015df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df8:	889b      	ldrh	r3, [r3, #4]
 8015dfa:	b29b      	uxth	r3, r3
 8015dfc:	429a      	cmp	r2, r3
 8015dfe:	d006      	beq.n	8015e0e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	633b      	str	r3, [r7, #48]	; 0x30
 8015e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d1e6      	bne.n	8015dda <ip4_reass+0xb6>
 8015e0c:	e000      	b.n	8015e10 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015e0e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d109      	bne.n	8015e2a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015e16:	8c3b      	ldrh	r3, [r7, #32]
 8015e18:	4619      	mov	r1, r3
 8015e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e1c:	f7ff fdb0 	bl	8015980 <ip_reass_enqueue_new_datagram>
 8015e20:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d11c      	bne.n	8015e62 <ip4_reass+0x13e>
      goto nullreturn;
 8015e28:	e109      	b.n	801603e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e2c:	88db      	ldrh	r3, [r3, #6]
 8015e2e:	b29b      	uxth	r3, r3
 8015e30:	4618      	mov	r0, r3
 8015e32:	f7f6 f89d 	bl	800bf70 <lwip_htons>
 8015e36:	4603      	mov	r3, r0
 8015e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d110      	bne.n	8015e62 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e42:	89db      	ldrh	r3, [r3, #14]
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7f6 f893 	bl	800bf70 <lwip_htons>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d006      	beq.n	8015e62 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e56:	3308      	adds	r3, #8
 8015e58:	2214      	movs	r2, #20
 8015e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f000 fdac 	bl	80169ba <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e64:	88db      	ldrh	r3, [r3, #6]
 8015e66:	b29b      	uxth	r3, r3
 8015e68:	f003 0320 	and.w	r3, r3, #32
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	bf0c      	ite	eq
 8015e70:	2301      	moveq	r3, #1
 8015e72:	2300      	movne	r3, #0
 8015e74:	b2db      	uxtb	r3, r3
 8015e76:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015e78:	69fb      	ldr	r3, [r7, #28]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d00e      	beq.n	8015e9c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015e7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e82:	4413      	add	r3, r2
 8015e84:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015e86:	8b7a      	ldrh	r2, [r7, #26]
 8015e88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	f0c0 80a0 	bcc.w	8015fd0 <ip4_reass+0x2ac>
 8015e90:	8b7b      	ldrh	r3, [r7, #26]
 8015e92:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015e96:	4293      	cmp	r3, r2
 8015e98:	f200 809a 	bhi.w	8015fd0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015e9c:	69fa      	ldr	r2, [r7, #28]
 8015e9e:	6879      	ldr	r1, [r7, #4]
 8015ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ea2:	f7ff fdd5 	bl	8015a50 <ip_reass_chain_frag_into_datagram_and_validate>
 8015ea6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015ea8:	697b      	ldr	r3, [r7, #20]
 8015eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015eae:	f000 8091 	beq.w	8015fd4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015eb2:	4b5b      	ldr	r3, [pc, #364]	; (8016020 <ip4_reass+0x2fc>)
 8015eb4:	881a      	ldrh	r2, [r3, #0]
 8015eb6:	8c3b      	ldrh	r3, [r7, #32]
 8015eb8:	4413      	add	r3, r2
 8015eba:	b29a      	uxth	r2, r3
 8015ebc:	4b58      	ldr	r3, [pc, #352]	; (8016020 <ip4_reass+0x2fc>)
 8015ebe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015ec0:	69fb      	ldr	r3, [r7, #28]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d00d      	beq.n	8015ee2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015ec6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015ec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015eca:	4413      	add	r3, r2
 8015ecc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed0:	8a7a      	ldrh	r2, [r7, #18]
 8015ed2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed6:	7f9b      	ldrb	r3, [r3, #30]
 8015ed8:	f043 0301 	orr.w	r3, r3, #1
 8015edc:	b2da      	uxtb	r2, r3
 8015ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	2b01      	cmp	r3, #1
 8015ee6:	d171      	bne.n	8015fcc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eea:	8b9b      	ldrh	r3, [r3, #28]
 8015eec:	3314      	adds	r3, #20
 8015eee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef2:	685b      	ldr	r3, [r3, #4]
 8015ef4:	685b      	ldr	r3, [r3, #4]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015efc:	685b      	ldr	r3, [r3, #4]
 8015efe:	685b      	ldr	r3, [r3, #4]
 8015f00:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f04:	3308      	adds	r3, #8
 8015f06:	2214      	movs	r2, #20
 8015f08:	4619      	mov	r1, r3
 8015f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f0c:	f000 fd55 	bl	80169ba <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015f10:	8a3b      	ldrh	r3, [r7, #16]
 8015f12:	4618      	mov	r0, r3
 8015f14:	f7f6 f82c 	bl	800bf70 <lwip_htons>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	461a      	mov	r2, r3
 8015f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f1e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f22:	2200      	movs	r2, #0
 8015f24:	719a      	strb	r2, [r3, #6]
 8015f26:	2200      	movs	r2, #0
 8015f28:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	729a      	strb	r2, [r3, #10]
 8015f30:	2200      	movs	r2, #0
 8015f32:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f36:	685b      	ldr	r3, [r3, #4]
 8015f38:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015f3a:	e00d      	b.n	8015f58 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f3e:	685b      	ldr	r3, [r3, #4]
 8015f40:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015f42:	2114      	movs	r1, #20
 8015f44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015f46:	f7f7 fd1f 	bl	800d988 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015f4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f7f7 fe6f 	bl	800dc30 <pbuf_cat>
      r = iprh->next_pbuf;
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d1ee      	bne.n	8015f3c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015f5e:	4b31      	ldr	r3, [pc, #196]	; (8016024 <ip4_reass+0x300>)
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d102      	bne.n	8015f6e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015f68:	2300      	movs	r3, #0
 8015f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f6c:	e010      	b.n	8015f90 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015f6e:	4b2d      	ldr	r3, [pc, #180]	; (8016024 <ip4_reass+0x300>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f74:	e007      	b.n	8015f86 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d006      	beq.n	8015f8e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d1f4      	bne.n	8015f76 <ip4_reass+0x252>
 8015f8c:	e000      	b.n	8015f90 <ip4_reass+0x26c>
          break;
 8015f8e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015f90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f94:	f7ff fd2e 	bl	80159f4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015f98:	6878      	ldr	r0, [r7, #4]
 8015f9a:	f7f7 fe09 	bl	800dbb0 <pbuf_clen>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015fa2:	4b1f      	ldr	r3, [pc, #124]	; (8016020 <ip4_reass+0x2fc>)
 8015fa4:	881b      	ldrh	r3, [r3, #0]
 8015fa6:	8c3a      	ldrh	r2, [r7, #32]
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d906      	bls.n	8015fba <ip4_reass+0x296>
 8015fac:	4b1e      	ldr	r3, [pc, #120]	; (8016028 <ip4_reass+0x304>)
 8015fae:	f240 229b 	movw	r2, #667	; 0x29b
 8015fb2:	491e      	ldr	r1, [pc, #120]	; (801602c <ip4_reass+0x308>)
 8015fb4:	481e      	ldr	r0, [pc, #120]	; (8016030 <ip4_reass+0x30c>)
 8015fb6:	f000 fd71 	bl	8016a9c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015fba:	4b19      	ldr	r3, [pc, #100]	; (8016020 <ip4_reass+0x2fc>)
 8015fbc:	881a      	ldrh	r2, [r3, #0]
 8015fbe:	8c3b      	ldrh	r3, [r7, #32]
 8015fc0:	1ad3      	subs	r3, r2, r3
 8015fc2:	b29a      	uxth	r2, r3
 8015fc4:	4b16      	ldr	r3, [pc, #88]	; (8016020 <ip4_reass+0x2fc>)
 8015fc6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	e03c      	b.n	8016046 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015fcc:	2300      	movs	r3, #0
 8015fce:	e03a      	b.n	8016046 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8015fd0:	bf00      	nop
 8015fd2:	e000      	b.n	8015fd6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8015fd4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d106      	bne.n	8015fea <ip4_reass+0x2c6>
 8015fdc:	4b12      	ldr	r3, [pc, #72]	; (8016028 <ip4_reass+0x304>)
 8015fde:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015fe2:	4914      	ldr	r1, [pc, #80]	; (8016034 <ip4_reass+0x310>)
 8015fe4:	4812      	ldr	r0, [pc, #72]	; (8016030 <ip4_reass+0x30c>)
 8015fe6:	f000 fd59 	bl	8016a9c <iprintf>
  if (ipr->p == NULL) {
 8015fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fec:	685b      	ldr	r3, [r3, #4]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d124      	bne.n	801603c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015ff2:	4b0c      	ldr	r3, [pc, #48]	; (8016024 <ip4_reass+0x300>)
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d006      	beq.n	801600a <ip4_reass+0x2e6>
 8015ffc:	4b0a      	ldr	r3, [pc, #40]	; (8016028 <ip4_reass+0x304>)
 8015ffe:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016002:	490d      	ldr	r1, [pc, #52]	; (8016038 <ip4_reass+0x314>)
 8016004:	480a      	ldr	r0, [pc, #40]	; (8016030 <ip4_reass+0x30c>)
 8016006:	f000 fd49 	bl	8016a9c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801600a:	2100      	movs	r1, #0
 801600c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801600e:	f7ff fcf1 	bl	80159f4 <ip_reass_dequeue_datagram>
 8016012:	e014      	b.n	801603e <ip4_reass+0x31a>
    goto nullreturn;
 8016014:	bf00      	nop
 8016016:	e012      	b.n	801603e <ip4_reass+0x31a>
    goto nullreturn;
 8016018:	bf00      	nop
 801601a:	e010      	b.n	801603e <ip4_reass+0x31a>
      goto nullreturn;
 801601c:	bf00      	nop
 801601e:	e00e      	b.n	801603e <ip4_reass+0x31a>
 8016020:	24064658 	.word	0x24064658
 8016024:	24064654 	.word	0x24064654
 8016028:	0801a24c 	.word	0x0801a24c
 801602c:	0801a3bc 	.word	0x0801a3bc
 8016030:	0801a294 	.word	0x0801a294
 8016034:	0801a3d8 	.word	0x0801a3d8
 8016038:	0801a3e4 	.word	0x0801a3e4
  }

nullreturn:
 801603c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f7f7 fd28 	bl	800da94 <pbuf_free>
  return NULL;
 8016044:	2300      	movs	r3, #0
}
 8016046:	4618      	mov	r0, r3
 8016048:	3738      	adds	r7, #56	; 0x38
 801604a:	46bd      	mov	sp, r7
 801604c:	bd80      	pop	{r7, pc}
 801604e:	bf00      	nop

08016050 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016054:	2005      	movs	r0, #5
 8016056:	f7f6 fd2b 	bl	800cab0 <memp_malloc>
 801605a:	4603      	mov	r3, r0
}
 801605c:	4618      	mov	r0, r3
 801605e:	bd80      	pop	{r7, pc}

08016060 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b082      	sub	sp, #8
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d106      	bne.n	801607c <ip_frag_free_pbuf_custom_ref+0x1c>
 801606e:	4b07      	ldr	r3, [pc, #28]	; (801608c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016070:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016074:	4906      	ldr	r1, [pc, #24]	; (8016090 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016076:	4807      	ldr	r0, [pc, #28]	; (8016094 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016078:	f000 fd10 	bl	8016a9c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801607c:	6879      	ldr	r1, [r7, #4]
 801607e:	2005      	movs	r0, #5
 8016080:	f7f6 fd8c 	bl	800cb9c <memp_free>
}
 8016084:	bf00      	nop
 8016086:	3708      	adds	r7, #8
 8016088:	46bd      	mov	sp, r7
 801608a:	bd80      	pop	{r7, pc}
 801608c:	0801a24c 	.word	0x0801a24c
 8016090:	0801a404 	.word	0x0801a404
 8016094:	0801a294 	.word	0x0801a294

08016098 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b084      	sub	sp, #16
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d106      	bne.n	80160b8 <ipfrag_free_pbuf_custom+0x20>
 80160aa:	4b11      	ldr	r3, [pc, #68]	; (80160f0 <ipfrag_free_pbuf_custom+0x58>)
 80160ac:	f240 22ce 	movw	r2, #718	; 0x2ce
 80160b0:	4910      	ldr	r1, [pc, #64]	; (80160f4 <ipfrag_free_pbuf_custom+0x5c>)
 80160b2:	4811      	ldr	r0, [pc, #68]	; (80160f8 <ipfrag_free_pbuf_custom+0x60>)
 80160b4:	f000 fcf2 	bl	8016a9c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80160b8:	68fa      	ldr	r2, [r7, #12]
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	429a      	cmp	r2, r3
 80160be:	d006      	beq.n	80160ce <ipfrag_free_pbuf_custom+0x36>
 80160c0:	4b0b      	ldr	r3, [pc, #44]	; (80160f0 <ipfrag_free_pbuf_custom+0x58>)
 80160c2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80160c6:	490d      	ldr	r1, [pc, #52]	; (80160fc <ipfrag_free_pbuf_custom+0x64>)
 80160c8:	480b      	ldr	r0, [pc, #44]	; (80160f8 <ipfrag_free_pbuf_custom+0x60>)
 80160ca:	f000 fce7 	bl	8016a9c <iprintf>
  if (pcr->original != NULL) {
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	695b      	ldr	r3, [r3, #20]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d004      	beq.n	80160e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	695b      	ldr	r3, [r3, #20]
 80160da:	4618      	mov	r0, r3
 80160dc:	f7f7 fcda 	bl	800da94 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80160e0:	68f8      	ldr	r0, [r7, #12]
 80160e2:	f7ff ffbd 	bl	8016060 <ip_frag_free_pbuf_custom_ref>
}
 80160e6:	bf00      	nop
 80160e8:	3710      	adds	r7, #16
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	0801a24c 	.word	0x0801a24c
 80160f4:	0801a410 	.word	0x0801a410
 80160f8:	0801a294 	.word	0x0801a294
 80160fc:	0801a41c 	.word	0x0801a41c

08016100 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b094      	sub	sp, #80	; 0x50
 8016104:	af02      	add	r7, sp, #8
 8016106:	60f8      	str	r0, [r7, #12]
 8016108:	60b9      	str	r1, [r7, #8]
 801610a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801610c:	2300      	movs	r3, #0
 801610e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016112:	68bb      	ldr	r3, [r7, #8]
 8016114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016116:	3b14      	subs	r3, #20
 8016118:	2b00      	cmp	r3, #0
 801611a:	da00      	bge.n	801611e <ip4_frag+0x1e>
 801611c:	3307      	adds	r3, #7
 801611e:	10db      	asrs	r3, r3, #3
 8016120:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016122:	2314      	movs	r3, #20
 8016124:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801612e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016132:	781b      	ldrb	r3, [r3, #0]
 8016134:	f003 030f 	and.w	r3, r3, #15
 8016138:	b2db      	uxtb	r3, r3
 801613a:	009b      	lsls	r3, r3, #2
 801613c:	b2db      	uxtb	r3, r3
 801613e:	2b14      	cmp	r3, #20
 8016140:	d002      	beq.n	8016148 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016142:	f06f 0305 	mvn.w	r3, #5
 8016146:	e110      	b.n	801636a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	895b      	ldrh	r3, [r3, #10]
 801614c:	2b13      	cmp	r3, #19
 801614e:	d809      	bhi.n	8016164 <ip4_frag+0x64>
 8016150:	4b88      	ldr	r3, [pc, #544]	; (8016374 <ip4_frag+0x274>)
 8016152:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016156:	4988      	ldr	r1, [pc, #544]	; (8016378 <ip4_frag+0x278>)
 8016158:	4888      	ldr	r0, [pc, #544]	; (801637c <ip4_frag+0x27c>)
 801615a:	f000 fc9f 	bl	8016a9c <iprintf>
 801615e:	f06f 0305 	mvn.w	r3, #5
 8016162:	e102      	b.n	801636a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016166:	88db      	ldrh	r3, [r3, #6]
 8016168:	b29b      	uxth	r3, r3
 801616a:	4618      	mov	r0, r3
 801616c:	f7f5 ff00 	bl	800bf70 <lwip_htons>
 8016170:	4603      	mov	r3, r0
 8016172:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016174:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016176:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801617a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801617e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016184:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	891b      	ldrh	r3, [r3, #8]
 801618a:	3b14      	subs	r3, #20
 801618c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016190:	e0e1      	b.n	8016356 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016192:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016194:	00db      	lsls	r3, r3, #3
 8016196:	b29b      	uxth	r3, r3
 8016198:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801619c:	4293      	cmp	r3, r2
 801619e:	bf28      	it	cs
 80161a0:	4613      	movcs	r3, r2
 80161a2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80161a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80161a8:	2114      	movs	r1, #20
 80161aa:	200e      	movs	r0, #14
 80161ac:	f7f7 f98a 	bl	800d4c4 <pbuf_alloc>
 80161b0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80161b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	f000 80d5 	beq.w	8016364 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80161ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161bc:	895b      	ldrh	r3, [r3, #10]
 80161be:	2b13      	cmp	r3, #19
 80161c0:	d806      	bhi.n	80161d0 <ip4_frag+0xd0>
 80161c2:	4b6c      	ldr	r3, [pc, #432]	; (8016374 <ip4_frag+0x274>)
 80161c4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80161c8:	496d      	ldr	r1, [pc, #436]	; (8016380 <ip4_frag+0x280>)
 80161ca:	486c      	ldr	r0, [pc, #432]	; (801637c <ip4_frag+0x27c>)
 80161cc:	f000 fc66 	bl	8016a9c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80161d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161d2:	685b      	ldr	r3, [r3, #4]
 80161d4:	2214      	movs	r2, #20
 80161d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80161d8:	4618      	mov	r0, r3
 80161da:	f000 fbee 	bl	80169ba <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80161de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80161e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80161e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80161ea:	e064      	b.n	80162b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	895a      	ldrh	r2, [r3, #10]
 80161f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161f2:	1ad3      	subs	r3, r2, r3
 80161f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	895b      	ldrh	r3, [r3, #10]
 80161fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d906      	bls.n	801620e <ip4_frag+0x10e>
 8016200:	4b5c      	ldr	r3, [pc, #368]	; (8016374 <ip4_frag+0x274>)
 8016202:	f240 322d 	movw	r2, #813	; 0x32d
 8016206:	495f      	ldr	r1, [pc, #380]	; (8016384 <ip4_frag+0x284>)
 8016208:	485c      	ldr	r0, [pc, #368]	; (801637c <ip4_frag+0x27c>)
 801620a:	f000 fc47 	bl	8016a9c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801620e:	8bfa      	ldrh	r2, [r7, #30]
 8016210:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016214:	4293      	cmp	r3, r2
 8016216:	bf28      	it	cs
 8016218:	4613      	movcs	r3, r2
 801621a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801621e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016222:	2b00      	cmp	r3, #0
 8016224:	d105      	bne.n	8016232 <ip4_frag+0x132>
        poff = 0;
 8016226:	2300      	movs	r3, #0
 8016228:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	60fb      	str	r3, [r7, #12]
        continue;
 8016230:	e041      	b.n	80162b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016232:	f7ff ff0d 	bl	8016050 <ip_frag_alloc_pbuf_custom_ref>
 8016236:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016238:	69bb      	ldr	r3, [r7, #24]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d103      	bne.n	8016246 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801623e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016240:	f7f7 fc28 	bl	800da94 <pbuf_free>
        goto memerr;
 8016244:	e08f      	b.n	8016366 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016246:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801624c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801624e:	4413      	add	r3, r2
 8016250:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016254:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016258:	9201      	str	r2, [sp, #4]
 801625a:	9300      	str	r3, [sp, #0]
 801625c:	4603      	mov	r3, r0
 801625e:	2241      	movs	r2, #65	; 0x41
 8016260:	2000      	movs	r0, #0
 8016262:	f7f7 fa5d 	bl	800d720 <pbuf_alloced_custom>
 8016266:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016268:	697b      	ldr	r3, [r7, #20]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d106      	bne.n	801627c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801626e:	69b8      	ldr	r0, [r7, #24]
 8016270:	f7ff fef6 	bl	8016060 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016276:	f7f7 fc0d 	bl	800da94 <pbuf_free>
        goto memerr;
 801627a:	e074      	b.n	8016366 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801627c:	68f8      	ldr	r0, [r7, #12]
 801627e:	f7f7 fcaf 	bl	800dbe0 <pbuf_ref>
      pcr->original = p;
 8016282:	69bb      	ldr	r3, [r7, #24]
 8016284:	68fa      	ldr	r2, [r7, #12]
 8016286:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016288:	69bb      	ldr	r3, [r7, #24]
 801628a:	4a3f      	ldr	r2, [pc, #252]	; (8016388 <ip4_frag+0x288>)
 801628c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801628e:	6979      	ldr	r1, [r7, #20]
 8016290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016292:	f7f7 fccd 	bl	800dc30 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016296:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801629a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801629e:	1ad3      	subs	r3, r2, r3
 80162a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80162a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d004      	beq.n	80162b6 <ip4_frag+0x1b6>
        poff = 0;
 80162ac:	2300      	movs	r3, #0
 80162ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80162b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d196      	bne.n	80161ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80162be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80162c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80162c4:	4413      	add	r3, r2
 80162c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80162cc:	f1a3 0213 	sub.w	r2, r3, #19
 80162d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162d4:	429a      	cmp	r2, r3
 80162d6:	bfcc      	ite	gt
 80162d8:	2301      	movgt	r3, #1
 80162da:	2300      	movle	r3, #0
 80162dc:	b2db      	uxtb	r3, r3
 80162de:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80162e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80162e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80162ea:	6a3b      	ldr	r3, [r7, #32]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d002      	beq.n	80162f6 <ip4_frag+0x1f6>
 80162f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d003      	beq.n	80162fe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80162f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80162fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80162fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016300:	4618      	mov	r0, r3
 8016302:	f7f5 fe35 	bl	800bf70 <lwip_htons>
 8016306:	4603      	mov	r3, r0
 8016308:	461a      	mov	r2, r3
 801630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801630c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801630e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016310:	3314      	adds	r3, #20
 8016312:	b29b      	uxth	r3, r3
 8016314:	4618      	mov	r0, r3
 8016316:	f7f5 fe2b 	bl	800bf70 <lwip_htons>
 801631a:	4603      	mov	r3, r0
 801631c:	461a      	mov	r2, r3
 801631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016320:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016324:	2200      	movs	r2, #0
 8016326:	729a      	strb	r2, [r3, #10]
 8016328:	2200      	movs	r2, #0
 801632a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801632c:	68bb      	ldr	r3, [r7, #8]
 801632e:	695b      	ldr	r3, [r3, #20]
 8016330:	687a      	ldr	r2, [r7, #4]
 8016332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016334:	68b8      	ldr	r0, [r7, #8]
 8016336:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801633a:	f7f7 fbab 	bl	800da94 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801633e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016342:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016344:	1ad3      	subs	r3, r2, r3
 8016346:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801634a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801634e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016350:	4413      	add	r3, r2
 8016352:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016356:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801635a:	2b00      	cmp	r3, #0
 801635c:	f47f af19 	bne.w	8016192 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016360:	2300      	movs	r3, #0
 8016362:	e002      	b.n	801636a <ip4_frag+0x26a>
      goto memerr;
 8016364:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801636a:	4618      	mov	r0, r3
 801636c:	3748      	adds	r7, #72	; 0x48
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	0801a24c 	.word	0x0801a24c
 8016378:	0801a428 	.word	0x0801a428
 801637c:	0801a294 	.word	0x0801a294
 8016380:	0801a444 	.word	0x0801a444
 8016384:	0801a464 	.word	0x0801a464
 8016388:	08016099 	.word	0x08016099

0801638c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801638c:	b580      	push	{r7, lr}
 801638e:	b086      	sub	sp, #24
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
 8016394:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016396:	230e      	movs	r3, #14
 8016398:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	895b      	ldrh	r3, [r3, #10]
 801639e:	2b0e      	cmp	r3, #14
 80163a0:	d96e      	bls.n	8016480 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	7bdb      	ldrb	r3, [r3, #15]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d106      	bne.n	80163b8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80163aa:	683b      	ldr	r3, [r7, #0]
 80163ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80163b0:	3301      	adds	r3, #1
 80163b2:	b2da      	uxtb	r2, r3
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	685b      	ldr	r3, [r3, #4]
 80163bc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80163be:	693b      	ldr	r3, [r7, #16]
 80163c0:	7b1a      	ldrb	r2, [r3, #12]
 80163c2:	7b5b      	ldrb	r3, [r3, #13]
 80163c4:	021b      	lsls	r3, r3, #8
 80163c6:	4313      	orrs	r3, r2
 80163c8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80163ca:	693b      	ldr	r3, [r7, #16]
 80163cc:	781b      	ldrb	r3, [r3, #0]
 80163ce:	f003 0301 	and.w	r3, r3, #1
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d023      	beq.n	801641e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80163d6:	693b      	ldr	r3, [r7, #16]
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	2b01      	cmp	r3, #1
 80163dc:	d10f      	bne.n	80163fe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80163de:	693b      	ldr	r3, [r7, #16]
 80163e0:	785b      	ldrb	r3, [r3, #1]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d11b      	bne.n	801641e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80163e6:	693b      	ldr	r3, [r7, #16]
 80163e8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80163ea:	2b5e      	cmp	r3, #94	; 0x5e
 80163ec:	d117      	bne.n	801641e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	7b5b      	ldrb	r3, [r3, #13]
 80163f2:	f043 0310 	orr.w	r3, r3, #16
 80163f6:	b2da      	uxtb	r2, r3
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	735a      	strb	r2, [r3, #13]
 80163fc:	e00f      	b.n	801641e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80163fe:	693b      	ldr	r3, [r7, #16]
 8016400:	2206      	movs	r2, #6
 8016402:	4928      	ldr	r1, [pc, #160]	; (80164a4 <ethernet_input+0x118>)
 8016404:	4618      	mov	r0, r3
 8016406:	f000 faca 	bl	801699e <memcmp>
 801640a:	4603      	mov	r3, r0
 801640c:	2b00      	cmp	r3, #0
 801640e:	d106      	bne.n	801641e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	7b5b      	ldrb	r3, [r3, #13]
 8016414:	f043 0308 	orr.w	r3, r3, #8
 8016418:	b2da      	uxtb	r2, r3
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801641e:	89fb      	ldrh	r3, [r7, #14]
 8016420:	2b08      	cmp	r3, #8
 8016422:	d003      	beq.n	801642c <ethernet_input+0xa0>
 8016424:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016428:	d014      	beq.n	8016454 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801642a:	e032      	b.n	8016492 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016432:	f003 0308 	and.w	r3, r3, #8
 8016436:	2b00      	cmp	r3, #0
 8016438:	d024      	beq.n	8016484 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801643a:	8afb      	ldrh	r3, [r7, #22]
 801643c:	4619      	mov	r1, r3
 801643e:	6878      	ldr	r0, [r7, #4]
 8016440:	f7f7 faa2 	bl	800d988 <pbuf_remove_header>
 8016444:	4603      	mov	r3, r0
 8016446:	2b00      	cmp	r3, #0
 8016448:	d11e      	bne.n	8016488 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801644a:	6839      	ldr	r1, [r7, #0]
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f7fe ff27 	bl	80152a0 <ip4_input>
      break;
 8016452:	e013      	b.n	801647c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016454:	683b      	ldr	r3, [r7, #0]
 8016456:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801645a:	f003 0308 	and.w	r3, r3, #8
 801645e:	2b00      	cmp	r3, #0
 8016460:	d014      	beq.n	801648c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016462:	8afb      	ldrh	r3, [r7, #22]
 8016464:	4619      	mov	r1, r3
 8016466:	6878      	ldr	r0, [r7, #4]
 8016468:	f7f7 fa8e 	bl	800d988 <pbuf_remove_header>
 801646c:	4603      	mov	r3, r0
 801646e:	2b00      	cmp	r3, #0
 8016470:	d10e      	bne.n	8016490 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016472:	6839      	ldr	r1, [r7, #0]
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	f7fe f8a1 	bl	80145bc <etharp_input>
      break;
 801647a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801647c:	2300      	movs	r3, #0
 801647e:	e00c      	b.n	801649a <ethernet_input+0x10e>
    goto free_and_return;
 8016480:	bf00      	nop
 8016482:	e006      	b.n	8016492 <ethernet_input+0x106>
        goto free_and_return;
 8016484:	bf00      	nop
 8016486:	e004      	b.n	8016492 <ethernet_input+0x106>
        goto free_and_return;
 8016488:	bf00      	nop
 801648a:	e002      	b.n	8016492 <ethernet_input+0x106>
        goto free_and_return;
 801648c:	bf00      	nop
 801648e:	e000      	b.n	8016492 <ethernet_input+0x106>
        goto free_and_return;
 8016490:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016492:	6878      	ldr	r0, [r7, #4]
 8016494:	f7f7 fafe 	bl	800da94 <pbuf_free>
  return ERR_OK;
 8016498:	2300      	movs	r3, #0
}
 801649a:	4618      	mov	r0, r3
 801649c:	3718      	adds	r7, #24
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd80      	pop	{r7, pc}
 80164a2:	bf00      	nop
 80164a4:	0801a660 	.word	0x0801a660

080164a8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b086      	sub	sp, #24
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	60f8      	str	r0, [r7, #12]
 80164b0:	60b9      	str	r1, [r7, #8]
 80164b2:	607a      	str	r2, [r7, #4]
 80164b4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80164b6:	8c3b      	ldrh	r3, [r7, #32]
 80164b8:	4618      	mov	r0, r3
 80164ba:	f7f5 fd59 	bl	800bf70 <lwip_htons>
 80164be:	4603      	mov	r3, r0
 80164c0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80164c2:	210e      	movs	r1, #14
 80164c4:	68b8      	ldr	r0, [r7, #8]
 80164c6:	f7f7 fa4f 	bl	800d968 <pbuf_add_header>
 80164ca:	4603      	mov	r3, r0
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d125      	bne.n	801651c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80164d0:	68bb      	ldr	r3, [r7, #8]
 80164d2:	685b      	ldr	r3, [r3, #4]
 80164d4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	8afa      	ldrh	r2, [r7, #22]
 80164da:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80164dc:	693b      	ldr	r3, [r7, #16]
 80164de:	2206      	movs	r2, #6
 80164e0:	6839      	ldr	r1, [r7, #0]
 80164e2:	4618      	mov	r0, r3
 80164e4:	f000 fa69 	bl	80169ba <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80164e8:	693b      	ldr	r3, [r7, #16]
 80164ea:	3306      	adds	r3, #6
 80164ec:	2206      	movs	r2, #6
 80164ee:	6879      	ldr	r1, [r7, #4]
 80164f0:	4618      	mov	r0, r3
 80164f2:	f000 fa62 	bl	80169ba <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80164fc:	2b06      	cmp	r3, #6
 80164fe:	d006      	beq.n	801650e <ethernet_output+0x66>
 8016500:	4b0a      	ldr	r3, [pc, #40]	; (801652c <ethernet_output+0x84>)
 8016502:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016506:	490a      	ldr	r1, [pc, #40]	; (8016530 <ethernet_output+0x88>)
 8016508:	480a      	ldr	r0, [pc, #40]	; (8016534 <ethernet_output+0x8c>)
 801650a:	f000 fac7 	bl	8016a9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	699b      	ldr	r3, [r3, #24]
 8016512:	68b9      	ldr	r1, [r7, #8]
 8016514:	68f8      	ldr	r0, [r7, #12]
 8016516:	4798      	blx	r3
 8016518:	4603      	mov	r3, r0
 801651a:	e002      	b.n	8016522 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801651c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801651e:	f06f 0301 	mvn.w	r3, #1
}
 8016522:	4618      	mov	r0, r3
 8016524:	3718      	adds	r7, #24
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}
 801652a:	bf00      	nop
 801652c:	0801a474 	.word	0x0801a474
 8016530:	0801a4ac 	.word	0x0801a4ac
 8016534:	0801a4e0 	.word	0x0801a4e0

08016538 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b086      	sub	sp, #24
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
 8016540:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016542:	683b      	ldr	r3, [r7, #0]
 8016544:	60bb      	str	r3, [r7, #8]
 8016546:	2304      	movs	r3, #4
 8016548:	60fb      	str	r3, [r7, #12]
 801654a:	2300      	movs	r3, #0
 801654c:	613b      	str	r3, [r7, #16]
 801654e:	2300      	movs	r3, #0
 8016550:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016552:	f107 0308 	add.w	r3, r7, #8
 8016556:	2100      	movs	r1, #0
 8016558:	4618      	mov	r0, r3
 801655a:	f7f2 fe2d 	bl	80091b8 <osMessageCreate>
 801655e:	4602      	mov	r2, r0
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d102      	bne.n	8016572 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801656c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016570:	e000      	b.n	8016574 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016572:	2300      	movs	r3, #0
}
 8016574:	4618      	mov	r0, r3
 8016576:	3718      	adds	r7, #24
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}

0801657c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b084      	sub	sp, #16
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
 8016584:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	6839      	ldr	r1, [r7, #0]
 801658c:	2200      	movs	r2, #0
 801658e:	4618      	mov	r0, r3
 8016590:	f7f2 fe3a 	bl	8009208 <osMessagePut>
 8016594:	4603      	mov	r3, r0
 8016596:	2b00      	cmp	r3, #0
 8016598:	d102      	bne.n	80165a0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801659a:	2300      	movs	r3, #0
 801659c:	73fb      	strb	r3, [r7, #15]
 801659e:	e001      	b.n	80165a4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80165a0:	23ff      	movs	r3, #255	; 0xff
 80165a2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80165a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80165a8:	4618      	mov	r0, r3
 80165aa:	3710      	adds	r7, #16
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}

080165b0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b08c      	sub	sp, #48	; 0x30
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	61f8      	str	r0, [r7, #28]
 80165b8:	61b9      	str	r1, [r7, #24]
 80165ba:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80165bc:	f7f2 fc39 	bl	8008e32 <osKernelSysTick>
 80165c0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d017      	beq.n	80165f8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80165c8:	69fb      	ldr	r3, [r7, #28]
 80165ca:	6819      	ldr	r1, [r3, #0]
 80165cc:	f107 0320 	add.w	r3, r7, #32
 80165d0:	697a      	ldr	r2, [r7, #20]
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7f2 fe58 	bl	8009288 <osMessageGet>

    if(event.status == osEventMessage)
 80165d8:	6a3b      	ldr	r3, [r7, #32]
 80165da:	2b10      	cmp	r3, #16
 80165dc:	d109      	bne.n	80165f2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80165de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e0:	461a      	mov	r2, r3
 80165e2:	69bb      	ldr	r3, [r7, #24]
 80165e4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80165e6:	f7f2 fc24 	bl	8008e32 <osKernelSysTick>
 80165ea:	4602      	mov	r2, r0
 80165ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ee:	1ad3      	subs	r3, r2, r3
 80165f0:	e019      	b.n	8016626 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80165f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165f6:	e016      	b.n	8016626 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	6819      	ldr	r1, [r3, #0]
 80165fc:	463b      	mov	r3, r7
 80165fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016602:	4618      	mov	r0, r3
 8016604:	f7f2 fe40 	bl	8009288 <osMessageGet>
 8016608:	f107 0320 	add.w	r3, r7, #32
 801660c:	463a      	mov	r2, r7
 801660e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016610:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016616:	461a      	mov	r2, r3
 8016618:	69bb      	ldr	r3, [r7, #24]
 801661a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801661c:	f7f2 fc09 	bl	8008e32 <osKernelSysTick>
 8016620:	4602      	mov	r2, r0
 8016622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016624:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016626:	4618      	mov	r0, r3
 8016628:	3730      	adds	r7, #48	; 0x30
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}

0801662e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801662e:	b480      	push	{r7}
 8016630:	b083      	sub	sp, #12
 8016632:	af00      	add	r7, sp, #0
 8016634:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d101      	bne.n	8016642 <sys_mbox_valid+0x14>
    return 0;
 801663e:	2300      	movs	r3, #0
 8016640:	e000      	b.n	8016644 <sys_mbox_valid+0x16>
  else
    return 1;
 8016642:	2301      	movs	r3, #1
}
 8016644:	4618      	mov	r0, r3
 8016646:	370c      	adds	r7, #12
 8016648:	46bd      	mov	sp, r7
 801664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664e:	4770      	bx	lr

08016650 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016654:	4803      	ldr	r0, [pc, #12]	; (8016664 <sys_init+0x14>)
 8016656:	f7f2 fc5c 	bl	8008f12 <osMutexCreate>
 801665a:	4603      	mov	r3, r0
 801665c:	4a02      	ldr	r2, [pc, #8]	; (8016668 <sys_init+0x18>)
 801665e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016660:	bf00      	nop
 8016662:	bd80      	pop	{r7, pc}
 8016664:	0801a670 	.word	0x0801a670
 8016668:	2406b480 	.word	0x2406b480

0801666c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801666c:	b580      	push	{r7, lr}
 801666e:	b084      	sub	sp, #16
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016674:	2300      	movs	r3, #0
 8016676:	60bb      	str	r3, [r7, #8]
 8016678:	2300      	movs	r3, #0
 801667a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801667c:	f107 0308 	add.w	r3, r7, #8
 8016680:	4618      	mov	r0, r3
 8016682:	f7f2 fc46 	bl	8008f12 <osMutexCreate>
 8016686:	4602      	mov	r2, r0
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d102      	bne.n	801669a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016698:	e000      	b.n	801669c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801669a:	2300      	movs	r3, #0
}
 801669c:	4618      	mov	r0, r3
 801669e:	3710      	adds	r7, #16
 80166a0:	46bd      	mov	sp, r7
 80166a2:	bd80      	pop	{r7, pc}

080166a4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b082      	sub	sp, #8
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80166b4:	4618      	mov	r0, r3
 80166b6:	f7f2 fc45 	bl	8008f44 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80166ba:	bf00      	nop
 80166bc:	3708      	adds	r7, #8
 80166be:	46bd      	mov	sp, r7
 80166c0:	bd80      	pop	{r7, pc}

080166c2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80166c2:	b580      	push	{r7, lr}
 80166c4:	b082      	sub	sp, #8
 80166c6:	af00      	add	r7, sp, #0
 80166c8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	4618      	mov	r0, r3
 80166d0:	f7f2 fc86 	bl	8008fe0 <osMutexRelease>
}
 80166d4:	bf00      	nop
 80166d6:	3708      	adds	r7, #8
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd80      	pop	{r7, pc}

080166dc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b08c      	sub	sp, #48	; 0x30
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	60f8      	str	r0, [r7, #12]
 80166e4:	60b9      	str	r1, [r7, #8]
 80166e6:	607a      	str	r2, [r7, #4]
 80166e8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80166ea:	f107 0314 	add.w	r3, r7, #20
 80166ee:	2200      	movs	r2, #0
 80166f0:	601a      	str	r2, [r3, #0]
 80166f2:	605a      	str	r2, [r3, #4]
 80166f4:	609a      	str	r2, [r3, #8]
 80166f6:	60da      	str	r2, [r3, #12]
 80166f8:	611a      	str	r2, [r3, #16]
 80166fa:	615a      	str	r2, [r3, #20]
 80166fc:	619a      	str	r2, [r3, #24]
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	617b      	str	r3, [r7, #20]
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	61bb      	str	r3, [r7, #24]
 8016706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016708:	b21b      	sxth	r3, r3
 801670a:	83bb      	strh	r3, [r7, #28]
 801670c:	683b      	ldr	r3, [r7, #0]
 801670e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016710:	f107 0314 	add.w	r3, r7, #20
 8016714:	6879      	ldr	r1, [r7, #4]
 8016716:	4618      	mov	r0, r3
 8016718:	f7f2 fb9b 	bl	8008e52 <osThreadCreate>
 801671c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801671e:	4618      	mov	r0, r3
 8016720:	3730      	adds	r7, #48	; 0x30
 8016722:	46bd      	mov	sp, r7
 8016724:	bd80      	pop	{r7, pc}
	...

08016728 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801672c:	4b04      	ldr	r3, [pc, #16]	; (8016740 <sys_arch_protect+0x18>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016734:	4618      	mov	r0, r3
 8016736:	f7f2 fc05 	bl	8008f44 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801673a:	2301      	movs	r3, #1
}
 801673c:	4618      	mov	r0, r3
 801673e:	bd80      	pop	{r7, pc}
 8016740:	2406b480 	.word	0x2406b480

08016744 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b082      	sub	sp, #8
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801674c:	4b04      	ldr	r3, [pc, #16]	; (8016760 <sys_arch_unprotect+0x1c>)
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	4618      	mov	r0, r3
 8016752:	f7f2 fc45 	bl	8008fe0 <osMutexRelease>
}
 8016756:	bf00      	nop
 8016758:	3708      	adds	r7, #8
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}
 801675e:	bf00      	nop
 8016760:	2406b480 	.word	0x2406b480

08016764 <std>:
 8016764:	2300      	movs	r3, #0
 8016766:	b510      	push	{r4, lr}
 8016768:	4604      	mov	r4, r0
 801676a:	e9c0 3300 	strd	r3, r3, [r0]
 801676e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016772:	6083      	str	r3, [r0, #8]
 8016774:	8181      	strh	r1, [r0, #12]
 8016776:	6643      	str	r3, [r0, #100]	; 0x64
 8016778:	81c2      	strh	r2, [r0, #14]
 801677a:	6183      	str	r3, [r0, #24]
 801677c:	4619      	mov	r1, r3
 801677e:	2208      	movs	r2, #8
 8016780:	305c      	adds	r0, #92	; 0x5c
 8016782:	f000 f928 	bl	80169d6 <memset>
 8016786:	4b05      	ldr	r3, [pc, #20]	; (801679c <std+0x38>)
 8016788:	6263      	str	r3, [r4, #36]	; 0x24
 801678a:	4b05      	ldr	r3, [pc, #20]	; (80167a0 <std+0x3c>)
 801678c:	62a3      	str	r3, [r4, #40]	; 0x28
 801678e:	4b05      	ldr	r3, [pc, #20]	; (80167a4 <std+0x40>)
 8016790:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016792:	4b05      	ldr	r3, [pc, #20]	; (80167a8 <std+0x44>)
 8016794:	6224      	str	r4, [r4, #32]
 8016796:	6323      	str	r3, [r4, #48]	; 0x30
 8016798:	bd10      	pop	{r4, pc}
 801679a:	bf00      	nop
 801679c:	08016c41 	.word	0x08016c41
 80167a0:	08016c63 	.word	0x08016c63
 80167a4:	08016c9b 	.word	0x08016c9b
 80167a8:	08016cbf 	.word	0x08016cbf

080167ac <_cleanup_r>:
 80167ac:	4901      	ldr	r1, [pc, #4]	; (80167b4 <_cleanup_r+0x8>)
 80167ae:	f000 b8af 	b.w	8016910 <_fwalk_reent>
 80167b2:	bf00      	nop
 80167b4:	08016e55 	.word	0x08016e55

080167b8 <__sfmoreglue>:
 80167b8:	b570      	push	{r4, r5, r6, lr}
 80167ba:	1e4a      	subs	r2, r1, #1
 80167bc:	2568      	movs	r5, #104	; 0x68
 80167be:	4355      	muls	r5, r2
 80167c0:	460e      	mov	r6, r1
 80167c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80167c6:	f000 f90f 	bl	80169e8 <_malloc_r>
 80167ca:	4604      	mov	r4, r0
 80167cc:	b140      	cbz	r0, 80167e0 <__sfmoreglue+0x28>
 80167ce:	2100      	movs	r1, #0
 80167d0:	e9c0 1600 	strd	r1, r6, [r0]
 80167d4:	300c      	adds	r0, #12
 80167d6:	60a0      	str	r0, [r4, #8]
 80167d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80167dc:	f000 f8fb 	bl	80169d6 <memset>
 80167e0:	4620      	mov	r0, r4
 80167e2:	bd70      	pop	{r4, r5, r6, pc}

080167e4 <__sfp_lock_acquire>:
 80167e4:	4801      	ldr	r0, [pc, #4]	; (80167ec <__sfp_lock_acquire+0x8>)
 80167e6:	f000 b8d8 	b.w	801699a <__retarget_lock_acquire_recursive>
 80167ea:	bf00      	nop
 80167ec:	2406b48c 	.word	0x2406b48c

080167f0 <__sfp_lock_release>:
 80167f0:	4801      	ldr	r0, [pc, #4]	; (80167f8 <__sfp_lock_release+0x8>)
 80167f2:	f000 b8d3 	b.w	801699c <__retarget_lock_release_recursive>
 80167f6:	bf00      	nop
 80167f8:	2406b48c 	.word	0x2406b48c

080167fc <__sinit_lock_acquire>:
 80167fc:	4801      	ldr	r0, [pc, #4]	; (8016804 <__sinit_lock_acquire+0x8>)
 80167fe:	f000 b8cc 	b.w	801699a <__retarget_lock_acquire_recursive>
 8016802:	bf00      	nop
 8016804:	2406b487 	.word	0x2406b487

08016808 <__sinit_lock_release>:
 8016808:	4801      	ldr	r0, [pc, #4]	; (8016810 <__sinit_lock_release+0x8>)
 801680a:	f000 b8c7 	b.w	801699c <__retarget_lock_release_recursive>
 801680e:	bf00      	nop
 8016810:	2406b487 	.word	0x2406b487

08016814 <__sinit>:
 8016814:	b510      	push	{r4, lr}
 8016816:	4604      	mov	r4, r0
 8016818:	f7ff fff0 	bl	80167fc <__sinit_lock_acquire>
 801681c:	69a3      	ldr	r3, [r4, #24]
 801681e:	b11b      	cbz	r3, 8016828 <__sinit+0x14>
 8016820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016824:	f7ff bff0 	b.w	8016808 <__sinit_lock_release>
 8016828:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801682c:	6523      	str	r3, [r4, #80]	; 0x50
 801682e:	4b13      	ldr	r3, [pc, #76]	; (801687c <__sinit+0x68>)
 8016830:	4a13      	ldr	r2, [pc, #76]	; (8016880 <__sinit+0x6c>)
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	62a2      	str	r2, [r4, #40]	; 0x28
 8016836:	42a3      	cmp	r3, r4
 8016838:	bf04      	itt	eq
 801683a:	2301      	moveq	r3, #1
 801683c:	61a3      	streq	r3, [r4, #24]
 801683e:	4620      	mov	r0, r4
 8016840:	f000 f820 	bl	8016884 <__sfp>
 8016844:	6060      	str	r0, [r4, #4]
 8016846:	4620      	mov	r0, r4
 8016848:	f000 f81c 	bl	8016884 <__sfp>
 801684c:	60a0      	str	r0, [r4, #8]
 801684e:	4620      	mov	r0, r4
 8016850:	f000 f818 	bl	8016884 <__sfp>
 8016854:	2200      	movs	r2, #0
 8016856:	60e0      	str	r0, [r4, #12]
 8016858:	2104      	movs	r1, #4
 801685a:	6860      	ldr	r0, [r4, #4]
 801685c:	f7ff ff82 	bl	8016764 <std>
 8016860:	68a0      	ldr	r0, [r4, #8]
 8016862:	2201      	movs	r2, #1
 8016864:	2109      	movs	r1, #9
 8016866:	f7ff ff7d 	bl	8016764 <std>
 801686a:	68e0      	ldr	r0, [r4, #12]
 801686c:	2202      	movs	r2, #2
 801686e:	2112      	movs	r1, #18
 8016870:	f7ff ff78 	bl	8016764 <std>
 8016874:	2301      	movs	r3, #1
 8016876:	61a3      	str	r3, [r4, #24]
 8016878:	e7d2      	b.n	8016820 <__sinit+0xc>
 801687a:	bf00      	nop
 801687c:	0801a6d8 	.word	0x0801a6d8
 8016880:	080167ad 	.word	0x080167ad

08016884 <__sfp>:
 8016884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016886:	4607      	mov	r7, r0
 8016888:	f7ff ffac 	bl	80167e4 <__sfp_lock_acquire>
 801688c:	4b1e      	ldr	r3, [pc, #120]	; (8016908 <__sfp+0x84>)
 801688e:	681e      	ldr	r6, [r3, #0]
 8016890:	69b3      	ldr	r3, [r6, #24]
 8016892:	b913      	cbnz	r3, 801689a <__sfp+0x16>
 8016894:	4630      	mov	r0, r6
 8016896:	f7ff ffbd 	bl	8016814 <__sinit>
 801689a:	3648      	adds	r6, #72	; 0x48
 801689c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80168a0:	3b01      	subs	r3, #1
 80168a2:	d503      	bpl.n	80168ac <__sfp+0x28>
 80168a4:	6833      	ldr	r3, [r6, #0]
 80168a6:	b30b      	cbz	r3, 80168ec <__sfp+0x68>
 80168a8:	6836      	ldr	r6, [r6, #0]
 80168aa:	e7f7      	b.n	801689c <__sfp+0x18>
 80168ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80168b0:	b9d5      	cbnz	r5, 80168e8 <__sfp+0x64>
 80168b2:	4b16      	ldr	r3, [pc, #88]	; (801690c <__sfp+0x88>)
 80168b4:	60e3      	str	r3, [r4, #12]
 80168b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80168ba:	6665      	str	r5, [r4, #100]	; 0x64
 80168bc:	f000 f86c 	bl	8016998 <__retarget_lock_init_recursive>
 80168c0:	f7ff ff96 	bl	80167f0 <__sfp_lock_release>
 80168c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80168c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80168cc:	6025      	str	r5, [r4, #0]
 80168ce:	61a5      	str	r5, [r4, #24]
 80168d0:	2208      	movs	r2, #8
 80168d2:	4629      	mov	r1, r5
 80168d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80168d8:	f000 f87d 	bl	80169d6 <memset>
 80168dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80168e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80168e4:	4620      	mov	r0, r4
 80168e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168e8:	3468      	adds	r4, #104	; 0x68
 80168ea:	e7d9      	b.n	80168a0 <__sfp+0x1c>
 80168ec:	2104      	movs	r1, #4
 80168ee:	4638      	mov	r0, r7
 80168f0:	f7ff ff62 	bl	80167b8 <__sfmoreglue>
 80168f4:	4604      	mov	r4, r0
 80168f6:	6030      	str	r0, [r6, #0]
 80168f8:	2800      	cmp	r0, #0
 80168fa:	d1d5      	bne.n	80168a8 <__sfp+0x24>
 80168fc:	f7ff ff78 	bl	80167f0 <__sfp_lock_release>
 8016900:	230c      	movs	r3, #12
 8016902:	603b      	str	r3, [r7, #0]
 8016904:	e7ee      	b.n	80168e4 <__sfp+0x60>
 8016906:	bf00      	nop
 8016908:	0801a6d8 	.word	0x0801a6d8
 801690c:	ffff0001 	.word	0xffff0001

08016910 <_fwalk_reent>:
 8016910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016914:	4606      	mov	r6, r0
 8016916:	4688      	mov	r8, r1
 8016918:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801691c:	2700      	movs	r7, #0
 801691e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016922:	f1b9 0901 	subs.w	r9, r9, #1
 8016926:	d505      	bpl.n	8016934 <_fwalk_reent+0x24>
 8016928:	6824      	ldr	r4, [r4, #0]
 801692a:	2c00      	cmp	r4, #0
 801692c:	d1f7      	bne.n	801691e <_fwalk_reent+0xe>
 801692e:	4638      	mov	r0, r7
 8016930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016934:	89ab      	ldrh	r3, [r5, #12]
 8016936:	2b01      	cmp	r3, #1
 8016938:	d907      	bls.n	801694a <_fwalk_reent+0x3a>
 801693a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801693e:	3301      	adds	r3, #1
 8016940:	d003      	beq.n	801694a <_fwalk_reent+0x3a>
 8016942:	4629      	mov	r1, r5
 8016944:	4630      	mov	r0, r6
 8016946:	47c0      	blx	r8
 8016948:	4307      	orrs	r7, r0
 801694a:	3568      	adds	r5, #104	; 0x68
 801694c:	e7e9      	b.n	8016922 <_fwalk_reent+0x12>
	...

08016950 <__libc_init_array>:
 8016950:	b570      	push	{r4, r5, r6, lr}
 8016952:	4d0d      	ldr	r5, [pc, #52]	; (8016988 <__libc_init_array+0x38>)
 8016954:	4c0d      	ldr	r4, [pc, #52]	; (801698c <__libc_init_array+0x3c>)
 8016956:	1b64      	subs	r4, r4, r5
 8016958:	10a4      	asrs	r4, r4, #2
 801695a:	2600      	movs	r6, #0
 801695c:	42a6      	cmp	r6, r4
 801695e:	d109      	bne.n	8016974 <__libc_init_array+0x24>
 8016960:	4d0b      	ldr	r5, [pc, #44]	; (8016990 <__libc_init_array+0x40>)
 8016962:	4c0c      	ldr	r4, [pc, #48]	; (8016994 <__libc_init_array+0x44>)
 8016964:	f000 ffcc 	bl	8017900 <_init>
 8016968:	1b64      	subs	r4, r4, r5
 801696a:	10a4      	asrs	r4, r4, #2
 801696c:	2600      	movs	r6, #0
 801696e:	42a6      	cmp	r6, r4
 8016970:	d105      	bne.n	801697e <__libc_init_array+0x2e>
 8016972:	bd70      	pop	{r4, r5, r6, pc}
 8016974:	f855 3b04 	ldr.w	r3, [r5], #4
 8016978:	4798      	blx	r3
 801697a:	3601      	adds	r6, #1
 801697c:	e7ee      	b.n	801695c <__libc_init_array+0xc>
 801697e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016982:	4798      	blx	r3
 8016984:	3601      	adds	r6, #1
 8016986:	e7f2      	b.n	801696e <__libc_init_array+0x1e>
 8016988:	0801a7cc 	.word	0x0801a7cc
 801698c:	0801a7cc 	.word	0x0801a7cc
 8016990:	0801a7cc 	.word	0x0801a7cc
 8016994:	0801a7d0 	.word	0x0801a7d0

08016998 <__retarget_lock_init_recursive>:
 8016998:	4770      	bx	lr

0801699a <__retarget_lock_acquire_recursive>:
 801699a:	4770      	bx	lr

0801699c <__retarget_lock_release_recursive>:
 801699c:	4770      	bx	lr

0801699e <memcmp>:
 801699e:	b530      	push	{r4, r5, lr}
 80169a0:	3901      	subs	r1, #1
 80169a2:	2400      	movs	r4, #0
 80169a4:	42a2      	cmp	r2, r4
 80169a6:	d101      	bne.n	80169ac <memcmp+0xe>
 80169a8:	2000      	movs	r0, #0
 80169aa:	e005      	b.n	80169b8 <memcmp+0x1a>
 80169ac:	5d03      	ldrb	r3, [r0, r4]
 80169ae:	3401      	adds	r4, #1
 80169b0:	5d0d      	ldrb	r5, [r1, r4]
 80169b2:	42ab      	cmp	r3, r5
 80169b4:	d0f6      	beq.n	80169a4 <memcmp+0x6>
 80169b6:	1b58      	subs	r0, r3, r5
 80169b8:	bd30      	pop	{r4, r5, pc}

080169ba <memcpy>:
 80169ba:	440a      	add	r2, r1
 80169bc:	4291      	cmp	r1, r2
 80169be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80169c2:	d100      	bne.n	80169c6 <memcpy+0xc>
 80169c4:	4770      	bx	lr
 80169c6:	b510      	push	{r4, lr}
 80169c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80169cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80169d0:	4291      	cmp	r1, r2
 80169d2:	d1f9      	bne.n	80169c8 <memcpy+0xe>
 80169d4:	bd10      	pop	{r4, pc}

080169d6 <memset>:
 80169d6:	4402      	add	r2, r0
 80169d8:	4603      	mov	r3, r0
 80169da:	4293      	cmp	r3, r2
 80169dc:	d100      	bne.n	80169e0 <memset+0xa>
 80169de:	4770      	bx	lr
 80169e0:	f803 1b01 	strb.w	r1, [r3], #1
 80169e4:	e7f9      	b.n	80169da <memset+0x4>
	...

080169e8 <_malloc_r>:
 80169e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ea:	1ccd      	adds	r5, r1, #3
 80169ec:	f025 0503 	bic.w	r5, r5, #3
 80169f0:	3508      	adds	r5, #8
 80169f2:	2d0c      	cmp	r5, #12
 80169f4:	bf38      	it	cc
 80169f6:	250c      	movcc	r5, #12
 80169f8:	2d00      	cmp	r5, #0
 80169fa:	4606      	mov	r6, r0
 80169fc:	db01      	blt.n	8016a02 <_malloc_r+0x1a>
 80169fe:	42a9      	cmp	r1, r5
 8016a00:	d903      	bls.n	8016a0a <_malloc_r+0x22>
 8016a02:	230c      	movs	r3, #12
 8016a04:	6033      	str	r3, [r6, #0]
 8016a06:	2000      	movs	r0, #0
 8016a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a0a:	f000 fa8b 	bl	8016f24 <__malloc_lock>
 8016a0e:	4921      	ldr	r1, [pc, #132]	; (8016a94 <_malloc_r+0xac>)
 8016a10:	680a      	ldr	r2, [r1, #0]
 8016a12:	4614      	mov	r4, r2
 8016a14:	b99c      	cbnz	r4, 8016a3e <_malloc_r+0x56>
 8016a16:	4f20      	ldr	r7, [pc, #128]	; (8016a98 <_malloc_r+0xb0>)
 8016a18:	683b      	ldr	r3, [r7, #0]
 8016a1a:	b923      	cbnz	r3, 8016a26 <_malloc_r+0x3e>
 8016a1c:	4621      	mov	r1, r4
 8016a1e:	4630      	mov	r0, r6
 8016a20:	f000 f8fe 	bl	8016c20 <_sbrk_r>
 8016a24:	6038      	str	r0, [r7, #0]
 8016a26:	4629      	mov	r1, r5
 8016a28:	4630      	mov	r0, r6
 8016a2a:	f000 f8f9 	bl	8016c20 <_sbrk_r>
 8016a2e:	1c43      	adds	r3, r0, #1
 8016a30:	d123      	bne.n	8016a7a <_malloc_r+0x92>
 8016a32:	230c      	movs	r3, #12
 8016a34:	6033      	str	r3, [r6, #0]
 8016a36:	4630      	mov	r0, r6
 8016a38:	f000 fa7a 	bl	8016f30 <__malloc_unlock>
 8016a3c:	e7e3      	b.n	8016a06 <_malloc_r+0x1e>
 8016a3e:	6823      	ldr	r3, [r4, #0]
 8016a40:	1b5b      	subs	r3, r3, r5
 8016a42:	d417      	bmi.n	8016a74 <_malloc_r+0x8c>
 8016a44:	2b0b      	cmp	r3, #11
 8016a46:	d903      	bls.n	8016a50 <_malloc_r+0x68>
 8016a48:	6023      	str	r3, [r4, #0]
 8016a4a:	441c      	add	r4, r3
 8016a4c:	6025      	str	r5, [r4, #0]
 8016a4e:	e004      	b.n	8016a5a <_malloc_r+0x72>
 8016a50:	6863      	ldr	r3, [r4, #4]
 8016a52:	42a2      	cmp	r2, r4
 8016a54:	bf0c      	ite	eq
 8016a56:	600b      	streq	r3, [r1, #0]
 8016a58:	6053      	strne	r3, [r2, #4]
 8016a5a:	4630      	mov	r0, r6
 8016a5c:	f000 fa68 	bl	8016f30 <__malloc_unlock>
 8016a60:	f104 000b 	add.w	r0, r4, #11
 8016a64:	1d23      	adds	r3, r4, #4
 8016a66:	f020 0007 	bic.w	r0, r0, #7
 8016a6a:	1ac2      	subs	r2, r0, r3
 8016a6c:	d0cc      	beq.n	8016a08 <_malloc_r+0x20>
 8016a6e:	1a1b      	subs	r3, r3, r0
 8016a70:	50a3      	str	r3, [r4, r2]
 8016a72:	e7c9      	b.n	8016a08 <_malloc_r+0x20>
 8016a74:	4622      	mov	r2, r4
 8016a76:	6864      	ldr	r4, [r4, #4]
 8016a78:	e7cc      	b.n	8016a14 <_malloc_r+0x2c>
 8016a7a:	1cc4      	adds	r4, r0, #3
 8016a7c:	f024 0403 	bic.w	r4, r4, #3
 8016a80:	42a0      	cmp	r0, r4
 8016a82:	d0e3      	beq.n	8016a4c <_malloc_r+0x64>
 8016a84:	1a21      	subs	r1, r4, r0
 8016a86:	4630      	mov	r0, r6
 8016a88:	f000 f8ca 	bl	8016c20 <_sbrk_r>
 8016a8c:	3001      	adds	r0, #1
 8016a8e:	d1dd      	bne.n	8016a4c <_malloc_r+0x64>
 8016a90:	e7cf      	b.n	8016a32 <_malloc_r+0x4a>
 8016a92:	bf00      	nop
 8016a94:	2406465c 	.word	0x2406465c
 8016a98:	24064660 	.word	0x24064660

08016a9c <iprintf>:
 8016a9c:	b40f      	push	{r0, r1, r2, r3}
 8016a9e:	4b0a      	ldr	r3, [pc, #40]	; (8016ac8 <iprintf+0x2c>)
 8016aa0:	b513      	push	{r0, r1, r4, lr}
 8016aa2:	681c      	ldr	r4, [r3, #0]
 8016aa4:	b124      	cbz	r4, 8016ab0 <iprintf+0x14>
 8016aa6:	69a3      	ldr	r3, [r4, #24]
 8016aa8:	b913      	cbnz	r3, 8016ab0 <iprintf+0x14>
 8016aaa:	4620      	mov	r0, r4
 8016aac:	f7ff feb2 	bl	8016814 <__sinit>
 8016ab0:	ab05      	add	r3, sp, #20
 8016ab2:	9a04      	ldr	r2, [sp, #16]
 8016ab4:	68a1      	ldr	r1, [r4, #8]
 8016ab6:	9301      	str	r3, [sp, #4]
 8016ab8:	4620      	mov	r0, r4
 8016aba:	f000 fab9 	bl	8017030 <_vfiprintf_r>
 8016abe:	b002      	add	sp, #8
 8016ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ac4:	b004      	add	sp, #16
 8016ac6:	4770      	bx	lr
 8016ac8:	24000034 	.word	0x24000034

08016acc <rand>:
 8016acc:	4b17      	ldr	r3, [pc, #92]	; (8016b2c <rand+0x60>)
 8016ace:	b510      	push	{r4, lr}
 8016ad0:	681c      	ldr	r4, [r3, #0]
 8016ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016ad4:	b9b3      	cbnz	r3, 8016b04 <rand+0x38>
 8016ad6:	2018      	movs	r0, #24
 8016ad8:	f000 fa1c 	bl	8016f14 <malloc>
 8016adc:	63a0      	str	r0, [r4, #56]	; 0x38
 8016ade:	b928      	cbnz	r0, 8016aec <rand+0x20>
 8016ae0:	4602      	mov	r2, r0
 8016ae2:	4b13      	ldr	r3, [pc, #76]	; (8016b30 <rand+0x64>)
 8016ae4:	4813      	ldr	r0, [pc, #76]	; (8016b34 <rand+0x68>)
 8016ae6:	214e      	movs	r1, #78	; 0x4e
 8016ae8:	f000 f900 	bl	8016cec <__assert_func>
 8016aec:	4a12      	ldr	r2, [pc, #72]	; (8016b38 <rand+0x6c>)
 8016aee:	4b13      	ldr	r3, [pc, #76]	; (8016b3c <rand+0x70>)
 8016af0:	e9c0 2300 	strd	r2, r3, [r0]
 8016af4:	4b12      	ldr	r3, [pc, #72]	; (8016b40 <rand+0x74>)
 8016af6:	6083      	str	r3, [r0, #8]
 8016af8:	230b      	movs	r3, #11
 8016afa:	8183      	strh	r3, [r0, #12]
 8016afc:	2201      	movs	r2, #1
 8016afe:	2300      	movs	r3, #0
 8016b00:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016b04:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016b06:	480f      	ldr	r0, [pc, #60]	; (8016b44 <rand+0x78>)
 8016b08:	690a      	ldr	r2, [r1, #16]
 8016b0a:	694b      	ldr	r3, [r1, #20]
 8016b0c:	4c0e      	ldr	r4, [pc, #56]	; (8016b48 <rand+0x7c>)
 8016b0e:	4350      	muls	r0, r2
 8016b10:	fb04 0003 	mla	r0, r4, r3, r0
 8016b14:	fba2 3404 	umull	r3, r4, r2, r4
 8016b18:	1c5a      	adds	r2, r3, #1
 8016b1a:	4404      	add	r4, r0
 8016b1c:	f144 0000 	adc.w	r0, r4, #0
 8016b20:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016b24:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016b28:	bd10      	pop	{r4, pc}
 8016b2a:	bf00      	nop
 8016b2c:	24000034 	.word	0x24000034
 8016b30:	0801a6dc 	.word	0x0801a6dc
 8016b34:	0801a6f3 	.word	0x0801a6f3
 8016b38:	abcd330e 	.word	0xabcd330e
 8016b3c:	e66d1234 	.word	0xe66d1234
 8016b40:	0005deec 	.word	0x0005deec
 8016b44:	5851f42d 	.word	0x5851f42d
 8016b48:	4c957f2d 	.word	0x4c957f2d

08016b4c <cleanup_glue>:
 8016b4c:	b538      	push	{r3, r4, r5, lr}
 8016b4e:	460c      	mov	r4, r1
 8016b50:	6809      	ldr	r1, [r1, #0]
 8016b52:	4605      	mov	r5, r0
 8016b54:	b109      	cbz	r1, 8016b5a <cleanup_glue+0xe>
 8016b56:	f7ff fff9 	bl	8016b4c <cleanup_glue>
 8016b5a:	4621      	mov	r1, r4
 8016b5c:	4628      	mov	r0, r5
 8016b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b62:	f000 b9eb 	b.w	8016f3c <_free_r>
	...

08016b68 <_reclaim_reent>:
 8016b68:	4b2c      	ldr	r3, [pc, #176]	; (8016c1c <_reclaim_reent+0xb4>)
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	4283      	cmp	r3, r0
 8016b6e:	b570      	push	{r4, r5, r6, lr}
 8016b70:	4604      	mov	r4, r0
 8016b72:	d051      	beq.n	8016c18 <_reclaim_reent+0xb0>
 8016b74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016b76:	b143      	cbz	r3, 8016b8a <_reclaim_reent+0x22>
 8016b78:	68db      	ldr	r3, [r3, #12]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d14a      	bne.n	8016c14 <_reclaim_reent+0xac>
 8016b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b80:	6819      	ldr	r1, [r3, #0]
 8016b82:	b111      	cbz	r1, 8016b8a <_reclaim_reent+0x22>
 8016b84:	4620      	mov	r0, r4
 8016b86:	f000 f9d9 	bl	8016f3c <_free_r>
 8016b8a:	6961      	ldr	r1, [r4, #20]
 8016b8c:	b111      	cbz	r1, 8016b94 <_reclaim_reent+0x2c>
 8016b8e:	4620      	mov	r0, r4
 8016b90:	f000 f9d4 	bl	8016f3c <_free_r>
 8016b94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016b96:	b111      	cbz	r1, 8016b9e <_reclaim_reent+0x36>
 8016b98:	4620      	mov	r0, r4
 8016b9a:	f000 f9cf 	bl	8016f3c <_free_r>
 8016b9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016ba0:	b111      	cbz	r1, 8016ba8 <_reclaim_reent+0x40>
 8016ba2:	4620      	mov	r0, r4
 8016ba4:	f000 f9ca 	bl	8016f3c <_free_r>
 8016ba8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016baa:	b111      	cbz	r1, 8016bb2 <_reclaim_reent+0x4a>
 8016bac:	4620      	mov	r0, r4
 8016bae:	f000 f9c5 	bl	8016f3c <_free_r>
 8016bb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016bb4:	b111      	cbz	r1, 8016bbc <_reclaim_reent+0x54>
 8016bb6:	4620      	mov	r0, r4
 8016bb8:	f000 f9c0 	bl	8016f3c <_free_r>
 8016bbc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016bbe:	b111      	cbz	r1, 8016bc6 <_reclaim_reent+0x5e>
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	f000 f9bb 	bl	8016f3c <_free_r>
 8016bc6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016bc8:	b111      	cbz	r1, 8016bd0 <_reclaim_reent+0x68>
 8016bca:	4620      	mov	r0, r4
 8016bcc:	f000 f9b6 	bl	8016f3c <_free_r>
 8016bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016bd2:	b111      	cbz	r1, 8016bda <_reclaim_reent+0x72>
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	f000 f9b1 	bl	8016f3c <_free_r>
 8016bda:	69a3      	ldr	r3, [r4, #24]
 8016bdc:	b1e3      	cbz	r3, 8016c18 <_reclaim_reent+0xb0>
 8016bde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016be0:	4620      	mov	r0, r4
 8016be2:	4798      	blx	r3
 8016be4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016be6:	b1b9      	cbz	r1, 8016c18 <_reclaim_reent+0xb0>
 8016be8:	4620      	mov	r0, r4
 8016bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016bee:	f7ff bfad 	b.w	8016b4c <cleanup_glue>
 8016bf2:	5949      	ldr	r1, [r1, r5]
 8016bf4:	b941      	cbnz	r1, 8016c08 <_reclaim_reent+0xa0>
 8016bf6:	3504      	adds	r5, #4
 8016bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016bfa:	2d80      	cmp	r5, #128	; 0x80
 8016bfc:	68d9      	ldr	r1, [r3, #12]
 8016bfe:	d1f8      	bne.n	8016bf2 <_reclaim_reent+0x8a>
 8016c00:	4620      	mov	r0, r4
 8016c02:	f000 f99b 	bl	8016f3c <_free_r>
 8016c06:	e7ba      	b.n	8016b7e <_reclaim_reent+0x16>
 8016c08:	680e      	ldr	r6, [r1, #0]
 8016c0a:	4620      	mov	r0, r4
 8016c0c:	f000 f996 	bl	8016f3c <_free_r>
 8016c10:	4631      	mov	r1, r6
 8016c12:	e7ef      	b.n	8016bf4 <_reclaim_reent+0x8c>
 8016c14:	2500      	movs	r5, #0
 8016c16:	e7ef      	b.n	8016bf8 <_reclaim_reent+0x90>
 8016c18:	bd70      	pop	{r4, r5, r6, pc}
 8016c1a:	bf00      	nop
 8016c1c:	24000034 	.word	0x24000034

08016c20 <_sbrk_r>:
 8016c20:	b538      	push	{r3, r4, r5, lr}
 8016c22:	4d06      	ldr	r5, [pc, #24]	; (8016c3c <_sbrk_r+0x1c>)
 8016c24:	2300      	movs	r3, #0
 8016c26:	4604      	mov	r4, r0
 8016c28:	4608      	mov	r0, r1
 8016c2a:	602b      	str	r3, [r5, #0]
 8016c2c:	f7ea f936 	bl	8000e9c <_sbrk>
 8016c30:	1c43      	adds	r3, r0, #1
 8016c32:	d102      	bne.n	8016c3a <_sbrk_r+0x1a>
 8016c34:	682b      	ldr	r3, [r5, #0]
 8016c36:	b103      	cbz	r3, 8016c3a <_sbrk_r+0x1a>
 8016c38:	6023      	str	r3, [r4, #0]
 8016c3a:	bd38      	pop	{r3, r4, r5, pc}
 8016c3c:	2406b47c 	.word	0x2406b47c

08016c40 <__sread>:
 8016c40:	b510      	push	{r4, lr}
 8016c42:	460c      	mov	r4, r1
 8016c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c48:	f000 fcb6 	bl	80175b8 <_read_r>
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	bfab      	itete	ge
 8016c50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016c52:	89a3      	ldrhlt	r3, [r4, #12]
 8016c54:	181b      	addge	r3, r3, r0
 8016c56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016c5a:	bfac      	ite	ge
 8016c5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016c5e:	81a3      	strhlt	r3, [r4, #12]
 8016c60:	bd10      	pop	{r4, pc}

08016c62 <__swrite>:
 8016c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c66:	461f      	mov	r7, r3
 8016c68:	898b      	ldrh	r3, [r1, #12]
 8016c6a:	05db      	lsls	r3, r3, #23
 8016c6c:	4605      	mov	r5, r0
 8016c6e:	460c      	mov	r4, r1
 8016c70:	4616      	mov	r6, r2
 8016c72:	d505      	bpl.n	8016c80 <__swrite+0x1e>
 8016c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c78:	2302      	movs	r3, #2
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	f000 f938 	bl	8016ef0 <_lseek_r>
 8016c80:	89a3      	ldrh	r3, [r4, #12]
 8016c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c8a:	81a3      	strh	r3, [r4, #12]
 8016c8c:	4632      	mov	r2, r6
 8016c8e:	463b      	mov	r3, r7
 8016c90:	4628      	mov	r0, r5
 8016c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c96:	f000 b817 	b.w	8016cc8 <_write_r>

08016c9a <__sseek>:
 8016c9a:	b510      	push	{r4, lr}
 8016c9c:	460c      	mov	r4, r1
 8016c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ca2:	f000 f925 	bl	8016ef0 <_lseek_r>
 8016ca6:	1c43      	adds	r3, r0, #1
 8016ca8:	89a3      	ldrh	r3, [r4, #12]
 8016caa:	bf15      	itete	ne
 8016cac:	6560      	strne	r0, [r4, #84]	; 0x54
 8016cae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016cb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016cb6:	81a3      	strheq	r3, [r4, #12]
 8016cb8:	bf18      	it	ne
 8016cba:	81a3      	strhne	r3, [r4, #12]
 8016cbc:	bd10      	pop	{r4, pc}

08016cbe <__sclose>:
 8016cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cc2:	f000 b831 	b.w	8016d28 <_close_r>
	...

08016cc8 <_write_r>:
 8016cc8:	b538      	push	{r3, r4, r5, lr}
 8016cca:	4d07      	ldr	r5, [pc, #28]	; (8016ce8 <_write_r+0x20>)
 8016ccc:	4604      	mov	r4, r0
 8016cce:	4608      	mov	r0, r1
 8016cd0:	4611      	mov	r1, r2
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	602a      	str	r2, [r5, #0]
 8016cd6:	461a      	mov	r2, r3
 8016cd8:	f7ea f88f 	bl	8000dfa <_write>
 8016cdc:	1c43      	adds	r3, r0, #1
 8016cde:	d102      	bne.n	8016ce6 <_write_r+0x1e>
 8016ce0:	682b      	ldr	r3, [r5, #0]
 8016ce2:	b103      	cbz	r3, 8016ce6 <_write_r+0x1e>
 8016ce4:	6023      	str	r3, [r4, #0]
 8016ce6:	bd38      	pop	{r3, r4, r5, pc}
 8016ce8:	2406b47c 	.word	0x2406b47c

08016cec <__assert_func>:
 8016cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016cee:	4614      	mov	r4, r2
 8016cf0:	461a      	mov	r2, r3
 8016cf2:	4b09      	ldr	r3, [pc, #36]	; (8016d18 <__assert_func+0x2c>)
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	4605      	mov	r5, r0
 8016cf8:	68d8      	ldr	r0, [r3, #12]
 8016cfa:	b14c      	cbz	r4, 8016d10 <__assert_func+0x24>
 8016cfc:	4b07      	ldr	r3, [pc, #28]	; (8016d1c <__assert_func+0x30>)
 8016cfe:	9100      	str	r1, [sp, #0]
 8016d00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016d04:	4906      	ldr	r1, [pc, #24]	; (8016d20 <__assert_func+0x34>)
 8016d06:	462b      	mov	r3, r5
 8016d08:	f000 f8e0 	bl	8016ecc <fiprintf>
 8016d0c:	f000 fd26 	bl	801775c <abort>
 8016d10:	4b04      	ldr	r3, [pc, #16]	; (8016d24 <__assert_func+0x38>)
 8016d12:	461c      	mov	r4, r3
 8016d14:	e7f3      	b.n	8016cfe <__assert_func+0x12>
 8016d16:	bf00      	nop
 8016d18:	24000034 	.word	0x24000034
 8016d1c:	0801a752 	.word	0x0801a752
 8016d20:	0801a75f 	.word	0x0801a75f
 8016d24:	0801a78d 	.word	0x0801a78d

08016d28 <_close_r>:
 8016d28:	b538      	push	{r3, r4, r5, lr}
 8016d2a:	4d06      	ldr	r5, [pc, #24]	; (8016d44 <_close_r+0x1c>)
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	4604      	mov	r4, r0
 8016d30:	4608      	mov	r0, r1
 8016d32:	602b      	str	r3, [r5, #0]
 8016d34:	f7ea f87d 	bl	8000e32 <_close>
 8016d38:	1c43      	adds	r3, r0, #1
 8016d3a:	d102      	bne.n	8016d42 <_close_r+0x1a>
 8016d3c:	682b      	ldr	r3, [r5, #0]
 8016d3e:	b103      	cbz	r3, 8016d42 <_close_r+0x1a>
 8016d40:	6023      	str	r3, [r4, #0]
 8016d42:	bd38      	pop	{r3, r4, r5, pc}
 8016d44:	2406b47c 	.word	0x2406b47c

08016d48 <__sflush_r>:
 8016d48:	898a      	ldrh	r2, [r1, #12]
 8016d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d4e:	4605      	mov	r5, r0
 8016d50:	0710      	lsls	r0, r2, #28
 8016d52:	460c      	mov	r4, r1
 8016d54:	d458      	bmi.n	8016e08 <__sflush_r+0xc0>
 8016d56:	684b      	ldr	r3, [r1, #4]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	dc05      	bgt.n	8016d68 <__sflush_r+0x20>
 8016d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	dc02      	bgt.n	8016d68 <__sflush_r+0x20>
 8016d62:	2000      	movs	r0, #0
 8016d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d6a:	2e00      	cmp	r6, #0
 8016d6c:	d0f9      	beq.n	8016d62 <__sflush_r+0x1a>
 8016d6e:	2300      	movs	r3, #0
 8016d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016d74:	682f      	ldr	r7, [r5, #0]
 8016d76:	602b      	str	r3, [r5, #0]
 8016d78:	d032      	beq.n	8016de0 <__sflush_r+0x98>
 8016d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016d7c:	89a3      	ldrh	r3, [r4, #12]
 8016d7e:	075a      	lsls	r2, r3, #29
 8016d80:	d505      	bpl.n	8016d8e <__sflush_r+0x46>
 8016d82:	6863      	ldr	r3, [r4, #4]
 8016d84:	1ac0      	subs	r0, r0, r3
 8016d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016d88:	b10b      	cbz	r3, 8016d8e <__sflush_r+0x46>
 8016d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016d8c:	1ac0      	subs	r0, r0, r3
 8016d8e:	2300      	movs	r3, #0
 8016d90:	4602      	mov	r2, r0
 8016d92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d94:	6a21      	ldr	r1, [r4, #32]
 8016d96:	4628      	mov	r0, r5
 8016d98:	47b0      	blx	r6
 8016d9a:	1c43      	adds	r3, r0, #1
 8016d9c:	89a3      	ldrh	r3, [r4, #12]
 8016d9e:	d106      	bne.n	8016dae <__sflush_r+0x66>
 8016da0:	6829      	ldr	r1, [r5, #0]
 8016da2:	291d      	cmp	r1, #29
 8016da4:	d82c      	bhi.n	8016e00 <__sflush_r+0xb8>
 8016da6:	4a2a      	ldr	r2, [pc, #168]	; (8016e50 <__sflush_r+0x108>)
 8016da8:	40ca      	lsrs	r2, r1
 8016daa:	07d6      	lsls	r6, r2, #31
 8016dac:	d528      	bpl.n	8016e00 <__sflush_r+0xb8>
 8016dae:	2200      	movs	r2, #0
 8016db0:	6062      	str	r2, [r4, #4]
 8016db2:	04d9      	lsls	r1, r3, #19
 8016db4:	6922      	ldr	r2, [r4, #16]
 8016db6:	6022      	str	r2, [r4, #0]
 8016db8:	d504      	bpl.n	8016dc4 <__sflush_r+0x7c>
 8016dba:	1c42      	adds	r2, r0, #1
 8016dbc:	d101      	bne.n	8016dc2 <__sflush_r+0x7a>
 8016dbe:	682b      	ldr	r3, [r5, #0]
 8016dc0:	b903      	cbnz	r3, 8016dc4 <__sflush_r+0x7c>
 8016dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8016dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016dc6:	602f      	str	r7, [r5, #0]
 8016dc8:	2900      	cmp	r1, #0
 8016dca:	d0ca      	beq.n	8016d62 <__sflush_r+0x1a>
 8016dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016dd0:	4299      	cmp	r1, r3
 8016dd2:	d002      	beq.n	8016dda <__sflush_r+0x92>
 8016dd4:	4628      	mov	r0, r5
 8016dd6:	f000 f8b1 	bl	8016f3c <_free_r>
 8016dda:	2000      	movs	r0, #0
 8016ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8016dde:	e7c1      	b.n	8016d64 <__sflush_r+0x1c>
 8016de0:	6a21      	ldr	r1, [r4, #32]
 8016de2:	2301      	movs	r3, #1
 8016de4:	4628      	mov	r0, r5
 8016de6:	47b0      	blx	r6
 8016de8:	1c41      	adds	r1, r0, #1
 8016dea:	d1c7      	bne.n	8016d7c <__sflush_r+0x34>
 8016dec:	682b      	ldr	r3, [r5, #0]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d0c4      	beq.n	8016d7c <__sflush_r+0x34>
 8016df2:	2b1d      	cmp	r3, #29
 8016df4:	d001      	beq.n	8016dfa <__sflush_r+0xb2>
 8016df6:	2b16      	cmp	r3, #22
 8016df8:	d101      	bne.n	8016dfe <__sflush_r+0xb6>
 8016dfa:	602f      	str	r7, [r5, #0]
 8016dfc:	e7b1      	b.n	8016d62 <__sflush_r+0x1a>
 8016dfe:	89a3      	ldrh	r3, [r4, #12]
 8016e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e04:	81a3      	strh	r3, [r4, #12]
 8016e06:	e7ad      	b.n	8016d64 <__sflush_r+0x1c>
 8016e08:	690f      	ldr	r7, [r1, #16]
 8016e0a:	2f00      	cmp	r7, #0
 8016e0c:	d0a9      	beq.n	8016d62 <__sflush_r+0x1a>
 8016e0e:	0793      	lsls	r3, r2, #30
 8016e10:	680e      	ldr	r6, [r1, #0]
 8016e12:	bf08      	it	eq
 8016e14:	694b      	ldreq	r3, [r1, #20]
 8016e16:	600f      	str	r7, [r1, #0]
 8016e18:	bf18      	it	ne
 8016e1a:	2300      	movne	r3, #0
 8016e1c:	eba6 0807 	sub.w	r8, r6, r7
 8016e20:	608b      	str	r3, [r1, #8]
 8016e22:	f1b8 0f00 	cmp.w	r8, #0
 8016e26:	dd9c      	ble.n	8016d62 <__sflush_r+0x1a>
 8016e28:	6a21      	ldr	r1, [r4, #32]
 8016e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016e2c:	4643      	mov	r3, r8
 8016e2e:	463a      	mov	r2, r7
 8016e30:	4628      	mov	r0, r5
 8016e32:	47b0      	blx	r6
 8016e34:	2800      	cmp	r0, #0
 8016e36:	dc06      	bgt.n	8016e46 <__sflush_r+0xfe>
 8016e38:	89a3      	ldrh	r3, [r4, #12]
 8016e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e3e:	81a3      	strh	r3, [r4, #12]
 8016e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e44:	e78e      	b.n	8016d64 <__sflush_r+0x1c>
 8016e46:	4407      	add	r7, r0
 8016e48:	eba8 0800 	sub.w	r8, r8, r0
 8016e4c:	e7e9      	b.n	8016e22 <__sflush_r+0xda>
 8016e4e:	bf00      	nop
 8016e50:	20400001 	.word	0x20400001

08016e54 <_fflush_r>:
 8016e54:	b538      	push	{r3, r4, r5, lr}
 8016e56:	690b      	ldr	r3, [r1, #16]
 8016e58:	4605      	mov	r5, r0
 8016e5a:	460c      	mov	r4, r1
 8016e5c:	b913      	cbnz	r3, 8016e64 <_fflush_r+0x10>
 8016e5e:	2500      	movs	r5, #0
 8016e60:	4628      	mov	r0, r5
 8016e62:	bd38      	pop	{r3, r4, r5, pc}
 8016e64:	b118      	cbz	r0, 8016e6e <_fflush_r+0x1a>
 8016e66:	6983      	ldr	r3, [r0, #24]
 8016e68:	b90b      	cbnz	r3, 8016e6e <_fflush_r+0x1a>
 8016e6a:	f7ff fcd3 	bl	8016814 <__sinit>
 8016e6e:	4b14      	ldr	r3, [pc, #80]	; (8016ec0 <_fflush_r+0x6c>)
 8016e70:	429c      	cmp	r4, r3
 8016e72:	d11b      	bne.n	8016eac <_fflush_r+0x58>
 8016e74:	686c      	ldr	r4, [r5, #4]
 8016e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d0ef      	beq.n	8016e5e <_fflush_r+0xa>
 8016e7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016e80:	07d0      	lsls	r0, r2, #31
 8016e82:	d404      	bmi.n	8016e8e <_fflush_r+0x3a>
 8016e84:	0599      	lsls	r1, r3, #22
 8016e86:	d402      	bmi.n	8016e8e <_fflush_r+0x3a>
 8016e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e8a:	f7ff fd86 	bl	801699a <__retarget_lock_acquire_recursive>
 8016e8e:	4628      	mov	r0, r5
 8016e90:	4621      	mov	r1, r4
 8016e92:	f7ff ff59 	bl	8016d48 <__sflush_r>
 8016e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e98:	07da      	lsls	r2, r3, #31
 8016e9a:	4605      	mov	r5, r0
 8016e9c:	d4e0      	bmi.n	8016e60 <_fflush_r+0xc>
 8016e9e:	89a3      	ldrh	r3, [r4, #12]
 8016ea0:	059b      	lsls	r3, r3, #22
 8016ea2:	d4dd      	bmi.n	8016e60 <_fflush_r+0xc>
 8016ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ea6:	f7ff fd79 	bl	801699c <__retarget_lock_release_recursive>
 8016eaa:	e7d9      	b.n	8016e60 <_fflush_r+0xc>
 8016eac:	4b05      	ldr	r3, [pc, #20]	; (8016ec4 <_fflush_r+0x70>)
 8016eae:	429c      	cmp	r4, r3
 8016eb0:	d101      	bne.n	8016eb6 <_fflush_r+0x62>
 8016eb2:	68ac      	ldr	r4, [r5, #8]
 8016eb4:	e7df      	b.n	8016e76 <_fflush_r+0x22>
 8016eb6:	4b04      	ldr	r3, [pc, #16]	; (8016ec8 <_fflush_r+0x74>)
 8016eb8:	429c      	cmp	r4, r3
 8016eba:	bf08      	it	eq
 8016ebc:	68ec      	ldreq	r4, [r5, #12]
 8016ebe:	e7da      	b.n	8016e76 <_fflush_r+0x22>
 8016ec0:	0801a698 	.word	0x0801a698
 8016ec4:	0801a6b8 	.word	0x0801a6b8
 8016ec8:	0801a678 	.word	0x0801a678

08016ecc <fiprintf>:
 8016ecc:	b40e      	push	{r1, r2, r3}
 8016ece:	b503      	push	{r0, r1, lr}
 8016ed0:	4601      	mov	r1, r0
 8016ed2:	ab03      	add	r3, sp, #12
 8016ed4:	4805      	ldr	r0, [pc, #20]	; (8016eec <fiprintf+0x20>)
 8016ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016eda:	6800      	ldr	r0, [r0, #0]
 8016edc:	9301      	str	r3, [sp, #4]
 8016ede:	f000 f8a7 	bl	8017030 <_vfiprintf_r>
 8016ee2:	b002      	add	sp, #8
 8016ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ee8:	b003      	add	sp, #12
 8016eea:	4770      	bx	lr
 8016eec:	24000034 	.word	0x24000034

08016ef0 <_lseek_r>:
 8016ef0:	b538      	push	{r3, r4, r5, lr}
 8016ef2:	4d07      	ldr	r5, [pc, #28]	; (8016f10 <_lseek_r+0x20>)
 8016ef4:	4604      	mov	r4, r0
 8016ef6:	4608      	mov	r0, r1
 8016ef8:	4611      	mov	r1, r2
 8016efa:	2200      	movs	r2, #0
 8016efc:	602a      	str	r2, [r5, #0]
 8016efe:	461a      	mov	r2, r3
 8016f00:	f7e9 ffbe 	bl	8000e80 <_lseek>
 8016f04:	1c43      	adds	r3, r0, #1
 8016f06:	d102      	bne.n	8016f0e <_lseek_r+0x1e>
 8016f08:	682b      	ldr	r3, [r5, #0]
 8016f0a:	b103      	cbz	r3, 8016f0e <_lseek_r+0x1e>
 8016f0c:	6023      	str	r3, [r4, #0]
 8016f0e:	bd38      	pop	{r3, r4, r5, pc}
 8016f10:	2406b47c 	.word	0x2406b47c

08016f14 <malloc>:
 8016f14:	4b02      	ldr	r3, [pc, #8]	; (8016f20 <malloc+0xc>)
 8016f16:	4601      	mov	r1, r0
 8016f18:	6818      	ldr	r0, [r3, #0]
 8016f1a:	f7ff bd65 	b.w	80169e8 <_malloc_r>
 8016f1e:	bf00      	nop
 8016f20:	24000034 	.word	0x24000034

08016f24 <__malloc_lock>:
 8016f24:	4801      	ldr	r0, [pc, #4]	; (8016f2c <__malloc_lock+0x8>)
 8016f26:	f7ff bd38 	b.w	801699a <__retarget_lock_acquire_recursive>
 8016f2a:	bf00      	nop
 8016f2c:	2406b488 	.word	0x2406b488

08016f30 <__malloc_unlock>:
 8016f30:	4801      	ldr	r0, [pc, #4]	; (8016f38 <__malloc_unlock+0x8>)
 8016f32:	f7ff bd33 	b.w	801699c <__retarget_lock_release_recursive>
 8016f36:	bf00      	nop
 8016f38:	2406b488 	.word	0x2406b488

08016f3c <_free_r>:
 8016f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f3e:	2900      	cmp	r1, #0
 8016f40:	d048      	beq.n	8016fd4 <_free_r+0x98>
 8016f42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f46:	9001      	str	r0, [sp, #4]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	f1a1 0404 	sub.w	r4, r1, #4
 8016f4e:	bfb8      	it	lt
 8016f50:	18e4      	addlt	r4, r4, r3
 8016f52:	f7ff ffe7 	bl	8016f24 <__malloc_lock>
 8016f56:	4a20      	ldr	r2, [pc, #128]	; (8016fd8 <_free_r+0x9c>)
 8016f58:	9801      	ldr	r0, [sp, #4]
 8016f5a:	6813      	ldr	r3, [r2, #0]
 8016f5c:	4615      	mov	r5, r2
 8016f5e:	b933      	cbnz	r3, 8016f6e <_free_r+0x32>
 8016f60:	6063      	str	r3, [r4, #4]
 8016f62:	6014      	str	r4, [r2, #0]
 8016f64:	b003      	add	sp, #12
 8016f66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f6a:	f7ff bfe1 	b.w	8016f30 <__malloc_unlock>
 8016f6e:	42a3      	cmp	r3, r4
 8016f70:	d90b      	bls.n	8016f8a <_free_r+0x4e>
 8016f72:	6821      	ldr	r1, [r4, #0]
 8016f74:	1862      	adds	r2, r4, r1
 8016f76:	4293      	cmp	r3, r2
 8016f78:	bf04      	itt	eq
 8016f7a:	681a      	ldreq	r2, [r3, #0]
 8016f7c:	685b      	ldreq	r3, [r3, #4]
 8016f7e:	6063      	str	r3, [r4, #4]
 8016f80:	bf04      	itt	eq
 8016f82:	1852      	addeq	r2, r2, r1
 8016f84:	6022      	streq	r2, [r4, #0]
 8016f86:	602c      	str	r4, [r5, #0]
 8016f88:	e7ec      	b.n	8016f64 <_free_r+0x28>
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	685b      	ldr	r3, [r3, #4]
 8016f8e:	b10b      	cbz	r3, 8016f94 <_free_r+0x58>
 8016f90:	42a3      	cmp	r3, r4
 8016f92:	d9fa      	bls.n	8016f8a <_free_r+0x4e>
 8016f94:	6811      	ldr	r1, [r2, #0]
 8016f96:	1855      	adds	r5, r2, r1
 8016f98:	42a5      	cmp	r5, r4
 8016f9a:	d10b      	bne.n	8016fb4 <_free_r+0x78>
 8016f9c:	6824      	ldr	r4, [r4, #0]
 8016f9e:	4421      	add	r1, r4
 8016fa0:	1854      	adds	r4, r2, r1
 8016fa2:	42a3      	cmp	r3, r4
 8016fa4:	6011      	str	r1, [r2, #0]
 8016fa6:	d1dd      	bne.n	8016f64 <_free_r+0x28>
 8016fa8:	681c      	ldr	r4, [r3, #0]
 8016faa:	685b      	ldr	r3, [r3, #4]
 8016fac:	6053      	str	r3, [r2, #4]
 8016fae:	4421      	add	r1, r4
 8016fb0:	6011      	str	r1, [r2, #0]
 8016fb2:	e7d7      	b.n	8016f64 <_free_r+0x28>
 8016fb4:	d902      	bls.n	8016fbc <_free_r+0x80>
 8016fb6:	230c      	movs	r3, #12
 8016fb8:	6003      	str	r3, [r0, #0]
 8016fba:	e7d3      	b.n	8016f64 <_free_r+0x28>
 8016fbc:	6825      	ldr	r5, [r4, #0]
 8016fbe:	1961      	adds	r1, r4, r5
 8016fc0:	428b      	cmp	r3, r1
 8016fc2:	bf04      	itt	eq
 8016fc4:	6819      	ldreq	r1, [r3, #0]
 8016fc6:	685b      	ldreq	r3, [r3, #4]
 8016fc8:	6063      	str	r3, [r4, #4]
 8016fca:	bf04      	itt	eq
 8016fcc:	1949      	addeq	r1, r1, r5
 8016fce:	6021      	streq	r1, [r4, #0]
 8016fd0:	6054      	str	r4, [r2, #4]
 8016fd2:	e7c7      	b.n	8016f64 <_free_r+0x28>
 8016fd4:	b003      	add	sp, #12
 8016fd6:	bd30      	pop	{r4, r5, pc}
 8016fd8:	2406465c 	.word	0x2406465c

08016fdc <__sfputc_r>:
 8016fdc:	6893      	ldr	r3, [r2, #8]
 8016fde:	3b01      	subs	r3, #1
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	b410      	push	{r4}
 8016fe4:	6093      	str	r3, [r2, #8]
 8016fe6:	da08      	bge.n	8016ffa <__sfputc_r+0x1e>
 8016fe8:	6994      	ldr	r4, [r2, #24]
 8016fea:	42a3      	cmp	r3, r4
 8016fec:	db01      	blt.n	8016ff2 <__sfputc_r+0x16>
 8016fee:	290a      	cmp	r1, #10
 8016ff0:	d103      	bne.n	8016ffa <__sfputc_r+0x1e>
 8016ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ff6:	f000 baf1 	b.w	80175dc <__swbuf_r>
 8016ffa:	6813      	ldr	r3, [r2, #0]
 8016ffc:	1c58      	adds	r0, r3, #1
 8016ffe:	6010      	str	r0, [r2, #0]
 8017000:	7019      	strb	r1, [r3, #0]
 8017002:	4608      	mov	r0, r1
 8017004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017008:	4770      	bx	lr

0801700a <__sfputs_r>:
 801700a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801700c:	4606      	mov	r6, r0
 801700e:	460f      	mov	r7, r1
 8017010:	4614      	mov	r4, r2
 8017012:	18d5      	adds	r5, r2, r3
 8017014:	42ac      	cmp	r4, r5
 8017016:	d101      	bne.n	801701c <__sfputs_r+0x12>
 8017018:	2000      	movs	r0, #0
 801701a:	e007      	b.n	801702c <__sfputs_r+0x22>
 801701c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017020:	463a      	mov	r2, r7
 8017022:	4630      	mov	r0, r6
 8017024:	f7ff ffda 	bl	8016fdc <__sfputc_r>
 8017028:	1c43      	adds	r3, r0, #1
 801702a:	d1f3      	bne.n	8017014 <__sfputs_r+0xa>
 801702c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017030 <_vfiprintf_r>:
 8017030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017034:	460d      	mov	r5, r1
 8017036:	b09d      	sub	sp, #116	; 0x74
 8017038:	4614      	mov	r4, r2
 801703a:	4698      	mov	r8, r3
 801703c:	4606      	mov	r6, r0
 801703e:	b118      	cbz	r0, 8017048 <_vfiprintf_r+0x18>
 8017040:	6983      	ldr	r3, [r0, #24]
 8017042:	b90b      	cbnz	r3, 8017048 <_vfiprintf_r+0x18>
 8017044:	f7ff fbe6 	bl	8016814 <__sinit>
 8017048:	4b89      	ldr	r3, [pc, #548]	; (8017270 <_vfiprintf_r+0x240>)
 801704a:	429d      	cmp	r5, r3
 801704c:	d11b      	bne.n	8017086 <_vfiprintf_r+0x56>
 801704e:	6875      	ldr	r5, [r6, #4]
 8017050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017052:	07d9      	lsls	r1, r3, #31
 8017054:	d405      	bmi.n	8017062 <_vfiprintf_r+0x32>
 8017056:	89ab      	ldrh	r3, [r5, #12]
 8017058:	059a      	lsls	r2, r3, #22
 801705a:	d402      	bmi.n	8017062 <_vfiprintf_r+0x32>
 801705c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801705e:	f7ff fc9c 	bl	801699a <__retarget_lock_acquire_recursive>
 8017062:	89ab      	ldrh	r3, [r5, #12]
 8017064:	071b      	lsls	r3, r3, #28
 8017066:	d501      	bpl.n	801706c <_vfiprintf_r+0x3c>
 8017068:	692b      	ldr	r3, [r5, #16]
 801706a:	b9eb      	cbnz	r3, 80170a8 <_vfiprintf_r+0x78>
 801706c:	4629      	mov	r1, r5
 801706e:	4630      	mov	r0, r6
 8017070:	f000 fb06 	bl	8017680 <__swsetup_r>
 8017074:	b1c0      	cbz	r0, 80170a8 <_vfiprintf_r+0x78>
 8017076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017078:	07dc      	lsls	r4, r3, #31
 801707a:	d50e      	bpl.n	801709a <_vfiprintf_r+0x6a>
 801707c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017080:	b01d      	add	sp, #116	; 0x74
 8017082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017086:	4b7b      	ldr	r3, [pc, #492]	; (8017274 <_vfiprintf_r+0x244>)
 8017088:	429d      	cmp	r5, r3
 801708a:	d101      	bne.n	8017090 <_vfiprintf_r+0x60>
 801708c:	68b5      	ldr	r5, [r6, #8]
 801708e:	e7df      	b.n	8017050 <_vfiprintf_r+0x20>
 8017090:	4b79      	ldr	r3, [pc, #484]	; (8017278 <_vfiprintf_r+0x248>)
 8017092:	429d      	cmp	r5, r3
 8017094:	bf08      	it	eq
 8017096:	68f5      	ldreq	r5, [r6, #12]
 8017098:	e7da      	b.n	8017050 <_vfiprintf_r+0x20>
 801709a:	89ab      	ldrh	r3, [r5, #12]
 801709c:	0598      	lsls	r0, r3, #22
 801709e:	d4ed      	bmi.n	801707c <_vfiprintf_r+0x4c>
 80170a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80170a2:	f7ff fc7b 	bl	801699c <__retarget_lock_release_recursive>
 80170a6:	e7e9      	b.n	801707c <_vfiprintf_r+0x4c>
 80170a8:	2300      	movs	r3, #0
 80170aa:	9309      	str	r3, [sp, #36]	; 0x24
 80170ac:	2320      	movs	r3, #32
 80170ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80170b6:	2330      	movs	r3, #48	; 0x30
 80170b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801727c <_vfiprintf_r+0x24c>
 80170bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80170c0:	f04f 0901 	mov.w	r9, #1
 80170c4:	4623      	mov	r3, r4
 80170c6:	469a      	mov	sl, r3
 80170c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170cc:	b10a      	cbz	r2, 80170d2 <_vfiprintf_r+0xa2>
 80170ce:	2a25      	cmp	r2, #37	; 0x25
 80170d0:	d1f9      	bne.n	80170c6 <_vfiprintf_r+0x96>
 80170d2:	ebba 0b04 	subs.w	fp, sl, r4
 80170d6:	d00b      	beq.n	80170f0 <_vfiprintf_r+0xc0>
 80170d8:	465b      	mov	r3, fp
 80170da:	4622      	mov	r2, r4
 80170dc:	4629      	mov	r1, r5
 80170de:	4630      	mov	r0, r6
 80170e0:	f7ff ff93 	bl	801700a <__sfputs_r>
 80170e4:	3001      	adds	r0, #1
 80170e6:	f000 80aa 	beq.w	801723e <_vfiprintf_r+0x20e>
 80170ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80170ec:	445a      	add	r2, fp
 80170ee:	9209      	str	r2, [sp, #36]	; 0x24
 80170f0:	f89a 3000 	ldrb.w	r3, [sl]
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	f000 80a2 	beq.w	801723e <_vfiprintf_r+0x20e>
 80170fa:	2300      	movs	r3, #0
 80170fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017104:	f10a 0a01 	add.w	sl, sl, #1
 8017108:	9304      	str	r3, [sp, #16]
 801710a:	9307      	str	r3, [sp, #28]
 801710c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017110:	931a      	str	r3, [sp, #104]	; 0x68
 8017112:	4654      	mov	r4, sl
 8017114:	2205      	movs	r2, #5
 8017116:	f814 1b01 	ldrb.w	r1, [r4], #1
 801711a:	4858      	ldr	r0, [pc, #352]	; (801727c <_vfiprintf_r+0x24c>)
 801711c:	f7e9 f8e8 	bl	80002f0 <memchr>
 8017120:	9a04      	ldr	r2, [sp, #16]
 8017122:	b9d8      	cbnz	r0, 801715c <_vfiprintf_r+0x12c>
 8017124:	06d1      	lsls	r1, r2, #27
 8017126:	bf44      	itt	mi
 8017128:	2320      	movmi	r3, #32
 801712a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801712e:	0713      	lsls	r3, r2, #28
 8017130:	bf44      	itt	mi
 8017132:	232b      	movmi	r3, #43	; 0x2b
 8017134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017138:	f89a 3000 	ldrb.w	r3, [sl]
 801713c:	2b2a      	cmp	r3, #42	; 0x2a
 801713e:	d015      	beq.n	801716c <_vfiprintf_r+0x13c>
 8017140:	9a07      	ldr	r2, [sp, #28]
 8017142:	4654      	mov	r4, sl
 8017144:	2000      	movs	r0, #0
 8017146:	f04f 0c0a 	mov.w	ip, #10
 801714a:	4621      	mov	r1, r4
 801714c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017150:	3b30      	subs	r3, #48	; 0x30
 8017152:	2b09      	cmp	r3, #9
 8017154:	d94e      	bls.n	80171f4 <_vfiprintf_r+0x1c4>
 8017156:	b1b0      	cbz	r0, 8017186 <_vfiprintf_r+0x156>
 8017158:	9207      	str	r2, [sp, #28]
 801715a:	e014      	b.n	8017186 <_vfiprintf_r+0x156>
 801715c:	eba0 0308 	sub.w	r3, r0, r8
 8017160:	fa09 f303 	lsl.w	r3, r9, r3
 8017164:	4313      	orrs	r3, r2
 8017166:	9304      	str	r3, [sp, #16]
 8017168:	46a2      	mov	sl, r4
 801716a:	e7d2      	b.n	8017112 <_vfiprintf_r+0xe2>
 801716c:	9b03      	ldr	r3, [sp, #12]
 801716e:	1d19      	adds	r1, r3, #4
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	9103      	str	r1, [sp, #12]
 8017174:	2b00      	cmp	r3, #0
 8017176:	bfbb      	ittet	lt
 8017178:	425b      	neglt	r3, r3
 801717a:	f042 0202 	orrlt.w	r2, r2, #2
 801717e:	9307      	strge	r3, [sp, #28]
 8017180:	9307      	strlt	r3, [sp, #28]
 8017182:	bfb8      	it	lt
 8017184:	9204      	strlt	r2, [sp, #16]
 8017186:	7823      	ldrb	r3, [r4, #0]
 8017188:	2b2e      	cmp	r3, #46	; 0x2e
 801718a:	d10c      	bne.n	80171a6 <_vfiprintf_r+0x176>
 801718c:	7863      	ldrb	r3, [r4, #1]
 801718e:	2b2a      	cmp	r3, #42	; 0x2a
 8017190:	d135      	bne.n	80171fe <_vfiprintf_r+0x1ce>
 8017192:	9b03      	ldr	r3, [sp, #12]
 8017194:	1d1a      	adds	r2, r3, #4
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	9203      	str	r2, [sp, #12]
 801719a:	2b00      	cmp	r3, #0
 801719c:	bfb8      	it	lt
 801719e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80171a2:	3402      	adds	r4, #2
 80171a4:	9305      	str	r3, [sp, #20]
 80171a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801728c <_vfiprintf_r+0x25c>
 80171aa:	7821      	ldrb	r1, [r4, #0]
 80171ac:	2203      	movs	r2, #3
 80171ae:	4650      	mov	r0, sl
 80171b0:	f7e9 f89e 	bl	80002f0 <memchr>
 80171b4:	b140      	cbz	r0, 80171c8 <_vfiprintf_r+0x198>
 80171b6:	2340      	movs	r3, #64	; 0x40
 80171b8:	eba0 000a 	sub.w	r0, r0, sl
 80171bc:	fa03 f000 	lsl.w	r0, r3, r0
 80171c0:	9b04      	ldr	r3, [sp, #16]
 80171c2:	4303      	orrs	r3, r0
 80171c4:	3401      	adds	r4, #1
 80171c6:	9304      	str	r3, [sp, #16]
 80171c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171cc:	482c      	ldr	r0, [pc, #176]	; (8017280 <_vfiprintf_r+0x250>)
 80171ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80171d2:	2206      	movs	r2, #6
 80171d4:	f7e9 f88c 	bl	80002f0 <memchr>
 80171d8:	2800      	cmp	r0, #0
 80171da:	d03f      	beq.n	801725c <_vfiprintf_r+0x22c>
 80171dc:	4b29      	ldr	r3, [pc, #164]	; (8017284 <_vfiprintf_r+0x254>)
 80171de:	bb1b      	cbnz	r3, 8017228 <_vfiprintf_r+0x1f8>
 80171e0:	9b03      	ldr	r3, [sp, #12]
 80171e2:	3307      	adds	r3, #7
 80171e4:	f023 0307 	bic.w	r3, r3, #7
 80171e8:	3308      	adds	r3, #8
 80171ea:	9303      	str	r3, [sp, #12]
 80171ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171ee:	443b      	add	r3, r7
 80171f0:	9309      	str	r3, [sp, #36]	; 0x24
 80171f2:	e767      	b.n	80170c4 <_vfiprintf_r+0x94>
 80171f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80171f8:	460c      	mov	r4, r1
 80171fa:	2001      	movs	r0, #1
 80171fc:	e7a5      	b.n	801714a <_vfiprintf_r+0x11a>
 80171fe:	2300      	movs	r3, #0
 8017200:	3401      	adds	r4, #1
 8017202:	9305      	str	r3, [sp, #20]
 8017204:	4619      	mov	r1, r3
 8017206:	f04f 0c0a 	mov.w	ip, #10
 801720a:	4620      	mov	r0, r4
 801720c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017210:	3a30      	subs	r2, #48	; 0x30
 8017212:	2a09      	cmp	r2, #9
 8017214:	d903      	bls.n	801721e <_vfiprintf_r+0x1ee>
 8017216:	2b00      	cmp	r3, #0
 8017218:	d0c5      	beq.n	80171a6 <_vfiprintf_r+0x176>
 801721a:	9105      	str	r1, [sp, #20]
 801721c:	e7c3      	b.n	80171a6 <_vfiprintf_r+0x176>
 801721e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017222:	4604      	mov	r4, r0
 8017224:	2301      	movs	r3, #1
 8017226:	e7f0      	b.n	801720a <_vfiprintf_r+0x1da>
 8017228:	ab03      	add	r3, sp, #12
 801722a:	9300      	str	r3, [sp, #0]
 801722c:	462a      	mov	r2, r5
 801722e:	4b16      	ldr	r3, [pc, #88]	; (8017288 <_vfiprintf_r+0x258>)
 8017230:	a904      	add	r1, sp, #16
 8017232:	4630      	mov	r0, r6
 8017234:	f3af 8000 	nop.w
 8017238:	4607      	mov	r7, r0
 801723a:	1c78      	adds	r0, r7, #1
 801723c:	d1d6      	bne.n	80171ec <_vfiprintf_r+0x1bc>
 801723e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017240:	07d9      	lsls	r1, r3, #31
 8017242:	d405      	bmi.n	8017250 <_vfiprintf_r+0x220>
 8017244:	89ab      	ldrh	r3, [r5, #12]
 8017246:	059a      	lsls	r2, r3, #22
 8017248:	d402      	bmi.n	8017250 <_vfiprintf_r+0x220>
 801724a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801724c:	f7ff fba6 	bl	801699c <__retarget_lock_release_recursive>
 8017250:	89ab      	ldrh	r3, [r5, #12]
 8017252:	065b      	lsls	r3, r3, #25
 8017254:	f53f af12 	bmi.w	801707c <_vfiprintf_r+0x4c>
 8017258:	9809      	ldr	r0, [sp, #36]	; 0x24
 801725a:	e711      	b.n	8017080 <_vfiprintf_r+0x50>
 801725c:	ab03      	add	r3, sp, #12
 801725e:	9300      	str	r3, [sp, #0]
 8017260:	462a      	mov	r2, r5
 8017262:	4b09      	ldr	r3, [pc, #36]	; (8017288 <_vfiprintf_r+0x258>)
 8017264:	a904      	add	r1, sp, #16
 8017266:	4630      	mov	r0, r6
 8017268:	f000 f880 	bl	801736c <_printf_i>
 801726c:	e7e4      	b.n	8017238 <_vfiprintf_r+0x208>
 801726e:	bf00      	nop
 8017270:	0801a698 	.word	0x0801a698
 8017274:	0801a6b8 	.word	0x0801a6b8
 8017278:	0801a678 	.word	0x0801a678
 801727c:	0801a78e 	.word	0x0801a78e
 8017280:	0801a798 	.word	0x0801a798
 8017284:	00000000 	.word	0x00000000
 8017288:	0801700b 	.word	0x0801700b
 801728c:	0801a794 	.word	0x0801a794

08017290 <_printf_common>:
 8017290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017294:	4616      	mov	r6, r2
 8017296:	4699      	mov	r9, r3
 8017298:	688a      	ldr	r2, [r1, #8]
 801729a:	690b      	ldr	r3, [r1, #16]
 801729c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80172a0:	4293      	cmp	r3, r2
 80172a2:	bfb8      	it	lt
 80172a4:	4613      	movlt	r3, r2
 80172a6:	6033      	str	r3, [r6, #0]
 80172a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80172ac:	4607      	mov	r7, r0
 80172ae:	460c      	mov	r4, r1
 80172b0:	b10a      	cbz	r2, 80172b6 <_printf_common+0x26>
 80172b2:	3301      	adds	r3, #1
 80172b4:	6033      	str	r3, [r6, #0]
 80172b6:	6823      	ldr	r3, [r4, #0]
 80172b8:	0699      	lsls	r1, r3, #26
 80172ba:	bf42      	ittt	mi
 80172bc:	6833      	ldrmi	r3, [r6, #0]
 80172be:	3302      	addmi	r3, #2
 80172c0:	6033      	strmi	r3, [r6, #0]
 80172c2:	6825      	ldr	r5, [r4, #0]
 80172c4:	f015 0506 	ands.w	r5, r5, #6
 80172c8:	d106      	bne.n	80172d8 <_printf_common+0x48>
 80172ca:	f104 0a19 	add.w	sl, r4, #25
 80172ce:	68e3      	ldr	r3, [r4, #12]
 80172d0:	6832      	ldr	r2, [r6, #0]
 80172d2:	1a9b      	subs	r3, r3, r2
 80172d4:	42ab      	cmp	r3, r5
 80172d6:	dc26      	bgt.n	8017326 <_printf_common+0x96>
 80172d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80172dc:	1e13      	subs	r3, r2, #0
 80172de:	6822      	ldr	r2, [r4, #0]
 80172e0:	bf18      	it	ne
 80172e2:	2301      	movne	r3, #1
 80172e4:	0692      	lsls	r2, r2, #26
 80172e6:	d42b      	bmi.n	8017340 <_printf_common+0xb0>
 80172e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80172ec:	4649      	mov	r1, r9
 80172ee:	4638      	mov	r0, r7
 80172f0:	47c0      	blx	r8
 80172f2:	3001      	adds	r0, #1
 80172f4:	d01e      	beq.n	8017334 <_printf_common+0xa4>
 80172f6:	6823      	ldr	r3, [r4, #0]
 80172f8:	68e5      	ldr	r5, [r4, #12]
 80172fa:	6832      	ldr	r2, [r6, #0]
 80172fc:	f003 0306 	and.w	r3, r3, #6
 8017300:	2b04      	cmp	r3, #4
 8017302:	bf08      	it	eq
 8017304:	1aad      	subeq	r5, r5, r2
 8017306:	68a3      	ldr	r3, [r4, #8]
 8017308:	6922      	ldr	r2, [r4, #16]
 801730a:	bf0c      	ite	eq
 801730c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017310:	2500      	movne	r5, #0
 8017312:	4293      	cmp	r3, r2
 8017314:	bfc4      	itt	gt
 8017316:	1a9b      	subgt	r3, r3, r2
 8017318:	18ed      	addgt	r5, r5, r3
 801731a:	2600      	movs	r6, #0
 801731c:	341a      	adds	r4, #26
 801731e:	42b5      	cmp	r5, r6
 8017320:	d11a      	bne.n	8017358 <_printf_common+0xc8>
 8017322:	2000      	movs	r0, #0
 8017324:	e008      	b.n	8017338 <_printf_common+0xa8>
 8017326:	2301      	movs	r3, #1
 8017328:	4652      	mov	r2, sl
 801732a:	4649      	mov	r1, r9
 801732c:	4638      	mov	r0, r7
 801732e:	47c0      	blx	r8
 8017330:	3001      	adds	r0, #1
 8017332:	d103      	bne.n	801733c <_printf_common+0xac>
 8017334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801733c:	3501      	adds	r5, #1
 801733e:	e7c6      	b.n	80172ce <_printf_common+0x3e>
 8017340:	18e1      	adds	r1, r4, r3
 8017342:	1c5a      	adds	r2, r3, #1
 8017344:	2030      	movs	r0, #48	; 0x30
 8017346:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801734a:	4422      	add	r2, r4
 801734c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017350:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017354:	3302      	adds	r3, #2
 8017356:	e7c7      	b.n	80172e8 <_printf_common+0x58>
 8017358:	2301      	movs	r3, #1
 801735a:	4622      	mov	r2, r4
 801735c:	4649      	mov	r1, r9
 801735e:	4638      	mov	r0, r7
 8017360:	47c0      	blx	r8
 8017362:	3001      	adds	r0, #1
 8017364:	d0e6      	beq.n	8017334 <_printf_common+0xa4>
 8017366:	3601      	adds	r6, #1
 8017368:	e7d9      	b.n	801731e <_printf_common+0x8e>
	...

0801736c <_printf_i>:
 801736c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017370:	460c      	mov	r4, r1
 8017372:	4691      	mov	r9, r2
 8017374:	7e27      	ldrb	r7, [r4, #24]
 8017376:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017378:	2f78      	cmp	r7, #120	; 0x78
 801737a:	4680      	mov	r8, r0
 801737c:	469a      	mov	sl, r3
 801737e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017382:	d807      	bhi.n	8017394 <_printf_i+0x28>
 8017384:	2f62      	cmp	r7, #98	; 0x62
 8017386:	d80a      	bhi.n	801739e <_printf_i+0x32>
 8017388:	2f00      	cmp	r7, #0
 801738a:	f000 80d8 	beq.w	801753e <_printf_i+0x1d2>
 801738e:	2f58      	cmp	r7, #88	; 0x58
 8017390:	f000 80a3 	beq.w	80174da <_printf_i+0x16e>
 8017394:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801739c:	e03a      	b.n	8017414 <_printf_i+0xa8>
 801739e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80173a2:	2b15      	cmp	r3, #21
 80173a4:	d8f6      	bhi.n	8017394 <_printf_i+0x28>
 80173a6:	a001      	add	r0, pc, #4	; (adr r0, 80173ac <_printf_i+0x40>)
 80173a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80173ac:	08017405 	.word	0x08017405
 80173b0:	08017419 	.word	0x08017419
 80173b4:	08017395 	.word	0x08017395
 80173b8:	08017395 	.word	0x08017395
 80173bc:	08017395 	.word	0x08017395
 80173c0:	08017395 	.word	0x08017395
 80173c4:	08017419 	.word	0x08017419
 80173c8:	08017395 	.word	0x08017395
 80173cc:	08017395 	.word	0x08017395
 80173d0:	08017395 	.word	0x08017395
 80173d4:	08017395 	.word	0x08017395
 80173d8:	08017525 	.word	0x08017525
 80173dc:	08017449 	.word	0x08017449
 80173e0:	08017507 	.word	0x08017507
 80173e4:	08017395 	.word	0x08017395
 80173e8:	08017395 	.word	0x08017395
 80173ec:	08017547 	.word	0x08017547
 80173f0:	08017395 	.word	0x08017395
 80173f4:	08017449 	.word	0x08017449
 80173f8:	08017395 	.word	0x08017395
 80173fc:	08017395 	.word	0x08017395
 8017400:	0801750f 	.word	0x0801750f
 8017404:	680b      	ldr	r3, [r1, #0]
 8017406:	1d1a      	adds	r2, r3, #4
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	600a      	str	r2, [r1, #0]
 801740c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017414:	2301      	movs	r3, #1
 8017416:	e0a3      	b.n	8017560 <_printf_i+0x1f4>
 8017418:	6825      	ldr	r5, [r4, #0]
 801741a:	6808      	ldr	r0, [r1, #0]
 801741c:	062e      	lsls	r6, r5, #24
 801741e:	f100 0304 	add.w	r3, r0, #4
 8017422:	d50a      	bpl.n	801743a <_printf_i+0xce>
 8017424:	6805      	ldr	r5, [r0, #0]
 8017426:	600b      	str	r3, [r1, #0]
 8017428:	2d00      	cmp	r5, #0
 801742a:	da03      	bge.n	8017434 <_printf_i+0xc8>
 801742c:	232d      	movs	r3, #45	; 0x2d
 801742e:	426d      	negs	r5, r5
 8017430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017434:	485e      	ldr	r0, [pc, #376]	; (80175b0 <_printf_i+0x244>)
 8017436:	230a      	movs	r3, #10
 8017438:	e019      	b.n	801746e <_printf_i+0x102>
 801743a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801743e:	6805      	ldr	r5, [r0, #0]
 8017440:	600b      	str	r3, [r1, #0]
 8017442:	bf18      	it	ne
 8017444:	b22d      	sxthne	r5, r5
 8017446:	e7ef      	b.n	8017428 <_printf_i+0xbc>
 8017448:	680b      	ldr	r3, [r1, #0]
 801744a:	6825      	ldr	r5, [r4, #0]
 801744c:	1d18      	adds	r0, r3, #4
 801744e:	6008      	str	r0, [r1, #0]
 8017450:	0628      	lsls	r0, r5, #24
 8017452:	d501      	bpl.n	8017458 <_printf_i+0xec>
 8017454:	681d      	ldr	r5, [r3, #0]
 8017456:	e002      	b.n	801745e <_printf_i+0xf2>
 8017458:	0669      	lsls	r1, r5, #25
 801745a:	d5fb      	bpl.n	8017454 <_printf_i+0xe8>
 801745c:	881d      	ldrh	r5, [r3, #0]
 801745e:	4854      	ldr	r0, [pc, #336]	; (80175b0 <_printf_i+0x244>)
 8017460:	2f6f      	cmp	r7, #111	; 0x6f
 8017462:	bf0c      	ite	eq
 8017464:	2308      	moveq	r3, #8
 8017466:	230a      	movne	r3, #10
 8017468:	2100      	movs	r1, #0
 801746a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801746e:	6866      	ldr	r6, [r4, #4]
 8017470:	60a6      	str	r6, [r4, #8]
 8017472:	2e00      	cmp	r6, #0
 8017474:	bfa2      	ittt	ge
 8017476:	6821      	ldrge	r1, [r4, #0]
 8017478:	f021 0104 	bicge.w	r1, r1, #4
 801747c:	6021      	strge	r1, [r4, #0]
 801747e:	b90d      	cbnz	r5, 8017484 <_printf_i+0x118>
 8017480:	2e00      	cmp	r6, #0
 8017482:	d04d      	beq.n	8017520 <_printf_i+0x1b4>
 8017484:	4616      	mov	r6, r2
 8017486:	fbb5 f1f3 	udiv	r1, r5, r3
 801748a:	fb03 5711 	mls	r7, r3, r1, r5
 801748e:	5dc7      	ldrb	r7, [r0, r7]
 8017490:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017494:	462f      	mov	r7, r5
 8017496:	42bb      	cmp	r3, r7
 8017498:	460d      	mov	r5, r1
 801749a:	d9f4      	bls.n	8017486 <_printf_i+0x11a>
 801749c:	2b08      	cmp	r3, #8
 801749e:	d10b      	bne.n	80174b8 <_printf_i+0x14c>
 80174a0:	6823      	ldr	r3, [r4, #0]
 80174a2:	07df      	lsls	r7, r3, #31
 80174a4:	d508      	bpl.n	80174b8 <_printf_i+0x14c>
 80174a6:	6923      	ldr	r3, [r4, #16]
 80174a8:	6861      	ldr	r1, [r4, #4]
 80174aa:	4299      	cmp	r1, r3
 80174ac:	bfde      	ittt	le
 80174ae:	2330      	movle	r3, #48	; 0x30
 80174b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80174b4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80174b8:	1b92      	subs	r2, r2, r6
 80174ba:	6122      	str	r2, [r4, #16]
 80174bc:	f8cd a000 	str.w	sl, [sp]
 80174c0:	464b      	mov	r3, r9
 80174c2:	aa03      	add	r2, sp, #12
 80174c4:	4621      	mov	r1, r4
 80174c6:	4640      	mov	r0, r8
 80174c8:	f7ff fee2 	bl	8017290 <_printf_common>
 80174cc:	3001      	adds	r0, #1
 80174ce:	d14c      	bne.n	801756a <_printf_i+0x1fe>
 80174d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174d4:	b004      	add	sp, #16
 80174d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174da:	4835      	ldr	r0, [pc, #212]	; (80175b0 <_printf_i+0x244>)
 80174dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80174e0:	6823      	ldr	r3, [r4, #0]
 80174e2:	680e      	ldr	r6, [r1, #0]
 80174e4:	061f      	lsls	r7, r3, #24
 80174e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80174ea:	600e      	str	r6, [r1, #0]
 80174ec:	d514      	bpl.n	8017518 <_printf_i+0x1ac>
 80174ee:	07d9      	lsls	r1, r3, #31
 80174f0:	bf44      	itt	mi
 80174f2:	f043 0320 	orrmi.w	r3, r3, #32
 80174f6:	6023      	strmi	r3, [r4, #0]
 80174f8:	b91d      	cbnz	r5, 8017502 <_printf_i+0x196>
 80174fa:	6823      	ldr	r3, [r4, #0]
 80174fc:	f023 0320 	bic.w	r3, r3, #32
 8017500:	6023      	str	r3, [r4, #0]
 8017502:	2310      	movs	r3, #16
 8017504:	e7b0      	b.n	8017468 <_printf_i+0xfc>
 8017506:	6823      	ldr	r3, [r4, #0]
 8017508:	f043 0320 	orr.w	r3, r3, #32
 801750c:	6023      	str	r3, [r4, #0]
 801750e:	2378      	movs	r3, #120	; 0x78
 8017510:	4828      	ldr	r0, [pc, #160]	; (80175b4 <_printf_i+0x248>)
 8017512:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017516:	e7e3      	b.n	80174e0 <_printf_i+0x174>
 8017518:	065e      	lsls	r6, r3, #25
 801751a:	bf48      	it	mi
 801751c:	b2ad      	uxthmi	r5, r5
 801751e:	e7e6      	b.n	80174ee <_printf_i+0x182>
 8017520:	4616      	mov	r6, r2
 8017522:	e7bb      	b.n	801749c <_printf_i+0x130>
 8017524:	680b      	ldr	r3, [r1, #0]
 8017526:	6826      	ldr	r6, [r4, #0]
 8017528:	6960      	ldr	r0, [r4, #20]
 801752a:	1d1d      	adds	r5, r3, #4
 801752c:	600d      	str	r5, [r1, #0]
 801752e:	0635      	lsls	r5, r6, #24
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	d501      	bpl.n	8017538 <_printf_i+0x1cc>
 8017534:	6018      	str	r0, [r3, #0]
 8017536:	e002      	b.n	801753e <_printf_i+0x1d2>
 8017538:	0671      	lsls	r1, r6, #25
 801753a:	d5fb      	bpl.n	8017534 <_printf_i+0x1c8>
 801753c:	8018      	strh	r0, [r3, #0]
 801753e:	2300      	movs	r3, #0
 8017540:	6123      	str	r3, [r4, #16]
 8017542:	4616      	mov	r6, r2
 8017544:	e7ba      	b.n	80174bc <_printf_i+0x150>
 8017546:	680b      	ldr	r3, [r1, #0]
 8017548:	1d1a      	adds	r2, r3, #4
 801754a:	600a      	str	r2, [r1, #0]
 801754c:	681e      	ldr	r6, [r3, #0]
 801754e:	6862      	ldr	r2, [r4, #4]
 8017550:	2100      	movs	r1, #0
 8017552:	4630      	mov	r0, r6
 8017554:	f7e8 fecc 	bl	80002f0 <memchr>
 8017558:	b108      	cbz	r0, 801755e <_printf_i+0x1f2>
 801755a:	1b80      	subs	r0, r0, r6
 801755c:	6060      	str	r0, [r4, #4]
 801755e:	6863      	ldr	r3, [r4, #4]
 8017560:	6123      	str	r3, [r4, #16]
 8017562:	2300      	movs	r3, #0
 8017564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017568:	e7a8      	b.n	80174bc <_printf_i+0x150>
 801756a:	6923      	ldr	r3, [r4, #16]
 801756c:	4632      	mov	r2, r6
 801756e:	4649      	mov	r1, r9
 8017570:	4640      	mov	r0, r8
 8017572:	47d0      	blx	sl
 8017574:	3001      	adds	r0, #1
 8017576:	d0ab      	beq.n	80174d0 <_printf_i+0x164>
 8017578:	6823      	ldr	r3, [r4, #0]
 801757a:	079b      	lsls	r3, r3, #30
 801757c:	d413      	bmi.n	80175a6 <_printf_i+0x23a>
 801757e:	68e0      	ldr	r0, [r4, #12]
 8017580:	9b03      	ldr	r3, [sp, #12]
 8017582:	4298      	cmp	r0, r3
 8017584:	bfb8      	it	lt
 8017586:	4618      	movlt	r0, r3
 8017588:	e7a4      	b.n	80174d4 <_printf_i+0x168>
 801758a:	2301      	movs	r3, #1
 801758c:	4632      	mov	r2, r6
 801758e:	4649      	mov	r1, r9
 8017590:	4640      	mov	r0, r8
 8017592:	47d0      	blx	sl
 8017594:	3001      	adds	r0, #1
 8017596:	d09b      	beq.n	80174d0 <_printf_i+0x164>
 8017598:	3501      	adds	r5, #1
 801759a:	68e3      	ldr	r3, [r4, #12]
 801759c:	9903      	ldr	r1, [sp, #12]
 801759e:	1a5b      	subs	r3, r3, r1
 80175a0:	42ab      	cmp	r3, r5
 80175a2:	dcf2      	bgt.n	801758a <_printf_i+0x21e>
 80175a4:	e7eb      	b.n	801757e <_printf_i+0x212>
 80175a6:	2500      	movs	r5, #0
 80175a8:	f104 0619 	add.w	r6, r4, #25
 80175ac:	e7f5      	b.n	801759a <_printf_i+0x22e>
 80175ae:	bf00      	nop
 80175b0:	0801a79f 	.word	0x0801a79f
 80175b4:	0801a7b0 	.word	0x0801a7b0

080175b8 <_read_r>:
 80175b8:	b538      	push	{r3, r4, r5, lr}
 80175ba:	4d07      	ldr	r5, [pc, #28]	; (80175d8 <_read_r+0x20>)
 80175bc:	4604      	mov	r4, r0
 80175be:	4608      	mov	r0, r1
 80175c0:	4611      	mov	r1, r2
 80175c2:	2200      	movs	r2, #0
 80175c4:	602a      	str	r2, [r5, #0]
 80175c6:	461a      	mov	r2, r3
 80175c8:	f7e9 fbfa 	bl	8000dc0 <_read>
 80175cc:	1c43      	adds	r3, r0, #1
 80175ce:	d102      	bne.n	80175d6 <_read_r+0x1e>
 80175d0:	682b      	ldr	r3, [r5, #0]
 80175d2:	b103      	cbz	r3, 80175d6 <_read_r+0x1e>
 80175d4:	6023      	str	r3, [r4, #0]
 80175d6:	bd38      	pop	{r3, r4, r5, pc}
 80175d8:	2406b47c 	.word	0x2406b47c

080175dc <__swbuf_r>:
 80175dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175de:	460e      	mov	r6, r1
 80175e0:	4614      	mov	r4, r2
 80175e2:	4605      	mov	r5, r0
 80175e4:	b118      	cbz	r0, 80175ee <__swbuf_r+0x12>
 80175e6:	6983      	ldr	r3, [r0, #24]
 80175e8:	b90b      	cbnz	r3, 80175ee <__swbuf_r+0x12>
 80175ea:	f7ff f913 	bl	8016814 <__sinit>
 80175ee:	4b21      	ldr	r3, [pc, #132]	; (8017674 <__swbuf_r+0x98>)
 80175f0:	429c      	cmp	r4, r3
 80175f2:	d12b      	bne.n	801764c <__swbuf_r+0x70>
 80175f4:	686c      	ldr	r4, [r5, #4]
 80175f6:	69a3      	ldr	r3, [r4, #24]
 80175f8:	60a3      	str	r3, [r4, #8]
 80175fa:	89a3      	ldrh	r3, [r4, #12]
 80175fc:	071a      	lsls	r2, r3, #28
 80175fe:	d52f      	bpl.n	8017660 <__swbuf_r+0x84>
 8017600:	6923      	ldr	r3, [r4, #16]
 8017602:	b36b      	cbz	r3, 8017660 <__swbuf_r+0x84>
 8017604:	6923      	ldr	r3, [r4, #16]
 8017606:	6820      	ldr	r0, [r4, #0]
 8017608:	1ac0      	subs	r0, r0, r3
 801760a:	6963      	ldr	r3, [r4, #20]
 801760c:	b2f6      	uxtb	r6, r6
 801760e:	4283      	cmp	r3, r0
 8017610:	4637      	mov	r7, r6
 8017612:	dc04      	bgt.n	801761e <__swbuf_r+0x42>
 8017614:	4621      	mov	r1, r4
 8017616:	4628      	mov	r0, r5
 8017618:	f7ff fc1c 	bl	8016e54 <_fflush_r>
 801761c:	bb30      	cbnz	r0, 801766c <__swbuf_r+0x90>
 801761e:	68a3      	ldr	r3, [r4, #8]
 8017620:	3b01      	subs	r3, #1
 8017622:	60a3      	str	r3, [r4, #8]
 8017624:	6823      	ldr	r3, [r4, #0]
 8017626:	1c5a      	adds	r2, r3, #1
 8017628:	6022      	str	r2, [r4, #0]
 801762a:	701e      	strb	r6, [r3, #0]
 801762c:	6963      	ldr	r3, [r4, #20]
 801762e:	3001      	adds	r0, #1
 8017630:	4283      	cmp	r3, r0
 8017632:	d004      	beq.n	801763e <__swbuf_r+0x62>
 8017634:	89a3      	ldrh	r3, [r4, #12]
 8017636:	07db      	lsls	r3, r3, #31
 8017638:	d506      	bpl.n	8017648 <__swbuf_r+0x6c>
 801763a:	2e0a      	cmp	r6, #10
 801763c:	d104      	bne.n	8017648 <__swbuf_r+0x6c>
 801763e:	4621      	mov	r1, r4
 8017640:	4628      	mov	r0, r5
 8017642:	f7ff fc07 	bl	8016e54 <_fflush_r>
 8017646:	b988      	cbnz	r0, 801766c <__swbuf_r+0x90>
 8017648:	4638      	mov	r0, r7
 801764a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801764c:	4b0a      	ldr	r3, [pc, #40]	; (8017678 <__swbuf_r+0x9c>)
 801764e:	429c      	cmp	r4, r3
 8017650:	d101      	bne.n	8017656 <__swbuf_r+0x7a>
 8017652:	68ac      	ldr	r4, [r5, #8]
 8017654:	e7cf      	b.n	80175f6 <__swbuf_r+0x1a>
 8017656:	4b09      	ldr	r3, [pc, #36]	; (801767c <__swbuf_r+0xa0>)
 8017658:	429c      	cmp	r4, r3
 801765a:	bf08      	it	eq
 801765c:	68ec      	ldreq	r4, [r5, #12]
 801765e:	e7ca      	b.n	80175f6 <__swbuf_r+0x1a>
 8017660:	4621      	mov	r1, r4
 8017662:	4628      	mov	r0, r5
 8017664:	f000 f80c 	bl	8017680 <__swsetup_r>
 8017668:	2800      	cmp	r0, #0
 801766a:	d0cb      	beq.n	8017604 <__swbuf_r+0x28>
 801766c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017670:	e7ea      	b.n	8017648 <__swbuf_r+0x6c>
 8017672:	bf00      	nop
 8017674:	0801a698 	.word	0x0801a698
 8017678:	0801a6b8 	.word	0x0801a6b8
 801767c:	0801a678 	.word	0x0801a678

08017680 <__swsetup_r>:
 8017680:	4b32      	ldr	r3, [pc, #200]	; (801774c <__swsetup_r+0xcc>)
 8017682:	b570      	push	{r4, r5, r6, lr}
 8017684:	681d      	ldr	r5, [r3, #0]
 8017686:	4606      	mov	r6, r0
 8017688:	460c      	mov	r4, r1
 801768a:	b125      	cbz	r5, 8017696 <__swsetup_r+0x16>
 801768c:	69ab      	ldr	r3, [r5, #24]
 801768e:	b913      	cbnz	r3, 8017696 <__swsetup_r+0x16>
 8017690:	4628      	mov	r0, r5
 8017692:	f7ff f8bf 	bl	8016814 <__sinit>
 8017696:	4b2e      	ldr	r3, [pc, #184]	; (8017750 <__swsetup_r+0xd0>)
 8017698:	429c      	cmp	r4, r3
 801769a:	d10f      	bne.n	80176bc <__swsetup_r+0x3c>
 801769c:	686c      	ldr	r4, [r5, #4]
 801769e:	89a3      	ldrh	r3, [r4, #12]
 80176a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80176a4:	0719      	lsls	r1, r3, #28
 80176a6:	d42c      	bmi.n	8017702 <__swsetup_r+0x82>
 80176a8:	06dd      	lsls	r5, r3, #27
 80176aa:	d411      	bmi.n	80176d0 <__swsetup_r+0x50>
 80176ac:	2309      	movs	r3, #9
 80176ae:	6033      	str	r3, [r6, #0]
 80176b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80176b4:	81a3      	strh	r3, [r4, #12]
 80176b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80176ba:	e03e      	b.n	801773a <__swsetup_r+0xba>
 80176bc:	4b25      	ldr	r3, [pc, #148]	; (8017754 <__swsetup_r+0xd4>)
 80176be:	429c      	cmp	r4, r3
 80176c0:	d101      	bne.n	80176c6 <__swsetup_r+0x46>
 80176c2:	68ac      	ldr	r4, [r5, #8]
 80176c4:	e7eb      	b.n	801769e <__swsetup_r+0x1e>
 80176c6:	4b24      	ldr	r3, [pc, #144]	; (8017758 <__swsetup_r+0xd8>)
 80176c8:	429c      	cmp	r4, r3
 80176ca:	bf08      	it	eq
 80176cc:	68ec      	ldreq	r4, [r5, #12]
 80176ce:	e7e6      	b.n	801769e <__swsetup_r+0x1e>
 80176d0:	0758      	lsls	r0, r3, #29
 80176d2:	d512      	bpl.n	80176fa <__swsetup_r+0x7a>
 80176d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80176d6:	b141      	cbz	r1, 80176ea <__swsetup_r+0x6a>
 80176d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176dc:	4299      	cmp	r1, r3
 80176de:	d002      	beq.n	80176e6 <__swsetup_r+0x66>
 80176e0:	4630      	mov	r0, r6
 80176e2:	f7ff fc2b 	bl	8016f3c <_free_r>
 80176e6:	2300      	movs	r3, #0
 80176e8:	6363      	str	r3, [r4, #52]	; 0x34
 80176ea:	89a3      	ldrh	r3, [r4, #12]
 80176ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80176f0:	81a3      	strh	r3, [r4, #12]
 80176f2:	2300      	movs	r3, #0
 80176f4:	6063      	str	r3, [r4, #4]
 80176f6:	6923      	ldr	r3, [r4, #16]
 80176f8:	6023      	str	r3, [r4, #0]
 80176fa:	89a3      	ldrh	r3, [r4, #12]
 80176fc:	f043 0308 	orr.w	r3, r3, #8
 8017700:	81a3      	strh	r3, [r4, #12]
 8017702:	6923      	ldr	r3, [r4, #16]
 8017704:	b94b      	cbnz	r3, 801771a <__swsetup_r+0x9a>
 8017706:	89a3      	ldrh	r3, [r4, #12]
 8017708:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801770c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017710:	d003      	beq.n	801771a <__swsetup_r+0x9a>
 8017712:	4621      	mov	r1, r4
 8017714:	4630      	mov	r0, r6
 8017716:	f000 f84d 	bl	80177b4 <__smakebuf_r>
 801771a:	89a0      	ldrh	r0, [r4, #12]
 801771c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017720:	f010 0301 	ands.w	r3, r0, #1
 8017724:	d00a      	beq.n	801773c <__swsetup_r+0xbc>
 8017726:	2300      	movs	r3, #0
 8017728:	60a3      	str	r3, [r4, #8]
 801772a:	6963      	ldr	r3, [r4, #20]
 801772c:	425b      	negs	r3, r3
 801772e:	61a3      	str	r3, [r4, #24]
 8017730:	6923      	ldr	r3, [r4, #16]
 8017732:	b943      	cbnz	r3, 8017746 <__swsetup_r+0xc6>
 8017734:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017738:	d1ba      	bne.n	80176b0 <__swsetup_r+0x30>
 801773a:	bd70      	pop	{r4, r5, r6, pc}
 801773c:	0781      	lsls	r1, r0, #30
 801773e:	bf58      	it	pl
 8017740:	6963      	ldrpl	r3, [r4, #20]
 8017742:	60a3      	str	r3, [r4, #8]
 8017744:	e7f4      	b.n	8017730 <__swsetup_r+0xb0>
 8017746:	2000      	movs	r0, #0
 8017748:	e7f7      	b.n	801773a <__swsetup_r+0xba>
 801774a:	bf00      	nop
 801774c:	24000034 	.word	0x24000034
 8017750:	0801a698 	.word	0x0801a698
 8017754:	0801a6b8 	.word	0x0801a6b8
 8017758:	0801a678 	.word	0x0801a678

0801775c <abort>:
 801775c:	b508      	push	{r3, lr}
 801775e:	2006      	movs	r0, #6
 8017760:	f000 f890 	bl	8017884 <raise>
 8017764:	2001      	movs	r0, #1
 8017766:	f7e9 fb21 	bl	8000dac <_exit>

0801776a <__swhatbuf_r>:
 801776a:	b570      	push	{r4, r5, r6, lr}
 801776c:	460e      	mov	r6, r1
 801776e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017772:	2900      	cmp	r1, #0
 8017774:	b096      	sub	sp, #88	; 0x58
 8017776:	4614      	mov	r4, r2
 8017778:	461d      	mov	r5, r3
 801777a:	da07      	bge.n	801778c <__swhatbuf_r+0x22>
 801777c:	2300      	movs	r3, #0
 801777e:	602b      	str	r3, [r5, #0]
 8017780:	89b3      	ldrh	r3, [r6, #12]
 8017782:	061a      	lsls	r2, r3, #24
 8017784:	d410      	bmi.n	80177a8 <__swhatbuf_r+0x3e>
 8017786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801778a:	e00e      	b.n	80177aa <__swhatbuf_r+0x40>
 801778c:	466a      	mov	r2, sp
 801778e:	f000 f895 	bl	80178bc <_fstat_r>
 8017792:	2800      	cmp	r0, #0
 8017794:	dbf2      	blt.n	801777c <__swhatbuf_r+0x12>
 8017796:	9a01      	ldr	r2, [sp, #4]
 8017798:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801779c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80177a0:	425a      	negs	r2, r3
 80177a2:	415a      	adcs	r2, r3
 80177a4:	602a      	str	r2, [r5, #0]
 80177a6:	e7ee      	b.n	8017786 <__swhatbuf_r+0x1c>
 80177a8:	2340      	movs	r3, #64	; 0x40
 80177aa:	2000      	movs	r0, #0
 80177ac:	6023      	str	r3, [r4, #0]
 80177ae:	b016      	add	sp, #88	; 0x58
 80177b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080177b4 <__smakebuf_r>:
 80177b4:	898b      	ldrh	r3, [r1, #12]
 80177b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80177b8:	079d      	lsls	r5, r3, #30
 80177ba:	4606      	mov	r6, r0
 80177bc:	460c      	mov	r4, r1
 80177be:	d507      	bpl.n	80177d0 <__smakebuf_r+0x1c>
 80177c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80177c4:	6023      	str	r3, [r4, #0]
 80177c6:	6123      	str	r3, [r4, #16]
 80177c8:	2301      	movs	r3, #1
 80177ca:	6163      	str	r3, [r4, #20]
 80177cc:	b002      	add	sp, #8
 80177ce:	bd70      	pop	{r4, r5, r6, pc}
 80177d0:	ab01      	add	r3, sp, #4
 80177d2:	466a      	mov	r2, sp
 80177d4:	f7ff ffc9 	bl	801776a <__swhatbuf_r>
 80177d8:	9900      	ldr	r1, [sp, #0]
 80177da:	4605      	mov	r5, r0
 80177dc:	4630      	mov	r0, r6
 80177de:	f7ff f903 	bl	80169e8 <_malloc_r>
 80177e2:	b948      	cbnz	r0, 80177f8 <__smakebuf_r+0x44>
 80177e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177e8:	059a      	lsls	r2, r3, #22
 80177ea:	d4ef      	bmi.n	80177cc <__smakebuf_r+0x18>
 80177ec:	f023 0303 	bic.w	r3, r3, #3
 80177f0:	f043 0302 	orr.w	r3, r3, #2
 80177f4:	81a3      	strh	r3, [r4, #12]
 80177f6:	e7e3      	b.n	80177c0 <__smakebuf_r+0xc>
 80177f8:	4b0d      	ldr	r3, [pc, #52]	; (8017830 <__smakebuf_r+0x7c>)
 80177fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80177fc:	89a3      	ldrh	r3, [r4, #12]
 80177fe:	6020      	str	r0, [r4, #0]
 8017800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017804:	81a3      	strh	r3, [r4, #12]
 8017806:	9b00      	ldr	r3, [sp, #0]
 8017808:	6163      	str	r3, [r4, #20]
 801780a:	9b01      	ldr	r3, [sp, #4]
 801780c:	6120      	str	r0, [r4, #16]
 801780e:	b15b      	cbz	r3, 8017828 <__smakebuf_r+0x74>
 8017810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017814:	4630      	mov	r0, r6
 8017816:	f000 f863 	bl	80178e0 <_isatty_r>
 801781a:	b128      	cbz	r0, 8017828 <__smakebuf_r+0x74>
 801781c:	89a3      	ldrh	r3, [r4, #12]
 801781e:	f023 0303 	bic.w	r3, r3, #3
 8017822:	f043 0301 	orr.w	r3, r3, #1
 8017826:	81a3      	strh	r3, [r4, #12]
 8017828:	89a0      	ldrh	r0, [r4, #12]
 801782a:	4305      	orrs	r5, r0
 801782c:	81a5      	strh	r5, [r4, #12]
 801782e:	e7cd      	b.n	80177cc <__smakebuf_r+0x18>
 8017830:	080167ad 	.word	0x080167ad

08017834 <_raise_r>:
 8017834:	291f      	cmp	r1, #31
 8017836:	b538      	push	{r3, r4, r5, lr}
 8017838:	4604      	mov	r4, r0
 801783a:	460d      	mov	r5, r1
 801783c:	d904      	bls.n	8017848 <_raise_r+0x14>
 801783e:	2316      	movs	r3, #22
 8017840:	6003      	str	r3, [r0, #0]
 8017842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017846:	bd38      	pop	{r3, r4, r5, pc}
 8017848:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801784a:	b112      	cbz	r2, 8017852 <_raise_r+0x1e>
 801784c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017850:	b94b      	cbnz	r3, 8017866 <_raise_r+0x32>
 8017852:	4620      	mov	r0, r4
 8017854:	f000 f830 	bl	80178b8 <_getpid_r>
 8017858:	462a      	mov	r2, r5
 801785a:	4601      	mov	r1, r0
 801785c:	4620      	mov	r0, r4
 801785e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017862:	f000 b817 	b.w	8017894 <_kill_r>
 8017866:	2b01      	cmp	r3, #1
 8017868:	d00a      	beq.n	8017880 <_raise_r+0x4c>
 801786a:	1c59      	adds	r1, r3, #1
 801786c:	d103      	bne.n	8017876 <_raise_r+0x42>
 801786e:	2316      	movs	r3, #22
 8017870:	6003      	str	r3, [r0, #0]
 8017872:	2001      	movs	r0, #1
 8017874:	e7e7      	b.n	8017846 <_raise_r+0x12>
 8017876:	2400      	movs	r4, #0
 8017878:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801787c:	4628      	mov	r0, r5
 801787e:	4798      	blx	r3
 8017880:	2000      	movs	r0, #0
 8017882:	e7e0      	b.n	8017846 <_raise_r+0x12>

08017884 <raise>:
 8017884:	4b02      	ldr	r3, [pc, #8]	; (8017890 <raise+0xc>)
 8017886:	4601      	mov	r1, r0
 8017888:	6818      	ldr	r0, [r3, #0]
 801788a:	f7ff bfd3 	b.w	8017834 <_raise_r>
 801788e:	bf00      	nop
 8017890:	24000034 	.word	0x24000034

08017894 <_kill_r>:
 8017894:	b538      	push	{r3, r4, r5, lr}
 8017896:	4d07      	ldr	r5, [pc, #28]	; (80178b4 <_kill_r+0x20>)
 8017898:	2300      	movs	r3, #0
 801789a:	4604      	mov	r4, r0
 801789c:	4608      	mov	r0, r1
 801789e:	4611      	mov	r1, r2
 80178a0:	602b      	str	r3, [r5, #0]
 80178a2:	f7e9 fa71 	bl	8000d88 <_kill>
 80178a6:	1c43      	adds	r3, r0, #1
 80178a8:	d102      	bne.n	80178b0 <_kill_r+0x1c>
 80178aa:	682b      	ldr	r3, [r5, #0]
 80178ac:	b103      	cbz	r3, 80178b0 <_kill_r+0x1c>
 80178ae:	6023      	str	r3, [r4, #0]
 80178b0:	bd38      	pop	{r3, r4, r5, pc}
 80178b2:	bf00      	nop
 80178b4:	2406b47c 	.word	0x2406b47c

080178b8 <_getpid_r>:
 80178b8:	f7e9 ba5e 	b.w	8000d78 <_getpid>

080178bc <_fstat_r>:
 80178bc:	b538      	push	{r3, r4, r5, lr}
 80178be:	4d07      	ldr	r5, [pc, #28]	; (80178dc <_fstat_r+0x20>)
 80178c0:	2300      	movs	r3, #0
 80178c2:	4604      	mov	r4, r0
 80178c4:	4608      	mov	r0, r1
 80178c6:	4611      	mov	r1, r2
 80178c8:	602b      	str	r3, [r5, #0]
 80178ca:	f7e9 fabe 	bl	8000e4a <_fstat>
 80178ce:	1c43      	adds	r3, r0, #1
 80178d0:	d102      	bne.n	80178d8 <_fstat_r+0x1c>
 80178d2:	682b      	ldr	r3, [r5, #0]
 80178d4:	b103      	cbz	r3, 80178d8 <_fstat_r+0x1c>
 80178d6:	6023      	str	r3, [r4, #0]
 80178d8:	bd38      	pop	{r3, r4, r5, pc}
 80178da:	bf00      	nop
 80178dc:	2406b47c 	.word	0x2406b47c

080178e0 <_isatty_r>:
 80178e0:	b538      	push	{r3, r4, r5, lr}
 80178e2:	4d06      	ldr	r5, [pc, #24]	; (80178fc <_isatty_r+0x1c>)
 80178e4:	2300      	movs	r3, #0
 80178e6:	4604      	mov	r4, r0
 80178e8:	4608      	mov	r0, r1
 80178ea:	602b      	str	r3, [r5, #0]
 80178ec:	f7e9 fabd 	bl	8000e6a <_isatty>
 80178f0:	1c43      	adds	r3, r0, #1
 80178f2:	d102      	bne.n	80178fa <_isatty_r+0x1a>
 80178f4:	682b      	ldr	r3, [r5, #0]
 80178f6:	b103      	cbz	r3, 80178fa <_isatty_r+0x1a>
 80178f8:	6023      	str	r3, [r4, #0]
 80178fa:	bd38      	pop	{r3, r4, r5, pc}
 80178fc:	2406b47c 	.word	0x2406b47c

08017900 <_init>:
 8017900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017902:	bf00      	nop
 8017904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017906:	bc08      	pop	{r3}
 8017908:	469e      	mov	lr, r3
 801790a:	4770      	bx	lr

0801790c <_fini>:
 801790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801790e:	bf00      	nop
 8017910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017912:	bc08      	pop	{r3}
 8017914:	469e      	mov	lr, r3
 8017916:	4770      	bx	lr
